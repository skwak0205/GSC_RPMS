/* Rule ENOAP_PolicyChooser_ResourceOrManagement (ThisObject: PLMEntity, Parameters: RuleContext)                 */
/* NOT CONTRACTUAL and PROPERTY OF TE (TEAM ENVIRONMENT) DEFINITION, ANY CHANGE MAY HAPPEN WITHOUT NOTICE         */
/* Parameters contains many information such as name, user, security ... depending on Operation                   */
/* Notice this BL operates OpeningID INFRAAuthorizedPolicies                                                      */

/*
/*tempo code : the list of policies should be provided from server kernel dictionnary                             */
/*                    default policy                                                                              */
/*Provide resource policy for anyone                                                                              */  
/*but also provide specific Management for 3 specific Creator, Experiementer, Viewer role                         */

Let DefaultPolicyName(STRING) 
Let listOtherPolicies(List)

Let ModelingType(Type)
Let ModelingTypeName(String)

Let LoginRole(STRING) 
Let LoginUserID(STRING)

LoginRole=""
DefaultPolicyName=""

/********** PrimaryType is the custom type of a DS Modeling type ******/
/* PrimaryType is the custom type of a DS Modeling type */
ModelingTypeName=""
ModelingType = ThisObject.ModelerType
if (ModelingType<>NULL){
   ModelingTypeName=ModelingType.Name 
}

/*********** Applicability of the policy ********/
if ((ThisObject->IsSupporting("PLMCoreReference") == false) and (ThisObject->IsSupporting("PLMCoreRepReference") == false) ) {
    Trace (1, "ENOAP_PolicyChooser_Resource: Invalid Object type " + ModelingTypeName )    
    Parameters.Message="wrong usage of rule ENOAP_PolicyChooser_Resource on type " + ModelingTypeName
    Parameters.Severity=3 
	Report("Error",Parameters.Message, Parameters.Message)     
}

/*********** Business Role / UserID ********/
if ( Parameters->HasAttribute("Role") == true ) {
   LoginRole=Parameters->GetAttributeString("Role")
}
if ( Parameters->HasAttribute("UserID") == true ) {
   LoginUserID=Parameters->GetAttributeString("UserID")
}

/***********Default Policy **************/
if ( (LoginRole == "VPLMCreator") or (LoginRole == "VPLMExperimenter") or (LoginRole == "VPLMViewer") or (LoginRole == "3DSRestrictedAuthor") or (LoginRole == "3DSRestrictedContributor") or (LoginRole == "3DSRestrictedReader") ) {  
	DefaultPolicyName="VPLM_SMB_Management"
} else {
	DefaultPolicyName="VPLM_SMB_Resource"
	if ( Parameters->HasAttribute("IsMajorMinorAtImport") == true and LoginUserID <> "uxodtitp" and LoginUserID <> "uxodtmem" ) {
		if (Parameters->GetAttributeBoolean("IsMajorMinorAtImport") == false) {
			DefaultPolicyName="VPLM_SMB_Resource_MajorRev"
		} 
	} 
	else {
		if ( (STMinorRevisionAuthoringCommands() == false) and (STMinorRevisionPolicyChoice() == false) ) {
			DefaultPolicyName="VPLM_SMB_Resource_MajorRev"
		}
	}
}

/*********** Protect Safe Save some OCDX roles********/
/* No protection needed as long as default allowed for other OCDX roles*/


Trace (1, "ENOAP_PolicyChooser: Allocating default policy "+DefaultPolicyName+" for type "+ModelingTypeName  )    
Parameters->SetAttributeString("PolicyName",DefaultPolicyName)

/***********Other Policy Applicable**************/
listOtherPolicies.Append("VPLM_SMB_Management")
Parameters->SetAttributeObject("OtherPolicies",listOtherPolicies)
