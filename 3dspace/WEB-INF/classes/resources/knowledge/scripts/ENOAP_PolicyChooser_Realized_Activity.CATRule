/* Rule ENOAP_PolicyChooser_Action (ThisObject: PLMEntity, Parameters: RuleContext)                           */
/* NOT CONTRACTUAL and PROPERTY OF TE (TEAM ENVIRONMENT) DEFINITION, ANY CHANGE MAY HAPPEN WITHOUT NOTICE         */
/* Parameters contains many information such as name, user, security ... depending on Operation                   */
/* Notice this BL operates OpeningID INFRAAuthorizedPolicies                                                      */

/*
/*tempo code : the list of policies should be provided from server kernel dictionnary                             */
/*                    default policy                                                                              */
/*hard coded from the time being will be substituted by a more generic rule implying kernel policy dictionnary    */

Let DefaultPolicyName(STRING) 
Let listOtherPolicies(List)

Let PrimaryType(Type)
Let PrimaryTypeName(String)
Let PrimaryTypeNlsName(String)

Let RuleName(String)

Let LoginRole(STRING)

LoginRole=""
DefaultPolicyName=""

PrimaryTypeName=""
PrimaryTypeNlsName=""
/********* Using PrimaryType (not ModelingType) which is the custom type of a modeling type ********/
if (ThisObject.HasAttribute("PrimaryType")){
	/* PrimaryType cannot eval on server */ 
	PrimaryType=ThisObject.PrimaryType
	if (PrimaryType<>NULL){
	   PrimaryTypeName=PrimaryType.Name 
	   PrimaryTypeNlsName=PrimaryType.UserName 
    }
}

RuleName="ENOAP_PolicyChooser_Realized_Activity"

/*********** Applicability of the policy ********/
if ( (ThisObject->IsSupporting("Realized Activity") == false) ) {
    Trace (1, RuleName + ": Invalid Object type " + PrimaryTypeName )  
    Parameters.Severity=3 

	/*Differed resolution of NLS - if needed */   
	Parameters.NLSMessage = BuildDeferredMessageNLS("PLMPolicyChooser", "DeploymentErrorDefinition", PrimaryTypeNlsName) 

    /*Immediate resolution of NLS */
    Parameters.Message = BuildMessageNLS("PLMPolicyChooser", "DeploymentErrorDefinition", PrimaryTypeNlsName) 
    Report("Error",Parameters.Message, Parameters.Message)         
}

/*********** Business Role ********/
if ( Parameters->HasAttribute("Role") == true ) {
   LoginRole=Parameters->GetAttributeString("Role")
}

/***********Default Policy **************/
DefaultPolicyName="Realized Activity"

/*********** Protect Safe Save some OCDX roles********/
if ((LoginRole == "VPLMExperimenter") or (LoginRole == "VPLMViewer") or (LoginRole == "3DSRestrictedContributor") or (LoginRole == "3DSRestrictedReader")) {
    Trace (1, RuleName + ": Invalid Role " + LoginRole + " for Object type " + PrimaryTypeName )    
    Parameters.Severity=2 

	/*Differed resolution of NLS - if needed */   
	Parameters.NLSMessage = BuildDeferredMessageNLS("PLMPolicyChooser", "PolicyRoleWarning", PrimaryTypeNlsName) 

    /*Immediate resolution of NLS */
    Parameters.Message = BuildMessageNLS("PLMPolicyChooser", "PolicyRoleWarning", PrimaryTypeNlsName) 
    Report("Warning",Parameters.Message, Parameters.Message)     	    
}

Trace (1, RuleName + ": Allocating default policy "+ DefaultPolicyName + " from role " + LoginRole + " on type "+ PrimaryTypeName)
Parameters->SetAttributeString("PolicyName",DefaultPolicyName)

/***********Other Policy Applicable**************/
/*listOtherPolicies.Append("")*/
Parameters->SetAttributeObject("OtherPolicies",listOtherPolicies)
