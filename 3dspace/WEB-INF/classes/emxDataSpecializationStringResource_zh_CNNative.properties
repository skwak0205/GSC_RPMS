# GMX Suite Created for the handling of the
# labels for the Data Specialization tools

eServiceSuiteDataSpecialization.Name= 数据特殊化
emxDataSpecialization.BooleanTrue= 真
emxDataSpecialization.True= 真
emxDataSpecialization.BooleanFalse= 假
emxDataSpecialization.False= 假
emxDataSpecialization.Yes= 是 
emxDataSpecialization.No= 否
emxDataSpecialization.Partial= 局部
emxDataSpecialization.Submit= 提交
emxDataSpecialization.None= 无

#labels des objets
emxDataSpecialization.label.Attribute= 属性
emxDataSpecialization.label.Extension= 扩展
emxDataSpecialization.label.Type= 类型
emxDataSpecialization.label.Package= 程序包
#labels des attributs
emxDataSpecialization.label.AttributeCreateNew= 新建属性
emxDataSpecialization.label.AttributeEdit= 属性特性
emxDataSpecialization.label.AttributeDefaultValue= 默认值
emxDataSpecialization.label.Attribute6WPredicats= 6W 谓词
emxDataSpecialization.label.AttributeLength= 长度
emxDataSpecialization.label.AttributeNew= 新建简单属性
emxDataSpecialization.label.AttributeVolatileNew= 新建临时属性
emxDataSpecialization.label.AccessMode= 访问模式
emxDataSpecialization.label.AttributesEdit= 修改约束属性的列表
emxDataSpecialization.label.AttributePreferredUnit= 首选单位
emxDataSpecialization.label.AttributeResetCloning= 复制后重置
emxDataSpecialization.label.AttributeResetNew= 版本控制后重置
emxDataSpecialization.label.AttributeMultiVal= 多重赋值 
emxDataSpecialization.label.AttributeRange= 授权值
emxDataSpecialization.label.AttributeRangeValues= 范围值： 
emxDataSpecialization.label.AttributeNoRangeValues= 无范围值 
emxDataSpecialization.label.AttributeIndexation= 可搜索
emxDataSpecialization.label.AttributeXPDM= V6/XPDM 可导出 
emxDataSpecialization.label.Attribute3DXML= 在 3DXML 中集成
emxDataSpecialization.label.AttributeOwner= 所有者
emxDataSpecialization.label.AttributeDelete= 删除属性
emxDataSpecialization.label.AttributeDeleteConfirm= 是否确定要永久删除这些属性？
emxDataSpecialization.label.AttributeLengthInfinite= 无限
emxDataSpecialization.label.AttributeResetOnFork= 重置叉形
emxDataSpecialization.label.AttributeMultiline= 多行

#labels des scopes 
emxDataSpecialization.label.ScopesEdit= 修改范围
emxDataSpecialization.label.PackageScopesList= 范围列表
emxDataSpecialization.label.PackageScopesLstSubH= - 选定对象
emxDataSpecialization.label.AttributeType= 类型
emxDataSpecialization.label.AtributeTypeString= 字符串
emxDataSpecialization.label.AtributeTypeInteger= 整数型
emxDataSpecialization.label.AtributeTypeBoolean= 布尔型
emxDataSpecialization.label.AtributeTypeDate= 日期
emxDataSpecialization.label.AtributeTypeReal= 实数
emxDataSpecialization.label.AtributeTypeList= 列表
emxDataSpecialization.label.AttributeVolatile= 临时
emxDataSpecialization.label.AttributeSimple= 简单
emxDataSpecialization.label.PackageOwner= 所有者程序包 
emxDataSpecialization.label.AttributChooseMagnitude= 选择数值：
emxDataSpecialization.label.AttributeChoosePLMType= 选择 PLM 类型：

emxDataSpecialization.label.AttributeProtection= 用户访问权限
emxDataSpecialization.label.AttributeUserAccessReadWrite= 读写
emxDataSpecialization.label.AttributeUserAccessReadOnly= 只读
emxDataSpecialization.label.AttributeUserAccessNone= 无
emxDataSpecialization.label.AttributeUniqueKeys= 唯一性键（程序包）

#labels des magnitudes
emxDataSpecialization.label.MagnitudeHeader= 大小列表
emxDataSpecialization.label.MagnitudeLabel= 数值

#labels des types
emxDataSpecialization.label.TypeCreateNew= 新建子类型
emxDataSpecialization.label.TypeEdit= 编辑 IC 类型
emxDataSpecialization.label.TypeNew= 新建 
emxDataSpecialization.label.TypeParent= 父级类型
emxDataSpecialization.label.TypeToolbar= 类型工具栏
emxDataSpecialization.label.TypeView= 类型
emxDataSpecialization.label.TypesView= 类型列表
emxDataSpecialization.label.ExtensionScope= 范围
emxDataSpecialization.label.ExtendedBy= 其他程序包中的扩展数量
emxDataSpecialization.label.ExtendedBypopup= %20扩展数量%20
#emxDataSpecialization.label.SubHeaderTypesView = Select the types extendable by the current extension
emxDataSpecialization.label.SubHeaderTypesView= 选择当前扩展可以扩展的类型
emxDataSpecialization.label.TypeDeleteConfirm= 是否确定要永久删除这些类型？
emxDataSpecialization.label.TypeSpe= 规则类型

#labels des instances
emxDataSpecialization.label.InstanceName= 实例
emxDataSpecialization.label.InstanceSpe= 规则实例

#labels des extensions
emxDataSpecialization.label.ExtensionCreateNew= 新建管理扩展
emxDataSpecialization.label.ExtensionCustoCreateNew= 新建定制扩展
emxDataSpecialization.label.ExtensionNew= 新建 
emxDataSpecialization.label.ExtensionParent= 父级扩展
emxDataSpecialization.label.ExtensionTypes= 范围
emxDataSpecialization.label.ExtView= 扩展
emxDataSpecialization.label.ExtensionsView= 扩展列表 
emxDataSpecialization.label.OtherExtView= 扩展类型的扩展 
emxDataSpecialization.label.CustomerExt= 客户扩展
emxDataSpecialization.label.DeploymentExt= 部署扩展
emxDataSpecialization.label.SpecializationExt= 特殊化扩展
emxDataSpecialization.label.ExtensionDeleteConfirm= 是否确定要永久删除这些扩展名？
emxDataSpecialization.label.ExtensionEdit= 编辑规则扩展
emxDataSpecialization.label.ExtensionCustoEdit= 编辑扩展名
emxDataSpecialization.label.ExtensionCusto= 自定义扩展

#labels des extensions de deploiement
emxDataSpecialization.label.DeplExtensionNew= 新建 
emxDataSpecialization.label.DeployExtensionTypes= 类型
emxDataSpecialization.label.DeployExtensionTypesList= 类型列表
emxDataSpecialization.label.DeployExtensionScope= 范围

#labels communs types / extensions
emxDataSpecialization.label.TypeExtExpand= 展开
emxDataSpecialization.label.TypeExtLinksView= 链接
emxDataSpecialization.label.TypeExtPackage= 程序包
emxDataSpecialization.label.TypeExtNature= 所有权 
emxDataSpecialization.label.TypeExtView= 类型/扩展
emxDataSpecialization.label.Abstract= 抽象

#labels des uniqueness keys
emxDataSpecialization.label.UniquenessKeyConstrainedExtension= 约束的扩展（所有者程序包）
emxDataSpecialization.label.UniquenessKeyConstrainedType= 约束的类型（所有者程序包）
emxDataSpecialization.label.UniquenessKeyCreateNew= 新建唯一性键
emxDataSpecialization.label.UniquenessKeyExtension= 扩展
emxDataSpecialization.label.UniquenessKeyNew= 新建 
emxDataSpecialization.label.UniquenessKeyType= 类型
emxDataSpecialization.label.UniquenessKeyView= 唯一性键
emxDataSpecialization.label.UniquenessKeySpecViewList= 约束此程序包类型的唯一性键
emxDataSpecialization.label.UniqueKeyDeleteConfirm= 是否确定要永久删除这些唯一键？

#labels des packages
emxDataSpecialization.label.PackageAttrChannel= 属性通道
emxDataSpecialization.label.PackageAttributesList= 属性列表
emxDataSpecialization.label.PackageAttributesLstSubH= - 选定对象
emxDataSpecialization.label.PackageConfigChannel= 程序包配置通道
emxDataSpecialization.label.PackageConfigPortal= 程序包配置门户
emxDataSpecialization.label.PackageConfigToolbar= 程序包配置工具栏
emxDataSpecialization.label.PackageConfigView= 特殊化程序包列表
emxDataSpecialization.label.PackageConfigDeploymentView= 部署程序包列表
emxDataSpecialization.label.PackageCreateNew= 新建程序包
emxDataSpecialization.label.NewCustoPackageFormListHdr= 可特殊化程序包列表 
emxDataSpecialization.label.PackageDelete= 删除程序包
emxDataSpecialization.label.PackageNature= 所有权
emxDataSpecialization.label.PackageNew= 新建 
emxDataSpecialization.label.PackageParent= 父级程序包
emxDataSpecialization.label.PackagePrefix= 前缀
emxDataSpecialization.label.PackagePublicationToolbar= 操作
emxDataSpecialization.label.PackagePublishPackages= 部署程序包
emxDataSpecialization.label.PackagePublishPackage= 部署程序包
emxDataSpecialization.label.PackagePublishPackageConfirm= 部署将更新管理资源库。是否确定？
emxDataSpecialization.label.PackageDeletePackageConfirm= 将从管理和 BO 数据库删除程序包。是否确定？
emxDataSpecialization.label.PackageImport= 导入程序包
emxDataSpecialization.label.PackageExport= 导出程序包
emxDataSpecialization.label.PackageExportSingle= 导出程序包
emxDataSpecialization.label.PackageImportExportToolbar= 导出
emxDataSpecialization.label.PackageTypesExtensions= 类型/扩展
emxDataSpecialization.label.PackageTypesExtensionsView= 类型/扩展列表
emxDataSpecialization.label.PackageEnterNewPrefix= 输入新前缀：
emxDataSpecialization.label.PackageCusto= 自定义包
#Labels Import
emxDataSpecialization.label.PackageImportTitle= 导入程序包
emxDataSpecialization.label.PackageImportFile= 要导入的文件：
emxDataSpecialization.label.PackageImportFileSubmit= 导入
emxDataSpecialization.label.PackageImportType= 导入类型:
emxDataSpecialization.label.PackageImportForAdmin= 用于管理的导入
emxDataSpecialization.label.PackageImportForAuthoring= 用于创作的导入
emxDataSpecialization.label.PackageImportCancel= 取消
emxDataSpecialization.Msg.PackageImportFileSubmitBadFile= 必须输入扩展名为 .metadata 或 .zip 的文件

#Labels Download NLS 
emxDataSpecialization.label.NLSEditor= 管理 NLS
emxDataSpecialization.label.NLSEditorTableHeader= 包列表
emxDataSpecialization.label.PackageDownloadNls= 下载 NLS
emxDataSpecialization.label.PackageDownloadNlsSubmitButton= 下载
emxDataSpecialization.label.PackageDownloadNlsPage1= 按“提交”以开始下载 NLS 文件
emxDataSpecialization.label.PackageDownloadNlsPage2= 请不要在下载过程中关闭此幻灯片，它将在下载结束后自动关闭
emxDataSpecialization.label.nlsLang= 选择 CATNl 的语言
emxDataSpecialization.label.NLSen= 英文
emxDataSpecialization.label.NLSfr= 法文
emxDataSpecialization.label.NLSde= 德文
emxDataSpecialization.label.NLSja= 日文
emxDataSpecialization.label.NLSit= 意大利文
emxDataSpecialization.label.NLScn= 中文
emxDataSpecialization.label.NLSes= 西班牙语
emxDataSpecialization.label.NLSzh-cn= 简体中文
emxDataSpecialization.label.NLSHeader= 受支持 NLS 语言的列表
emxDataSpecialization.label.DownloadNLS= 下载 CATNl
emxDataSpecialization.label.Download= 下载
emxDataSpecialization.label.NLSLangCode= 代码

#masks 
emxDataSpecialization.label.MaskExport= 导出任务
#labels de specialisation
emxDataSpecialization.label.CustoConfigCmd= 数据模型特殊化 ...

#labels du deploiement
emxDataSpecialization.label.DeployAttributesToolbar= 部署属性工具栏
emxDataSpecialization.label.DeployAttributesList= 属性列表
emxDataSpecialization.label.DeployConstrainedAttributesList= 约束的属性列表
emxDataSpecialization.label.DeployAttributesLstSubH= - 选定部署扩展
emxDataSpecialization.label.DeployConstrainedAttributesLstSubH= - 选定唯一性键
emxDataSpecialization.label.DeployAttributesView= 属性
emxDataSpecialization.label.DeployConfigCmd= 数据模型管理 ...
emxDataSpecialization.label.DeployUniquenessKeysNumOfCstAttributes= 属性
emxDataSpecialization.label.UniquenessKeyActivation= 唯一性键激活
emxDataSpecialization.label.ManageUniquenessKeys= 管理各类 mxTNR
emxDataSpecialization.label.DeployUniquenessKeysActivationStatus= 激活
emxDataSpecialization.label.mxTNRTypeStatus= 类型属于 mxTNR
emxDataSpecialization.label.StaticAssociation= 自动添加
emxDataSpecialization.label.IconName= 图标名称

emxDataSpecialization.label.DeploymentConstrainedAttributesChannel= 约束的属性
emxDataSpecialization.label.DeployExtensionsAttributesChannel= 部署扩展属性通道
emxDataSpecialization.label.DeployExtensionsChannel= 部署扩展通道
emxDataSpecialization.label.DeployExtensionsList= 部署扩展列表
emxDataSpecialization.label.DeployExtensionsToolbar= 部署扩展工具栏
emxDataSpecialization.label.DeployExtensionsView= 扩展
emxDataSpecialization.label.DeployPackageView= 数据模型管理扩展列表
emxDataSpecialization.label.DeployPackagePortal= 部署程序包门户
emxDataSpecialization.label.DeployPackage= 部署程序包
emxDataSpecialization.label.DeployPackageToolbar= 类别
emxDataSpecialization.label.DeploySuperToolbar= 部署超级工具栏
emxDataSpecialization.label.DeployUniquenessKeys= 唯一性键
emxDataSpecialization.label.DeployUniquenessKeysChannel= 部署唯一性键通道
emxDataSpecialization.label.DeployUniquenessKeysList= 唯一性键列表
emxDataSpecialization.label.DeployUniquenessKeysPortal= 部署唯一性键门户
emxDataSpecialization.label.DeployUniquenessKeysToolbar= 部署唯一性键工具栏
emxDataSpecialization.label.NewDeploymentUniquenessKeyFormHdr= 选择要约束的类型

#labels generiques
emxDataSpecialization.label.Attributes= 属性
emxDataSpecialization.label.Prefix= 前缀
emxDataSpecialization.label.Comment= 备注
emxDataSpecialization.label.CreationDate= 创建日期
emxDataSpecialization.label.Edit= 编辑
emxDataSpecialization.label.Name= 名称
emxDataSpecialization.label.PublicationStatus= 已部署
emxDataSpecialization.label.Nature= 性质
emxDataSpecialization.label.ReloadCache= 重新加载高速缓存
emxDataSpecialization.label.Version= 版本
emxDataSpecialization.label.ENOConfiguration= 体验配置
emxDataSpecialization.label.DataModelAdministration= 管理
emxDataSpecialization.label.Delete= 删除
emxDataSpecialization.label.ReadWrite= 设置“读写”
emxDataSpecialization.label.ReadWriteConfirmMsg= 请在执行任何修改前与程序包的所有者进行确认。\n如果在导入过程中在两个服务器中进行相同的修改，则可能出现问题
emxDataSpecialization.label.Description= 描述
emxDataSpecialization.label.ReadOnly= 设置“只读”
emxDataSpecialization.label.ToolsToolbar= 工具
emxDataSpecialization.label.Cancel= 关闭
emxDataSpecialization.label.IndexPackages= 更新程序包的索引
emxDataSpecialization.label.Details= 详细信息
emxDataSpecialization.label.SetDeprecated= 设为已弃用
emxDataSpecialization.label.UndoDeprecated= 撤消已弃用
emxDataSpecialization.label.AbstractDeprecatedStatus= 抽象 - 已弃用
emxDataSpecialization.label.DeprecatedStatus= 已弃用
emxDataSpecialization.label.Clear= 清除

# Messages user
emxDataSpecialization.TypeStr= 类型
emxDataSpecialization.ExtensionStr= 扩展
emxDataSpecialization.UKStr= 唯一性键
emxDataSpecialization.ReadOnlyPackage= 只读程序包
emxDataSpecialization.CannotCreateAttribute= 您不能针对以下项创建属性
emxDataSpecialization.InThePackage= 在程序包中
emxDataSpecialization.CannotSubClassify= 无法归入子类
emxDataSpecialization.CannotBeCreated= 无法创建
emxDataSpecialization.SelectTypeOrExtension= 必须在启动此命令前选择上级通道中的对象

emxDataSpecialization.AttributeNotInteger= %val% 不是有效的整数值 
emxDataSpecialization.AttributeNotReal= %val% 不是有效的实数值 
emxDataSpecialization.AttributeNotBoolean= 默认值必须是 true 或 false 
emxDataSpecialization.NotAlphanumericName= 名称只能包含字母数字字符或下划线 
emxDataSpecialization.NotAlphanumericPackageName= 名称只能包含字母数字字符 
emxDataSpecialization.NotAlphanumericNewPrefix= 前缀只能包含字母数字字符
emxDataSpecialization.ErrMsg.FirstCharPrefix= 前缀只能以 [a-z] 或 [A-Z] 字符开头。\\n非法字符将会被删除。
emxDataSpecialization.ErrMsg.PrefixLength= 前缀必须至少具有 3 个字符。
emxDataSpecialization.AttributeLongReal= 当为类型“实数”定义授权值时，逗号后面仅允许接 6 个数字，该值的剩余部分将被收起。
emxDataSpecialization.DefaultValueExceedMaxLength= 默认值超过最大长度 
emxDataSpecialization.RangeValueExceedMaxLength= 其中一个范围值超过最大长度   
emxDataSpecialization.DefaultValueNotOneOfRanges= 默认值必须是其中一个已授权的值
emxDataSpecialization.RemoveDupRanges= 移除重复的已授权值
emxDataSpecialization.MaxLengthNotInt= 最大长度必须是一个整数
emxDataSpecialization.MaxLengthNotGreaterZero= 最大长度必须大于 0
emxDataSpecialization.MaxLengthNotGreaterThanMin= 最大长度必须大于 

# remove types from mxTNR messages: 
emxDataSpecialization.Confirm.RemoveType= 以下类型将从 mxTNR 中移除：
emxDataSpecialization.Confirm.AddType= 以下类型将添加到 mxTNR 中： 
emxDataSpecialization.Confirm.CancelOrOK= 单击“确定”以继续，单击“取消”以取消


emxDataSpecialization.R.Imported= %val% 程序包已导入。无法发布。
emxDataSpecialization.ImportMsg.Imported= %val% 中导入的程序包
emxDataSpecialization.PublishMsg.Imported= %val% 程序包已导入。无法发布。
# messages : Import 
emxDataSpecialization.ImportMsg.Imported= %val% 中导入的程序包
emxDataSpecialization.PublishMsg.Imported= %val% 程序包已导入。无法发布。
# message package Existence
emxDataSpecialization.CheckMsg.PackageExist= 创建专用化程序包：程序包 %val% 已在管理数据库中定义。
emxDataSpecialization.CheckMsg.PackageAlreadyExist= 已经存在。请选择其他名称。
emxDataSpecialization.CheckMsg.NoLicense= “未授予产品 %val% 的许可证
# Error messages : New Extension 
emxDataSpecialization.ErrMsg.NewExt= 不能选择类型作为父级
emxDataSpecialization.ErrMsg.scopes= 请选择“类型”而非“程序包”
# Error messages : Imported (%val% : objectNature = Type/Attribute/Package)
#emxDataSpecialization.ErrMsg.Imported = DSModeler or Imported %val% cannot be modified
emxDataSpecialization.ErrMsg.Imported= %val% 程序包已导入。无法发布。
emxDataSpecialization.ErrMsg.CannotBeImported= 无法导入程序包 %val%。\n已存在具有相同名称的未部署程序包，必须先将其删除才能执行导入操作。\n如果在未删除的情况下完成部署，则将永远无法再导入具有相同名称的程序包 。
# Error messages : Set (%val% : objectName)
emxDataSpecialization.ErrMsg.Name= 无法设置 %val% 名称
# Error messages : (%val% : UUID, %val% : objectName) 
emxDataSpecialization.ErrMsg.Set= 无法为 %val% 设置 %val%
# Error messages : Publish (%val% : objectName, %val% : objectNature)
emxDataSpecialization.ErrMsg.Publish= 无法发布 %val% %val%
# Error messages : Publish Status (%val% : objectName, %val% : objectNature = Type/Attribute/Package)
emxDataSpecialization.ErrMsg.PublishStatus= 无法获取 %val% %val% 的发布状态
# Error messages : Export (%val% : objectName)
emxDataSpecialization.ErrMsg.ExportPackage= 必须在导出前先发布 %val% 程序包
# Error messages : Delete Package
emxDataSpecialization.ErrMsg.DeletePartialPackage= 程序包 %val% 已部分部署。只能删除未部署的程序包。
emxDataSpecialization.ErrMsg.DeletePackage= 程序包 %val% 已完成部署。只能删除未部署的程序包。
# Error messages : Create Package
emxDataSpecialization.ErrMsg.CreatePackage= 创建专用化程序包：程序包 %val% 已在程序包规格中定义。
# Error messages: set readOnly Package
# placeholder %val% is a name (e.g: The package myPack have never been imported, it cannot be Set Read-Only.)
emxDataSpecialization.ErrMsg.SetReadOnlyPackage= 程序包 %val% 从未导入，不能设置“只读”。
# Error messages: set readWrite Package
# placeholder %val% is a name (e.g: The package myPack have never been imported, it cannot be Set Read-Write.)
emxDataSpecialization.ErrMsg.SetReadWritePackage= =程序包 %val% 从未导入，不能设置“读写”。
# Error messages : Delete Extension
emxDataSpecialization.ErrMsg.DeletePartialExtension= 扩展 %val% 已部分部署。只能删除未部署的扩展。
emxDataSpecialization.ErrMsg.DeleteExtension= 扩展 %val% 已完成部署。只能删除未部署的扩展。

# Error messages : Delete UK
emxDataSpecialization.ErrMsg.DeletePartialUK= 唯一键 %val% 已部分部署。只能删除未部署的唯一键。
emxDataSpecialization.ErrMsg.DeleteUK= 唯一键 %val% 已完成部署。只能删除未部署的唯一键。
emxDataSpecialization.ErrMsg.MVASelected= 不属于单值属性，您无法将其作为唯一键的约束属性来添加！

# Error messages : Delete Type
emxDataSpecialization.ErrMsg.DeletePartialType= 类型 %val% 已部分部署。只能删除未部署的类型。
emxDataSpecialization.ErrMsg.DeleteType= 类型 %val% 已完成部署。只能删除未部署的类型。
emxDataSpecialization.ErrMsg.DeleteInstance= %val% 在创建类型 %val%! 的实例名称时使用 
# Error messages : Delete Attribute
emxDataSpecialization.ErrMsg.DeletePartialAttribute= 属性 %val% 已部分部署。只能删除未部署的属性。
emxDataSpecialization.ErrMsg.DeleteAttribute= 属性 %val% 已完成部署。只能删除未部署的属性。
# Error messages : Add Attribute
emxDataSpecialization.ErrMsg.AddAttribute= 添加属性：%val% 已在程序包规格中定义。
# Error messages : Add %val%
emxDataSpecialization.ErrMsg.CouldnotCreate= 无法创建 %val% "%val%"
# Error message = Add a object with a already existing name
# placeholder %val% is a name (e.g: myObjectName is already defined)
emxDataSpecialization.ErrMsg.AlreadyDefined= '%val%' 已定义，请选择另一个名称。
# Error message : get type or by Id
emxDataSpecialization.ErrMsg.InvalidId= 类型或扩展的 ID 无效：# 错误消息：创建 DS 程序包
emxDataSpecialization.ErrMsg.createDSpackPrefix= 本体 %val% 必须具有有效的前缀：至少 3 个字符。
emxDataSpecialization.ErrMsg.createDSpack= 创建 DS 程序包：<%val%> 引用为父级程序包，但不会导致创建本体。
emxDataSpecialization.ErrMsg.PackFromName= 搜索类型无效
# Deployment message : publish
# placeholder %val% is a number (e.g: 2 package(s) deployed from 4 selected)
emxDataSpecialization.DeploymentOK= 部署了 %val% 个包(取自选定的 %val% 个包)
emxDataSpecialization.DeploymentKO= 部署 KO： 
emxDataSpecialization.CheckRelatedPackageStatus= 在部署此包之前，请先部署依赖包：%val%
# Error Message For Deployment Extension without scope
emxDataSpecialization.ErrMsg.DelExtWithoutScope= 部署扩展必须至少具有一个范围

# Set Read only Message
# placeholde %val% is a number (e.g: 2 package(s) in Read-Only from 4 selected)
emxDataSpecialization.SetReadOnlyOK= %val% 个包处于只读状态(取自选定的 %val% 个包)

# Set Read/Write Message
# placeholde %val% is a number (e.g: 2 package(s) in Read/Write from 4 selected)
emxDataSpecialization.SetReadWriteOK= %val% 个包处于读/写状态(取自选定的 %val% 个包)

# Update Index For package Message
# placeholder %val% is a number (e.g: 2 package(s) Indexed from 4 selected)
emxDataSpecialization.UpdateIndexOK= 正在索引 %val% 个包（取自选定的 %val%）
# placeholder %val% is a user name, next a date
emxDataSpecialization.UpdateIndexOG= 自 %val% 起，%val% 正在更新索引。请稍后重试...

# Set Deprecated Package Message
# placeholde %val% is a number (e.g: 2 package(s) deprecated from 4 selected)
emxDataSpecialization.DeprecatedPackOK= 弃用了 %val% 个包(取自选定的 %val% 个包)
emxDataSpecialization.ElementsByPackage= \'%val%\'        :%val% 个元素已弃用
emxDataSpecialization.InfoDeprecatedPackOK= 提醒：元素必须处于“是”或“部分”已部署状态才能弃用
# Undo Deprecated Package  Message
# placeholde %val% is a number (e.g: 2 package(s) not deprecated anymore from 4 selected)
emxDataSpecialization.UndoDeprecatedPackOK= 不再弃用 %val% 个包(取自选定的 %val% 个包)

# Set Deprecated type or ext Message
# placeholde %val% is a number (e.g: 2 Type(s) or Extension(s) deprecated from 4 selected)
emxDataSpecialization.DeprecatedTypeExtOK= 弃用了 %val% 个类型或扩展(取自选定的 %val% 个)

# Undo Deprecated type or ext Message
# placeholde %val% is a number (e.g: 2 Type(s) or Extension(s) not deprecated anymore from 4 selected)
emxDataSpecialization.UndoDeprecatedTypeExtOK= 不再弃用 %val% 个类型或扩展(取自选定的 %val% 个)

# Set Deprecated attribute Message
# placeholde %val% is a number (e.g: 2 attribute(s) deprecated from 4 selected)
emxDataSpecialization.DeprecatedAttrOK= 弃用了 %val% 个属性(取自选定的 %val% 个)

# Undo Deprecated attribute Message
# placeholde %val% is a number (e.g: 2 attribute(s) not deprecated anymore from 4 selected)
emxDataSpecialization.UndoDeprecatedAttrOK= 不再弃用 %val% 个属性(取自选定的 %val% 个)

# Deprecated operation success/failure
emxDataSpecialization.DeprecatedFailure= 弃用失败： 
emxDataSpecialization.DeprecatedSuccess= 弃用成功： 

# Undo Deprecated operation success/failure
emxDataSpecialization.UndoDeprecatedFailure= 撤消弃用失败： 
emxDataSpecialization.UndoDeprecatedSuccess= 撤消弃用成功： 

# Indexation operation success/failure
emxDataSpecialization.IndexationFailure= 索引失败： 
emxDataSpecialization.IndexationSuccess= 索引成功： 

# Read-Only operation success/failure
emxDataSpecialization.ReadOnlyFailure= 只读失败： 
emxDataSpecialization.ReadOnlySuccess= 只读成功： 

# Read/Write operation success/failure
emxDataSpecialization.ReadWriteFailure= 读/写失败： 
emxDataSpecialization.ReadWriteSuccess= 读/写成功： 

#Error Message for 6w Predicate Popup
emxDataSpecialization.ErrMsg.SelectPredicate= 请选择一个谓词，而不是一个词汇。

# BusinessRules editor labels
emxDataSpecialization.label.ArgList= 自变量列表
emxDataSpecialization.label.Body= 大身
emxDataSpecialization.label.hasPrecedence= 有优先权
emxDataSpecialization.label.Bre= 管理我的业务角色
emxDataSpecialization.label.ClientAndServer= 客户端和服务器
emxDataSpecialization.label.ClientOnly= 仅限客户端
emxDataSpecialization.label.Computation= 计算
emxDataSpecialization.label.CreateBr= 创建
emxDataSpecialization.label.DeleteBr= 删除
emxDataSpecialization.label.Description= 描述
emxDataSpecialization.label.Execution= 执行
emxDataSpecialization.label.ExecType= 执行类型
emxDataSpecialization.label.FactType= 实况类型
emxDataSpecialization.label.NameBr= 名称
emxDataSpecialization.label.Scope= 范围
emxDataSpecialization.label.Title= 业务规则列表
emxDataSpecialization.label.V_Name= V_Name
emxDataSpecialization.label.Value= 值
emxDataSpecialization.label.Validation= 验证
emxDataSpecialization.label.ServerOnly= 仅限服务器

# BusinessRules editor message
emxDataSpecialization.msg.CreateBody= 由 {0} 创建的规则，{1}
emxDataSpecialization.msg.DeleteBr= 是否要删除这些链接？
emxDataSpecialization.msg.NoError= 无错误！

# BusinessRules editor error message
emxDataSpecialization.ErrMsg.AcceptParseError= 包含错误。是否强制保存？
emxDataSpecialization.ErrMsg.BrCreation= 创建业务规则时出错
emxDataSpecialization.ErrMsg.FactTypeNotMatch= 此类型不存在：{0}
emxDataSpecialization.ErrMsg.InvalidAddChoiceBr= 选择开口
emxDataSpecialization.ErrMsg.InvalidAddChoiceOs= 无法从开口集创建业务规则\\n	选择开口
emxDataSpecialization.ErrMsg.InvalidDelChoiceCr= 无法删除条件\\n	选择业务规则
emxDataSpecialization.ErrMsg.InvalidDelChoiceO= 无法删除开口\\n	选择业务规则 
emxDataSpecialization.ErrMsg.InvalidDelChoiceOs= 无法删除开口集\\n	选择业务规则
emxDataSpecialization.ErrMsg.InvalidName= 无效名称
emxDataSpecialization.ErrMsg.NeedFactType= 策略解析程序需要标准“FactType”，请先填充 factType 字段，然后保存
emxDataSpecialization.ErrMsg.NoPolicy= /!\\ 错误 - 不存在 factType {0} 的策略
emxDataSpecialization.ErrMsg.NoPolicyMatch= 此策略与 factType "{0}"\\n 不匹配，请从这些类型中进行选择：{1}
emxDataSpecialization.ErrMsg.OldModel= 无法创建业务规则。资源集 {0} 成形模型已附加
emxDataSpecialization.ErrMsg.SaveParseError= 已保存但出错。
emxDataSpecialization.ErrMsg.UnknownType= 未知类型：“%val%”
emxDataSpecialization.ErrMsg.UnknownVar= 未知变量：“%val%”

# Import properties error message
emxDataSpecialization.ErrMsg.BadName= 属性文件没有正确的名称。\n 使用“emxFrameworkStringResource”而非“%val%”。
emxDataSpecialization.ErrMsg.MultipleEgal= “%val%”结构路径错误\\n %val% 中有多个“=”。
emxDataSpecialization.ErrMsg.NoEgal= “%val%”结构路径错误\\n %val% 中没有“=”。
emxDataSpecialization.ErrMsg.ImportCanceled= %val% 中的导入已取消
emxDataSpecialization.ErrMsg.InvalidAdminObj= - 这些类型/扩展名不存在，或者不是程序包的一部分：%val%
emxDataSpecialization.ErrMsg.InvalidAtt= - 这些属性不存在，或者不是管理对象的一部分：%val%
emxDataSpecialization.ErrMsg.InvalidPackage= - 这些程序包不存在或者不可自定义：%val%
emxDataSpecialization.ErrMsg.TooManyFileExt= %val% 有多个文件扩展名。\\n 使用属性或元数据。
emxDataSpecialization.ErrMsg.TooManyPoint= “%val%”路径结构错误\\n%val% 的点太多。
emxDataSpecialization.ErrMsg.UnknownLang= 未知语言：%val%。
emxDataSpecialization.ErrMsg.UnknownTranslation= 无 %val% 翻译可用于 %val% 值 %val%

# Export properties language list table
emxDataSpecialization.label.PropertiesExportTableHeader= 选择语言

# Label for the field "Add an authorized empty value"
emxDataSpecialization.label.AddAuthorizedEmptyValue= 添加一个授权的空值

# Label for error with authorized value
emxDataSpecialization.ErrMsg.InvalidAuthorizedValue= “%val%”无效。仅字母数字、“.”、“-”、“_”等字符已被授权。\\n 无效字符将被移除。

# Label for error while delete objects
emxDataSpecialization.ErrMsg.DeleteAttrRefLimit= 属性“%val%”被 %val% 对象使用，您无法从 UI 中将其删除。请使用 CustoDataTool2。
emxDataSpecialization.ErrMsg.DeleteAttrWithActiveUk= 在此属性“%val%”中已启用唯一性键，请将其禁用并重试！
emxDataSpecialization.ErrMsg.DeleteInst= 实例 %val% 已完成部署。只能删除未部署的实例。
emxDataSpecialization.ErrMsg.DeleteTypeInstHasRef= 类型/实例“%val%”具有 %val% 对象，因此无法将其删除。
emxDataSpecialization.ErrMsg.DeleteTypeInstHasChild= 类型/实例“%val%”无法被删除，因为它有子类型/实例。
emxDataSpecialization.ErrMsg.DeleteInstDeclaredAsCreateInst= 无法删除“%val%”，因为它是（展示）参考的实例化类型。修改（展示）参考并重试！
emxDataSpecialization.ErrMsg.DeleteTypeInstHasRefWithoutCount= 类型/实例“%val%”无法被删除，因为它有一个或多个对象。
emxDataSpecialization.ErrMsg.DeleteExtHasRef= 扩展名“%val%”已应用到 %val% 对象，因此无法将其删除。
emxDataSpecialization.ErrMsg.DeleteExtHasChild= 扩展名“%val%”无法被删除，因为它有一些子扩展名。
emxDataSpecialization.ErrMsg.DeleteExtHasRefWithoutCount= 扩展名“%val%”无法被删除，因为它有一个或多个对象。
emxDataSpecialization.ErrMsg.DeleteUkEnabled= 唯一性键“%val%”已启用，请禁用后重试！

# Error Message for Uniquekey Name 
emxDataSpecialization.ErrMsg.InvalidUniquekeyName= 名称中包含禁用字符：“%val%”。\\n允许使用的字符：“A” 到 “Z”、“a” 到“z”、“0”到“9”以及“_”（下划线）。
emxDataSpecialization.label.UniquekeyTableHeader= 唯一键列表
emxDataSpecialization.ErrMsg.SelectAttributeForUK= 必须至少选择一个属性
