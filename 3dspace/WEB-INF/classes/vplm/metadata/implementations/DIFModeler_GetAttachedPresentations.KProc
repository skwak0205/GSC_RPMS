#Prog DIFModeler_GetAttachedPresentations (iPLMIDSet :  #In PLMIDSet, oPLMIDSet :  #Out PLMIDSet) : VoidType
{

/* Connections retrieved from the input objects */
let PLMDifAttachedPresentationSet(PLMRouteSet)
let PLMDifAttachedPresentationIDSet(PLMIDSet)

/* List of presentation retrieved on the connection, it might be sheet reference or layout */
let PLMDifPresentationSet(PLMRouteSet)
let PLMDifPresentationIDSet(PLMIDSet)

let PLMDifExpendedSheet(PLMRouteSet)
let PLMDifExpendedSheetIDSet(PLMIDSet)

let PLMRestrictedDifLayoutFromInputIDSet(PLMIDSet)
let PLMRestrictedDifSheetFromInputIDSet(PLMIDSet)

/* view stream retrieved */
let PLMDifViewStreamIDSet(PLMIDSet)
let PLMDifBackgroundViewIDSet(PLMIDSet)

/* Standard */
let PLMDifStandardSet(PLMRouteSet)
let PLMDifStandardIDSet(PLMIDSet)

let PLMVPMReferenceIDSet(PLMIDSet) /* Inputs VPMReference input */
let PLMRFLVPMLogicalReferenceIDSet(PLMIDSet) /* Inputs RFLVPMLogicalReference  input */
let PLMRFLPLMFunctionalReferenceIDSet(PLMIDSet) /* Inputs RFLPLMFunctionalReference input */

let PLMReferenceWithConnection(PLMIDSet) /* References with potential connection */
let PLMDifReferenceToExpand(PLMIDSet) /* Dif Reference to expand, retrieved from input and from the retrieved connexion */
let PLMDifRepReferenceWithStandard(PLMIDSet) /*Rep Ref with standard*/
let PLMDifAbstractViewIDSet(PLMIDSet) /* View Ref */

let PLMDifViewImplementLinks(PLMRouteSet)
let PLMDifViewImplementLinksIDSet(PLMIDSet)

let PLMDifCaptureIDSet(PLMIDSet) /*Capture ID Set*/
let PLMVPMReferenceToExpandR(PLMRouteSet)
let PLMVPMReferenceToExpandIDSet(PLMIDSet)

/* Products expanded */
let PLMDifProductsExpandedR(PLMRouteSet)
let PLMDifProductsExpandedIDSet(PLMIDSet)

/* Completed products*/
let PLMDifProductsCompletedR(PLMRouteSet)
let PLMDifProductsCompletedIDSet(PLMIDSet)

/* AS */
let PLMDifIsAPresentationOfCnxIDSet(PLMIDSet)
let PLMDifIsAPresentationOf(PLMRouteSet)
let PLMDifIsAPresentationOfIDSet(PLMIDSet)
let PLMIDSetAnnotationSets(PLMIDSet)

/* Connections retrieved from the input objects */
let PLMDifAnnotatedProductCnxSet(PLMRouteSet)
let PLMDifAnnotatedProductCnxIDSet(PLMIDSet)

/* AS Products retrieved from the connexion */
let PLMDifAnnotatedProductsSet(PLMRouteSet)
let PLMDifAnnotatedProductsIDSet(PLMIDSet)

/* AS Products expanded */
let PLMDifASProductsExpanded(PLMRouteSet)
let PLMDifASProductsExpandedIDSet(PLMIDSet)

/* Port and Conn of AS */
let PLMVPMRepsPortsAndConnections(PLMRouteSet)
let PLMVPMRepsPortsAndConnectionsIDSet(PLMIDSet)

let PLMIDSetAnnotationSetsExtanded(PLMIDSet)

/* Perform a pertinent restrict on the input, we only want the layouts and sheets from in the input */
PLMRestrictedDifLayoutFromInputIDSet = Restrict(iPLMIDSet,"DIFModeler01/DIFLayout")
PLMRestrictedDifSheetFromInputIDSet = Restrict(iPLMIDSet,"DIFModelerAbstractSheet/DIFAbstractSheet")

/* Perform a Restrict on the input, we want to avoid the maximum of un pertinent object*/
PLMVPMReferenceIDSet = Restrict(iPLMIDSet,"PRODUCTCFG/VPMReference")
PLMRFLVPMLogicalReferenceIDSet = Restrict(iPLMIDSet,"RFLVPMLogical/RFLVPMLogicalReference")
PLMRFLPLMFunctionalReferenceIDSet = Restrict(iPLMIDSet,"RFLPLMFunctional/RFLPLMFunctionalReference")


PLMReferenceWithConnection = PLMVPMReferenceIDSet + PLMRFLVPMLogicalReferenceIDSet + PLMRFLPLMFunctionalReferenceIDSet + PLMRestrictedDifLayoutFromInputIDSet

/* Retrieve all DIFAttachedPresentation connexion from PLMReferenceWithConnection */
PLMDifAttachedPresentationSet = ExecutePLMFunction("DIFModeler01", "DifModeler_AddPresentationCnx", PLMReferenceWithConnection)
PLMDifAttachedPresentationIDSet = Ids(PLMDifAttachedPresentationSet)

/* Retrive AS */
PLMDifIsAPresentationOfCnxIDSet = Restrict(PLMDifAttachedPresentationIDSet, "DIFModeler03/DIFIsAPresentationOf")
PLMDifIsAPresentationOf = ExecutePLMFunction("DIFModeler01", "DifModeler_AddIsAPresentationOf", PLMDifIsAPresentationOfCnxIDSet)
PLMDifIsAPresentationOfIDSet = Ids(PLMDifIsAPresentationOf)
PLMIDSetAnnotationSets = Restrict(PLMDifIsAPresentationOfIDSet, "DIFModelerAnnotationSet/DIFAnnotationSet")

PLMDifAnnotatedProductCnxSet = ExecutePLMFunction("DIFModeler01", "DifModeler_AddAnnotatedProductCnx", PLMIDSetAnnotationSets)
PLMDifAnnotatedProductCnxIDSet = Ids(PLMDifAnnotatedProductCnxSet)

/* Retrieve all Products from connexions */
PLMDifAnnotatedProductsSet  =  ExecutePLMFunction("DIFModeler01", "DifModeler_AddAnnotatedProduct", PLMDifAnnotatedProductCnxIDSet)
PLMDifAnnotatedProductsIDSet = Ids(PLMDifAnnotatedProductsSet)

/* Expand the product */
PLMDifASProductsExpanded = ExecutePLMFunction("PRODUCTCFG", "ProductCfg_AddChildrenProduct", Restrict(PLMDifAnnotatedProductsIDSet, "PRODUCTCFG/VPMReference")) 
PLMDifASProductsExpandedIDSet = Ids(PLMDifASProductsExpanded) + PLMDifAnnotatedProductsIDSet

PLMVPMRepsPortsAndConnections = ExecutePLMFunction("PRODUCTCFG", "ProductCfg_AddVPMRepsPortsAndConnections", Restrict(PLMDifASProductsExpandedIDSet, "PRODUCTCFG/VPMReference"))
PLMVPMRepsPortsAndConnectionsIDSet = Ids(PLMVPMRepsPortsAndConnections)

PLMIDSetAnnotationSetsExtanded =  PLMVPMRepsPortsAndConnectionsIDSet + PLMDifAnnotatedProductCnxIDSet + PLMDifASProductsExpandedIDSet

/* Retrieve all DIFLayout from connexions */
/* The method DifModeler_AddLayouts add the layouts AND the sheets pointed by the connexions */
PLMDifPresentationSet  =  ExecutePLMFunction("DIFModeler01", "DifModeler_AddLayouts", PLMDifAttachedPresentationIDSet)
PLMDifPresentationIDSet = Ids(PLMDifPresentationSet)

/* 
Retrieve all DIFSheet from  the diffents inputs
	- From direct input iPLMIDSet (might contain sheet or layout) but we have to perform a restrict first
	- From the object retrieved from the connections
 */

 /* Retrieve Expand all components in order to retrieve all the instances/References aggregated under the inputs layout/sheets/connexions*/
PLMDifReferenceToExpand = PLMDifPresentationIDSet + PLMRestrictedDifSheetFromInputIDSet + PLMRestrictedDifLayoutFromInputIDSet + PLMIDSetAnnotationSets
PLMDifExpendedSheet  =  ExecutePLMFunction("DIFModeler01", "DifModeler_AddSheets", PLMDifReferenceToExpand)
PLMDifExpendedSheetIDSet = Ids(PLMDifExpendedSheet)

/* Restrict to get the DIFViewStream and DIFBackgroundViewRep in order to get the standard*/
PLMDifViewStreamIDSet = Restrict(PLMDifExpendedSheetIDSet,"DIFModeler03/DIFViewStream")
PLMDifBackgroundViewIDSet = Restrict(PLMDifExpendedSheetIDSet,"DIFModeler04/DIFBackgroundViewRep")

/* Retrieve all DIFStandard from DIFBackgroundViewRep and DifViewStream */
PLMDifRepReferenceWithStandard = PLMDifBackgroundViewIDSet + PLMDifViewStreamIDSet
PLMDifStandardSet = ExecutePLMFunction("DIFModeler01", "DifModeler_AddStandard", PLMDifRepReferenceWithStandard)
PLMDifStandardIDSet = Ids(PLMDifStandardSet) 

/* Retrieve all view implements link */
PLMDifAbstractViewIDSet = Restrict(PLMDifExpendedSheetIDSet,"DIFModelerAbstractView/DIFAbstractView")
PLMDifViewImplementLinks = ExecutePLMFunction("RFLPLMImplementConnection","RFLPLMImplementConnection_AddAllImplementCnx",PLMDifAbstractViewIDSet)
PLMDifViewImplementLinksIDSet = Ids(PLMDifViewImplementLinks)

/* Adding the pointed product by the Captures in the presentations */
PLMDifCaptureIDSet = Restrict(PLMDifExpendedSheetIDSet, "DIFModelerAnnotationSet/DIFCapture")
PLMVPMReferenceToExpandR = ExecutePLMFunction("DIFModeler01", "DifModeler_AddProductFromCapture", PLMDifCaptureIDSet)
PLMVPMReferenceToExpandIDSet = Ids(PLMVPMReferenceToExpandR) 

/* Expand the products */
PLMDifProductsExpandedR = ExecutePLMFunction("PRODUCTCFG", "ProductCfg_AddChildrenProduct", Restrict(PLMVPMReferenceToExpandIDSet, "PRODUCTCFG/VPMReference")) 
PLMDifProductsExpandedIDSet = Ids(PLMDifProductsExpandedR)

PLMDifProductsCompletedR = ExecutePLMFunction("PRODUCTCFG", "ProductCfg_AddVPMRepsPortsAndConnections", Restrict(PLMDifProductsExpandedIDSet, "PRODUCTCFG/VPMReference"))
PLMDifProductsCompletedIDSet = Ids(PLMDifProductsCompletedR)

oPLMIDSet = iPLMIDSet + PLMIDSetAnnotationSets + PLMIDSetAnnotationSetsExtanded + PLMDifAttachedPresentationIDSet + PLMDifPresentationIDSet + PLMDifExpendedSheetIDSet + PLMDifStandardIDSet + PLMDifViewImplementLinksIDSet + PLMVPMReferenceToExpandIDSet + PLMDifProductsExpandedIDSet + PLMDifProductsCompletedIDSet

}
