<meta charset="UTF-8"/>
CATPLMBusinessLogicForTyping.Alias = "Business Logic for object typing";
CATPLMBusinessLogicForTyping.Description = "Business Rules executed on client and/or server for typing objects";
INFRADeploymentExtensionComputation.Alias = "Deployment extension choice";
INFRADeploymentExtensionComputation.Description = "Rule executed after the creation of an object to decide which deployment extension to add to it";
INFRADeploymentExtensionComputation.ThisObject.Alias ="Object created";
INFRADeploymentExtensionComputation.ThisObject.Description ="The fact of this business logic is the object that is just being created.";
INFRADeploymentExtensionComputation.DeploymentExtensionName.Alias ="Name of the deployment extension to assign";
INFRADeploymentExtensionComputation.DeploymentExtensionName.Description ="The name of the deployment extension to assign to the object (can be empty).";
INFRADeploymentExtensionComputation.CustomerExtensionsToAdd.Alias ="Name of the customer extensions (or deployment extension) to assign";
INFRADeploymentExtensionComputation.CustomerExtensionsToAdd.Description ="A list containing the names of the customer extensions (or deployment extension) to assign to the object (can be empty).";
INFRALogicalNameAttribute.Alias = "Choice of attribute used as logical name";
INFRALogicalNameAttribute.Description = "Rule executed for computing the name of the attribute used as the logical name of a type (ex: V_Name or PLM_ExternalID)"; // @validatedUsage JPI 13:10:11
INFRALogicalNameAttribute.ThisObject.Alias ="Empty object";
INFRALogicalNameAttribute.ThisObject.Description ="Empty object of the type for which we want to compute the attribute name.";
INFRALogicalNameAttribute.AttributeName.Alias ="Attribute name used for logical name";
INFRALogicalNameAttribute.AttributeName.Description ="The name of the attribute that is used as logical name for a given type.";
INFRALogicalNameAttribute.AdditionalAttributes.Alias ="Additional attributes for display name";
INFRALogicalNameAttribute.AdditionalAttributes.Description ="The display name is built by concatenating the logical name and potentially other attributes.";
INFRAAuthorizedPolicies.Alias = "Reduction of the list of possible policies";
INFRAAuthorizedPolicies.Description = "Rule executed before creating an object in order to determine the possible policies to use";
INFRAAuthorizedPolicies.ThisObject.Alias ="Object to create";
INFRAAuthorizedPolicies.ThisObject.Description ="The fact of this business logic is a fake object of the type of object to create.";
INFRAAuthorizedPolicies.PossiblePolicies.Alias ="List of possible policies";
INFRAAuthorizedPolicies.PossiblePolicies.Description ="List of strings corresponding to the possible policies to be used for a given type).";
INFRAAuthorizedPolicies.PolicyName.Alias ="Name of the policy to assign if no choice";
INFRAAuthorizedPolicies.PolicyName.Description ="The name of the policy to assign to the object.";
INFRAAuthorizedPolicies.IsAggregated.Alias ="Indicates if the object is aggregated under another one";
INFRAAuthorizedPolicies.IsAggregated.Description ="The object to create can be created aggregated: in this case, IsAggregated equals true";
INFRAAuthorizedPolicies.AggregatingReference.Alias ="Contains the aggregating object if any";
INFRAAuthorizedPolicies.AggregatingReference.Description ="It contains the object that will aggregate the object we're creating. Is NULL if the object is created standalone";
INFRAAuthorizedPolicies.OperationId.Alias ="Name of the operation where this computation is triggered";
INFRAAuthorizedPolicies.OperationId.Description ="Is equal to Import or Default. Import if this operation is triggered at import.";
INFRAAuthorizedPolicies.OtherPolicies.Alias ="Name of other possible policies to choose";
INFRAAuthorizedPolicies.OtherPolicies.Description ="The name of the other policies that can be assigned to an object (can be empty). It is a list of strings.";
INFRAMaturityStateInformation.Alias = "Retrieving information on maturity states";
INFRAMaturityStateInformation.Description = "Rule executed for computing information on maturity state to deduce behavior";
INFRAMaturityStateInformation.ThisObject.Alias ="Empty object, not meaningful";
INFRAMaturityStateInformation.ThisObject.Description ="Empty object, not meaningful";
INFRAMaturityStateInformation.Policy.Description ="The policy can be used to find different business rules";
INFRAMaturityStateInformation.State.Alias ="Maturity state";
INFRAMaturityStateInformation.State.Description ="Maturity graph state that we're interested in"; // @validatedUsage JPI 13:10:11
INFRAMaturityStateInformation.IsFrozen.Alias ="State is to be considered as frozen";
INFRAMaturityStateInformation.IsFrozen.Description ="Indicates if the state is to be considered as frozen (no modification authorized)";
INFRAMaturityStateInformation.MetaStateName.Alias ="Corresponding meta state name";
INFRAMaturityStateInformation.MetaStateName.Description ="meta states are MS_InWork, MS_Submitted, MS_Released, MS_Obsolete";
INFRAComputedAttribute.Alias = "Method to read a transient attribute";
INFRAComputedAttribute.Description = "Rule executed when reading a transient attribute defined in data customization tools";
INFRAComputedAttribute.ThisObject.Alias ="Object";
INFRAComputedAttribute.ThisObject.Description ="Object on which we are requesting to read the transient attribute";
INFRAComputedAttribute.Policy.Description ="The policy can be used to find different business rules";
INFRAComputedAttribute.AttributeName.Alias ="Name of transient attribute";
INFRAComputedAttribute.AttributeName.Description ="Name of transient attribute that we're interested in computing";
INFRAComputedAttribute.ComputedValue.Alias ="Value computed by the business rule";
INFRAComputedAttribute.ComputedValue.Description ="Value computed by the business rule that will be interpreted as the transient value";
INFRAComputedAttributeWrite.Alias = "Method to valuate a transient attribute";
INFRAComputedAttributeWrite.Description = "Rule executed when writing a transient attribute defined in data customization tools";
INFRAComputedAttributeWrite.ThisObject.Alias ="Object";
INFRAComputedAttributeWrite.ThisObject.Description ="Object on which we are requesting to write the transient attribute";
INFRAComputedAttributeWrite.Policy.Description ="The policy can be used to find different business rules";
INFRAComputedAttributeWrite.AttributeName.Alias ="Name of transient attribute";
INFRAComputedAttributeWrite.AttributeName.Description ="Name of transient attribute that we're interested in valuating";
INFRAComputedAttributeWrite.InputValue.Alias ="Value to be set";
INFRAComputedAttributeWrite.InputValue.Description ="Value to be set on the transient value";
INFRAInstanceTypeSelection.Alias = "Instance type selection";
INFRAInstanceTypeSelection.Description = "Rule executed before the creation of an instance to decide which type to give to the instance, and which deployment extension to add to it";
INFRAInstanceTypeSelection.ThisObject.Alias ="Reference to instantiate";
INFRAInstanceTypeSelection.ThisObject.Description ="The fact of this business logic is the reference that we want to instantiate.";
INFRAInstanceTypeSelection.DeploymentExtensionName.Alias ="Name of the deployment extension to assign";
INFRAInstanceTypeSelection.DeploymentExtensionName.Description ="The name of the deployment extension to assign to the instance (can be empty).";
INFRAInstanceTypeSelection.InstanceTypeName.Alias ="Name of the instance type to assign";
INFRAInstanceTypeSelection.InstanceTypeName.Description ="The name of the instance type to give to the instance (can be empty).";
INFRAInstanceTypeSelection.CustomerExtensionsToAdd.Alias ="Name of the customer extensions to assign (or deployment extension)";
INFRAInstanceTypeSelection.CustomerExtensionsToAdd.Description ="A list containing the names of the customer extensions (or deployment extension) to assign to the object (can be empty).";
INFRAInstanceTypeSelection.AggregatedReference.Alias ="Aggregated reference where the instance will be aggregated";
INFRAInstanceTypeSelection.AggregatingReference.Description ="Aggregated reference where the instance will be aggregated.";
INFRAStoreSelection.Alias = "Selection of the store";
INFRAStoreSelection.Description = "Rule executed before creating an object that has a stream attached to it in order to determine the store to use";
INFRAStoreSelection.ThisObject.Alias ="Object to create";
INFRAStoreSelection.ThisObject.Description ="The fact of this business logic is the object to create.";
INFRAStoreSelection.StoreName.Alias ="Name of the store to assign to a file";
INFRAStoreSelection.StoreName.Description ="The name of the store to assign to the object that has a stream associated to it.";
INFRAVaultsSelection.Alias = "Selection of the vaults to use for creation and search";
INFRAVaultsSelection.Description = "Rule executed on a type to determine the possible vaults to use in creation or for search";
INFRAVaultsSelection.ThisObject.Alias ="Type";
INFRAVaultsSelection.ThisObject.Description ="The fact of this business logic is a fake object of the type of object to create or to search.";
INFRAVaultsSelection.DefaultVaultNameForCreation.Alias ="Name of the vault to assign by the default when creating an object";
INFRAVaultsSelection.DefaultVaultNameForCreation.Description ="The name of the vault to assign by default to the object when creating it.";
INFRAVaultsSelection.OtherVaultsForCreation.Alias ="Name of other possible vaults that can be used for creation";
INFRAVaultsSelection.OtherVaultsForCreation.Description ="The name of the other vaults that can be assigned to an object (can be empty). It is a list of strings.";
INFRAVaultsSelection.VaultsForSearch.Alias ="Name of possible vaults that can be used for search";
INFRAVaultsSelection.VaultsForSearch.Description ="The name of the vaults that can be used when searching for an object of a given type. It is a list of strings.";

INFRACustoExtensionCheck.Alias ="Preventing a customer extension from being added";
INFRACustoExtensionCheck.Description ="Enables to integrate a business logic to validate the add of a customer extension on a given object.";
INFRACustoExtensionCheck.ThisObject.Alias ="Extended object";
INFRACustoExtensionCheck.ThisObject.Description ="The fact of this business logic is the object that we want to add an extension on";
INFRACustoExtensionCheck.Policy.Description ="The policy can be used to find different business rules";
INFRACustoExtensionCheck.CustoExtensionName.Alias ="Name of the customer extension";
INFRACustoExtensionCheck.CustoExtensionName.Description ="This parameter contains the name of the customer extension that we want to add on the object";
