define('DS/ENXSBGridConnector/ENXConnectorColumnManagement',
		['DS/ENXSBGridConnector/ENXConnectorClientCallbacks'],
		function(ConnectorCallbacks){
	
	'use strict';
	
	var tempDisplayViewColumns = [], columnsForDisplayModes = [], displayViewColumnsCount = 0;
	
	var mappedColumns = {
			
		// map the column elements generated by the webservice to
		// the columns of the grid
		mapColumns: function(columnData, preProcessEditableFlag, displayViewColumnsArray)	{
			
			var mapColumn = function(columnJson, displayViewColumnsArray) {
				var column = columnJson.dataelements;
				
				if(typeof columnJson.type != 'undefined') {
					column['groupableFlag'] = (!(columnJson.type.toUpperCase() == 'icon'.toUpperCase() || columnJson.type.toUpperCase() == 'image'.toUpperCase())).toString();
					column['sortableFlag'] = (!(columnJson.type.toUpperCase() == 'icon'.toUpperCase() || columnJson.type.toUpperCase() == 'image'.toUpperCase())).toString();
					column['Tempid']=columnJson.tempId;
				}
				
				if(typeof column.displayView != 'undefined' && column.displayView == 'true'){
					var tempCol = column;
					tempCol.id = (tempCol.id == "Name") ? "enx_name" : tempCol.id;
					tempCol.id = (tempCol.id == "tree") ? "treeLabel" : tempCol.id;
					displayViewColumnsArray.push(tempCol);
				}
				else if((typeof columnJson.type == 'undefined' || (columnJson.type.toLowerCase() != 'separator' && 
						   columnJson.type.toLowerCase() != 'icon' && columnJson.type != 'programHTMLOutput' && 
						   columnJson.type.toLowerCase() != 'file' && columnJson.type.toLowerCase() != 'image' && 
						   columnJson.type.toLowerCase() != 'checkbox')) && displayViewColumnsCount < parseFloat(column['fieldCount'])){
					var tempCol = column;
					tempCol.id = (tempCol.id == "Name") ? "enx_name" : tempCol.id;
					tempCol.id = (tempCol.id == "tree") ? "treeLabel" : tempCol.id;
					tempDisplayViewColumns.push(tempCol);
					displayViewColumnsCount++;
				}
				
				if(column.cellValueCallback) {
					var func  = ConnectorCallbacks[column.cellValueCallback];
					if (func && typeof func === 'function') {
						// TODO if I need to pass more data from the connector to the callback, how should I do it?
						column.getCellValue = func;
					}
					
				}
				
				if(column.typeRepresentation == "url"){
					column.setCellValue = ConnectorCallbacks.setURLCellValue;
				}
				
				if (column.width) {
					column.width = new Number(column.width);
				}
				if (column.minWidth) {
					column.minWidth = new Number(column.minWidth);
				}
				if (column.resizableFlag) {
					column.resizableFlag = (column.resizableFlag == 'true');
				}
				if (column.autoRowHeightFlag) {
					column.autoRowHeightFlag = (column.autoRowHeightFlag == 'true');
				}
				if (column.exportableFlag) {
					column.exportableFlag = (column.exportableFlag == 'true');
				}else{
					column.exportableFlag = false;
				}
				if (column.sortableFlag) {
					column.sortableFlag = (column.sortableFlag == 'true');
				}
				if (column.allowUnsafeHTMLContent) {
					column.allowUnsafeHTMLContent = (column.allowUnsafeHTMLContent == 'true');
				}
				if (column.massUpdateAllowedFlag) {
					column.massUpdateAllowedFlag = (column.massUpdateAllowedFlag == 'true');
				}
				if(column.visibleFlag) {
					column.visibleFlag = (column.visibleFlag == 'true');
				}
				if(preProcessEditableFlag === true && column.editableFlag){			
					column.editableFlag = (column.editableFlag == 'true');
				}
				else{
					column.editableFlag = false;
				} 
	
				if(column.icon != undefined){
					var url = column.icon;
					column.icon = {
						iconPath: url,
						iconSize: {width: '16px', height: '16px'}
					}
				}
				
				if(typeof column.text == 'undefined' || column.text == null) {
					column.text = '';
				}
				
				if(columnJson.id === 'treeLabel')
					column.dataIndex = 'tree';
				else
					column.dataIndex = columnJson.id;
				if (columnJson.children && columnJson.children.length > 0) {
					column.children = new Array();
					for(var i = 0; i < columnJson.children.length; i++) {
						column.children.push(mapColumn(columnJson.children[i], displayViewColumnsArray));
					}
				}
				return column;
			};
			
			var columns = [];
			for(var i=0; i< columnData.length;i++){
				var column = mapColumn(columnData[i], displayViewColumnsArray);
				columns.push(column);
			}
			
			this.setColumnsForDisplayModes(displayViewColumnsArray);
			
			return columns;
		},
		
		getColumnsForDisplayModes :  function(){
			return columnsForDisplayModes;
		},
		
		setColumnsForDisplayModes :  function(displayViewColumnsArray){
			if(displayViewColumnsArray.length == 0)
				columnsForDisplayModes = tempDisplayViewColumns;
			else
				columnsForDisplayModes = displayViewColumnsArray;
		}
	
	};
	
	return mappedColumns;
});

