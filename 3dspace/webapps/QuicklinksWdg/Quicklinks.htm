<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:widget="http://www.netvibes.com/ns/">
    <head>

        <!-- Application Metas -->
        <title>Quicklinks</title>

        <meta name="author" content="Dassault SystÃ¨mes" />
        <meta name="description" content="Quick link manager." />
        <meta name="keywords" content="QuickLinks" />
        <meta name="version" content="2.3" />
        <meta name="inline" content="true" />
        <meta name="debugMode" content="false" />
        <meta name="noSearchInWidgetUI" content="true" />
        <meta charset="UTF-8" />

        <widget:preferences>
            <widget:preference name="title" type="text" label="widgetTitle_html" defaultValue="" />
            <widget:preference name="x3dTitleShowAppName" type="boolean" label="displayAppName_html" defaultValue="true" />
            <widget:preference name="displayAdd" type="boolean" label="displayAdd_html" defaultValue="true"/>
            <widget:preference name="suppressBookmarklet" type="boolean" label="suppressBookmarklet_html" defaultValue="false"/>
            <widget:preference name="links" type="hidden" defaultValue=""/>
        </widget:preferences>

        <script type="text/javascript" src="../AmdLoader/AmdLoader.js"></script>
        <script type="text/javascript" src="../c/UWA/js/UWA_Standalone_Alone.js"></script>
        <link rel="stylesheet" type="text/css" href="../c/UWA/assets/css/standalone.css" />

<style type="text/css">

    /*Alerts are related to widget not to a specific view*/
    .alert-no-script .alert-message{
        position: relative;
    }

</style>

<!-- Application JavaScript Source -->
<script type="text/javascript">
//<![CDATA[

/*global require, widget */
require(['DS/QuicklinksWdg/Quicklinks'], function (Quicklinks) {
    'use strict';

    function isReadOnly () {

        var widgetId = widget.id,
            isReadOnly = false,
            instances, i, instance, env;

        if (!widget || !top) {
            return isReadOnly;
        }

        instances = top.UWA.Widgets.instances; // Assuming that this will always exist

        for (i = instances.length - 1; i >= 0; i--) {
            instance = instances[i];
            env = instance.environment;

            if (env.embedded) {
                if (env.embedded.id === widgetId) {
                    isReadOnly = !env.wp.isEditable;
                    break;
                }
            } else {
                if (env.id === widgetId) {
                    isReadOnly = !env.wp.isEditable;
                }
            }
        }

        return isReadOnly;
    }

    new Quicklinks(widget, {
        isReadOnly: isReadOnly()
    });
});
//]]>
</script>
</head>
    <body></body>
</html>
