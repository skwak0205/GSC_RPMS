define("DS/MaterialLibs/UniformsLib",["DS/Mesh/ThreeJS_Base"],function(e){"use strict";return{common:{diffuse:{type:"c",value:new e.Color(16777215)},opacity:{type:"f",value:1},colorBufferType:{type:"f",value:0},map:{type:"t",value:null},mapHDRSize:{type:"v2",value:new e.Vector4(2048,1024)},offsetBumpMap:{type:"v2",value:new e.Vector4(0,0)},repeatBumpMap:{type:"v2",value:new e.Vector4(1,1)},specularMap:{type:"t",value:null},envMap:{type:"t",value:null},envMapExposureSpecular:{type:"f",value:1},envMapExposureDiffuse:{type:"f",value:1},envMapHDRSize:{type:"v2",value:new e.Vector4(2048,1024)},envMapHDRToMipsRatio:{type:"f",value:1},ambienceMatrix:{type:"m4",value:new e.Matrix4},flipEnvMap:{type:"f",value:1},useRefract:{type:"i",value:0},reflectivity:{type:"f",value:1},refractionRatio:{type:"f",value:.98},refractionRatioMap:{type:"t",value:null},combine:{type:"i",value:0},reflectivityEnvMap:{type:"t",value:null},morphTargetInfluences:{type:"f",value:0},renderIteration:{type:"i",value:0},mappingType:{type:"i",value:0},mappingTransformSemantic:{type:"i",value:1},mappingNormTransformation:{type:"m3",value:new e.Matrix3},mappingObjTransformation:{type:"m4",value:new e.Matrix4},mappingUVTransformation:{type:"m3",value:new e.Matrix3}},bump:{bumpMap:{type:"t",value:null},bumpScale:{type:"f",value:1}},normalmap:{normalMap:{type:"t",value:null},normalScale:{type:"v2",value:new e.Vector2(1,1)}},lights:{ambientLightColor:{type:"fv",value:[],sceneUniform:!0},directionalLightDirection:{type:"fv",value:[],sceneUniform:!0},directionalLightColor:{type:"fv",value:[],sceneUniform:!0},directionalIBLLightDirection:{type:"fv",value:[],sceneUniform:!0},directionalIBLLightColor:{type:"fv",value:[],sceneUniform:!0},directionalPhongLightDirection:{type:"fv",value:[],sceneUniform:!0},directionalPhongLightColor:{type:"fv",value:[],sceneUniform:!0},pointLightColor:{type:"fv",value:[],sceneUniform:!0},pointLightPosition:{type:"fv",value:[],sceneUniform:!0},pointLightPhysicalAttenuation:{type:"iv",value:[],sceneUniform:!0},pointLightDistance:{type:"fv1",value:[],sceneUniform:!0},spotLightColor:{type:"fv",value:[],sceneUniform:!0},spotLightPosition:{type:"fv",value:[],sceneUniform:!0},spotLightDirection:{type:"fv",value:[],sceneUniform:!0},spotLightPhysicalAttenuation:{type:"iv",value:[],sceneUniform:!0},spotLightDistance:{type:"fv1",value:[],sceneUniform:!0},spotLightAngleCos:{type:"fv1",value:[],sceneUniform:!0},spotLightInnerAngleCos:{type:"fv1",value:[],sceneUniform:!0},iesLightColor:{type:"fv",value:[],sceneUniform:!0},iesLightPosition:{type:"fv",value:[],sceneUniform:!0},iesLightDistance:{type:"fv1",value:[],sceneUniform:!0},iesLightTexture:{type:"tv",value:[],sceneUniform:!0},matrixWorldInv:{type:"m4v",value:[],sceneUniform:!0},sphereLightColor:{type:"fv",value:[],sceneUniform:!0},sphereLightPosition:{type:"fv",value:[],sceneUniform:!0},sphereLightData:{type:"fv",value:[],sceneUniform:!0},diskLightColor:{type:"fv",value:[],sceneUniform:!0},diskLightPosition:{type:"fv",value:[],sceneUniform:!0},diskLightData:{type:"fv",value:[],sceneUniform:!0},diskLightNormal:{type:"fv",value:[],sceneUniform:!0},diskLightUp:{type:"fv",value:[],sceneUniform:!0},tubeLightColor:{type:"fv",value:[],sceneUniform:!0},tubeLightPosition:{type:"fv",value:[],sceneUniform:!0},tubeLightData:{type:"fv",value:[],sceneUniform:!0},tubeLightRight:{type:"fv",value:[],sceneUniform:!0},areaLightColor:{type:"fv",value:[],sceneUniform:!0},areaLightPosition:{type:"fv",value:[],sceneUniform:!0},areaLightNormal:{type:"fv",value:[],sceneUniform:!0},areaLightUp:{type:"fv",value:[],sceneUniform:!0},areaLightData:{type:"fv",value:[],sceneUniform:!0},precomputedAreaGGX1texture:{type:"t",value:null,sceneUniform:!0},precomputedAreaGGX2texture:{type:"t",value:null,sceneUniform:!0},precomputedAreaAshikmintexture:{type:"t",value:null,sceneUniform:!0},precomputedAreaEsteveztexture:{type:"t",value:null,sceneUniform:!0},precomputedAreaBeckmanntexture:{type:"t",value:null,sceneUniform:!0}},clipPlanes:{nbClipPlanes:{type:"i",value:0,clipPlanesUniform:!0},clipPlaneEquations:{type:"fv4",value:[],clipPlanesUniform:!0,loadOnlyIfUniformNotZero:"nbClipPlanes"},clipPlaneActive:{type:"iv1",value:[],clipPlanesUniform:!0,loadOnlyIfUniformNotZero:"nbClipPlanes"},clipFrontOpacity:{type:"f",value:1,clipPlanesUniform:!0,loadOnlyIfUniformNotZero:"nbClipPlanes"},clipBackOpacity:{type:"f",value:0,clipPlanesUniform:!0,loadOnlyIfUniformNotZero:"nbClipPlanes"},polygonSize:{type:"iv1",value:[0],clipPlanesUniform:!0},polygonPoints:{type:"t",value:null,clipPlanesUniform:!0,loadOnlyIfUniformNotZero:"polygonSize"},extrusionPlaneU:{type:"fv3",value:[0,0,1],clipPlanesUniform:!0,loadOnlyIfUniformNotZero:"polygonSize"},extrusionPlaneV:{type:"fv3",value:[1,0,0],clipPlanesUniform:!0,loadOnlyIfUniformNotZero:"polygonSize"},cylinderClipZone:{type:"i",value:0,clipPlanesUniform:!0},cylinderCenter:{type:"v3",value:null,clipPlanesUniform:!0,loadOnlyIfUniformNotZero:"cylinderClipZone"},cylinderAxisU:{type:"v3",value:new e.Vector3(0,0,1),clipPlanesUniform:!0,loadOnlyIfUniformNotZero:"cylinderClipZone"},cylinderAxisV:{type:"v3",value:new e.Vector3(1,0,0),clipPlanesUniform:!0,loadOnlyIfUniformNotZero:"cylinderClipZone"},scissorSize:{type:"iv1",value:[],clipPlanesUniform:!0},scissorPoints:{type:"t",value:null,clipPlanesUniform:!0,loadOnlyIfUniformNotZero:"scissorSize"}},particle:{diffuse:{type:"c",value:new e.Color(15658734)},opacity:{type:"f",value:1},size:{type:"f",value:1},scale:{type:"f",value:1},map:{type:"t",value:null}},shadowmap:{shadowMap:{type:"tv",value:[],sceneUniform:!0},transparentShadowMap:{type:"tv",value:[],sceneUniform:!0},shadowMapSize:{type:"v2v",value:[],sceneUniform:!0},shadowBias:{type:"fv1",value:[],sceneUniform:!0},shadowDarkness:{type:"fv1",value:[],sceneUniform:!0},shadowMapNear:{type:"fv1",value:[],sceneUniform:!0},shadowMapFar:{type:"fv1",value:[],sceneUniform:!0},shadowMapCube:{type:"tcv",value:[],sceneUniform:!0},transparentShadowMapCube:{type:"tcv",value:[],sceneUniform:!0},shadowPointPosition:{type:"v3v",value:[],sceneUniform:!0},shadowNearCube:{type:"fv1",value:[],sceneUniform:!0},shadowFarCube:{type:"fv1",value:[],sceneUniform:!0},shadowMapSizeCube:{type:"fv1",value:[],sceneUniform:!0},shadowBiasCube:{type:"fv1",value:[],sceneUniform:!0},shadowDarknessCube:{type:"fv1",value:[],sceneUniform:!0},shadowMatrix:{type:"m4v",value:[],sceneUniform:!0},poissonDisk:{type:"v2v",value:[],sceneUniform:!0},shadowCameraPosition:{type:"fv",value:[],sceneUniform:!0},lowPartShadowCameraPosition:{type:"fv",value:[],sceneUniform:!0},directionalLightColorNoIntensity:{type:"fv",value:[],sceneUniform:!0},spotLightColorNoIntensity:{type:"fv",value:[],sceneUniform:!0},pointLightColorNoIntensity:{type:"fv",value:[],sceneUniform:!0}},lines:{scale:{type:"f",value:1},totalSize:{type:"f",value:0},halfWidth:{type:"f",value:.5},pixelSize:{type:"v2",value:new e.Vector2(.01,.01)},dashPattern:{type:"fv1",value:new Float32Array(2)},patternOffset:{type:"f",value:0}},postprocess:{brightness:{type:"f",value:0},crushblacks:{type:"f",value:0},burnhighlights:{type:"f",value:0},saturation:{type:"f",value:1},colorCorrection:{type:"v3",value:{x:1,y:1,z:1}}},deferred:{pickingColor:{type:"c",value:new e.Color(0)},rgbaDepth:{type:"t",value:null},highlightID:{type:"f",value:1},iHighlightColor:{type:"v4",value:new e.Vector4(0,.6,1,1)},iHighlightLineicColor:{type:"v4",value:new e.Vector4(0,1,1,1)},iHighlightIntensity:{type:"v2",value:new e.Vector2(1,-1)}}}}),define("DS/MaterialLibs/GenericLib",["DS/Mesh/ThreeJS_Base","DS/MaterialLibs/UniformsLib","DS/Shaders/DefaultShaders","DS/Visualization/ShaderChunk","DS/Visualization/UniformsUtils"],function(e,r,i,a,t){"use strict";return{cube:{uniforms:{tCube:{type:"t",value:null},tFlip:{type:"f",value:-1}},vertexShader:["varying vec3 vWorldPosition;","void main() {","vec4 worldPosition = modelMatrix * vec4( position, 1.0 );","vWorldPosition = worldPosition.xyz;",i.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform samplerCube tCube;","uniform float tFlip;","varying vec3 vWorldPosition;","void main() {","gl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );","}"].join("\n")},depthRGBA:{uniforms:t.merge([r.clipPlanes,{map:{type:"t",value:null},offsetAlphaMap:{type:"v2",value:new e.Vector4(0,0)},repeatAlphaMap:{type:"v2",value:new e.Vector4(1,1)}}]),vertexShaderPars:["#ifdef USE_MAP_ALPHATEST","varying vec2 vUvMap;","uniform vec2 offsetAlphaMap;","uniform vec2 repeatAlphaMap;","#endif"].join("\n"),vertexShaderBody:["#ifdef USE_MAP_ALPHATEST","    vUvMap = uv * repeatAlphaMap + offsetAlphaMap;","#endif"].join("\n"),fragmentShaderPars:["vec4 pack_depth_esm(const in float depth) {","#ifdef USE_UINT_ESM","\tfloat esmDepth = exp(80.0*depth);","\tfloat exposant = ceil(log(esmDepth)/log(10.0));","\tfloat normDepth = esmDepth/pow(10.0,exposant);","\treturn vec4(packRGB(normDepth),exposant/255.0);","#else","\treturn vec4(exp(80.0*depth),0.0,0.0,1.0);","#endif","}","vec4 pack_depth( const in float depth ) {","return packRGBA(depth);","}","#ifdef USE_MAP_ALPHATEST","varying vec2 vUvMap;","uniform sampler2D map;","#endif"].join("\n"),fragmentShaderBody:["#ifdef USE_MAP_ALPHATEST","   float alpha = texture2D( map, vUvMap ).w;","   if ( alpha < ALPHATEST ) discard;","#endif","vec4 finalData;","#if defined(SHADOWMAP_TYPE_ESM) || defined(SHADOWMAP_TYPE_ESM_IMPROVED) ","finalData = pack_depth_esm( gl_FragCoord.z );","#else","finalData = pack_depth( gl_FragCoord.z );","#endif","#ifdef GLSL300ES","outFragColor = finalData;","#else","gl_FragData[ 0 ] = finalData;","#endif",""].join("\n"),vertexShader:[a.clip_pars_vertex,a.morphtarget_pars_vertex,a.skinning_pars_vertex,"#ifdef USE_MAP_ALPHATEST","varying vec2 vUvMap;","uniform vec2 offsetAlphaMap;","uniform vec2 repeatAlphaMap;","#endif","#ifdef PDSFX_USE_MAP","varying vec2 vUv;","#endif","void main() {",a.PDSFX_start_vertex,a.skinbase_vertex,a.morphtarget_vertex,a.skinning_vertex,a.default_vertex,a.clip_vertex,"#ifdef USE_MAP_ALPHATEST","    vUvMap = uv * repeatAlphaMap + offsetAlphaMap;","#endif",a.PDSFX_end_vertex,"#ifdef PDSFX_USE_MAP","vUv = uv;","#endif","}"].join("\n"),fragmentShader:[a.clip_pars_fragment,"#ifdef USE_MAP_ALPHATEST","varying vec2 vUvMap;","uniform sampler2D map;","#endif","#ifdef PDSFX_USE_MAP","varying vec2 vUv;","#endif","vec4 pack_depth_esm(const in float depth) {","#ifdef USE_UINT_ESM","\tfloat esmDepth = exp(80.0*depth);","\tfloat exposant = ceil(log(esmDepth)/log(10.0));","\tfloat normDepth = esmDepth/pow(10.0,exposant);","\treturn vec4(packRGB(normDepth),exposant/255.0);","#else","\treturn vec4(exp(80.0*depth),0.0,0.0,1.0);","#endif","}","vec4 pack_depth( const in float depth ) {","return packRGBA(depth);","}","void main() {",a.PDSFX_map_fragment,"#ifdef PDSFX","ComputeCommonValues();",a.PDSFX_discard_fragment,"#endif",a.clip_fragment,"#ifdef USE_MAP_ALPHATEST","   float alpha = texture2D( map, vUvMap ).w;","   if ( alpha < ALPHATEST ) discard;","#endif","vec4 finalData;","#if defined(SHADOWMAP_TYPE_ESM) || defined(SHADOWMAP_TYPE_ESM_IMPROVED) ","finalData = pack_depth_esm( gl_FragCoord.z );","#else","finalData = pack_depth( gl_FragCoord.z );","#endif","#ifdef GLSL300ES","outFragColor = finalData;","#else","gl_FragData[ 0 ] = finalData;","#endif","}"].join("\n")}}}),define("DS/MaterialLibs/ParticleBasicLib",["DS/MaterialLibs/UniformsLib","DS/Shaders/DeferrableShaders","DS/Visualization/ShaderChunk","DS/Visualization/UniformsUtils","DS/Materials/ParticleBasicMaterial"],function(e,r,i,a,t){"use strict";var n=t.prototype.deferrable,o="",l="",f="",s="";return n&&(o=[r.depth_pars_vertex,r.picking_pars_vertex,r.picking_instancing_pars_vertex,r.highlight_pars_vertex].join("\n"),f=[r.depth_vertex,r.picking_vertex,r.picking_instancing_vertex,r.highlight_vertex].join("\n"),l=[r.picking_pars_fragment,r.picking_instancing_pars_fragment,r.depth_pars_fragment,r.highlight_pars_fragment].join("\n"),s=[r.picking_fragment,r.picking_instancing_fragment,r.depth_fragment,r.lineic_normal_fragment,r.highlight_fragment_point].join("\n")),{uniforms:a.merge([e.particle,e.clipPlanes,e.postprocess,n?e.deferred:{}]),vertexShader:["#define PARTICLEBASIC","uniform float size;","uniform float scale;","#ifdef PDSFX_USE_MAP","varying vec2 vUv;","#endif",i.clip_pars_vertex,i.color_pars_vertex,i.fog_pars_vertex,r.oit_pars_vertex,o,"void main() {",i.PDSFX_start_particle_vertex,i.PDSFX_start_vertex,i.color_vertex,i.default_vertex,i.PDSFX_point_size_vertex,i.worldpos_vertex,i.clip_vertex,i.fog_vertex,r.oit_vertex_point,f,i.PDSFX_end_vertex,"#ifdef PDSFX_USE_MAP","vUv = uv;","#endif","}"].join("\n"),fragmentShader:["#define PARTICLEBASIC","#if defined(SELECTION_MATERIAL) && !defined(ALPHATEST)","#define ALPHATEST 0.01","#endif",i.PDSFX_albedo_pars_fragment,i.PDSFX_opacity_pars_fragment,"uniform float size;","#ifdef PDSFX_USE_MAP","varying vec2 vUv;","#endif",i.clip_pars_fragment,i.color_pars_fragment,i.fog_pars_fragment,"#ifdef USE_MAP","uniform sampler2D map;","#endif",r.oit_pars_fragment,i.postprocess_pars_fragment,l,"void main() {","#ifdef PDSFX","_DSsize_ = size;",i.PDSFX_map_fragment,"ComputeCommonValues();",i.PDSFX_discard_fragment,i.PDSFX_albedo_fragment,i.PDSFX_opacity_fragment,"#endif","#if defined(SELECTION_MATERIAL)","gl_FragColor = vec4( diffuse, 1.0 );","#else","gl_FragColor = vec4( diffuse, opacity );","#endif",i.clip_fragment,"#ifdef USE_MAP","vec4 texelColor = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) );","#if defined(GAMMA_INPUT) && !defined(USE_MAP_HDR)","texelColor.rgb = convertToLinear(texelColor.rgb);","#endif","gl_FragColor = gl_FragColor * texelColor;","#endif",i.alphatest_fragment,i.color_fragment,i.postprocess_fragment,i.linear_to_gamma_fragment,i.PDSFX_end_fragment,i.fog_fragment,i.backgroundviewmode_lowlight_fragment,r._debug_common_lineic_fragment,r.oit_fragment_point,s,"}"].join("\n")}}),define("DS/MaterialLibs/FiniteEnvMapLib",["DS/MaterialLibs/UniformsLib","DS/Shaders/DefaultShaders","DS/Visualization/ShaderChunk","DS/Visualization/UniformsUtils","DS/Mesh/ThreeJS_Base"],function(e,r,i,a,t){"use strict";return{uniforms:a.merge([e.postprocess,{tEnvMap:{type:"t",value:null},tEnvMap2:{type:"t",value:null},envMapHDRSize:{type:"v2",value:new t.Vector2(2048,1024)},envMapHDRToMipsRatio:{type:"f",value:1},cameraSight:{type:"v3",value:new t.Vector3},cameraUp:{type:"v3",value:new t.Vector3},cameraRight:{type:"v3",value:new t.Vector3},startOffset:{type:"v2",value:new t.Vector2(0,0)},endOffset:{type:"v2",value:new t.Vector2(1,1)},invScreenSize:{type:"v2",value:new t.Vector2},tFlip:{type:"f",value:-1},ambienceMatrix:{type:"m4",value:new t.Matrix4},groundPosition:{type:"v3",value:new t.Vector3(0,0,0)},groundNormal:{type:"v3",value:new t.Vector3(0,0,1)},sceneHeight:{type:"v3",value:new t.Vector3(0,0,.15)},groundHeight:{type:"v3",value:new t.Vector3(0,0,.23)},groundOffset:{type:"f",value:0},groundRadius:{type:"f",value:5e3},blurCoef:{type:"f",value:0},withGround:{type:"f",value:0},groundScale:{type:"f",value:.78},intensity:{type:"f",value:1},envMapExposure:{type:"f",value:1},ambient:{type:"c",value:new t.Color(16777215)},near:{type:"f",value:1},right:{type:"f",value:1},up:{type:"f",value:1},projectionConic:{type:"f",value:1}}]),vertexShader:["#define FINITEENVMAP","varying vec3 vWorldPosition;","void main() {","vec4 worldPosition = modelMatrix * vec4( position, 1.0 );","vWorldPosition = worldPosition.xyz;",r.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["#define FINITEENVMAP","#if defined( LATLONG_MAP ) ","uniform sampler2D tEnvMap;","#else","uniform samplerCube tEnvMap;","#endif","#if defined( ENVMAP2 ) ","uniform sampler2D tEnvMap2;","#endif","uniform float blurCoef;","uniform float withGround;","uniform float envMapExposure;","uniform float tFlip;","uniform vec3 ambient;","uniform vec3 groundPosition;","uniform vec3 groundNormal;","uniform vec3 sceneHeight;","uniform vec3 groundHeight;","uniform float groundOffset;","uniform float groundRadius;","uniform float groundScale;","uniform float intensity;","uniform vec2 invScreenSize;","uniform vec3 cameraSight;","uniform vec3 cameraUp;","uniform vec3 cameraRight;","uniform float near;","uniform float right;","uniform float up;","uniform vec2 startOffset;","uniform vec2 endOffset;","uniform mat4 ambienceMatrix;","uniform float projectionConic;","varying vec3 vWorldPosition;","const float PI = 3.14159;","const float INV_PI = 0.31830988618;","#if defined( HDR ) &&  !defined(HDR_FLOAT) ","uniform vec2 envMapHDRSize;","uniform float envMapHDRToMipsRatio;",r.rgbe_sample_methods,"vec4 sampleMipMapRoughness(vec2 uv, float mip, float coef, sampler2D map0, sampler2D map1, vec2 textureSize, vec2 texelSize) {","vec4 color1;","vec4 color2;","vec2 uv1;","vec2 uv2;","if (mip < 1.0) {","color1 = texture2DBilinearFromRGBE(map0, uv, textureSize, texelSize);","} else {","textureSize *= envMapHDRToMipsRatio * vec2(1.0,2.0);","texelSize /= envMapHDRToMipsRatio * vec2(1.0,2.0);","float level1 = clamp(floor(mip) - 1.0, 0.0, 4.0);","float t10 = pow(2.0, -floor(log2(level1 + 1.0)));","float t11 = 2.0 - (level1 + 2.0) * t10;","float t12 = 0.5 * t10;","uv1 = vec2(t11 + 1.5 * texelSize.x + (2.0 * t12 - 3.0 * texelSize.x) * uv.x, t12 + 1.5 * texelSize.x + (t12 - 3.0 * texelSize.x) * uv.y);","color1 = texture2DBilinearFromRGBE(map1, uv1, textureSize, texelSize);","}","float level2 = clamp(floor(mip), 0.0, 5.0);","float t20 = pow(2.0, -floor(log2(level2 + 1.0)));","float t21 = 2.0 - (level2 + 2.0) * t20;","float t22 = 0.5 * t20;","uv2 = vec2(t21 + 1.5 * texelSize.x + (2.0 * t22 - 3.0 * texelSize.x) * uv.x, t22 + 1.5 * texelSize.x + (t22 - 3.0 * texelSize.x) * uv.y);","color2 = texture2DBilinearFromRGBE(map1, uv2, textureSize, texelSize);","return mix(color1, color2, coef);","}","#endif","vec2 MapNormalToTextureCoordinate(vec3 iNormal) {","float phi = atan(iNormal.y, iNormal.x);","float theta = acos(iNormal.z);","vec2 reflectionUV = vec2(fract(0.5 + 0.5 * INV_PI * phi), 1.0 - INV_PI * theta);","return reflectionUV;","}","float IntersectPlane(vec3 iPos, vec3 iRay, vec3 iPlaneOrig, vec3 iPlaneNormal) {","float t = dot(iPlaneNormal, iPlaneOrig-iPos);","float cosNormalDir = dot(iPlaneNormal, iRay);","if (cosNormalDir==0.0) return 0.0;","t = t/cosNormalDir;","return t;","}","float IntersectSphereFar(vec3  iSphereCenter, float iSphereRadius, vec3 iRayDir, vec3  iRayOrig) {","   vec3 dist = iRayOrig - iSphereCenter;","   float B = 2.0*dot(iRayDir, dist);","   float C = dot(dist, dist) - iSphereRadius*iSphereRadius;","   float disc = B*B - 4.0*C;","   if (disc < 0.0)","       return -1.0;","   float t = (-B + sqrt(disc)) / 2.0;","   return t;","}",i.postprocess_pars_fragment,"void main() {","vec3 n = normalize(vWorldPosition - cameraPosition);","vec3 groundPos = (ambienceMatrix * vec4(groundPosition, 1.0)).xyz;","vec3 groundNor = (ambienceMatrix * vec4(groundNormal, 0.0)).xyz;","vec3  sphereCenter  = groundPos + groundNor * sceneHeight * groundRadius;","vec3  offset  = vec3(0.0,0.0,groundOffset);","offset = (ambienceMatrix * vec4(offset, 0.0)).xyz;","#if defined( AMBIENCE_V2 ) ","groundNor = groundNormal;","sphereCenter  = groundPosition +  sceneHeight * groundRadius;","offset = groundOffset * groundNor;","groundPos = groundPosition + offset;","#endif","float sphereRadius  = groundRadius * groundScale;","vec3  rayDir      = vec3(0.0);","vec3  rayOrig     = vec3(0.0);","if (sphereRadius > 0.0) {","if (projectionConic > 0.0 ) { ","rayDir      = n;","rayOrig     = cameraPosition;","}else{","vec2 screenOffset = 2.0 * mix(startOffset, endOffset, gl_FragCoord.xy * invScreenSize) - 1.0;","vec3 centerPosition = cameraPosition - (cameraSight * near);","n = normalize(cameraSight + screenOffset.x * cameraRight + screenOffset.y * cameraUp);","rayOrig = centerPosition + screenOffset.x * (cameraRight*right) + screenOffset.y * (cameraUp * up);","rayDir = cameraSight;","}","float t =  IntersectSphereFar(sphereCenter, sphereRadius, rayDir, rayOrig);","vec3  planeNormal = groundNor;","if (t>0.0) {","if (dot(planeNormal, rayDir)<0.0){","#if defined( AMBIENCE_V2 ) ","float planeT  = IntersectPlane(rayOrig, rayDir, groundPos, planeNormal);","#else","float planeT  = IntersectPlane(rayOrig, rayDir, groundPos + offset, planeNormal);","#endif","planeT = planeT * withGround;","if (projectionConic > 0.0 ) { ","t = (planeT>0.0) ? min(planeT,t) : t;","}else{","t =  min(planeT,t);","}","}","vec3 hitPos = rayOrig + t*rayDir;","#if defined( AMBIENCE_V2 ) ","vec3 projectionCenter = groundPosition + groundHeight * sphereRadius; ","#else","vec3 projectionCenter = groundPos + offset ; ","projectionCenter += groundNor * groundHeight*groundRadius;","#endif","vec3 sn = (hitPos - projectionCenter);","n = normalize(sn);","}","}","#if defined( LATLONG_MAP ) ","n = (ambienceMatrix * vec4(n, 0.0)).xyz;","#if defined( HDR )","#else","n.y *= -1.0;","#endif","vec2 coords = MapNormalToTextureCoordinate(n);","#if defined( HDR ) &&  !defined(HDR_FLOAT) ","vec2 texelSize = vec2(1.0 / envMapHDRSize);","#if defined( ENVMAP2 )","float mipValue = max(6.0 + 1.15 * log2(blurCoef + 0.0000001), 0.0);","float mipCoef = fract(mipValue);","if (mipValue > 6.0) {","mipValue = 6.0;","mipCoef = 1.0;","}","gl_FragColor.xyz =  sampleMipMapRoughness( coords, mipValue, mipCoef, tEnvMap, tEnvMap2, envMapHDRSize, texelSize ).xyz;","#else","gl_FragColor.xyz = texture2DBilinearFromRGBE( tEnvMap, coords, envMapHDRSize, texelSize ).xyz;","#endif","#else","gl_FragColor.xyz = texture2D( tEnvMap, coords ).xyz;","#endif","#else","n = (ambienceMatrix * vec4(n, 0.0)).xyz;","gl_FragColor.xyz = textureCube(tEnvMap, vec3(n.x, -n.z,n.y)).xyz;","#endif","gl_FragColor.w = 1.0;","#if !defined( GAMMA_OUTPUT ) && defined( sRGB )","gl_FragColor.xyz = convertToLinear(gl_FragColor.xyz);","#endif","gl_FragColor.xyz *=envMapExposure;","gl_FragColor*= vec4(ambient, 1.0);",i.postprocess_fragment,"#if defined( GAMMA_OUTPUT ) && defined( HDR )",i.linear_to_gamma_fragment,"#endif","}"].join("\n")}}),define("DS/MaterialLibs/MeshBasicLib",["DS/MaterialLibs/UniformsLib","DS/Shaders/DefaultShaders","DS/Shaders/DeferrableShaders","DS/Visualization/ShaderChunk","DS/Visualization/UniformsUtils","DS/Materials/MeshBasicMaterial"],function(e,r,i,a,t,n){"use strict";var o=n.prototype.deferrable,l="",f="",s="",p="";return o&&(l=[i.depth_pars_vertex,i.picking_pars_vertex,i.picking_instancing_pars_vertex,i.highlight_pars_vertex,i.texcoord_pars_vertex].join("\n"),s=[i.depth_vertex,i.picking_vertex,i.picking_instancing_vertex,i.highlight_vertex,i.texcoord_vertex].join("\n"),f=[i.picking_pars_fragment,i.picking_instancing_pars_fragment,i.depth_pars_fragment,i.decal_normal_depth_pars_fragment,i.shadowmap_pars_fragment,i.highlight_pars_fragment,i.texcoord_pars_fragment].join("\n"),p=[i.picking_fragment,i.picking_instancing_fragment,i.depth_fragment_face,i.normal_fragment,i.normal_depth_fragment,i.shadowmap_fragment,i.highlight_fragment_face,i.texcoord_fragment].join("\n")),{uniforms:t.merge([e.common,e.shadowmap,e.clipPlanes,e.postprocess,o?e.deferred:{}]),vertexShader:["#define BASIC",r.normal_viewposition_pars_vertex,a.clip_pars_vertex,a.map_pars_vertex,a.color_pars_vertex,a.morphtarget_pars_vertex,a.skinning_pars_vertex,a.fog_pars_vertex,i.oit_pars_vertex,l,"void main() {",a.PDSFX_start_vertex,a.map_vertex,a.color_vertex,a.morphnormal_vertex,a.skinbase_vertex,a.skinnormal_vertex,a.morphtarget_vertex,a.skinning_vertex,a.default_vertex_with_normal,a.defaultnormal_vertex,a.clip_vertex,a.fog_vertex,r.normal_viewposition_vertex,a.worldpos_vertex,i.oit_vertex,s,a.PDSFX_end_vertex,"}"].join("\n"),fragmentShader:["#define BASIC",a.PDSFX_albedo_pars_fragment,a.PDSFX_opacity_pars_fragment,"#if defined( NEEDS_UVTOUSE ) || defined(PDSFX_USE_MAP)","vec2 uvToUse;","#endif",r.normal_viewposition_pars_fragment,a.clip_pars_fragment,a.color_pars_fragment,a.map_pars_fragment,a.fog_pars_fragment,i.oit_pars_fragment,f,a.postprocess_pars_fragment,"void main() {","#ifdef PDSFX",a.PDSFX_map_fragment,a.PDSFX_mapping_fragment,"ComputeCommonValues();",a.PDSFX_discard_fragment,a.PDSFX_albedo_fragment,a.PDSFX_opacity_fragment,a.PDSFX_viewNormal_fragment,"vViewPosition = -ComputeViewPosition();","#endif","#if defined(SELECTION_MATERIAL)","gl_FragColor = vec4( diffuse, 1.0 );","#else","gl_FragColor = vec4( diffuse, opacity );","#endif","#if defined( NEEDS_UVTOUSE ) || defined(PDSFX_USE_MAP)","uvToUse=vUv;","#endif",r.normal_viewposition_fragment,a.clip_fragment,a.uvmapping_fragment,a.map_fragment,a.alphatest_fragment,a.color_fragment,a.postprocess_fragment,a.linear_to_gamma_fragment,a.PDSFX_end_fragment,a.fog_fragment,a.backgroundviewmode_lowlight_fragment,i._debug_common_face_fragment,i.oit_fragment,p,"}"].join("\n")}}),define("DS/MaterialLibs/CubeMapLib",["DS/MaterialLibs/UniformsLib","DS/Shaders/DefaultShaders","DS/Visualization/ShaderChunk","DS/Visualization/UniformsUtils","DS/Mesh/ThreeJS_Base"],function(e,r,i,a,t){"use strict";return{uniforms:a.merge([{tEnvMap:{type:"t",value:null},tFlip:{type:"f",value:-1},envMapExposure:{type:"f",value:1},ambienceMatrix:{type:"m4",value:new t.Matrix4},ambient:{type:"c",value:new t.Color(16777215)}}]),vertexShader:["#define CUBEMAP","varying vec3 vWorldPosition;","void main() {","vec4 worldPosition = modelMatrix * vec4( position, 1.0 );","vWorldPosition = worldPosition.xyz;",r.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["#define CUBEMAP","uniform samplerCube tEnvMap;","uniform float tFlip;","uniform vec3 ambient;","uniform float envMapExposure;","uniform mat4 ambienceMatrix;","varying vec3 vWorldPosition;","void main() {","vec3 relPos = vWorldPosition - cameraPosition;","relPos = (ambienceMatrix * vec4(relPos,0.0)).xyz;","#if defined(CUBEMAP_ZUP)","gl_FragColor = vec4(ambient, 1.0) * textureCube( tEnvMap, vec3( -relPos.x, relPos.zy ) );","#else","gl_FragColor = vec4(ambient, 1.0) * textureCube( tEnvMap, vec3( relPos.x, -relPos.z, relPos.y ) );","#endif","}"].join("\n")}}),define("DS/MaterialLibs/MeshLambertLib",["DS/Mesh/ThreeJS_Base","DS/MaterialLibs/UniformsLib","DS/Shaders/DefaultShaders","DS/Shaders/DeferrableShaders","DS/Visualization/ShaderChunk","DS/Visualization/UniformsUtils","DS/Materials/MeshLambertMaterial"],function(e,r,i,a,t,n,o){"use strict";var l=o.prototype.deferrable,f="",s="",p="",v="";return l&&(f=[a.depth_pars_vertex,a.picking_pars_vertex,a.picking_instancing_pars_vertex,a.highlight_pars_vertex,a.texcoord_pars_vertex].join("\n"),p=[a.depth_vertex,a.picking_vertex,a.picking_instancing_vertex,a.highlight_vertex,a.texcoord_vertex].join("\n"),s=[a.picking_pars_fragment,a.picking_instancing_pars_fragment,a.depth_pars_fragment,a.decal_normal_depth_pars_fragment,a.shadowmap_pars_fragment,a.highlight_pars_fragment,a.texcoord_pars_fragment].join("\n"),v=[a.picking_fragment,a.picking_instancing_fragment,a.depth_fragment_face,a.normal_fragment,a.normal_depth_fragment,a.shadowmap_fragment,a.highlight_fragment_face,a.texcoord_fragment].join("\n")),{uniforms:n.merge([r.common,r.lights,r.shadowmap,r.clipPlanes,{ambient:{type:"c",value:new e.Color(16777215)},emissive:{type:"c",value:new e.Color(0)},wrapRGB:{type:"v3",value:new e.Vector3(1,1,1)}},r.postprocess,l?r.deferred:{}]),vertexShader:["#define LAMBERT","varying vec3 vLightFront;","#ifdef DOUBLE_SIDED","varying vec3 vLightBack;","#endif",i.normal_viewposition_pars_vertex,t.clip_pars_vertex,t.map_pars_vertex,t.envmap_pars_vertex,t.lights_lambert_pars_vertex,t.color_pars_vertex,t.morphtarget_pars_vertex,t.skinning_pars_vertex,t.shadowmap_pars_vertex,t.fog_pars_vertex,a.oit_pars_vertex,f,"void main() {",t.PDSFX_start_vertex,t.map_vertex,t.color_vertex,t.morphnormal_vertex,t.skinbase_vertex,t.skinnormal_vertex,t.morphtarget_vertex,t.skinning_vertex,t.default_vertex_with_normal,t.defaultnormal_vertex,t.clip_vertex,t.fog_vertex,i.normal_viewposition_vertex,t.worldpos_vertex,t.envmap_vertex,t.lights_lambert_vertex,t.shadowmap_vertex,a.oit_vertex,p,t.PDSFX_end_vertex,"}"].join("\n"),fragmentShader:["#define LAMBERT","uniform float opacity;","varying vec3 vLightFront;","#ifdef DOUBLE_SIDED","varying vec3 vLightBack;","#endif","#if defined( NEEDS_UVTOUSE )","vec2 uvToUse;","#endif",i.normal_viewposition_pars_fragment,t.clip_pars_fragment,t.color_pars_fragment,t.map_pars_fragment,t.envmap_pars_fragment,t.shadowmap_pars_fragment,t.specularmap_pars_fragment,t.fog_pars_fragment,a.oit_pars_fragment,s,t.postprocess_pars_fragment,"void main() {","#ifdef PDSFX","ComputeCommonValues();",t.PDSFX_viewNormal_fragment,"vViewPosition = -ComputeViewPosition();","#endif",i.normal_viewposition_fragment,"#if defined(SELECTION_MATERIAL)","gl_FragColor = vec4( vec3(1.0), 1.0 );","#else","gl_FragColor = vec4( vec3 ( 1.0 ), opacity );","#endif","#if defined( NEEDS_UVTOUSE ) || defined(PDSFX_USE_MAP)","uvToUse=vUv;","#endif",t.clip_fragment,t.uvmapping_fragment,t.map_fragment,t.alphatest_fragment,t.specularmap_fragment,"#ifdef DOUBLE_SIDED","if ( gl_FrontFacing )","gl_FragColor.xyz *= vLightFront;","else","gl_FragColor.xyz *= vLightBack;","#else","gl_FragColor.xyz *= vLightFront;","#endif",t.color_fragment,t.envmap_fragment,t.shadowmap_fragment,t.postprocess_fragment,t.linear_to_gamma_fragment,t.PDSFX_end_fragment,t.fog_fragment,t.backgroundviewmode_lowlight_fragment,a._debug_common_face_fragment,a.oit_fragment,v,"}"].join("\n")}}),define("DS/MaterialLibs/SimpleMapLib",["DS/MaterialLibs/UniformsLib","DS/Shaders/DefaultShaders","DS/Visualization/ShaderChunk","DS/Visualization/UniformsUtils","DS/Mesh/ThreeJS_Base"],function(e,r,i,a,t){"use strict";return{uniforms:a.merge([e.postprocess,{tEnvMap:{type:"t",value:null},envMapExposure:{type:"f",value:1},ambient:{type:"c",value:new t.Color(16777215)},backgroundColor:{type:"c",value:new t.Color(0)},backgroundAlpha:{type:"f",value:1},offset:{type:"v2",value:new t.Vector2(0,0)},invSize:{type:"v2",value:new t.Vector2(512,512)},envMapHDRSize:{type:"v2",value:new t.Vector2(2048,1024)}}]),vertexShader:["#define SIMPLEMAP","void main() {",r.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["#define SIMPLEMAP","uniform sampler2D tEnvMap;","#if defined( ENVMAP2 ) ","uniform sampler2D tEnvMap2;","#endif","uniform vec3 ambient;","uniform vec3 backgroundColor;","uniform float backgroundAlpha;","uniform vec2 invSize;","uniform vec2 offset;","uniform float envMapExposure;","#if defined( HDR ) &&  !defined(HDR_FLOAT) ","uniform vec2 envMapHDRSize;",r.rgbe_sample_methods,"#endif",i.postprocess_pars_fragment,"void main() {","vec2 coord = (gl_FragCoord.xy - offset) * invSize;","vec4 color = vec4(0.0);","#if defined( HDR ) &&  !defined(HDR_FLOAT) ","coord.x = 1.0 - coord.x;","vec2 texelSize = vec2(1.0 / envMapHDRSize);","color = texture2DFromRGBE( tEnvMap, coord );","#else","color = texture2D( tEnvMap, coord );","#endif","#if defined( GAMMA_INPUT ) && defined( sRGB )","color.rgb = convertToLinear(color.rgb);","#endif","vec2 edge = step(vec2(0.0), coord) - step(vec2(1.0), coord);","color.rgb *= envMapExposure;","gl_FragColor = color * vec4(ambient, 1.0) * (edge.x * edge.y) + vec4(backgroundColor,backgroundAlpha) * (1.0 - (edge.x * edge.y)) ;",i.postprocess_fragment,i.linear_to_gamma_fragment,"}"].join("\n")}}),define("DS/MaterialLibs/FiniteTransitionEnvMapLib",["DS/MaterialLibs/UniformsLib","DS/Shaders/DefaultShaders","DS/Visualization/ShaderChunk","DS/Visualization/UniformsUtils","DS/Mesh/ThreeJS_Base"],function(e,r,i,a,t){"use strict";return{uniforms:a.merge([e.postprocess,{tEnvMap:{type:"t",value:null},tEnvMap2:{type:"t",value:null},envMapHDRSize:{type:"v2",value:new t.Vector2(2048,1024)},envMapHDRSize2:{type:"v2",value:new t.Vector2(2048,1024)},invScreenSize:{type:"v2",value:new t.Vector2},tFlip:{type:"f",value:-1},ambienceMatrix:{type:"m4",value:new t.Matrix4},ambienceMatrix2:{type:"m4",value:new t.Matrix4},groundPosition:{type:"v3",value:new t.Vector3(0,0,0)},groundPosition2:{type:"v3",value:new t.Vector3(0,0,0)},groundRadius:{type:"f",value:5e3},groundRadius2:{type:"f",value:5e3},transitionCoef:{type:"f",value:0},groundScale:{type:"f",value:.78},groundScale2:{type:"f",value:.78},envMapExposure:{type:"f",value:1},envMapExposure2:{type:"f",value:1},ambient:{type:"c",value:new t.Color(16777215)}}]),vertexShader:["#define FINITE_TRANSITION","varying vec3 vWorldPosition;","void main() {","vec4 worldPosition = modelMatrix * vec4( position, 1.0 );","vWorldPosition = worldPosition.xyz;",r.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["#define FINITE_TRANSITION","#if defined( LATLONG_MAP ) ","uniform sampler2D tEnvMap;","uniform sampler2D tEnvMap2;","#else","uniform samplerCube tEnvMap;","uniform samplerCube tEnvMap2;","#endif","uniform float transitionCoef;","uniform float envMapExposure;","uniform float envMapExposure2;","uniform float tFlip;","uniform vec3 ambient;","uniform vec3 groundPosition;","uniform vec3 groundPosition2;","uniform float groundRadius;","uniform float groundRadius2;","uniform float groundScale;","uniform float groundScale2;","uniform vec2 invScreenSize;","uniform vec2 invScreenSize2;","uniform mat4 ambienceMatrix;","uniform mat4 ambienceMatrix2;","varying vec3 vWorldPosition;","const float PI = 3.14159;","const float INV_PI = 0.31830988618;","#if defined( HDR ) &&  !defined(HDR_FLOAT) ","uniform vec2 envMapHDRSize;","uniform vec2 envMapHDRSize2;",r.rgbe_sample_methods,"#endif","vec2 MapNormalToTextureCoordinate(vec3 iNormal) {","float phi = atan(iNormal.y, iNormal.x);","float theta = acos(iNormal.z);","vec2 reflectionUV = vec2(fract(0.5 + 0.5 * INV_PI * phi), 1.0 - INV_PI * theta);","return reflectionUV;","}","float IntersectPlane(vec3 iPos, vec3 iRay, vec3 iPlaneOrig, vec3 iPlaneNormal) {","float t = dot(iPlaneNormal, iPlaneOrig-iPos);","float cosNormalDir = dot(iPlaneNormal, iRay);","if (cosNormalDir==0.0) return 0.0;","t = t/cosNormalDir;","return t;","}","float IntersectSphereFar(vec3  iSphereCenter, float iSphereRadius, vec3 iRayDir, vec3  iRayOrig) {","   vec3 dist = iRayOrig - iSphereCenter;","   float B = 2.0*dot(iRayDir, dist);","   float C = dot(dist, dist) - iSphereRadius*iSphereRadius;","   float disc = B*B - 4.0*C;","   if (disc < 0.0)","       return -1.0;","   float t = (-B + sqrt(disc)) / 2.0;","   return t;","}",i.postprocess_pars_fragment,"vec3 getN(vec3 isphereCenter,float isphereRadius,vec3 inRay, vec3 iCameraPosition,vec3 iplaneNormal,vec3 igroundPos) {","vec3 rayDir      = inRay;","vec3 rayOrig     = iCameraPosition;","float t =  IntersectSphereFar(isphereCenter, isphereRadius, rayDir, rayOrig);","if (t>0.0) {","vec3 hitPos = rayOrig + t*rayDir;","vec3 sn = (hitPos - isphereCenter);","rayDir = normalize(sn);","}","return rayDir;","}","void main() {","vec3 inputRay = normalize(vWorldPosition - cameraPosition);","vec3 groundNor = vec3(0.0);","vec3 sphereCenter  = groundPosition;","vec3 sphereCenter2  = groundPosition2;","vec3 groundPos = vec3(0.0);","float sphereRadius  = groundRadius * groundScale;","float sphereRadius2  = groundRadius2 * groundScale2;","vec3 n = getN(sphereCenter,sphereRadius,inputRay,cameraPosition,groundNor,groundPos);","vec3 n2 = getN(sphereCenter2,sphereRadius2,inputRay,cameraPosition,groundNor,groundPos);","#if defined( LATLONG_MAP ) ","n = (ambienceMatrix * vec4(n, 0.0)).xyz;","n2 = (ambienceMatrix2 * vec4(n2, 0.0)).xyz;","#if defined( HDR )","#else","n.y *= -1.0;","n2.y *= -1.0;","#endif","vec2 coords = MapNormalToTextureCoordinate(n);","vec2 coords2 = MapNormalToTextureCoordinate(n2);","#if defined( HDR ) &&  !defined(HDR_FLOAT) ","vec2 texelSize = vec2(1.0 / envMapHDRSize);","vec2 texelSize2 = vec2(1.0 / envMapHDRSize2);","vec3 c1 = texture2DBilinearFromRGBE( tEnvMap, coords, envMapHDRSize, texelSize ).xyz;","vec3 c2 = texture2DBilinearFromRGBE( tEnvMap2, coords2, envMapHDRSize2, texelSize2 ).xyz;","gl_FragColor.xyz = c2*transitionCoef+c1*(1.0-transitionCoef);","#else","vec3 c1 = texture2D( tEnvMap, coords ).xyz;","vec3 c2 = texture2D( tEnvMap2, coords2 ).xyz;","gl_FragColor.xyz = c2*transitionCoef+c1*(1.0-transitionCoef);","#endif","#else","n = (ambienceMatrix * vec4(n, 0.0)).xyz;","gl_FragColor.xyz = textureCube(tEnvMap, vec3(n.x, -n.z,n.y)).xyz;","#endif","gl_FragColor.w = 1.0;","#if !defined( GAMMA_OUTPUT ) && defined( sRGB )","gl_FragColor.xyz = convertToLinear(gl_FragColor.xyz);","#endif","gl_FragColor.xyz *=envMapExposure;","gl_FragColor*= vec4(ambient, 1.0);",i.postprocess_fragment,"#if defined( GAMMA_OUTPUT ) && defined( HDR )",i.linear_to_gamma_fragment,"#endif","}"].join("\n")}}),define("DS/MaterialLibs/LineBasicLib",["DS/MaterialLibs/UniformsLib","DS/Shaders/DeferrableShaders","DS/Visualization/ShaderChunk","DS/Visualization/UniformsUtils","DS/Materials/LineBasicMaterial"],function(e,r,i,a,t){"use strict";var n=t.prototype.deferrable,o="",l="",f="",s="";return n&&(o=[r.depth_pars_vertex,r.picking_pars_vertex,r.picking_instancing_pars_vertex,r.highlight_pars_vertex].join("\n"),f=[r.depth_vertex,r.picking_vertex,r.picking_instancing_vertex,r.highlight_vertex].join("\n"),l=[r.picking_pars_fragment,r.picking_instancing_pars_fragment,r.depth_pars_fragment,r.highlight_pars_fragment].join("\n"),s=[r.picking_fragment,r.picking_instancing_fragment,r.depth_fragment,r.lineic_normal_fragment,r.highlight_fragment_edge].join("\n")),{uniforms:a.merge([e.common,e.clipPlanes,e.lines,e.postprocess,n?e.deferred:{}]),vertexShader:["#define LINEBASIC",i.clip_pars_vertex,i.map_pars_vertex,i.color_pars_vertex,i.morphtarget_pars_vertex,i.skinning_pars_vertex,i.lines_pars_vertex,i.fog_pars_vertex,r.oit_pars_vertex,o,"void main() {",i.PDSFX_start_vertex,"#ifdef PDSFX",i.PDSFX_halfWidth_fragment_vertex,"#endif",i.map_vertex,i.color_vertex,i.skinbase_vertex,i.morphtarget_vertex,i.skinning_vertex,i.default_vertex,i.clip_vertex,i.fog_vertex,i.worldpos_vertex,i.lines_vertex,r.oit_vertex,f,i.PDSFX_end_vertex,"}"].join("\n"),fragmentShader:["#define LINEBASIC","#if defined( NEEDS_UVTOUSE ) || defined(PDSFX_USE_MAP)","vec2 uvToUse;","#endif",i.lines_pars_fragment,i.clip_pars_fragment,i.color_pars_fragment,i.map_pars_fragment,i.fog_pars_fragment,r.oit_pars_fragment,l,i.postprocess_pars_fragment,"void main() {","#ifdef PDSFX",i.PDSFX_map_fragment,i.PDSFX_mapping_fragment,"ComputeCommonValues();",i.PDSFX_discard_fragment,i.PDSFX_albedo_fragment,i.PDSFX_halfWidth_fragment_vertex,i.PDSFX_opacity_fragment,"#endif","#if defined(SELECTION_MATERIAL)","gl_FragColor = vec4( diffuse, 1.0 );","#else","gl_FragColor = vec4( diffuse, opacity );","#endif",i.lines_fragment,"#if defined( NEEDS_UVTOUSE ) || defined(PDSFX_USE_MAP)","uvToUse=vUv;","#endif",i.clip_fragment,i.uvmapping_fragment,i.map_fragment,i.alphatest_fragment,i.color_fragment,i.postprocess_fragment,i.linear_to_gamma_fragment,i.PDSFX_end_fragment,i.fog_fragment,i.backgroundviewmode_lowlight_fragment,r._debug_common_lineic_fragment,r.oit_fragment,s,"}"].join("\n")}}),define("DS/MaterialLibs/GradientBackgroundLibs",["DS/MaterialLibs/UniformsLib","DS/Shaders/DefaultShaders","DS/Visualization/ShaderChunk","DS/Visualization/UniformsUtils"],function(e,r,i,a){"use strict";var t={colors:{type:"fv3",value:[]},YUp:{type:"i",value:0},ratio:{type:"f",value:1}};return{GradientBackgroundLib2:{uniforms:a.merge([e.postprocess,t]),vertexShader:["#define GRADIENT_BACKGROUND2","uniform vec3 colors[2];","uniform int YUp;","uniform float ratio;","varying vec3 vColor;","void main() {","if (YUp == 0){","vColor = mix(colors[0], colors[1], smoothstep(-1.0, 1.0, position.z));","} else {","vColor = mix(colors[0], colors[1], smoothstep(-1.0, 1.0, position.y));","}",r.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["#define GRADIENT_BACKGROUND2","varying vec3 vColor;",i.postprocess_pars_fragment,"void main() {","gl_FragColor = vec4(vColor, 1.0);","gl_FragColor.xyz = convertToLinear(gl_FragColor.xyz);",i.postprocess_fragment,i.linear_to_gamma_fragment,"}"].join("\n")},GradientBackgroundLib3:{uniforms:a.merge([e.postprocess,t]),vertexShader:["#define GRADIENT_BACKGROUND3","uniform vec3 colors[3];","uniform int YUp;","varying vec3 vColor;","uniform float ratio;","void main() {","vec3 borderColor;","float a;","if (YUp == 0){","borderColor = mix(colors[2], colors[0], step(0.0, position.z));","a = sign(position.z) * position.z;","} else {","borderColor = mix(colors[2], colors[0], step(0.0, position.y));","a = sign(position.y) * position.y;","}","vColor = mix(colors[1], borderColor, a);",r.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["#define GRADIENT_BACKGROUND3","varying vec3 vColor;",i.postprocess_pars_fragment,"void main() {","gl_FragColor = vec4(vColor, 1.0);","gl_FragColor.xyz = convertToLinear(gl_FragColor.xyz);",i.postprocess_fragment,i.linear_to_gamma_fragment,"}"].join("\n")},GradientBackgroundLib4:{uniforms:a.merge([e.postprocess,t,{horizonHeight:{type:"f",value:0},skylineFading:{type:"f",value:0}}]),vertexShader:["#define GRADIENT_BACKGROUND4","uniform int YUp;","varying float vPositionZ;","uniform float ratio;","void main() {","if (YUp == 0){","vPositionZ = position.z;","} else {","vPositionZ = position.y;","}",r.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["#define GRADIENT_BACKGROUND4","uniform vec3 colors[4];","uniform float horizonHeight;","uniform float skylineFading;","varying float vPositionZ;",i.postprocess_pars_fragment,"void main() {","float positionSign = step(horizonHeight, vPositionZ);","vec3 centerColor = positionSign * colors[1] + ((1.0 - positionSign) * colors[3]);","vec3 borderColor = positionSign * colors[0] + ((1.0 - positionSign) * colors[2]);","float minHeight = positionSign * horizonHeight + ((1.0 - positionSign) * -1.0);","float maxHeight = positionSign + ((1.0 - positionSign) * horizonHeight);","vec3 color = mix(centerColor, borderColor, smoothstep(minHeight, maxHeight, vPositionZ));","if ((skylineFading > 0.0) && (positionSign == 1.0)) {"," color = vec3(smoothstep(horizonHeight, horizonHeight + skylineFading, vPositionZ));"," }","gl_FragColor = vec4(color, 1.0);","gl_FragColor.xyz = convertToLinear(gl_FragColor.xyz);",i.postprocess_fragment,i.linear_to_gamma_fragment,"}"].join("\n")}}}),define("DS/MaterialLibs/LatLongMapLib",["DS/MaterialLibs/UniformsLib","DS/Shaders/DefaultShaders","DS/Visualization/ShaderChunk","DS/Visualization/UniformsUtils","DS/Mesh/ThreeJS_Base"],function(e,r,i,a,t){"use strict";return{uniforms:a.merge([e.postprocess,{tEnvMap:{type:"t",value:null},tEnvMap2:{type:"t",value:null},envMapHDRSize:{type:"v2",value:new t.Vector4(2048,1024)},envMapHDRToMipsRatio:{type:"f",value:1},invScreenSize:{type:"v2",value:new t.Vector2},cameraSight:{type:"v3",value:new t.Vector3},cameraUp:{type:"v3",value:new t.Vector3},cameraRight:{type:"v3",value:new t.Vector3},startOffset:{type:"v2",value:new t.Vector2(0,0)},endOffset:{type:"v2",value:new t.Vector2(1,1)},ambienceMatrix:{type:"m4",value:new t.Matrix4},blurCoef:{type:"f",value:0},envMapExposure:{type:"f",value:1},ambient:{type:"c",value:new t.Color(16777215)},planeColor:{type:"c",value:new t.Color(16777215)},withPlane:{type:"f",value:0}}]),vertexShader:["#define LATLONGMAP","void main() {",r.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["#define LATLONGMAP","uniform sampler2D tEnvMap;","#if defined( ENVMAP2 ) ","uniform sampler2D tEnvMap2;","#endif","uniform mat4 ambienceMatrix;","uniform float blurCoef;","uniform float envMapExposure;","uniform vec3 ambient;","uniform vec3 planeColor;","uniform float withPlane;","uniform vec2 invScreenSize;","uniform vec3 cameraSight;","uniform vec3 cameraUp;","uniform vec3 cameraRight;","uniform vec2 startOffset;","uniform vec2 endOffset;","const float INV_PI = 0.31830988618379;","const float PI = 3.14159265359;","#if defined( HDR ) &&  !defined(HDR_FLOAT) ","uniform vec2 envMapHDRSize;","uniform float envMapHDRToMipsRatio;",r.rgbe_sample_methods,"vec4 sampleMipMapRoughness(vec2 uv, float mip, float coef, sampler2D map0, sampler2D map1, vec2 textureSize, vec2 texelSize) {","vec4 color1;","vec4 color2;","vec2 uv1;","vec2 uv2;","if (mip < 1.0) {","color1 = texture2DBilinearFromRGBE(map0, uv, textureSize, texelSize);","} else {","textureSize *= envMapHDRToMipsRatio * vec2(1.0,2.0);","texelSize /= envMapHDRToMipsRatio * vec2(1.0,2.0);","float level1 = clamp(floor(mip) - 1.0, 0.0, 4.0);","float t10 = pow(2.0, -floor(log2(level1 + 1.0)));","float t11 = 2.0 - (level1 + 2.0) * t10;","float t12 = 0.5 * t10;","uv1 = vec2(t11 + 1.5 * texelSize.x + (2.0 * t12 - 3.0 * texelSize.x) * uv.x, t12 + 1.5 * texelSize.x + (t12 - 3.0 * texelSize.x) * uv.y);","color1 = texture2DBilinearFromRGBE(map1, uv1, textureSize, texelSize);","}","float level2 = clamp(floor(mip), 0.0, 5.0);","float t20 = pow(2.0, -floor(log2(level2 + 1.0)));","float t21 = 2.0 - (level2 + 2.0) * t20;","float t22 = 0.5 * t20;","uv2 = vec2(t21 + 1.5 * texelSize.x + (2.0 * t22 - 3.0 * texelSize.x) * uv.x, t22 + 1.5 * texelSize.x + (t22 - 3.0 * texelSize.x) * uv.y);","color2 = texture2DBilinearFromRGBE(map1, uv2, textureSize, texelSize);","return mix(color1, color2, coef);","}","#endif",i.postprocess_pars_fragment,"void main() {","vec2 screenOffset = 2.0 * mix(startOffset, endOffset, gl_FragCoord.xy * invScreenSize) - 1.0;","vec3 dir = normalize(cameraSight + screenOffset.x * cameraRight + screenOffset.y * cameraUp);","dir = (ambienceMatrix * vec4(dir,0.0)).xyz;","#if defined( HDR ) && !defined(HDR_FLOAT) ","#else","dir.y *= -1.0;","#endif","float phi = atan(dir.y, dir.x);","float theta = acos(dir.z);","vec2 texelCoord = vec2(fract(0.5 + 0.5 * INV_PI * phi), 1.0 - INV_PI * theta);","float plane = step(texelCoord.y, 0.5) * withPlane;","vec3 planeColor2 = convertToLinear(planeColor.xyz) ;","gl_FragColor.w = 1.0 + plane * 0.4;","#if defined( HDR ) &&  !defined(HDR_FLOAT) ","vec2 texelSize = vec2(1.0 / envMapHDRSize);","#if defined( ENVMAP2 )","float mipValue = max(6.0 + 1.15 * log2(blurCoef + 0.0000001), 0.0);","float mipCoef = fract(mipValue);","if (mipValue > 6.0) {","mipValue = 6.0;","mipCoef = 1.0;","}","gl_FragColor.xyz = ((sampleMipMapRoughness( texelCoord, mipValue, mipCoef, tEnvMap, tEnvMap2, envMapHDRSize, texelSize ).xyz) * (1.0 -plane)) + (plane * planeColor2);","#else","gl_FragColor.xyz = ((texture2DBilinearFromRGBE( tEnvMap, texelCoord, envMapHDRSize, texelSize ).xyz) * (1.0 -plane)) + (plane * planeColor2);","#endif","#else","gl_FragColor.xyz = ((texture2D( tEnvMap, texelCoord ).xyz) * (1.0 -plane)) + (plane * planeColor2);","#endif","#if !defined( GAMMA_OUTPUT ) && defined( sRGB )","gl_FragColor.xyz = convertToLinear(gl_FragColor.xyz);","#endif","gl_FragColor.xyz *=envMapExposure;","gl_FragColor*= vec4(ambient, 1.0);",i.postprocess_fragment,"#if defined( GAMMA_OUTPUT ) && defined( HDR )",i.linear_to_gamma_fragment,"#endif","}"].join("\n")}}),define("DS/MaterialLibs/MeshPhongLib",["DS/Mesh/ThreeJS_Base","DS/MaterialLibs/UniformsLib","DS/Shaders/DefaultShaders","DS/Shaders/DeferrableShaders","DS/Visualization/ShaderChunk","DS/Visualization/UniformsUtils","DS/Materials/MeshPhongMaterial"],function(e,r,i,a,t,n,o){"use strict";var l=o.prototype.deferrable,f="",s="",p="",v="";return l&&(f=[a.depth_pars_vertex,a.picking_pars_vertex,a.picking_instancing_pars_vertex,a.highlight_pars_vertex,a.texcoord_pars_vertex].join("\n"),p=[a.depth_vertex,a.picking_vertex,a.picking_instancing_vertex,a.highlight_vertex,a.texcoord_vertex].join("\n"),s=[a.picking_pars_fragment,a.picking_instancing_pars_fragment,a.depth_pars_fragment,a.decal_normal_depth_pars_fragment,a.shadowmap_pars_fragment,a.highlight_pars_fragment,a.texcoord_pars_fragment].join("\n"),v=[a.picking_fragment,a.picking_instancing_fragment,a.depth_fragment_face,a.normal_fragment,a.normal_depth_fragment,a.shadowmap_fragment,a.highlight_fragment_face,a.texcoord_fragment].join("\n")),{uniforms:n.merge([r.common,r.bump,r.normalmap,r.lights,r.shadowmap,r.clipPlanes,{ambient:{type:"c",value:new e.Color(16777215)},emissive:{type:"c",value:new e.Color(0)},specular:{type:"c",value:new e.Color(1118481)},shininess:{type:"f",value:30},shininessInSpecMap:{type:"i",value:0},wrapRGB:{type:"v3",value:new e.Vector3(1,1,1)},reflectionCoef:{type:"f",value:0}},r.postprocess,l?r.deferred:{}]),vertexShader:["#define PHONG",i.normal_viewposition_pars_vertex,t.clip_pars_vertex,t.map_pars_vertex,t.envmap_pars_vertex,t.lights_phong_pars_vertex,t.color_pars_vertex,t.morphtarget_pars_vertex,t.skinning_pars_vertex,t.shadowmap_pars_vertex,t.fog_pars_vertex,a.oit_pars_vertex,f,"void main() {",t.PDSFX_start_vertex,t.map_vertex,t.color_vertex,t.morphnormal_vertex,t.skinbase_vertex,t.skinnormal_vertex,t.morphtarget_vertex,t.skinning_vertex,t.default_vertex_with_normal,t.defaultnormal_vertex,t.clip_vertex,t.fog_vertex,i.normal_viewposition_vertex,t.worldpos_vertex,t.envmap_vertex,t.lights_phong_vertex,t.shadowmap_vertex,a.oit_vertex,p,t.PDSFX_end_vertex,"}"].join("\n"),fragmentShader:["#define PHONG",t.PDSFX_albedo_pars_fragment,t.PDSFX_opacity_pars_fragment,"uniform vec3 ambient;",t.PDSFX_emissive_pars_fragment,t.PDSFX_specular_pars_fragment,"uniform float shininess;","uniform float reflectionCoef;","uniform bool shininessInSpecMap;","#if defined( NEEDS_UVTOUSE ) || defined(PDSFX_USE_MAP)","vec2 uvToUse;","#endif",t.clip_pars_fragment,t.color_pars_fragment,t.map_pars_fragment,t.envmap_pars_fragment,t.lights_phong_pars_fragment,t.shadowmap_pars_fragment,t.bumpmap_pars_fragment,t.normalmap_pars_fragment,t.specularmap_pars_fragment,t.fog_pars_fragment,a.oit_pars_fragment,s,t.postprocess_pars_fragment,"void main() {","#ifdef PDSFX",t.PDSFX_map_fragment,t.PDSFX_mapping_fragment,"ComputeCommonValues();",t.PDSFX_discard_fragment,t.PDSFX_albedo_fragment,t.PDSFX_opacity_fragment,t.PDSFX_emissive_fragment,t.PDSFX_specular_fragment,t.PDSFX_viewNormal_fragment,"vViewPosition = -ComputeViewPosition();","#endif","#if defined(SELECTION_MATERIAL)","gl_FragColor = vec4( vec3(1.0), 1.0 );","#else","gl_FragColor = vec4( vec3 ( 1.0 ), opacity );","#endif","#if defined( NEEDS_UVTOUSE ) || defined(PDSFX_USE_MAP)","uvToUse=vUv;","#endif",t.clip_fragment,t.uvmapping_fragment,t.map_fragment,t.alphatest_fragment,"float shininessValue = shininess;",t.specularmap_fragment,"#ifndef PHONG_FIRST_DIR_ONLY",t.lights_phong_fragment,"#else",t.lights_phong_firstdironly_fragment,"#endif",t.color_fragment,t.envmap_fragment,t.shadowmap_fragment,t.postprocess_fragment,t.linear_to_gamma_fragment,t.PDSFX_end_fragment,t.fog_fragment,t.backgroundviewmode_lowlight_fragment,a._debug_common_face_fragment,a.oit_fragment,v,"}"].join("\n")}});