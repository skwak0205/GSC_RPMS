define("DS/AdvancedSceneGraphNodes/InstancedSphereImpostorsNode",["DS/Visualization/ThreeJS_DS","DS/Visualization/Node3D","DS/Visualization/Mesh3D","DS/Mesh/MeshUtils"],function(e,t,i,o){"use strict";var r=t.extend({init:function(t){this._isIE11=null!=new RegExp("Trident/.*rv:([0-9]{1,}[.0-9]{0,})").exec(navigator.userAgent),this._name=t.name||"sphereImpostors",this._parent(this._name);var o=t.material?t.material:e.MaterialUtils.createShinyFaceMaterial({force:!0});o.transparent=!0;var r=this._createMaterial(o),n=t.nbInstances||1,a=null;a=this._isIE11?this._createCoarseImpostor(8,r):this._createFlatImpostor(6,r);for(var s=new i(a,""),c=t.positions,l=t.radii,v=t.colors,d=new e.Vector3(1/0,1/0,1/0),_=new e.Vector3(-1/0,-1/0,-1/0),u=new Float32Array(4*n),y=new Float32Array(2*n),f=0;f<n;f++)u[4*f]=c[3*f],u[4*f+1]=c[3*f+1],u[4*f+2]=c[3*f+2],u[4*f+3]=l[f],y[2*f]=Math.floor(255*v[4*f])+256*Math.floor(255*v[4*f+1])+65536*Math.floor(255*v[4*f+2]),y[2*f+1]=v[4*f+3],d.x=Math.min(d.x,c[3*f]-l[f]),d.y=Math.min(d.y,c[3*f+1]-l[f]),d.z=Math.min(d.z,c[3*f+2]-l[f]),_.x=Math.max(_.x,c[3*f]+l[f]),_.y=Math.max(_.y,c[3*f+1]+l[f]),_.z=Math.max(_.z,c[3*f+2]+l[f]);var C=(new e.Vector3).addVectors(d,_).multiplyScalar(.5),w=(new e.Vector3).addVectors(C,(new e.Vector3).subVectors(d,C).multiplyScalar(1.05)),p=(new e.Vector3).addVectors(C,(new e.Vector3).subVectors(_,C).multiplyScalar(1.05)),m=new e.Box3(w,p),x={data:u,type:"v4",isFlattened:!0,attribName:"instancePositionAndRadius"},h={data:y,type:"v2",isFlattened:!0,attribName:"instanceColor"};return s.setMaterial(r),s.setInstancingParameters(n,[x,h],"instance"),s.forceBoundingBox(m),this.addChild(s),this},_createFlatImpostor:function(t,i){var r=[],n=new e.BufferGeometryDS;n.drawingGroups=[];var a=3*t,s=new o.DrawingGroup(i,i,4,0,a);s.geometry=n,n.drawingGroups.push(s);var c,l=new Float32Array(3*(t+1)),v=0;l[v++]=0,l[v++]=0,l[v++]=0;for(var d=0;d<t;d++)c=d/t,l[v++]=Math.cos(2*c*Math.PI),l[v++]=Math.sin(2*c*Math.PI),l[v++]=0;n.vertexPositionArray=l;var _=new Uint16Array(a),u=0;for(d=0;d<t;d++)_[u++]=0,_[u++]=d+1,_[u++]=d+2>6?(d+2)%t:d+2;n.vertexIndexArray=_,r.push(n);var y=new e.Mesh(r,i);return y.matrixAutoUpdate=!1,y},_createCoarseImpostor:function(t,i){var r=[],n=new e.BufferGeometryDS;n.drawingGroups=[];var a=6*t*(t-1),s=new o.DrawingGroup(i,i,4,0,a);s.geometry=n,n.drawingGroups.push(s);var c=2+(t-1)*t,l=new Float32Array(3*c),v=0,d=0;l[v++]=0,l[v++]=0,l[v++]=-1;for(var _=0,u=0,y=0;y<t;y++)for(var f=-t/2+1;f<=t/2-1;f++)d=f/t,_=2*(y/t)*Math.PI,u=d*Math.PI,l[v++]=Math.cos(_)*Math.cos(u),l[v++]=Math.sin(_)*Math.cos(u),l[v++]=Math.sin(u);l[v++]=0,l[v++]=0,l[v++]=1,n.vertexPositionArray=l;var C=new Uint16Array(a);v=0;var w=0;for(y=0;y<t;y++){w=y===t-1?c-2:c-1,C[v++]=0,C[v++]=((y+1)*(t-1)+1)%w,C[v++]=y*(t-1)+1;for(f=1;f<t-1;f++)C[v++]=((y+1)*(t-1)+f)%w,C[v++]=y*(t-1)+f+1,C[v++]=y*(t-1)+f,C[v++]=((y+1)*(t-1)+f)%w,C[v++]=((y+1)*(t-1)+f+1)%w,C[v++]=y*(t-1)+f+1;C[v++]=((y+1)*(t-1)+t-1)%w,C[v++]=c-1,C[v++]=y*(t-1)+t-1}n.vertexIndexArray=C,r.push(n);var p=new e.Mesh(r,i);return p.matrixAutoUpdate=!1,p},_createMaterial:function(e){var t=e;t.activatePDSFX(),t.setPDSFXVaryings({viewCenterPos:{type:"v3"},radius:{type:"f"},radius2:{type:"f"},vaColor:{type:"v4"},rightAndLeft:{type:"v2"}}),t.setPDSFXGlobalShaderCode(["float _radius;","float _radius2;","vec4 instancePosition;"].join("\n"),["vec3 newViewPosition;","bool toDiscard;","bool isPerspective;","vec2 viewport;","vec3 intersectionWithSpherePERSP(in vec3 ray) {","vec3 cameraToCenter = viewCenterPos;","float adjacentInTriangle = dot(cameraToCenter, ray);","float distRayToCenter2 = dot(cameraToCenter, cameraToCenter) - adjacentInTriangle * adjacentInTriangle;","if (distRayToCenter2 > (radius*radius)) {","toDiscard = true;","return vec3(0.0,0.0,0.0);","}","float projToIntersection = sqrt(radius*radius - distRayToCenter2);","float cameraToIntersection = adjacentInTriangle - projToIntersection;","return cameraToIntersection * ray;","}","vec3 intersectionWithSphereORTHO(in vec3 ray) {","vec3 viewRayBase = vec3((2.0*(gl_FragCoord.xy/viewport.xy) - 1.0)*rightAndLeft.xy, 0.0);","vec2 projToCenter = viewCenterPos.xy - viewRayBase.xy;","float distRayToCenter2 = dot(projToCenter,projToCenter);","if (distRayToCenter2 > radius2) {","toDiscard = true;","return vec3(0.0,0.0,0.0);","}","float projToIntersection = sqrt(radius2 - distRayToCenter2);","vec3 projRayOnImpostor = vec3(viewRayBase.xy, viewCenterPos.z);","return projRayOnImpostor - projToIntersection*ray;","}"].join("\n"));var i={ComputeCommonValues:["void ComputeCommonValues() {","_radius = instancePositionAndRadius.w;","_radius2 = _radius * _radius;","instancePosition = vec4(instancePositionAndRadius.xyz, 0.0);","}"].join("\n"),ComputeVaryingValues:["void ComputeVaryingValues() {","radius = _radius;","radius2 = _radius2;","vec4 color;","color.a = instanceColor.y;","color.b = floor(instanceColor.x / 65536.0);","float tmp = instanceColor.x - color.b * 65536.0;","color.g = floor(tmp / 256.0);","color.r = floor(tmp - color.g * 256.0);","color.xyz /= 255.0;","#ifdef GAMMA_INPUT","vaColor = color * color;","#else","vaColor = color;","#endif","mat4 pMatrix = vGetProjectionMatrix();","rightAndLeft = vec2(1.0/pMatrix[0][0], 1.0/pMatrix[1][1]);","}"].join("\n")};this._isIE11?i.ProcessViewTangentSpace=["void ProcessViewTangentSpace(inout TangentSpace ioWorldViewTS) {","viewCenterPos = vec3(vGetViewMatrix()*vec4(instancePosition.xyz,1.0));","vec3 localPos = 1.1*_radius*vGetAttribPosition();","ioWorldViewTS.Position = vec3(computeModelViewPosition(vec4( instancePosition.xyz + localPos, 1.0)));","}"].join("\n"):i.ProcessViewTangentSpace=["void ProcessViewTangentSpace(inout TangentSpace ioWorldViewTS) {","vec3 localPos = vGetAttribPosition();","mat4 pMatrix = vGetProjectionMatrix();","bool isPersp = pMatrix[2][3] == -1.0;","float minScale;","viewCenterPos = vec3(vGetViewMatrix()*vec4(instancePosition.xyz,1.0));","if (isPersp) {","vec3 CR = - viewCenterPos;","float CR_L = length(CR);","float CR_L_2 = CR_L*CR_L;","float d = sqrt(CR_L_2 - _radius2);","vec3 CP = localPos;","float dotCRCP = dot(CR,CP);","vec3 CR_y = CR - dotCRCP*CP;","vec2 _R = vec2(dotCRCP, length(CR_y));","float _Y1 = _radius*(_radius*_R.y + d*_R.x)/CR_L_2;","float _X1 = (_radius2 - _Y1*_R.y)/_R.x;","float _Y2 = _radius*(_radius*_R.y - d*_R.x)/CR_L_2;","float _X2 = (_radius2 - _Y2*_R.y)/_R.x;","float minScale1 = abs(_radius2/_X1);","float minScale2 = abs(_radius2/_X2);","minScale = max(minScale1, minScale2);","float bonusCoeff = (minScale - _radius)*0.1547005/(0.4*_radius) + 1.0;","minScale = minScale*1.1547005*bonusCoeff;","minScale = min(_radius*1.8, minScale);","if (abs(dotCRCP) < 0.0001) minScale = _radius*1.1547;","} else {","minScale = _radius*1.1547;","}","ioWorldViewTS.Position = vec3( viewCenterPos + minScale * localPos);","}"].join("\n");var o={ComputeCommonValues:["void ComputeCommonValues() {","toDiscard = false;","mat4 pMatrix = vGetProjectionMatrix();","viewport = vec2(vGetViewportSize());","isPerspective = pMatrix[2][3] == -1.0;","if(isPerspective) {","vec3 ray = normalize(vGetViewPosition());","newViewPosition = intersectionWithSpherePERSP(ray);","} else {","vec3 ray = vec3(0.0, 0.0, -1.0);","newViewPosition = intersectionWithSphereORTHO(ray);","}","}"].join("\n"),ComputeDiscard:["bool ComputeDiscard() {","return toDiscard;","}"].join("\n"),ComputeAlbedo:["vec3 ComputeAlbedo() {","\treturn vaColor.xyz;","}"].join("\n"),ComputeViewNormal:["vec3 ComputeViewNormal() {","return normalize(newViewPosition - viewCenterPos);","}"].join("\n")};return this._isIE11?o.ComputeViewPosition=["vec3 ComputeViewPosition() {","return newViewPosition;","}"].join("\n"):o.ComputeViewPosition=["vec3 ComputeViewPosition() {","float linearDepth = -newViewPosition.z;","vec3 near_far= vGetNearFarLogFactor();","float near = near_far.x;","float far = near_far.y;","float fragDepth;","if (isPerspective) {","fragDepth = (1.0/linearDepth - 1.0/near)/(1.0/far - 1.0/near);","} else {","fragDepth = (linearDepth - near)/(far - near);","}","vSetFragDepth(fragDepth);","return newViewPosition;","}"].join("\n"),t.setPDSFXOverridableFunctions(i,o),t},setName:function(e){this._name=e}});return UWA.namespace("THREEDS/Nodes/InstancedSphereImpostorsNode",r)}),define("DS/AdvancedSceneGraphNodes/InstancedCylinderImpostorsNode",["DS/Visualization/ThreeJS_DS","DS/Visualization/Node3D","DS/Visualization/Mesh3D","DS/Mesh/MeshUtils"],function(e,t,i,o){"use strict";var r=t.extend({init:function(t){this._isIE11=null!=new RegExp("Trident/.*rv:([0-9]{1,}[.0-9]{0,})").exec(navigator.userAgent),this._name=t.name||"cylinderImpostors",this._parent(this._name);var o=t.material?t.material:e.MaterialUtils.createShinyFaceMaterial({force:!0});o.transparent=!0;var r=this._createMaterial(o),n=t.nbInstances||1,a=null;a=this._isIE11?this._createCoarseImpostor(6,r):this._createFlatImpostor(0,r);for(var s=new i(a,""),c=t.positions,l=t.radii,v=t.axes,d=t.colors,_=function(t,i,o,r){var n=o.dot(o),a=new e.Vector3(r*Math.sqrt(1-o.x*o.x/n),r*Math.sqrt(1-o.y*o.y/n),r*Math.sqrt(1-o.z*o.z/n)),s=(new e.Vector3).subVectors(t,a);s.min((new e.Vector3).subVectors(i,a));var c=(new e.Vector3).addVectors(t,a);return c.max((new e.Vector3).addVectors(i,a)),new e.Box3(s,c)},u=new e.Vector3(1/0,1/0,1/0),y=new e.Vector3(-1/0,-1/0,-1/0),f=new Float32Array(4*n),C=new Float32Array(2*n),w=new Float32Array(3*n),p=new e.Vector3,m=new e.Vector3,x=new e.Vector3,h=0;h<n;h++)f[4*h]=c[3*h],f[4*h+1]=c[3*h+1],f[4*h+2]=c[3*h+2],f[4*h+3]=l[h],w[3*h]=v[3*h],w[3*h+1]=v[3*h+1],w[3*h+2]=v[3*h+2],p.set(w[3*h],w[3*h+1],w[3*h+2]),x.addVectors(new e.Vector3(c[3*h],c[3*h+1],c[3*h+2]),new e.Vector3(.5*v[3*h],.5*v[3*h+1],.5*v[3*h+2])),m.subVectors(new e.Vector3(c[3*h],c[3*h+1],c[3*h+2]),new e.Vector3(.5*v[3*h],.5*v[3*h+1],.5*v[3*h+2])),A=_(m,x,p,l[h]),u.min(A.min),y.max(A.max),C[2*h]=Math.floor(255*d[4*h])+256*Math.floor(255*d[4*h+1])+65536*Math.floor(255*d[4*h+2]),C[2*h+1]=d[4*h+3];var P=(new e.Vector3).addVectors(u,y).multiplyScalar(.5),V=(new e.Vector3).addVectors(P,(new e.Vector3).subVectors(u,P).multiplyScalar(1.05)),g=(new e.Vector3).addVectors(P,(new e.Vector3).subVectors(y,P).multiplyScalar(1.05)),A=new e.Box3(V,g),D={data:f,type:"v4",isFlattened:!0,attribName:"instancePositionAndRadius"},M={data:w,type:"v3",isFlattened:!0,attribName:"cylinderAxis"},S={data:C,type:"v2",isFlattened:!0,attribName:"instanceColor"};return s.setMaterial(r),s.setInstancingParameters(n,[D,M,S],"instance"),s.forceBoundingBox(A),this.addChild(s),this},_createFlatImpostor:function(t){var i=[],r=new e.BufferGeometryDS;r.drawingGroups=[];var n=new o.DrawingGroup(t,t,4,0,6);n.geometry=r,r.drawingGroups.push(n);var a=new Float32Array([0,0,0,1,0,0,1,1,0,0,1,0]);r.vertexPositionArray=a;var s=new Uint16Array([0,1,2,0,2,3]);r.vertexIndexArray=s,i.push(r);var c=new e.Mesh(i,t);return c.matrixAutoUpdate=!1,c},_createCoarseImpostor:function(t,i){var r=[],n=new e.BufferGeometryDS;n.drawingGroups=[];var a=12*t,s=new o.DrawingGroup(i,i,4,0,a);s.geometry=n,n.drawingGroups.push(s);var c=2*t+2,l=new Float32Array(3*c),v=0,d=0;l[v++]=0,l[v++]=0,l[v++]=-1;for(var _=0;_<t;_++)d=_/t,l[v++]=Math.cos(2*d*Math.PI),l[v++]=Math.sin(2*d*Math.PI),l[v++]=-1,l[v++]=Math.cos(2*d*Math.PI),l[v++]=Math.sin(2*d*Math.PI),l[v++]=1;l[v++]=0,l[v++]=0,l[v++]=1,n.vertexPositionArray=l;var u=new Uint16Array(a),y=0;for(_=0;_<2*t;_+=2){var f=c-1;10===_&&(f=c-2),u[y++]=0,u[y++]=(_+3)%f,u[y++]=_+1,u[y++]=_+1,u[y++]=(_+3)%f,u[y++]=_+2,u[y++]=(_+3)%f,u[y++]=(_+4)%f,u[y++]=_+2,u[y++]=c-1,u[y++]=_+2,u[y++]=(_+4)%f}n.vertexIndexArray=u,r.push(n);var C=new e.Mesh(r,i);return C.matrixAutoUpdate=!1,C},_createMaterial:function(e){var t=e;t.activatePDSFX(),t.setPDSFXVaryings({viewCenterPos:{type:"v3"},radius:{type:"f"},radius2:{type:"f"},vaColor:{type:"v4"},viewAxis:{type:"v3"},half_height:{type:"f"},rightAndLeft:{type:"v2"}}),t.setPDSFXGlobalShaderCode(["vec3 _viewCenterPos;"].join("\n"),["vec3 viewPositionOnCylinder;","vec3 viewNormalOnCylinder;","bool toDiscard;","bool isPerspective;","vec2 viewport;","void intersectionWithCylinderPERSP() {","float minDistance;","float minDistance2;","vec3 viewPos = vGetViewPosition();","vec3 ray = normalize(viewPos);","vec3 cameraToCenter = viewCenterPos;","vec3 D = cross(ray, viewAxis);","float lengthD = length(D);","if (lengthD == 0.0) {","float adjacentInTriangle = dot(ray, cameraToCenter);","minDistance2 = dot(cameraToCenter, cameraToCenter) - adjacentInTriangle*adjacentInTriangle;","if (minDistance2 > radius2) {","\ttoDiscard = true;","\treturn;","}","viewNormalOnCylinder = -ray;","viewPositionOnCylinder = adjacentInTriangle*ray;","return;","}","D = normalize(D);","minDistance = abs(dot(-cameraToCenter, D));","if (minDistance > radius) {","\ttoDiscard = true;","\treturn;","}","float t = -dot(cross(-cameraToCenter, viewAxis), D)/lengthD;","vec3 O = normalize(cross(D, viewAxis));","float s = abs(sqrt(radius2 - minDistance*minDistance)/dot(ray, O));","vec3 intersection_in = (t-s)*ray;","vec3 intersection_out = (t+s)*ray;","vec3 intersectionToCenter_in = viewCenterPos - intersection_in;","vec3 intersectionToCenter_out = viewCenterPos - intersection_out;","float dot_in_axis = abs(dot(intersectionToCenter_in, viewAxis));","if (dot_in_axis > half_height) {","if (abs(dot(intersectionToCenter_out, viewAxis)) > half_height && ","dot(intersectionToCenter_in, viewAxis)*dot(intersectionToCenter_out, viewAxis) > 0.0) {","toDiscard = true;","return;","}","float diff = dot_in_axis - half_height;","float _dot = dot(ray, viewAxis);","viewNormalOnCylinder = - sign(_dot) * viewAxis;","float x;","x = diff/abs(_dot);","viewPositionOnCylinder = intersection_in + x*ray;","return;","} ","vec3 intersectionProj;","intersectionProj = viewCenterPos + dot(-intersectionToCenter_in, viewAxis)*viewAxis;","viewNormalOnCylinder = normalize(intersection_in - intersectionProj);","viewPositionOnCylinder = intersection_in;","}","void intersectionWithCylinderORTHO() {","float minDistance;","vec3 ray = vec3(0.0,0.0, -1.0);","vec3 viewRayBase = vec3((2.0*(gl_FragCoord.xy/viewport.xy) - 1.0)*rightAndLeft.xy, 0.0);","vec3 cameraToCenter = vec3(0.0,0.0,viewCenterPos.z);","vec3 D = cross(ray, viewAxis);","float lengthD = length(D);","if (lengthD == 0.0) {","minDistance = length(viewRayBase.xy - viewCenterPos.xy);","if (minDistance > radius) {","\ttoDiscard = true;","\treturn;","}","viewNormalOnCylinder = -ray;","viewPositionOnCylinder = viewRayBase + cameraToCenter + vec3(0.0,0.0,half_height);","return;","}","D = normalize(D);","minDistance = abs(dot(viewCenterPos - viewRayBase, D));","if (minDistance > radius) {","\ttoDiscard = true;","\treturn;","}","float t = -dot(cross(viewRayBase - viewCenterPos, viewAxis), D)/lengthD;","vec3 O = normalize(cross(D, viewAxis));","float s = abs(sqrt(radius2 - minDistance*minDistance)/dot(ray, O));","vec3 intersection_in = viewRayBase + (t-s)*ray;","vec3 intersection_out = viewRayBase + (t+s)*ray;","vec3 intersectionToCenter_in = viewCenterPos - intersection_in;","vec3 intersectionToCenter_out = viewCenterPos - intersection_out;","float dot_in_axis = abs(dot(intersectionToCenter_in, viewAxis));","if (dot_in_axis > half_height) {","if (abs(dot(intersectionToCenter_out, viewAxis)) > half_height && ","dot(intersectionToCenter_in, viewAxis)*dot(intersectionToCenter_out, viewAxis) > 0.0) {","toDiscard = true;","return;","}","float diff = dot_in_axis - half_height;","float _dot = dot(ray, viewAxis);","viewNormalOnCylinder = - sign(_dot) * viewAxis;","float x;","x = diff/abs(_dot);","viewPositionOnCylinder = intersection_in + x*ray;","return;","} ","vec3 intersectionProj;","intersectionProj = viewCenterPos + dot(-intersectionToCenter_in, viewAxis)*viewAxis;","viewNormalOnCylinder = normalize(intersection_in - intersectionProj);","viewPositionOnCylinder = intersection_in;","}"].join("\n"));var i={ComputeCommonValues:["void ComputeCommonValues() {","radius = instancePositionAndRadius.w;","radius2 = radius * radius;","viewAxis = normalize(vec3(vGetViewMatrix()*vec4(cylinderAxis, 0.0)));","half_height = length(cylinderAxis)/2.0;","viewCenterPos = vec3(vGetViewMatrix() * vec4(instancePositionAndRadius.xyz, 1.0));","}"].join("\n"),ComputeVaryingValues:["void ComputeVaryingValues() {","vec4 color;","color.a = instanceColor.y;","color.b = floor(instanceColor.x / 65536.0);","float tmp = instanceColor.x - color.b * 65536.0;","color.g = floor(tmp / 256.0);","color.r = floor(tmp - color.g * 256.0);","color.xyz /= 255.0;","#ifdef GAMMA_INPUT","vaColor = color * color;","#else","vaColor = color;","#endif","mat4 pMatrix = vGetProjectionMatrix();","rightAndLeft = vec2(1.0/pMatrix[0][0], 1.0/pMatrix[1][1]);","}"].join("\n")};this._isIE11?i.ProcessViewTangentSpace=["void ProcessViewTangentSpace(inout TangentSpace ioWorldViewTS) {","vec3 zVec = vec3(0.0,0.0,1.0);","vec3 n_cylinderAxis = normalize(cylinderAxis);","vec3 rotAxis = cross(n_cylinderAxis, zVec);","float s = length(rotAxis);","float c = dot(n_cylinderAxis, zVec);","float t = 1.0 - c;","rotAxis = normalize(rotAxis);","float x = rotAxis.x;","float y = rotAxis.y;","float z = rotAxis.z;","float tx = t*x;","float ty = t*y;","mat4 rotMat = mat4(","vec4(tx * x + c, tx * y - s * z, tx * z + s * y, 0),","vec4(tx * y + s * z, ty * y + c, ty * z - s * x, 0),","vec4(tx * z - s * y, ty * z + s * x, t * z * z + c, 0),","vec4(0.0,0.0,0.0,1.0)",");","vec3 localPosition = vGetAttribPosition();","localPosition.xy *= radius*1.1547;","localPosition.z *= half_height;","localPosition = vec3(rotMat*vec4(localPosition,1.0));","ioWorldViewTS.Position = vec3(computeModelViewPosition(vec4(instancePositionAndRadius.xyz + localPosition, 1.0)));","}"].join("\n"):i.ProcessViewTangentSpace=["void ProcessViewTangentSpace(inout TangentSpace ioWorldViewTS) {","vec3 localPosition = vGetAttribPosition() - vec3(0.5, 0.5, 0.0);","mat4 pMatrix = vGetProjectionMatrix();","bool isPersp = pMatrix[2][3] == -1.0;","vec3 _z;","_z = -sign(dot( -viewCenterPos, viewAxis))*viewAxis;","vec3 C0 = viewCenterPos - half_height*_z;","vec3 C1 = viewCenterPos + half_height*_z;","if (isPersp) {","vec3 v =  - C0;","vec3 _x = normalize(cross(v, _z));","vec3 _y = normalize(cross(_z, _x));","vec3 y_1;","vec3 x_2;","float cos_alpha;","float sin_alpha;","float tan_alpha;","vec3 O_1 = C0 + dot(-C0, _y)*_y;","float OC_L = length(C0 - O_1);","sin_alpha = radius/OC_L;","bool rectBillboard = true;","if (sin_alpha <= 0.5) {","cos_alpha = sqrt(1.0 - sin_alpha*sin_alpha);","tan_alpha = sin_alpha/cos_alpha;","y_1 = radius*_y;","x_2 = (OC_L -radius)*tan_alpha*_x;","rectBillboard = false;","}","float flatCylCoeff = -1.0;","vec3 C0Plus_y = C0+radius*_y;","float z_plane = viewCenterPos.z;","vec3 C0_n = normalize(C0);","vec3 C0_plane = (z_plane/C0_n.z) * C0_n;","vec3 C1_n = normalize(C1);","vec3 C1_plane = (z_plane/C1_n.z) * C1_n;","vec3 Y_y_n = normalize(C0Plus_y);","vec3 Y_plane = (z_plane/Y_y_n.z) * Y_y_n;","float dot_C0_C1_y = dot(C1_plane - C0_plane, Y_plane - C0_plane);","if (dot_C0_C1_y*_y.z < 0.0)","if (dot_C0_C1_y < 0.0) flatCylCoeff = 1.0;","vec3 newMvPosition;","float sgn = sign(localPosition.y);","float inc_coeff = 1.03;","_x*=inc_coeff;","_y*=inc_coeff;","y_1*=inc_coeff;","x_2*=inc_coeff;","if (localPosition.x < 0.0) {","if (rectBillboard) {","newMvPosition = C0 - radius*_y + sgn* radius*_x;","}","else newMvPosition = C0 + flatCylCoeff * radius*_y + sgn* tan_alpha*(radius+OC_L)*_x;","} else {","vec3 point;","if (rectBillboard) {","vec3 ray = normalize(C1 + radius*_y);","float len = dot(viewAxis, C0)/dot(viewAxis, ray);","vec3 intsc = len*ray;","if (dot(intsc, _y) > dot(C0Plus_y, _y)) {","point = intsc;","} else {","point = C0Plus_y;","}","newMvPosition = point + sgn* radius*_x;","}","else newMvPosition = C1 + y_1 + sgn* x_2;","}","ioWorldViewTS.Position = newMvPosition;","} else {","vec3 _y = normalize(vec3(C1.xy-C0.xy,0.0));","vec3 _x = vec3(-_y.y, _y.x, 0.0);","float medZ = 0.5*(C0.z+C1.z);","C0.z = medZ;","C1.z = medZ;","float coeff = 1.03;","float y_radius = 0.0;","if (viewAxis.z != 0.0) {","vec3 orthAxis = normalize(vec3(viewAxis.xy, -dot(viewAxis.xy,viewAxis.xy)/viewAxis.z));","y_radius = radius*abs(dot(orthAxis, _y));","}","if (localPosition.x < 0.0) {","ioWorldViewTS.Position = C0 +coeff*(sign(localPosition.y) *_x*radius - _y*y_radius);","} else {","ioWorldViewTS.Position = C1 + coeff*(sign(localPosition.y) *_x*radius + _y*y_radius);","}","}","}"].join("\n");var o={ComputeCommonValues:["void ComputeCommonValues() {","mat4 pMatrix = vGetProjectionMatrix();","isPerspective = pMatrix[2][3] == -1.0;","toDiscard = false;","viewport = vec2(vGetViewportSize());","if (isPerspective) intersectionWithCylinderPERSP();","else intersectionWithCylinderORTHO();","}"].join("\n"),ComputeDiscard:["bool ComputeDiscard() {","return toDiscard;","}"].join("\n"),ComputeAlbedo:["vec3 ComputeAlbedo() {","\treturn vaColor.xyz;","}"].join("\n"),ComputeViewNormal:["vec3 ComputeViewNormal() {","return viewNormalOnCylinder;","}"].join("\n")};return this._isIE11?o.ComputeViewPosition=["vec3 ComputeViewPosition() {","return viewPositionOnCylinder;","}"].join("\n"):o.ComputeViewPosition=["vec3 ComputeViewPosition() {","float linearDepth = -viewPositionOnCylinder.z;","vec3 near_far = vGetNearFarLogFactor();","float near = near_far.x;","float far = near_far.y;","float fragDepth;","if (isPerspective) {","fragDepth = (1.0/linearDepth - 1.0/near)/(1.0/far - 1.0/near);","} else {","fragDepth = (linearDepth - near)/(far - near);","}","vSetFragDepth(fragDepth);","return viewPositionOnCylinder;","}"].join("\n"),t.setPDSFXOverridableFunctions(i,o),t},setName:function(e){this._name=e}});return UWA.namespace("THREEDS/Nodes/InstancedCylinderImpostorsNode",r)});