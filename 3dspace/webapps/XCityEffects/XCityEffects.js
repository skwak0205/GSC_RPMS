define("DS/XCityEffects/AtmosphereShader",["DS/Visualization/ThreeJS_DS"],function(e){"use strict";return{FinalBlending:{defines:{POSTPRO:1},uniforms:{tDiffuse:{type:"t",value:null},camPos:{type:"v3",value:new e.Vector3},sunPos:{type:"v3",value:new e.Vector3},turbidity:{type:"f",value:0},rayleigh:{type:"f",value:0},mieCoefficient:{type:"f",value:0},mieDirectionalG:{type:"f",value:0},density:{type:"f",value:0},showroom:{type:"f",value:0},up:{type:"v3",value:new e.Vector3(0,0,1)},totalMie:{type:"v3",value:new e.Vector3},totalRayleigh:{type:"v3",value:new e.Vector3},mieCoefficientS:{type:"f",value:0},sunEClamp:{type:"f",value:0},tNormalDepth:{type:"t",value:null},realProjectionMatrixInverse:{type:"m4",value:new e.Matrix4},realViewMatrix:{type:"m4",value:new e.Matrix4}},vertexShader:["varying vec2 vUv;","uniform float rayleigh;","uniform float turbidity;","uniform float mieCoefficient;","uniform float sunEClamp;","uniform vec3 sunPos;","uniform vec3 up;","uniform vec3 totalMie;","uniform vec3 totalRayleigh;","varying vec3 betaR;","varying vec3 betaM;","varying vec3 sunDir;","varying float sunE;","varying float zenithAngle;","const float e = 2.71828182845904523536028747135266249775724709369995957;","const float EE = 100.0;","const float cutoffAngle = 1.6110731556870734;","float sunIntensity( float zenithAngleCos ) {","\treturn EE * max( 0.0, 1.0 - pow( e, -( ( cutoffAngle - acos( zenithAngleCos ) ) * 0.666666667 ) ) );","}","void main() {","   gl_Position = projectionMatrix * (modelViewMatrix * vec4( position, 1.0 ));","   vUv = uv;","sunDir = normalize(sunPos);","zenithAngle = dot(up, sunDir);","sunE = sunIntensity(zenithAngle) * sunEClamp;","// rayleigh coefficients","betaR = totalRayleigh;","// mie coefficients","betaM = totalMie;","}"].join("\n"),fragmentShader:["uniform sampler2D tDiffuse;","uniform sampler2D tNormalDepth;","uniform vec3 camPos;","uniform vec3 sunPos;","uniform float turbidity;","uniform float rayleigh;","uniform float mieCoefficient;","uniform float mieDirectionalG;","uniform float density;","uniform float showroom;","uniform float mieCoefficientS;","uniform mat4 realProjectionMatrixInverse;","uniform mat4 realViewMatrix;","varying vec2 vUv;","varying vec3 betaR;","varying vec3 betaM;","varying float sunE;","varying float zenithAngle;","varying vec3 sunDir;","float rayleighPhase(float cosTheta)","{","return 0.05968310365946075 * (1.0 + pow(cosTheta, 2.0));","}","float hgPhase(float cosTheta, float g)","{","float g2 = pow(g, 2.0);","float inv = 1.0 / pow(1.0 - 2.0*g*cosTheta + g2, 1.5);","return 0.07957747154594767 * ((1.0 - g2) * inv);","}","// Filmic ToneMapping","float A = 0.15;","float B = 0.50;","float C = 0.10;","float D = 0.20;","float E = 0.02;","float F = 0.30;","const float whiteScale = 1.0748724675633854;","vec3 Uncharted2Tonemap(vec3 x)","{","return ((x*(A*x+0.05)+0.004)/(x*(A*x+B)+0.06))-0.0666666667;","}","void main() {","  float z = texture2D(tNormalDepth, vUv).w;","  vec4 posProjected = vec4((vUv * 2.0) - 1.0, (z * 2.0) - 1.0, 1.0);","  vec4 posVS = realProjectionMatrixInverse * posProjected;","  posVS.xyzw /= posVS.w;","  vec4 worldPosition = realViewMatrix * posVS;","  worldPosition /= worldPosition.w;","#if (POSTPRO == 1)","vec3 scenCol = (texture2D(tDiffuse, vUv)).xyz;","float d = density;","if (zenithAngle < 0.3 && turbidity > 10.0)","{","d *= 0.1;","}","float turbdityDensity = pow(turbidity,d);","vec3 rayDir = camPos.xyz-worldPosition.xyz ;","float dist  = clamp(length(rayDir),0.0,10000.0);","float turbidityS = 1.0-smoothstep(0.0,20.0,turbidity);","vec3 betaRM = betaR + betaM;","float cos0 = dot(sunDir, normalize(rayDir));","// combined extinction factor (absorption + outscattering)","vec3 Fex = exp(-pow((betaRM*(dist*(max(1.0,turbdityDensity)))), vec3(max(1.0,2.0*(turbidityS)))));","vec3 betaRTheta = betaR * rayleighPhase(cos0);","vec3 betaMTheta =  betaM * hgPhase(cos0, mieDirectionalG);","vec3 RMthetha = betaRTheta + betaMTheta;","vec3 thetaONbeta = ((RMthetha) / (betaRM));","vec3 Lin = pow(sunE * thetaONbeta * (1.0-Fex), vec3(1.5));","Lin *= mix(vec3(1.0), pow(sunE * thetaONbeta * Fex, vec3(.5)),clamp(pow(1.0-zenithAngle,5.0),0.,1.0));","vec3 curr = clamp(Uncharted2Tonemap(log2(1.366)*Lin), vec3(0.0), vec3(1.0));","vec3 colorTMP = curr*whiteScale;","vec3 retColor = pow(colorTMP,vec3(0.4545));","vec3 col = (scenCol*Fex)+retColor;","gl_FragColor = vec4(col,1.0);","#else","gl_FragColor = vec4(vec3(0.0, 1.0);","#endif","}"].join("\n")}}}),define("DS/XCityEffects/AltitudeShader",["DS/Visualization/ThreeJS_DS"],function(e){"use strict";return{FinalBlending:{defines:{POSTPRO:1},uniforms:{tDiffuse:{type:"t",value:null},zBuffer:{type:"t",value:null},realProjectionMatrixInverse:{type:"m4",value:new e.Matrix4},realViewMatrixInverse:{type:"m4",value:new e.Matrix4},zRef:{type:"f",value:0}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;","gl_Position = projectionMatrix * ( viewMatrix * (modelMatrix * vec4( position, 1.0 )));","}"].join("\n"),fragmentShader:["uniform sampler2D tDiffuse;","uniform sampler2D zBuffer;","uniform mat4 realProjectionMatrixInverse;","uniform mat4 realViewMatrixInverse;","uniform float zRef;","varying vec2 vUv;","void main() {","  vec4 zColor = texture2D( zBuffer, vUv );","  vec4 color = texture2D(  tDiffuse, vUv );","  float z = zColor.a;","  vec4 pointSS = vec4(vUv * 2.0 - 1.0, z * 2.0 - 1.0, 1.0);","  vec4 pointVS = realProjectionMatrixInverse * pointSS;","  pointVS /= pointVS.w;","  vec4 pointWS = realViewMatrixInverse * pointVS;","  vec3 fragWorldPos = pointWS.xyz / pointWS.w;"," float epsilon = 0.25;"," vec4 center = vec4(255.0/255.0, 0.0/255.0, 0.0/255.0, 1.0);"," vec4 jaune = vec4(255.0/255.0, 245.0/255.0, 62.0/255.0, 1.0);","if (fragWorldPos.z >= (zRef - epsilon) && fragWorldPos.z <= (zRef + epsilon))","{","float colorRatio = (abs(zRef - fragWorldPos.z) / abs(1.0*epsilon));","gl_FragColor = center;","}","else {","  gl_FragColor = vec4(color);","}","}"].join("\n")}}}),define("DS/XCityEffects/ViewshedShader",["DS/Visualization/ThreeJS_DS"],function(e){"use strict";var s=[{uniforms:{tNormalDepth:{type:"t",value:null},tDepthCameraViewshed0:{type:"t",value:null},realProjectionMatrixInverse:{type:"m4",value:new e.Matrix4},realViewMatrix:{type:"m4",value:new e.Matrix4},viewshedMatrix0:{type:"m4",value:new e.Matrix4},bias0:{type:"f",value:5e-6}},vertexShader:["varying vec2 vUv;","void main() {","  vUv = uv;","   gl_Position = projectionMatrix * (viewMatrix * (modelMatrix * vec4( position, 1.0 )));","}"].join("\n"),fragmentShader:["uniform mat4 realProjectionMatrixInverse;","uniform mat4 realViewMatrix;","uniform mat4 viewshedMatrix0;","uniform float bias0;","uniform sampler2D tNormalDepth;","uniform sampler2D tDepthCameraViewshed0;","varying vec2 vUv;","#define NB_VIEWSHED_CAMERA 1","void main() {","  float stateVisible = 0.0;","  float stateNotVisible = 0.0;","  float coef = 1.0/float(NB_VIEWSHED_CAMERA);","  vec2 uvSample = vUv;","  // Compute world space position of the current pixel","  float z = texture2D(tNormalDepth, uvSample).w;","  vec4 posProjected = vec4(uvSample * 2.0 - 1.0, 2.0 * z - 1.0, 1.0);","  vec4 posVS = realProjectionMatrixInverse * posProjected;","  posVS.xyzw /= posVS.w;","  vec4 worldPosition = realViewMatrix * posVS;","  worldPosition /= worldPosition.w;","    // Project it to the camera viewshed space","    vec4 viewshedCoord = viewshedMatrix0 * worldPosition;","    viewshedCoord /= viewshedCoord.w;","    bvec4 inFrustumVec = bvec4 ( viewshedCoord.x > 0.001, viewshedCoord.x < 0.999, viewshedCoord.y > 0.001, viewshedCoord.y < 0.999 );","    bool inFrustum = all( inFrustumVec );","    bvec3 frustumTestVec = bvec3( inFrustum, viewshedCoord.z < 1.0, viewshedCoord.z > 0.0 );","    bool frustumTest = all( frustumTestVec );","    if ( frustumTest ) {","      float viewshedDepth = texture2D(tDepthCameraViewshed0, viewshedCoord.xy).w;","      if (viewshedDepth == 0.0) {}","      else if (viewshedDepth < viewshedCoord.z-bias0) {","        stateNotVisible += coef; // in frustum + invisible","      }","      else {","        stateVisible += coef; // in frustum + visible","      }","    }","  gl_FragColor = vec4(stateVisible, stateNotVisible, 0.0, 1.0);","}"].join("\n")},{uniforms:{tNormalDepth:{type:"t",value:null},tDepthCameraViewshed0:{type:"t",value:null},tDepthCameraViewshed1:{type:"t",value:null},realProjectionMatrixInverse:{type:"m4",value:new e.Matrix4},realViewMatrix:{type:"m4",value:new e.Matrix4},viewshedMatrix0:{type:"m4",value:new e.Matrix4},viewshedMatrix1:{type:"m4",value:new e.Matrix4},bias0:{type:"f",value:5e-6},bias1:{type:"f",value:5e-6}},vertexShader:["varying vec2 vUv;","void main() {","  vUv = uv;","   gl_Position = projectionMatrix * (viewMatrix * (modelMatrix * vec4( position, 1.0 )));","}"].join("\n"),fragmentShader:["uniform mat4 realProjectionMatrixInverse;","uniform mat4 realViewMatrix;","uniform mat4 viewshedMatrix0;","uniform mat4 viewshedMatrix1;","uniform float bias0;","uniform float bias1;","uniform sampler2D tNormalDepth;","uniform sampler2D tDepthCameraViewshed0;","uniform sampler2D tDepthCameraViewshed1;","varying vec2 vUv;","#define NB_VIEWSHED_CAMERA 2","void main() {","  float stateVisible = 0.0;","  float stateNotVisible = 0.0;","  float coef = 1.0/float(NB_VIEWSHED_CAMERA);","  vec2 uvSample = vUv;","  // Compute world space position of the current pixel","  float z = texture2D(tNormalDepth, uvSample).w;","  vec4 posProjected = vec4(uvSample * 2.0 - 1.0, 2.0 * z - 1.0, 1.0);","  vec4 posVS = realProjectionMatrixInverse * posProjected;","  posVS.xyzw /= posVS.w;","  vec4 worldPosition = realViewMatrix * posVS;","  worldPosition /= worldPosition.w;","  // FIRST PASS","    // Project it to the camera viewshed space","    vec4 viewshedCoord = viewshedMatrix0 * worldPosition;","    viewshedCoord /= viewshedCoord.w;","    bvec4 inFrustumVec = bvec4 ( viewshedCoord.x > 0.001, viewshedCoord.x < 0.999, viewshedCoord.y > 0.001, viewshedCoord.y < 0.999 );","    bool inFrustum = all( inFrustumVec );","    bvec2 frustumTestVec = bvec2( inFrustum, viewshedCoord.z < 1.0 );","    bool frustumTest = all( frustumTestVec );","    if ( frustumTest ) {","      float viewshedDepth = texture2D(tDepthCameraViewshed0, viewshedCoord.xy).w;","      if (viewshedDepth == 0.0) {}","      else if (viewshedDepth < viewshedCoord.z-bias0) {","        stateNotVisible += coef; // in frustum + invisible","      }","      else {","        stateVisible += coef; // in frustum + visible","      }","    }","  // SECOND PASS","    // Project it to the camera viewshed space","    viewshedCoord = viewshedMatrix1 * worldPosition;","    viewshedCoord /= viewshedCoord.w;","    inFrustumVec = bvec4 ( viewshedCoord.x > 0.001, viewshedCoord.x < 0.999, viewshedCoord.y > 0.001, viewshedCoord.y < 0.999 );","    inFrustum = all( inFrustumVec );","    frustumTestVec = bvec2( inFrustum, viewshedCoord.z < 1.0 );","    frustumTest = all( frustumTestVec );","    if ( frustumTest ) {","      float viewshedDepth = texture2D(tDepthCameraViewshed1, viewshedCoord.xy).w;","      if (viewshedDepth == 0.0) {}","      else if (viewshedDepth < viewshedCoord.z-bias1) {","        stateNotVisible += coef; // in frustum + invisible","      }","      else {","        stateVisible += coef; // in frustum + visible","      }","    }","  gl_FragColor = vec4(stateVisible, stateNotVisible, 0.0, 1.0);","}"].join("\n")},{uniforms:{tNormalDepth:{type:"t",value:null},tDepthCameraViewshed0:{type:"t",value:null},tDepthCameraViewshed1:{type:"t",value:null},tDepthCameraViewshed2:{type:"t",value:null},realProjectionMatrixInverse:{type:"m4",value:new e.Matrix4},realViewMatrix:{type:"m4",value:new e.Matrix4},viewshedMatrix0:{type:"m4",value:new e.Matrix4},viewshedMatrix1:{type:"m4",value:new e.Matrix4},viewshedMatrix2:{type:"m4",value:new e.Matrix4},bias0:{type:"f",value:5e-6},bias1:{type:"f",value:5e-6},bias2:{type:"f",value:5e-6}},vertexShader:["varying vec2 vUv;","void main() {","  vUv = uv;","   gl_Position = projectionMatrix * (viewMatrix * (modelMatrix * vec4( position, 1.0 )));","}"].join("\n"),fragmentShader:["uniform mat4 realProjectionMatrixInverse;","uniform mat4 realViewMatrix;","uniform mat4 viewshedMatrix0;","uniform mat4 viewshedMatrix1;","uniform mat4 viewshedMatrix2;","uniform float bias0;","uniform float bias1;","uniform float bias2;","uniform sampler2D tNormalDepth;","uniform sampler2D tDepthCameraViewshed0;","uniform sampler2D tDepthCameraViewshed1;","uniform sampler2D tDepthCameraViewshed2;","varying vec2 vUv;","#define NB_VIEWSHED_CAMERA 3","void main() {","  float stateVisible = 0.0;","  float stateNotVisible = 0.0;","  float coef = 1.0/float(NB_VIEWSHED_CAMERA);","  vec2 uvSample = vUv;","  // Compute world space position of the current pixel","  float z = texture2D(tNormalDepth, uvSample).w;","  vec4 posProjected = vec4(uvSample * 2.0 - 1.0, 2.0 * z - 1.0, 1.0);","  vec4 posVS = realProjectionMatrixInverse * posProjected;","  posVS.xyzw /= posVS.w;","  vec4 worldPosition = realViewMatrix * posVS;","  worldPosition /= worldPosition.w;","  // FIRST PASS","    // Project it to the camera viewshed space","    vec4 viewshedCoord = viewshedMatrix0 * worldPosition;","    viewshedCoord /= viewshedCoord.w;","    bvec4 inFrustumVec = bvec4 ( viewshedCoord.x > 0.001, viewshedCoord.x < 0.999, viewshedCoord.y > 0.001, viewshedCoord.y < 0.999 );","    bool inFrustum = all( inFrustumVec );","    bvec2 frustumTestVec = bvec2( inFrustum, viewshedCoord.z < 1.0 );","    bool frustumTest = all( frustumTestVec );","    if ( frustumTest ) {","      float viewshedDepth = texture2D(tDepthCameraViewshed0, viewshedCoord.xy).w;","      if (viewshedDepth == 0.0) {}","      else if (viewshedDepth < viewshedCoord.z-bias0) {","        stateNotVisible += coef; // in frustum + invisible","      }","      else {","        stateVisible += coef; // in frustum + visible","      }","    }","  // SECOND PASS","    // Project it to the camera viewshed space","    viewshedCoord = viewshedMatrix1 * worldPosition;","    viewshedCoord /= viewshedCoord.w;","    inFrustumVec = bvec4 ( viewshedCoord.x > 0.001, viewshedCoord.x < 0.999, viewshedCoord.y > 0.001, viewshedCoord.y < 0.999 );","    inFrustum = all( inFrustumVec );","    frustumTestVec = bvec2( inFrustum, viewshedCoord.z < 1.0 );","    frustumTest = all( frustumTestVec );","    if ( frustumTest ) {","      float viewshedDepth = texture2D(tDepthCameraViewshed1, viewshedCoord.xy).w;","      if (viewshedDepth == 0.0) {}","      else if (viewshedDepth < viewshedCoord.z-bias1) {","        stateNotVisible += coef; // in frustum + invisible","      }","      else {","        stateVisible += coef; // in frustum + visible","      }","    }","  // THIRD PASS","    // Project it to the camera viewshed space","    viewshedCoord = viewshedMatrix2 * worldPosition;","    viewshedCoord /= viewshedCoord.w;","    inFrustumVec = bvec4 ( viewshedCoord.x > 0.001, viewshedCoord.x < 0.999, viewshedCoord.y > 0.001, viewshedCoord.y < 0.999 );","    inFrustum = all( inFrustumVec );","    frustumTestVec = bvec2( inFrustum, viewshedCoord.z < 1.0 );","    frustumTest = all( frustumTestVec );","    if ( frustumTest ) {","      float viewshedDepth = texture2D(tDepthCameraViewshed2, viewshedCoord.xy).w;","      if (viewshedDepth == 0.0) {}","      else if (viewshedDepth < viewshedCoord.z-bias2) {","        stateNotVisible += coef; // in frustum + invisible","      }","      else {","        stateVisible += coef; // in frustum + visible","      }","    }","  gl_FragColor = vec4(stateVisible, stateNotVisible, 0.0, 1.0);","}"].join("\n")}];return{FinalBlending:{defines:{POSTPRO:1},uniforms:{tDiffuse:{type:"t",value:null},tDiffuse2:{type:"t",value:null},strength:{type:"f",value:0},nbViewshedCamera:{type:"f",value:0},colorVisible:{type:"c",value:new e.Color(65280)},colorNotVisible:{type:"c",value:new e.Color(16711680)},colorOutOfFrustum:{type:"c",value:new e.Color(10066329)}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;","gl_Position = projectionMatrix * ( viewMatrix * (modelMatrix * vec4( position, 1.0 )));","}"].join("\n"),fragmentShader:["#if (POSTPRO == 1)","uniform sampler2D tDiffuse;","#endif","uniform sampler2D tDiffuse2;","uniform float strength;","uniform float nbViewshedCamera;","uniform vec3 colorVisible;","uniform vec3 colorNotVisible;","uniform vec3 colorOutOfFrustum;","varying vec2 vUv;","void main() {","vec2 viewshedState = texture2D( tDiffuse2, vUv ).xy;","#if (POSTPRO == 1)","vec4 color = texture2D(  tDiffuse, vUv );","vec4 viewshedColor = vec4(1.0,1.0,1.0,1.0);","if (viewshedState.x > 0.0) {","    viewshedColor = vec4(colorVisible,1.0);","} else if (viewshedState.y > 0.0) {","viewshedColor = vec4(colorNotVisible,1.0);","} else {","viewshedColor = vec4(colorOutOfFrustum,1.0);","}","gl_FragColor = color*viewshedColor;","#else","gl_FragColor = vec4(vec3(0.0, 1.0);","#endif","}"].join("\n")},CompareDepth:s}}),define("DS/XCityEffects/HeatMapRTreeShader",["DS/Visualization/ThreeJS_DS"],function(e){"use strict";var s={defines:{POSTPRO:1},uniforms:{points:{type:"v4v",value:[]},zoomLevel:{type:"f",value:1},tDiffuse:{type:"t",value:null},zBuffer:{type:"t",value:null},test:{type:"t",value:null},realProjectionMatrixInverse:{type:"m4",value:new e.Matrix4},realViewMatrixInverse:{type:"m4",value:new e.Matrix4},worldSize:{type:"f",value:1},reductionFactor:{type:"f",value:100},shift:{type:"v3",value:new e.Vector3}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;","gl_Position = projectionMatrix * ( viewMatrix * (modelMatrix * vec4( position, 1.0 )));","}"].join("\n"),fragmentShader:["uniform vec4 points[100];","uniform vec3 shift;","uniform sampler2D tDiffuse;","uniform sampler2D test;","uniform sampler2D zBuffer;","uniform mat4 realProjectionMatrixInverse;","uniform mat4 realViewMatrixInverse;","uniform float worldSize;","uniform float reductionFactor;","uniform float zoomLevel;","varying vec2 vUv;","vec3 hsv2rgb(vec3 c)","{"," vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);"," vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);"," return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);","}","// Takes a value between 0 and 1","float bound_linear(float val, float step)","{"," float res = min(1.0, val * step);"," return res;","}","// Takes a value between 0 and 1","float bound_exp(float val, float factor)","{"," float res = min(1.0, (exp(val) - (1.0 * factor)) * factor);"," return res;","}","void main() {","  vec4 zColor = texture2D( zBuffer, vUv );","  vec4 color = texture2D(  tDiffuse, vUv );","  float z = zColor.a;","  vec4 pointSS = vec4(vUv * 2.0 - 1.0, z * 2.0 - 1.0, 1.0);","  vec4 pointVS = realProjectionMatrixInverse * pointSS;","  pointVS /= pointVS.w;","  vec4 pointWS = realViewMatrixInverse * pointVS;","  vec2 fragWorldPos = pointWS.xy;","  float result = 0.0;","  float sat = 0.0;","  for (int i = 0; i < 100; ++i)","  {","    float maxDistance = points[i].z;","    vec2 centeredPoint = points[i].xy - shift.xy + (worldSize / 2.0);","    float radius = points[i].z;","    float intensity = points[i].w;","    float distance = distance(centeredPoint, fragWorldPos);","    sat = max(sat, 1.0 - step(maxDistance, distance));","  }","  vec3 rgb = hsv2rgb(vec3(0.5, 1.0, sat));","  gl_FragColor = color + vec4(rgb, 1.0);","}"].join("\n")},t={defines:{POSTPRO:1},uniforms:{points:{type:"v4v",value:[]},zoomLevel:{type:"f",value:1},tDiffuse:{type:"t",value:null},zBuffer:{type:"t",value:null},test:{type:"t",value:null},realProjectionMatrixInverse:{type:"m4",value:new e.Matrix4},realViewMatrixInverse:{type:"m4",value:new e.Matrix4},worldSize:{type:"v2",value:new e.Vector2},reductionFactor:{type:"f",value:100},shift:{type:"v3",value:new e.Vector3}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;","gl_Position = projectionMatrix * ( viewMatrix * (modelMatrix * vec4( position, 1.0 )));","}"].join("\n"),fragmentShader:["uniform vec4 points[900];","uniform vec3 shift;","uniform sampler2D tDiffuse;","uniform sampler2D test;","uniform sampler2D zBuffer;","uniform mat4 realProjectionMatrixInverse;","uniform mat4 realViewMatrixInverse;","uniform vec2 worldSize;","uniform float reductionFactor;","uniform float zoomLevel;","varying vec2 vUv;","void main() {","  vec4 zColor = texture2D( zBuffer, vUv );","  vec4 color = texture2D(  tDiffuse, vUv );","  float z = zColor.a;","  vec4 pointSS = vec4(vUv * 2.0 - 1.0, z * 2.0 - 1.0, 1.0);","  vec4 pointVS = realProjectionMatrixInverse * pointSS;","  pointVS /= pointVS.w;","  vec4 pointWS = realViewMatrixInverse * pointVS;","  vec2 fragWorldPos = pointWS.xy;","  float result = 1.0;","  float th = 50.0;","  float col = 1.0;","if (z >= 0.0001)","{","  for (int i = 0; i < 900; i += 2)","  {","    vec4 pmin = points[i];","    vec4 pmax = points[i + 1];","    result = result * (","     1.0 - min((","       step(fragWorldPos.x, pmin.x + th)","       * step(pmin.x - th, fragWorldPos.x)","     )","     +","     (","       step(pmax.x - th, fragWorldPos.x)","       * step(fragWorldPos.x, pmax.x + th)","     )","     +","     (","       step(pmax.y - th, fragWorldPos.y)","       * step(fragWorldPos.y, pmax.y + th)","     )","     +","     (","       step(fragWorldPos.y, pmin.y + th)","       * step(pmin.y - th, fragWorldPos.y)","     )","     , 1.0)","     * step(fragWorldPos.x, pmax.x + th)","     * step(fragWorldPos.y, pmax.y + th)","     * step(pmin.x - th, fragWorldPos.x)","     * step(pmin.y - th, fragWorldPos.y)","     );","  }","  result *= col;","  gl_FragColor = vec4(result, result, result, 1.0) * color;","}","else {","  gl_FragColor = color;","}","}"].join("\n")};return{FinalBlending:{defines:{POSTPRO:1},uniforms:{points:{type:"v4v",value:[]},zoomLevel:{type:"f",value:1},tDiffuse:{type:"t",value:null},zBuffer:{type:"t",value:null},test:{type:"t",value:null},realProjectionMatrixInverse:{type:"m4",value:new e.Matrix4},realViewMatrixInverse:{type:"m4",value:new e.Matrix4},minCoord:{type:"v2",value:new e.Vector2},maxCoord:{type:"v2",value:new e.Vector2},worldSize:{type:"v2",value:new e.Vector2},reductionFactor:{type:"f",value:100},maxMag:{type:"f",value:1},opacity:{type:"f",value:.75},shift:{type:"v3",value:new e.Vector3},nHits:{type:"f",value:1e3},boundMin:{type:"f",value:1},boundMax:{type:"f",value:100},kernel:{type:"f",value:0}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;","gl_Position = projectionMatrix * ( viewMatrix * (modelMatrix * vec4( position, 1.0 )));","}"].join("\n"),fragmentShader:["uniform vec4 points[900];","uniform vec3 shift;","uniform float nHits;","uniform float boundMin;","uniform float boundMax;","uniform float kernel;","uniform sampler2D tDiffuse;","uniform sampler2D test;","uniform sampler2D zBuffer;","uniform mat4 realProjectionMatrixInverse;","uniform mat4 realViewMatrixInverse;","uniform vec2 minCoord;","uniform vec2 maxCoord;","uniform vec2 worldSize;","uniform float reductionFactor;","uniform float zoomLevel;","uniform float maxMag;","uniform float opacity;","varying vec2 vUv;","vec3 hsv2rgb(vec3 c)","{"," vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);"," vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);"," return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);","}","vec3 palette2(float vtoc) {"," vec3 dcOffset = vec3(0.5, 0.5, 0.5);"," vec3 amplitude = vec3(0.5, 0.5, 0.5);"," vec3 frequency = vec3(0.5, 0.5, 0.5);"," vec3 phase = vec3(0.5, 0.8332, 1.1665);"," return dcOffset + amplitude * cos( 6.28318 * (frequency * vtoc + phase) );","}","vec3 palette1(float vtoc) {"," vec3 dcOffset = vec3(0.65, -0.710, 0.3);"," vec3 amplitude = vec3(-0.75, 1.7, 0.6);"," vec3 frequency = vec3(0.5, 0.34, 0.368);"," vec3 phase = vec3(1.0, 0.813, 0.087);"," return dcOffset + amplitude * cos( 6.28318 * (frequency * vtoc + phase) );","}","vec3 palette3(float vtoc) {"," vec3 dcOffset = vec3(2.0, -1.0, -1.0);"," vec3 amplitude = vec3(2.0, 2.0, 2.5);"," vec3 frequency = vec3(0.7, 0.66, 0.670);"," vec3 phase = vec3(0.5, 0.833, 1.107);"," return dcOffset + amplitude * cos( 6.28318 * (frequency * vtoc + phase) );","}","vec3 palette(float vtoc) {"," vec3 dcOffset = vec3(1.5484, -0.421, -0.961);"," vec3 amplitude = vec3(2.1284, 1.4884, 2.6584);"," vec3 frequency = vec3(0.6384, 0.7984, 0.6884);"," vec3 phase = vec3(0.6384, 0.9084, 1.184);"," return dcOffset + amplitude * cos( 6.28318 * (frequency * vtoc + phase) );","}","vec3 paletteGM(float vtoc) {"," vec3 dcOffset = vec3(2.06, 0.54, -1.87);"," vec3 amplitude = vec3(2.4, 0.6, 3.88);"," vec3 frequency = vec3(0.25, 0.78, 0.80);"," vec3 phase = vec3(-0.420, 0.783, 0.0);"," return dcOffset + amplitude * cos( 6.28318 * (frequency * vtoc + phase) );","}","vec3 paletteGM2(float vtoc) {"," vec3 dcOffset = vec3(-0.371, -1.011, -0.990);"," vec3 amplitude = vec3(2.3384, 2.8184, 1.9184);"," vec3 frequency = vec3(0.5884, 0.4784, 0.6384);"," vec3 phase = vec3(-0.421, -0.161, 0.965);"," return dcOffset + amplitude * cos( 6.28318 * (frequency * vtoc + phase) );","}","vec3 gradientInterp(float v) {","vec4 colors[12];","colors[0] = vec4(0,0,255,1);","colors[1] = vec4(0,255,255,1);","colors[2] = vec4(0,255,0,1);","colors[3] = vec4(255,255,0,1);","colors[4] = vec4(255,0,0,1);","float size = 1.0 / 4.0;","float floorV = floor(v / size);","int startColor = int(floorV);","float coefInterp = v / size - floorV;","vec4 newColor = vec4(255.0,255.0,255.0,1.0);","if (startColor == 0) {","newColor = mix(colors[0], colors[1], coefInterp);","} else if (startColor == 1) {","newColor = mix(colors[1], colors[2], coefInterp);","} else if (startColor == 2) {","newColor = mix(colors[2], colors[3], coefInterp);","} else if (startColor == 3) {","newColor = mix(colors[3], colors[4], coefInterp);","} else if (startColor == 4) {","newColor = mix(colors[4], colors[5], coefInterp);","} else if (startColor == 5) {","newColor = mix(colors[5], colors[6], coefInterp);","} else if (startColor == 6) {","newColor = mix(colors[6], colors[7], coefInterp);","} else if (startColor == 7) {","newColor = mix(colors[7], colors[8], coefInterp);","} else if (startColor == 8) {","newColor = mix(colors[8], colors[9], coefInterp);","} else if (startColor == 9) {","newColor = mix(colors[9], colors[10], coefInterp);","} else if (startColor == 10) {","newColor = mix(colors[10], colors[11], coefInterp);","}","return newColor.xyz / vec3(255.0);","}","// Takes a value between 0 and 1","float bound_linear(float val, float step)","{"," float res = min(1.0, val * step);"," return res;","}","// Takes a value between 0 and 1","float bound_exp(float val, float factor)","{"," float res = min(1.0, (exp(val) - (1.0 * factor)) * factor);"," return res;","}","void main() {","  vec4 zColor = texture2D( zBuffer, vUv );","  vec4 color = texture2D(  tDiffuse, vUv );","  float z = zColor.a;","  vec4 pointSS = vec4(vUv * 2.0 - 1.0, z * 2.0 - 1.0, 1.0);","  vec4 pointVS = realProjectionMatrixInverse * pointSS;","  pointVS /= pointVS.w;","  vec4 pointWS = realViewMatrixInverse * pointVS;","  vec2 fragWorldPos = pointWS.xy / pointWS.w;","  float result = 0.0;"," //int kernel = 0;"," float coefKernel = 1.0;","if (z >= 0.0001)","{","  float diagonalWorldSize = sqrt(worldSize.x * worldSize.x + worldSize.y * worldSize.y);","  float totalMag = 0.0;","  float totalProx = 0.0;","  float maxMag = 0.0;","  for (int i = 0; i < 900; ++i)","  {","    if (points[i].x == 0.0 && points[i].y == 0.0 && points[i].z == 0.0 && points[i].w == 1.0) { break; }","    float radius = points[i].z;","    //float mag = max(min(points[i].w, boundMax), max(boundMin,1.0)*points[i].w);","    //float mag = max(min(points[i].w, boundMax), max(boundMin,1.0)*(log(points[i].w)+1.0));","    float mag = max(min(points[i].w, boundMax), max(boundMin,1.0)*sqrt(points[i].w));","    //float mag = points[i].w;","    radius = max(radius, 1.0);","    float maxDistance = radius;","    float maxDistance2 = radius;","    vec2 centeredPoint = points[i].xy - shift.xy + (worldSize / 2.0);","    float distance = distance(centeredPoint, fragWorldPos);","    //if (distance < radius) { gl_FragColor = vec4(1.0,0.0,0.0,1.0); return; } ","    float coefDist = distance/maxDistance;","    float proximity = 0.0;","    if (kernel < 0.5) { ","    coefKernel = 0.75;","    if (coefDist <= 1.0) { ","        proximity = min(1.0, coefDist);","        proximity = 0.75 * (1.0 - pow(proximity,2.0));","    maxMag = max(mag, maxMag);// * log(mag+1.0) / log(nHits);","    //if (proximity > 0.0) {","    //proximity = sqrt(proximity);","    //proximity = proximity * 0.2 + 0.8;","    // totalMag += proximity * log(mag+1.0) / log(nHits);","    totalProx = max(proximity, totalProx);// * log(mag+1.0) / log(nHits);","    //if (totalMag == 0.0) {","    //};","    //}","    //totalMag = maxMag*totalProx;","    }","    }","    else { ","    coefKernel = 1.0 / sqrt(2.0*3.14);","if (coefDist <= 3.0) {"," proximity = (1.0 / sqrt(2.0*3.14)) * exp(-0.5*pow(coefDist,2.0));","}","    }","    totalMag += proximity * mag;","   //if (distance < 100.0) { gl_FragColor = vec4(1.0,1.0,1.0,1.0); return; }","//    float intensity = (log(mag) / log(nHits)) * proximity;//proximity * (mag / 1.0);"," //   result = intensity + result;","  }","  if (totalMag > 0.0) {","  //totalMag = totalProx * log(totalMag+1.0) / log(nHits);"," //totalMag = max(min(totalMag, boundMax*coefKernel), boundMin*coefKernel);"," totalMag = max(0.0, totalMag);","  result = 1.0 * (log(totalMag) / log(nHits)) + 0.0 * (totalMag/nHits) ;"," result = (totalMag*1.0) / (boundMax*coefKernel);// * (nHits / 50.0);"," }","  //result /= maxMag;","  result = min(result, 1.0);","  float discard_low = smoothstep(0.0, 0.05, result);","  float blendfactor = discard_low;","  blendfactor = blendfactor * opacity;","  gl_FragColor = vec4(mix(color.rgb, gradientInterp(result), blendfactor), 1.0);","  //gl_FragColor = vec4(result, 0.0, 0.0, 1.0);"," if (totalMag == 0.0) { ","  gl_FragColor = color;","  }","}","else {","  gl_FragColor = color;","}","}"].join("\n")},DebugTree:s,DebugBB:t,DebugShader:{defines:{POSTPRO:1},uniforms:{points:{type:"v4v",value:[]},zoomLevel:{type:"f",value:1},tDiffuse:{type:"t",value:null},zBuffer:{type:"t",value:null},test:{type:"t",value:null},realProjectionMatrixInverse:{type:"m4",value:new e.Matrix4},realViewMatrixInverse:{type:"m4",value:new e.Matrix4},minCoord:{type:"v2",value:new e.Vector2},maxCoord:{type:"v2",value:new e.Vector2},worldSize:{type:"v2",value:new e.Vector2},reductionFactor:{type:"f",value:100},maxMag:{type:"f",value:1},shift:{type:"v3",value:new e.Vector3}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;","gl_Position = projectionMatrix * ( viewMatrix * (modelMatrix * vec4( position, 1.0 )));","}"].join("\n"),fragmentShader:["uniform vec4 points[900];","uniform vec3 shift;","uniform sampler2D tDiffuse;","uniform sampler2D test;","uniform sampler2D zBuffer;","uniform mat4 realProjectionMatrixInverse;","uniform mat4 realViewMatrixInverse;","uniform vec2 minCoord;","uniform vec2 maxCoord;","uniform vec2 worldSize;","uniform float reductionFactor;","uniform float zoomLevel;","uniform float maxMag;","varying vec2 vUv;","vec3 hsv2rgb(vec3 c)","{"," vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);"," vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);"," return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);","}","vec3 palette(float vtoc) {"," vec3 dcOffset = vec3(0.5, 0.5, 0.5);"," vec3 amplitude = vec3(0.5, 0.5, 0.5);"," vec3 frequency = vec3(0.5, 0.5, 0.5);"," vec3 phase = vec3(0.5, 0.8332, 1.1665);"," return dcOffset + amplitude * cos( 6.28318 * (frequency * vtoc + phase) );","}","// Takes a value between 0 and 1","float bound_linear(float val, float step)","{"," float res = min(1.0, val * step);"," return res;","}","// Takes a value between 0 and 1","float bound_exp(float val, float factor)","{"," float res = min(1.0, (exp(val) - (1.0 * factor)) * factor);"," return res;","}","void main() {","  vec4 zColor = texture2D( zBuffer, vUv );","  vec4 color = texture2D(  tDiffuse, vUv );","  float z = zColor.a;","  vec4 pointSS = vec4(vUv * 2.0 - 1.0, z * 2.0 - 1.0, 1.0);","  vec4 pointVS = realProjectionMatrixInverse * pointSS;","  pointVS /= pointVS.w;","  vec4 pointWS = realViewMatrixInverse * pointVS;","  vec2 fragWorldPos = pointWS.xy;","  float result = 0.0;","if (z >= 0.0001)","{","  float diagonalWorldSize = sqrt(worldSize.x * worldSize.x + worldSize.y * worldSize.y);","  for (int i = 0; i < 900; ++i)","  {","    float radius = points[i].z;","    float mag = points[i].w;","    radius = max(radius, 1.0);","    float maxDistance = radius;","    vec2 centeredPoint = points[i].xy - shift.xy + (worldSize / 2.0);","    float distance = distance(centeredPoint, fragWorldPos);","    float proximity = max(0.0, maxDistance - distance);","    float intensity = proximity * (mag / radius);","    result = intensity + result;","  }","  result /= maxMag;","  result = min(result, 1.0);","  if (result > 0.1) { result = 1.0; }","  else if (result > 0.00) { result = 0.5; }","  float discard_low = smoothstep(0.0, 0.1, result) / 2.0;","  vec3 rgb_dark = hsv2rgb(vec3(0.5 - result * 0.5, 1.0, discard_low));","  vec3 rgb_light = hsv2rgb(vec3(0.5 - result * 0.5, discard_low, 1.0));","  gl_FragColor = vec4(mix(color.rgb, palette(result), discard_low), 1.0);","}","else {","  gl_FragColor = color;","}","  gl_FragColor = zColor;","}"].join("\n")},ShaderLoopSize:900}}),define("DS/XCityEffects/HeatMapRTree",["DS/Visualization/ThreeJS_DS","DS/Effects/BasicEffect","DS/Plugins/EffectComposer","DS/Plugins/RenderPass","DS/Plugins/ShaderPass","DS/XCityEffects/HeatMapRTreeShader","DS/Plugins/ClearPass","DS/Visualization/Node3D","DS/Visualization/SceneGraphFactory","DS/XCityTools/ShaderTools","DS/xCityBasicUtils/Utils","DS/XCityTools/EventDispatcher"],function(e,s,t,i,o,r,a,n,l,m,p,c){"use strict";return s.extend({init:function(s,n,l,m){this._parent(s.renderer);this.doNotUpdateYet=!0,this.urban=l,this._rptree=null,this.M=10,this.m=this.M/2,this.shaderLoopSize=r.ShaderLoopSize,this.renderer=s,this.__renderer=s.renderer,this.renderTargetPool=n,this.nbCamera=0,this.indexCamera=0,this.cameraList={},this.rtList={},this.depthRenderPasses=[],this.availableViewshedComposer=[],this.near=.1,this.far=1e3,this.aspect=2,this.fov=1,this.bias=1e-5,this.passesNoScene=[],this.currentCompareDepthsPass=void 0;var p=new e.WebGLRenderTargetProperties(this.width,this.height,"nearest"),c=new t(this.__renderer,p,n);c.name="depthCurrentEffectComposer",c.composerContext.keepResult=!0,this.composers.push(c);var h=new a("depthCurrentCameraClearPass"),u=new i(null,null,null,void 0,void 0,void 0,"depthCurrentCameraRenderPass");u.setDisableBackFaceCulling(!0),u.setMaterialToUse(e.MaterialToUse.normalDepthMaterial),u.cameraName="main",this.passesNoScene.push(u),this.composers[0].addPass(h),this.composers[0].addPass(u),this.composers[0].composerContext.setPassClear(h,!0,new e.Color(16777215),0),this.composers[0].enablePass(h,!0),this.composers[0].enablePass(u,!0);var v=this.urban.getViewpoint();v._renderedCamera.matrixWorldInverse=v.camera.matrixWorldInverse.getInverse(v.camera.matrixWorld),v._renderedCamera.projectionMatrixInverse=v.camera.projectionMatrixInverse.getInverse(v.camera.projectionMatrix),this.mixPass=new o(r.FinalBlending,void 0,"heatmapPostProcessCustom"),this.mixPass.uniforms.realProjectionMatrixInverse.value=v.camera.projectionMatrixInverse,this.mixPass.uniforms.realViewMatrixInverse.value=v.camera.matrixWorld,void 0!==this.urban.cropBox?this.mixPass.uniforms.worldSize.value=new e.Vector2(this.urban.cropBox._size.x,this.urban.cropBox._size.y):this.mixPass.uniforms.worldSize.value=new e.Vector2(this.urban.worldSize,this.urban.worldSize),this.mixPass.uniforms.points.value=[];for(var d=0;d<this.shaderLoopSize;d++)this.mixPass.uniforms.points.value.push(new e.Vector4);return this.mixPass.uniforms.shift.value=v._camShiftedTranslation,this.mixPass.uniforms.nbPoints=0,this.mixPass.compileShader(this.__renderer),this.composers[0].linkToShaderPassUniform(this.mixPass,this.mixPass.uniforms.zBuffer),this.mixPass.addRequiredComposer(this.composers[0]),this.max=0,this.count=0,this},addPoint:function(e){null===this._rptree?this._rptree=this.buildTree([e],this.m,this.M):(this.count++,this._rptree.insert(e))},computeScales:function(){this._rptree.computeScales()},disableEffect:function(){this.enabled&&(this.enabled=!1,this.renderer.mainComposer.removeCustomPassNEW([this.mixPass]))},enableEffect:function(){this.enabled||(this.enabled=!0,this.renderer.mainComposer.insertCustomPassBeforeNEW(this.mixPass,"postEffects1"),this.renderer.compForwardComposerContext.enablePass(this.mixPass,!0))},pauseCamera:function(){},initEffect:function(e,s){e&&(this.mixPass.disabledByDefault=!0,this.mixPass.needsSwap=!1,this.mixPass.material.defines.POSTPRO=0,this.mixPass.material.transparent=!0,this.mixPass.material.needsUpdate=!0),this.insertComposerCustom(s,this.composers[2],this.mixPass,!0)},insertComposerCustom:function(s,t,i,o){e.mobileVersion||(null!==t&&s.composers.push(t),o&&(i.disabledByDefault=!0),s.mainComposer.insertCustomPassBeforeNEW(i,"postEffects1"),this.mixPass.composer=s.mainComposer,s.compForwardComposerContext.enablePass(i,!0),s.updateFinalComposer(!0))},update:function(s,t,i,o){for(;this.passesNoScene.length>0;)console.warn("heatmaprtree initialized"),this.passesNoScene.pop().setScene(t.scene);this.updateCameraUniforms(i);var a,n=this.getVisiblePoints(),l=0;if(p.is(n)){var m=n.visiblePoints,h=n.maxMag,u=m.length;for(c.publish(c.eventsList["heatmapTool.onChange:numberOfPoint"],u),u>r.ShaderLoopSize&&console.warn("Overload points number",u),u>this.max&&(this.max=u),l=Math.min(this.shaderLoopSize,m.length),a=0;a<l;a++)this.mixPass.uniforms.points.value[a]=m[a];this.mixPass.uniforms.maxMag.value=h,this.mixPass.uniforms.nHits.value=this.factories[this.activeFactory]._content._nhitsTotal}for(a=l;a<this.shaderLoopSize;a++)this.mixPass.uniforms.points.value[a]=new e.Vector4},updateCameraUniforms:function(e){e._renderedCamera.projectionMatrixInverse=e.camera.projectionMatrixInverse.getInverse(e.camera.projectionMatrix),e._renderedCamera.matrixWorldInverse=e.camera.matrixWorldInverse.getInverse(e.camera.matrixWorld),this.mixPass.uniforms.realProjectionMatrixInverse.value=e.camera.projectionMatrixInverse,this.mixPass.uniforms.realViewMatrixInverse.value=e._renderedCamera.matrixWorld;var s=this.urban.getViewpoint();this.mixPass.uniforms.shift.value=s._camShiftedTranslation},setSize:function(e,s,t){if(this._parent(e,s)||t)for(var i=0;i<this.composers.length;++i)this.composers[i].setSize(this.width,this.height)},getMaxIteration:function(){return 0},changeFar:function(e,s){},changeNear:function(e,s){},changeFov:function(e,s){},changeAspect:function(e,s){},changeBias:function(e,s){},setColors:function(e,s,t){},addFactory:function(e){for(var s in p.is(this.factories)||(this.factories={}),this.factories)delete this.factories[s];var t=e._content.get("id");this.activeFactory=t,this.factories[t]=e},removeFactory:function(e){var s=e._content.get("id");p.is(this.factories[s])&&delete this.factories[s];var t=!1;return 0===Object.keys(this.factories).length&&(this.factories=null,t=!0),t},getVisiblePoints:function(){if(p.is(this.factories)){var e,s,t=Object.keys(this.factories),i=t.length;for(s=0;s<i;s++)if(e=this.factories[t[s]],p.is(e))return e.getVisiblePoints()}},_computeMagnitudeForPoint:function(s,t){for(var i=0,o=new e.Vector2(s.x,s.y),r=0;r<t.length;r++){var a=t[r].z,n=t[r].w,l=a,m=new e.Vector2(t[r].x,t[r].y),p=o.distanceTo(m);i+=(1-Math.min(p,l)/l)*n}return i},generateTextureFromPoints:function(s){for(var t=new Float32Array(4194304),i=0;i<1048576;i++)t[4*i]=0,t[4*i+1]=0,t[4*i+2]=0,t[4*i+3]=0;for(i=0;i<s.length;i++){var o=s[i];t[4*i]=o.x,t[4*i+1]=o.y,t[4*i+2]=o.z,t[4*i+3]=o.w}var r=new e.DataTexture(t,1024,1024,e.RGBAFormat,e.FloatType);return r.needsUpdate=!0,r},buildTree:function(e,s,t){return null}})}),define("DS/XCityEffects/ViewshedEffect",["DS/Visualization/ThreeJS_DS","DS/Effects/BasicEffect","DS/Plugins/EffectComposer","DS/Plugins/RenderPass","DS/Plugins/ShaderPass","DS/XCityEffects/ViewshedShader","DS/Plugins/ClearPass","DS/Visualization/Node3D","DS/Visualization/SceneGraphFactory","DS/XCityTools/ShaderTools"],function(e,s,t,i,o,r,a,n,l,m){"use strict";return s.extend({init:function(s,n,l,p){this._parent(s.renderer);this.urban=p,this.blueColor=new e.Color("#005686"),this.renderer=s,this.__renderer=s.renderer,this.renderTargetPool=n,this.nbCamera=0,this.cameraList={},this.rtList={},this.depthRenderPasses=[],this.availableViewshedComposer=[],this.near=.1,this.far=1e3,this.aspect=2,this.fov=1,this.bias=1e-5,this.size=2048;var c=new e.Color("#46a7ff"),h=new m.getCustomShaderMaterial([m.common,m.urbanLights]);h.opacity=.7,h.transparent=!0,h.enableClipPlanes=!1,h.uniforms.ambient.value=c,h.uniforms.diffuse.value=c,h.uniforms.specular.value=c,h.line=new e.LineBasicMaterial({lineWidth:5,opacity:1,color:c,enableClipPlanes:!1});var u=c,v=new m.getCustomShaderMaterial([m.common,m.urbanLights]);v.opacity=.7,v.transparent=!0,v.enableClipPlanes=!1,v.uniforms.ambient.value=u,v.uniforms.diffuse.value=u,v.uniforms.specular.value=u,v.line=new e.LineBasicMaterial({lineWidth:5,opacity:1,color:u,enableClipPlanes:!1});var d=c,f=new m.getCustomShaderMaterial([m.common,m.urbanLights]);f.opacity=.7,f.transparent=!0,f.enableClipPlanes=!1,f.uniforms.ambient.value=d,f.uniforms.diffuse.value=d,f.uniforms.specular.value=d,f.line=new e.LineBasicMaterial({lineWidth:5,opacity:1,color:d,enableClipPlanes:!1}),this.lineMatList=[h,v,f],this.rootNode=l,this.passesNoScene=[],this.currentCompareDepthsPass=void 0,this.scissorTest=!1,this.deactivateScissorTest=function(){this.scissorTest=this.__renderer.getScissorTest(),this.__renderer.enableScissorTest(!1)},this.reactivateScissorTest=function(){this.__renderer.enableScissorTest(this.scissorTest)};var x=new e.WebGLRenderTargetProperties(this.width,this.height,"nearest"),C=new t(this.__renderer,x,n);C.name="depthCurrentEffectComposer",C.composerContext.keepResult=!0;var P=new e.WebGLRenderTargetProperties(this.width,this.height,"nearest"),w=new t(this.__renderer,P,n);w.composerContext.keepResult=!0,w.composerContext.setBeforeRenderCB(this.deactivateScissorTest.bind(this)),w.composerContext.setAfterRenderCB(this.reactivateScissorTest.bind(this)),this.composers.push(C),this.composers.push(w);var D=new a("depthCurrentCameraClearPass"),y=new i(null,null,null,void 0,void 0,void 0,"depthCurrentCameraRenderPass");y.setDisableBackFaceCulling(!0),y.setMaterialToUse(e.MaterialToUse.normalDepthIoRRoughnessMaterial),y.cameraName="main",this.passesNoScene.push(y),this.composers[0].addPass(D),this.composers[0].addPass(y),this.composers[0].composerContext.setPassClear(D,!0,new e.Color(0),0),this.composers[0].enablePass(D,!0),this.composers[0].enablePass(y,!0);var g=r.CompareDepth[0];this.compareDepthsPass0=new o(g),this.compareDepthsPass0.compileShader(this.__renderer);var b=r.CompareDepth[1];this.compareDepthsPass1=new o(b),this.compareDepthsPass1.compileShader(this.__renderer);var S=r.CompareDepth[2];return this.compareDepthsPass2=new o(S),this.compareDepthsPass2.compileShader(this.__renderer),this.composers[1].addPass(this.compareDepthsPass0),this.composers[1].enablePass(this.compareDepthsPass0,!1),this.composers[1].addPass(this.compareDepthsPass1),this.composers[1].enablePass(this.compareDepthsPass1,!1),this.composers[1].addPass(this.compareDepthsPass2),this.composers[1].enablePass(this.compareDepthsPass2,!1),this.composers[0].linkToShaderPassUniform(this.compareDepthsPass0,this.compareDepthsPass0.uniforms.tNormalDepth),this.compareDepthsPass0.addRequiredComposer(this.composers[0]),this.composers[0].linkToShaderPassUniform(this.compareDepthsPass1,this.compareDepthsPass1.uniforms.tNormalDepth),this.compareDepthsPass1.addRequiredComposer(this.composers[0]),this.composers[0].linkToShaderPassUniform(this.compareDepthsPass2,this.compareDepthsPass2.uniforms.tNormalDepth),this.compareDepthsPass2.addRequiredComposer(this.composers[0]),this.mixPass=new o(r.FinalBlending,void 0,"ViewshedEffectCustom"),this.mixPass.compileShader(this.__renderer),this.composers[1].linkToShaderPassUniform(this.mixPass,this.mixPass.uniforms.tDiffuse2),this.mixPass.addRequiredComposer(this.composers[1]),this},addCamera:function(s,o,r,n,l,m,p){if(3!==this.nbCamera){this.enableEffect();for(var c="",h=0;h<3;h++){var u="ViewshedCamera"+h;if(void 0===this.cameraList[u]){c=u;break}}var v=this.cloneCamera(s,r,n);if(o&&(v.modelUrl=o),this.cameraList[c]={camera:v},this.createGeometryFrustum(v,this.nbCamera),this.rootNode.addChild(v.geometry),0==this.availableViewshedComposer.length){var d=new e.WebGLRenderTargetProperties(this.width,this.height,"nearest"),f=new t(this.__renderer,d,this.renderTargetPool);f.name="depthViewshedEffectComposer"+this.nbCamera,f.composerContext.keepResult=!0,this.composers.push(f);var x=new a("depthCameraClearPass"),C=new i(null,null,null,void 0,void 0,void 0,"depthCameraRenderPass");C.setMaterialToUse(e.MaterialToUse.normalDepthIoRRoughnessMaterial),C.setCustomCamera(this.cameraList[c].camera),this.passesNoScene.push(C),this.composers[2+this.nbCamera].addPass(x),this.composers[2+this.nbCamera].addPass(C),this.composers[2+this.nbCamera].composerContext.setPassClear(x,!0,new e.Color(0),0),this.composers[2+this.nbCamera].enablePass(x,!0),this.composers[2+this.nbCamera].enablePass(C,!0)}else this.composers.push(this.availableViewshedComposer.pop()),this.composers[2+this.nbCamera].enabled=!0,this.composers[2+this.nbCamera].passLists[0].passes[1].setCustomCamera(this.cameraList[c].camera);var P=void 0;if(0===this.nbCamera){P=this.compareDepthsPass0;this.composers[1].enablePass(this.compareDepthsPass0,!0),this.composers[1].enablePass(this.compareDepthsPass1,!1),this.composers[1].enablePass(this.compareDepthsPass2,!1),this.compareDepthsPass1.linkedComposerContexts.length>1&&(this.compareDepthsPass1.linkedComposerContexts.pop(),this.compareDepthsPass1.linkedComposerContexts.pop(),this.compareDepthsPass1.requiredComposers.pop(),this.compareDepthsPass1.requiredComposers.pop()),this.compareDepthsPass2.linkedComposerContexts.length>1&&(this.compareDepthsPass2.linkedComposerContexts.pop(),this.compareDepthsPass2.linkedComposerContexts.pop(),this.compareDepthsPass2.linkedComposerContexts.pop(),this.compareDepthsPass2.requiredComposers.pop(),this.compareDepthsPass2.requiredComposers.pop(),this.compareDepthsPass2.requiredComposers.pop())}else if(1===this.nbCamera){P=this.compareDepthsPass1;this.composers[1].enablePass(this.compareDepthsPass0,!1),this.composers[1].enablePass(this.compareDepthsPass1,!0),this.composers[1].enablePass(this.compareDepthsPass2,!1),this.compareDepthsPass0.linkedComposerContexts.length>1&&(this.compareDepthsPass0.linkedComposerContexts.pop(),this.compareDepthsPass0.requiredComposers.pop()),this.compareDepthsPass2.linkedComposerContexts.length>1&&(this.compareDepthsPass2.linkedComposerContexts.pop(),this.compareDepthsPass2.linkedComposerContexts.pop(),this.compareDepthsPass2.linkedComposerContexts.pop(),this.compareDepthsPass2.requiredComposers.pop(),this.compareDepthsPass2.requiredComposers.pop(),this.compareDepthsPass2.requiredComposers.pop())}else if(2===this.nbCamera){P=this.compareDepthsPass2;this.composers[1].enablePass(this.compareDepthsPass0,!1),this.composers[1].enablePass(this.compareDepthsPass1,!1),this.composers[1].enablePass(this.compareDepthsPass2,!0),this.compareDepthsPass0.linkedComposerContexts.length>1&&(this.compareDepthsPass0.linkedComposerContexts.pop(),this.compareDepthsPass0.requiredComposers.pop()),this.compareDepthsPass1.linkedComposerContexts.length>1&&(this.compareDepthsPass1.linkedComposerContexts.pop(),this.compareDepthsPass1.linkedComposerContexts.pop(),this.compareDepthsPass1.requiredComposers.pop(),this.compareDepthsPass1.requiredComposers.pop())}this.compareDepthsPass0.linkedComposerContexts.length>1&&(this.compareDepthsPass0.linkedComposerContexts.pop(),this.compareDepthsPass0.requiredComposers.pop()),this.compareDepthsPass1.linkedComposerContexts.length>1&&(this.compareDepthsPass1.linkedComposerContexts.pop(),this.compareDepthsPass1.linkedComposerContexts.pop(),this.compareDepthsPass1.requiredComposers.pop(),this.compareDepthsPass1.requiredComposers.pop()),this.compareDepthsPass2.linkedComposerContexts.length>1&&(this.compareDepthsPass2.linkedComposerContexts.pop(),this.compareDepthsPass2.linkedComposerContexts.pop(),this.compareDepthsPass2.linkedComposerContexts.pop(),this.compareDepthsPass2.requiredComposers.pop(),this.compareDepthsPass2.requiredComposers.pop(),this.compareDepthsPass2.requiredComposers.pop());for(h=0;h<this.nbCamera+1;++h)this.composers[2+h].linkToShaderPassUniform(P,P.uniforms["tDepthCameraViewshed"+h]),P.addRequiredComposer(this.composers[2+h]);var w=0;for(var h in this.cameraList)P.uniforms["viewshedMatrix"+w].value=this.cameraList[h].camera.viewshedMatrix,P.uniforms["bias"+w].value=this.cameraList[h].camera.bias,w++;return P.material.force=!0,P.material.needsUpdate=!0,this.currentCompareDepthsPass=P,this.nbCamera++,c}},createGeometryFrustum:function(s,t){var i=t%3,o=(s.position,new e.Vector3(1,-1,1));o.applyProjection(s.projectionMatrixInverse),o.applyMatrix4(s.matrixWorld);var r=new e.Vector3(1,1,1);r.applyProjection(s.projectionMatrixInverse),r.applyMatrix4(s.matrixWorld);var a=new e.Vector3(-1,1,1);a.applyProjection(s.projectionMatrixInverse),a.applyMatrix4(s.matrixWorld);var m=new e.Vector3(-1,-1,1);m.applyProjection(s.projectionMatrixInverse),m.applyMatrix4(s.matrixWorld);var p=new e.Vector3(1,-1,-1);p.applyProjection(s.projectionMatrixInverse),p.applyMatrix4(s.matrixWorld);var c=new e.Vector3(1,1,-1);c.applyProjection(s.projectionMatrixInverse),c.applyMatrix4(s.matrixWorld);var h=new e.Vector3(-1,1,-1);h.applyProjection(s.projectionMatrixInverse),h.applyMatrix4(s.matrixWorld);var u=new e.Vector3(-1,-1,-1);u.applyProjection(s.projectionMatrixInverse),u.applyMatrix4(s.matrixWorld);var v,d=[];d.push(o),d.push(r),d.push(a),d.push(m),d.push(o),(v=l.createLineNode({material:this.lineMatList[i],points:d,color:this.blueColor,width:1})).name="line_node",s.geometry=new n("cameraFrustum"),s.geometry.addChild(v),(d=[]).push(p),d.push(o),(v=l.createLineNode({material:this.lineMatList[i],points:d,color:this.blueColor,width:1})).name="line_node",s.geometry.addChild(v),(d=[]).push(c),d.push(r),(v=l.createLineNode({material:this.lineMatList[i],points:d,color:this.blueColor,width:1})).name="line_node",s.geometry.addChild(v),(d=[]).push(h),d.push(a),(v=l.createLineNode({material:this.lineMatList[i],points:d,color:this.blueColor,width:1})).name="line_node",s.geometry.addChild(v),(d=[]).push(u),d.push(m),(v=l.createLineNode({material:this.lineMatList[i],points:d,color:this.blueColor,width:1})).name="line_node",s.geometry.addChild(v),void 0!==s.modelUrl&&this.urban.modelLoader.load({url:s.modelUrl},function(e,t,i){if(t){this.cameraModel=e;var o=this.cameraModel.getMatrix();o.setPosition(s.position),o.setRotationFromQuaternion(s.quaternion),this.cameraModel.setMatrix(o),s.geometry.addChild(this.cameraModel)}}.bind(this))},cloneCamera:function(s,t,i,o,r){if(void 0!==s){void 0===t&&(t=s.near),void 0===i&&(i=s.far),void 0===o&&(o=s.aspect),void 0===r&&(r=s.fov);var a=new e.PerspectiveCamera(r,o,t,i);a.bias=s.bias,a.orientation=s.orientation,a.position.x=s.position.x,a.position.y=s.position.y,a.position.z=s.position.z,a.rotation.x=s.rotation.x,a.rotation.y=s.rotation.y,a.rotation.z=s.rotation.z,a.scale.x=s.scale.x,a.scale.y=s.scale.y,a.scale.z=s.scale.z,a.up.x=s.up.x,a.up.y=s.up.y,a.up.z=s.up.z,a.quaternion.x=s.quaternion.x,a.quaternion.y=s.quaternion.y,a.quaternion.z=s.quaternion.z,a.quaternion.w=s.quaternion.w,a.matrix.copy(s.matrix),a.matrixRotationWorld.copy(s.matrixRotationWorld),a.matrixWorld.copy(s.matrixWorld),a.matrixWorldInverse.copy(s.matrixWorldInverse),a.matrixWorldNeedsUpdate=s.matrixWorldNeedsUpdate,a.projectionMatrixInverse.getInverse(a.projectionMatrix),a.useQuaternion=s.useQuaternion,a.name="ViewshedCamera"+this.indexCamera;var n=new e.Matrix4;return n.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),n.multiply(a.projectionMatrix),n.multiply(a.matrixWorldInverse),a.viewshedMatrix=n,a.modelUrl=s.modelUrl,a}},removeCamera:function(e){if(0!==this.nbCamera){if(!this.cameraList[e])return!1;var s=this.cameraList[e].camera;if(void 0===s)return!1;this.rootNode.removeChild(s.geometry);var t=this.composers.pop();t.removeLinks(),t.enabled=!1,this.availableViewshedComposer.push(t),delete this.cameraList[e],this.nbCamera--;var i=void 0;if(1===this.nbCamera){i=this.compareDepthsPass0;this.composers[1].enablePass(this.compareDepthsPass0,!0),this.composers[1].enablePass(this.compareDepthsPass1,!1),this.composers[1].enablePass(this.compareDepthsPass2,!1),this.compareDepthsPass1.linkedComposerContexts.length>1&&(this.compareDepthsPass1.linkedComposerContexts.pop(),this.compareDepthsPass1.linkedComposerContexts.pop(),this.compareDepthsPass1.requiredComposers.pop(),this.compareDepthsPass1.requiredComposers.pop()),this.compareDepthsPass2.linkedComposerContexts.length>1&&(this.compareDepthsPass2.linkedComposerContexts.pop(),this.compareDepthsPass2.linkedComposerContexts.pop(),this.compareDepthsPass2.linkedComposerContexts.pop(),this.compareDepthsPass2.requiredComposers.pop(),this.compareDepthsPass2.requiredComposers.pop(),this.compareDepthsPass2.requiredComposers.pop())}else if(2===this.nbCamera){i=this.compareDepthsPass1;this.composers[1].enablePass(this.compareDepthsPass0,!1),this.composers[1].enablePass(this.compareDepthsPass1,!0),this.composers[1].enablePass(this.compareDepthsPass2,!1),this.compareDepthsPass0.linkedComposerContexts.length>1&&(this.compareDepthsPass0.linkedComposerContexts.pop(),this.compareDepthsPass0.requiredComposers.pop()),this.compareDepthsPass2.linkedComposerContexts.length>1&&(this.compareDepthsPass2.linkedComposerContexts.pop(),this.compareDepthsPass2.linkedComposerContexts.pop(),this.compareDepthsPass2.linkedComposerContexts.pop(),this.compareDepthsPass2.requiredComposers.pop(),this.compareDepthsPass2.requiredComposers.pop(),this.compareDepthsPass2.requiredComposers.pop())}else if(3===this.nbCamera){i=this.compareDepthsPass2;this.composers[1].enablePass(this.compareDepthsPass0,!1),this.composers[1].enablePass(this.compareDepthsPass1,!1),this.composers[1].enablePass(this.compareDepthsPass2,!0),this.compareDepthsPass0.linkedComposerContexts.length>1&&(this.compareDepthsPass0.linkedComposerContexts.pop(),this.compareDepthsPass0.requiredComposers.pop()),this.compareDepthsPass1.linkedComposerContexts.length>1&&(this.compareDepthsPass1.linkedComposerContexts.pop(),this.compareDepthsPass1.linkedComposerContexts.pop(),this.compareDepthsPass1.requiredComposers.pop(),this.compareDepthsPass1.requiredComposers.pop())}else this.composers[1].enablePass(this.compareDepthsPass0,!1),this.composers[1].enablePass(this.compareDepthsPass1,!1),this.composers[1].enablePass(this.compareDepthsPass2,!1),this.disableEffect();for(var o=0;o<this.nbCamera;++o)this.composers[2+o].linkToShaderPassUniform(i,i.uniforms["tDepthCameraViewshed"+o]),i.addRequiredComposer(this.composers[2+o]);var r=0;for(var o in this.cameraList)i.uniforms["viewshedMatrix"+r].value=this.cameraList[o].camera.viewshedMatrix,i.uniforms["bias"+r].value=this.cameraList[o].camera.bias,this.composers[2+r].passLists[0].passes[1].setCustomCamera(this.cameraList[o].camera),r++;this.currentCompareDepthsPass=i}},disableEffect:function(){this.enabled&&(this.enabled=!1,this.renderer.mainComposer.removeCustomPassNEW([this.mixPass]))},enableEffect:function(){this.enabled||(this.enabled=!0,this.renderer.mainComposer.insertCustomPassBeforeNEW(this.mixPass,"postEffects1"),this.renderer.compForwardComposerContext.enablePass(this.mixPass,!0))},pauseCamera:function(){},initEffect:function(e,s){e&&(this.mixPass.disabledByDefault=!0,this.mixPass.needsSwap=!1,this.mixPass.material.defines.POSTPRO=0,this.mixPass.material.transparent=!0,this.mixPass.material.needsUpdate=!0),this.insertComposerCustom(s,this.composers[2],this.mixPass,!0),this.renderer.initComposer("PickingGPUInstancing")},insertComposerCustom:function(s,t,i,o){e.mobileVersion||(null!==t&&s.composers.push(t),o&&(i.disabledByDefault=!0),s.mainComposer.insertCustomPassBeforeNEW(i,"postEffects1"),this.mixPass.composer=s.mainComposer,s.compForwardComposerContext.enablePass(i,!0),s.updateFinalComposer(!0))},update:function(e,s,t,i){for(;this.passesNoScene.length>0;)this.passesNoScene.pop().setScene(s.scene);t.camera.projectionMatrixInverse.getInverse(t.camera.projectionMatrix),t.camera.matrixWorldInverse.getInverse(t.camera.matrixWorld);for(var o=this.composers[1].composerContext.passes,r=0;r<o.length;++r)o[r].uniforms.realProjectionMatrixInverse.value=t.camera.projectionMatrixInverse,o[r].uniforms.realViewMatrix.value=t.camera.matrixWorld},setSize:function(e,s,t,i){if(void 0!==i){this.width=e,this.height=s;for(var o=0;o<this.composers.length;++o)this.composers[o].setSize(this.width,this.height)}},getMaxIteration:function(){return 0},updateCamera:function(e,s){var t=0;for(var i in this.cameraList){if(void 0===e||e===i){this.rootNode.removeChild(this.cameraList[i].camera.geometry);var o=this.cloneCamera(s);this.cameraList[i].camera=o,this.composers[2+t].composerContext.passes[1].setCustomCamera(o),this.currentCompareDepthsPass.uniforms["viewshedMatrix"+t].value=o.viewshedMatrix,this.createGeometryFrustum(o,t),this.rootNode.addChild(o.geometry)}t++}},changeFar:function(e,s){var t=0;for(var i in this.cameraList){if(void 0===s||s===i){this.rootNode.removeChild(this.cameraList[i].camera.geometry);var o=this.cloneCamera(this.cameraList[i].camera,void 0,e,void 0,void 0);this.cameraList[i].camera=o,this.composers[2+t].composerContext.passes[1].setCustomCamera(o),this.currentCompareDepthsPass.uniforms["viewshedMatrix"+t].value=o.viewshedMatrix,this.createGeometryFrustum(o,t),this.rootNode.addChild(o.geometry)}t++}},changeNear:function(e,s){var t=0;for(var i in this.cameraList){if(void 0===s||s===i){this.rootNode.removeChild(this.cameraList[i].camera.geometry);var o=this.cloneCamera(this.cameraList[i].camera,e,void 0,void 0,void 0);this.cameraList[i].camera=o,this.composers[2+t].composerContext.passes[1].setCustomCamera(o),this.currentCompareDepthsPass.uniforms["viewshedMatrix"+t].value=o.viewshedMatrix,this.createGeometryFrustum(o,t),this.rootNode.addChild(o.geometry)}t++}},changeFov:function(e,s){var t=0;for(var i in this.cameraList){if(void 0===s||s===i){this.rootNode.removeChild(this.cameraList[i].camera.geometry);var o=this.cloneCamera(this.cameraList[i].camera,void 0,void 0,void 0,e);this.cameraList[i].camera=o,this.composers[2+t].composerContext.passes[1].setCustomCamera(o),this.currentCompareDepthsPass.uniforms["viewshedMatrix"+t].value=o.viewshedMatrix,this.createGeometryFrustum(o,t),this.rootNode.addChild(o.geometry)}t++}},changeAspect:function(e,s){var t=0;for(var i in this.cameraList){if(void 0===s||s===i){this.rootNode.removeChild(this.cameraList[i].camera.geometry);var o=this.cloneCamera(this.cameraList[i].camera,void 0,void 0,e,void 0);this.cameraList[i].camera=o,this.composers[2+t].composerContext.passes[1].setCustomCamera(o),this.currentCompareDepthsPass.uniforms["viewshedMatrix"+t].value=o.viewshedMatrix,this.createGeometryFrustum(o,t),this.rootNode.addChild(o.geometry)}t++}},changeBias:function(e,s){var t=0;for(var i in this.cameraList)void 0!==s&&s!==i||(this.cameraList[i].camera.bias=e,this.currentCompareDepthsPass.uniforms["bias"+t].value=e),t++},setColors:function(s,t,i){s&&(this.mixPass.uniforms.colorVisible.value=new e.Color(s)),t&&(this.mixPass.uniforms.colorNotVisible.value=new e.Color(t)),i&&(this.mixPass.uniforms.colorOutOfFrustum.value=new e.Color(i))}})}),define("DS/XCityEffects/AltitudeEffect",["DS/Visualization/ThreeJS_DS","DS/Effects/BasicEffect","DS/Plugins/EffectComposer","DS/Plugins/RenderPass","DS/Plugins/ShaderPass","DS/XCityEffects/AltitudeShader","DS/Plugins/ClearPass","DS/Visualization/Node3D","DS/Visualization/SceneGraphFactory","DS/XCityTools/ShaderTools","DS/xCityBasicUtils/Utils","DS/XCityTools/EventDispatcher"],function(e,s,t,i,o,r,a,n,l,m,p,c){"use strict";return s.extend({init:function(s,n,l,m){this._parent(s.renderer);this.urban=l,this.renderer=s,this.__renderer=s.renderer,this.renderTargetPool=n,this.depthRenderPasses=[],this.availableViewshedComposer=[],this.near=.1,this.far=1e3,this.aspect=2,this.fov=1,this.bias=1e-5,this.passesNoScene=[],this.currentCompareDepthsPass=void 0;var p=new e.WebGLRenderTargetProperties(this.width,this.height,"nearest"),c=new t(this.__renderer,p,n);c.name="depthCurrentEffectComposer",c.composerContext.keepResult=!0,this.composers.push(c);var h=new a("depthCurrentCameraClearPass"),u=new i(null,null,null,void 0,void 0,void 0,"depthCurrentCameraRenderPass");u.setDisableBackFaceCulling(!0),u.setMaterialToUse(e.MaterialToUse.normalDepthMaterial),u.cameraName="main",this.passesNoScene.push(u),this.composers[0].addPass(h),this.composers[0].addPass(u),this.composers[0].composerContext.setPassClear(h,!0,new e.Color(16777215),0),this.composers[0].enablePass(h,!0),this.composers[0].enablePass(u,!0);var v=this.urban.getViewpoint();return v._renderedCamera.matrixWorldInverse=v.camera.matrixWorldInverse.getInverse(v.camera.matrixWorld),v._renderedCamera.projectionMatrixInverse=v.camera.projectionMatrixInverse.getInverse(v.camera.projectionMatrix),this.mixPass=new o(r.FinalBlending,void 0,"altitudeProcessCustom"),this.mixPass.uniforms.realProjectionMatrixInverse.value=v.camera.projectionMatrixInverse,this.mixPass.uniforms.realViewMatrixInverse.value=v.camera.matrixWorld,this.mixPass.compileShader(this.__renderer),this.composers[0].linkToShaderPassUniform(this.mixPass,this.mixPass.uniforms.zBuffer),this.mixPass.addRequiredComposer(this.composers[0]),this.max=0,this.count=0,this},disableEffect:function(){this.enabled&&(this.enabled=!1,this.urban.USR.getRenderPassManager().disablePass(this.passID))},enableEffect:function(){this.enabled||(this.enabled=!0,this.urban.USR.getRenderPassManager().enablePass(this.passID))},pauseCamera:function(){},initEffect:function(e,s){e&&(this.mixPass.disabledByDefault=!0,this.mixPass.needsSwap=!1,this.mixPass.material.defines.POSTPRO=1,this.mixPass.material.transparent=!0,this.mixPass.material.needsUpdate=!0),this.insertComposerCustom(s,this.composers[0],this.mixPass,!0)},insertComposerCustom:function(s,t,i,o){e.mobileVersion||(null!==t&&s.composers.push(t),o&&(i.disabledByDefault=!0),this.passID="altitudePass",this.urban.USR.getRenderPassManager().addPass(this.passID,this.mixPass,{before:"ClearDepthPass"}),this.mixPass.composer=s.mainComposer,s.compForwardComposerContext.enablePass(i,!0),s.updateFinalComposer(!0))},update:function(e,s,t,i){for(;this.passesNoScene.length>0;)console.warn("altitude effect initialized"),this.passesNoScene.pop().setScene(s.scene);this.updateCameraUniforms(t)},updateCameraUniforms:function(e){e._renderedCamera.projectionMatrixInverse=e.camera.projectionMatrixInverse.getInverse(e.camera.projectionMatrix),e._renderedCamera.matrixWorldInverse=e.camera.matrixWorldInverse.getInverse(e.camera.matrixWorld),this.mixPass.uniforms.realProjectionMatrixInverse.value=e.camera.projectionMatrixInverse,this.mixPass.uniforms.realViewMatrixInverse.value=e._renderedCamera.matrixWorld},setSize:function(e,s,t){if(this._parent(e,s)||t)for(var i=0;i<this.composers.length;++i)this.composers[i].setSize(this.width,this.height)},getMaxIteration:function(){return 0},changeFar:function(e,s){},changeNear:function(e,s){},changeFov:function(e,s){},changeAspect:function(e,s){},changeBias:function(e,s){},setColors:function(e,s,t){}})}),define("DS/XCityEffects/AtmosphereEffect",["DS/Visualization/ThreeJS_DS","DS/Effects/BasicEffect","DS/Plugins/EffectComposer","DS/Plugins/RenderPass","DS/Plugins/ShaderPass","DS/XCityEffects/AtmosphereShader","DS/Plugins/ClearPass","DS/Visualization/Node3D","DS/Visualization/SceneGraphFactory","DS/XCityTools/ShaderTools"],function(e,s,t,i,o,r,a,n,l,m){"use strict";return s.extend({init:function(s,n,l,m){this._parent(s.renderer);this.urban=m,this._vse=this.urban.getView3D(),this.renderer=s,this.__renderer=s.renderer,this.renderTargetPool=n,this.rootNode=l,this.passesNoScene=[];var p=new e.WebGLRenderTargetProperties(this.width,this.height,"nearest"),c=new t(this.__renderer,p,this.renderTargetPool);c.name="depthCurrentEffectComposer",c.composerContext.keepResult=!0,this.composers.push(c);var h=new a("depthCurrentCameraClearPass"),u=new i(null,null,null,void 0,void 0,void 0,"depthCurrentCameraRenderPass");return u.setDisableBackFaceCulling(!0),u.setMaterialToUse(e.MaterialToUse.normalDepthMaterial),u.cameraName="main",this.passesNoScene.push(u),this.composers[0].addPass(h),this.composers[0].addPass(u),this.composers[0].composerContext.setPassClear(h,!0,new e.Color(0),0),this.composers[0].enablePass(h,!0),this.composers[0].enablePass(u,!0),this.mixPass=new o(r.FinalBlending,void 0,"AtmoEffectCustom"),this.mixPass.compileShader(this.__renderer),this.composers[0].linkToShaderPassUniform(this.mixPass,this.mixPass.uniforms.tNormalDepth),this.mixPass.addRequiredComposer(this.composers[0]),this.enableEffect(),s&&s.normalComposerContext&&s.normalComposerContext.enablePass(this.mixPass,!1),s&&s.pickingGPUComposerContext&&s.pickingGPUComposerContext.enablePass(this.mixPass,!1),s&&s.depthComposerContext&&s.depthComposerContext.enablePass(this.mixPass,!1),this.compNormalDepth&&this.compNormalDepth.enablePass(this.mixPass,!1),this.passUniforms(),this},disableEffect:function(){this.enabled&&(this.enabled=!1,this.renderer.mainComposer.removeCustomPassNEW([this.mixPass]))},enableEffect:function(){this.enabled||(this.enabled=!0,this.renderer.mainComposer.insertCustomPassBeforeNEW(this.mixPass,"postEffects1"),this.renderer.compForwardComposerContext.enablePass(this.mixPass,!0))},initEffect:function(e,s){e&&(this.mixPass.disabledByDefault=!0,this.mixPass.needsSwap=!1,this.mixPass.material.defines.POSTPRO=0,this.mixPass.material.transparent=!0,this.mixPass.material.needsUpdate=!0),this.insertComposerCustom(s,this.composers[0],this.mixPass,!0),this.renderer.initComposer("PickingGPUInstancing")},insertComposerCustom:function(s,t,i,o){e.mobileVersion||(null!==t&&s.composers.push(t),o&&(i.disabledByDefault=!0),s.mainComposer.insertCustomPassBeforeNEW(i,"postEffects1"),this.mixPass.composer=s.mainComposer,s.compForwardComposerContext.enablePass(i,!0),s.updateFinalComposer(!0))},update:function(e,s,t,i){for(this.composers[0].composerContext.needsUpdate=!0;this.passesNoScene.length>0;)this.passesNoScene.pop().setScene(s.scene);t.camera.projectionMatrixInverse.getInverse(t.camera.projectionMatrix),t.camera.matrixWorldInverse.getInverse(t.camera.matrixWorld),this.mixPass.uniforms.realProjectionMatrixInverse.value=t.camera.projectionMatrixInverse,this.mixPass.uniforms.realViewMatrix.value=t.camera.matrixWorld,this.mixPass.uniforms.camPos.value=this._vse.viewpoint.camera.position,this.mixPass.uniforms.sunPos.value=this.urban.environment.sun.sunPos,this.passUniforms()},setSize:function(e,s,t,i){if(this._parent(e,s)||t)for(var o=0;o<this.composers.length;++o)this.composers[o].setSize(this.width,this.height)},getMaxIteration:function(){return 0},totalMie:function(s,t){var i=new e.Vector3(183999185144339.78,277980239196605.28,407904795438610.94),o=.2*s*1e-17;return new e.Vector3(.434*i.x*o*t,.434*i.y*o*t,.434*i.z*o*t)},totalRayleigh:function(s){var t=new e.Vector3(5804542996261093e-21,13562911419845635e-21,30265902468824876e-21);return new e.Vector3(s*t.x,s*t.y,s*t.z)},smoothstep:function(e,s,t){var i=this.clamp((t-e)/(s-e),0,1);return i*i*(3-2*i)},clamp:function(e,s,t){return Math.min(Math.max(e,s),t)},sunClamp:function(e){return Math.max(.6,Math.min(.7,1-e))},passUniforms:function(){this.skyParams=this.urban.environment.skyParams;var e=this.smoothstep(0,.1,this.skyParams.mieCoefficient);this.mixPass.uniforms.turbidity.value=this.skyParams.turbidity,this.mixPass.uniforms.rayleigh.value=this.skyParams.reileigh,this.mixPass.uniforms.mieCoefficient.value=this.skyParams.mieCoefficient,this.mixPass.uniforms.mieDirectionalG.value=this.skyParams.mieDirectionalG,this.mixPass.uniforms.density.value=this.skyParams.density,this.mixPass.uniforms.showroom.value=this.urban.environment.showroom,this.mixPass.uniforms.totalMie.value=this.totalMie(this.skyParams.turbidity,this.skyParams.mieCoefficient),this.mixPass.uniforms.totalRayleigh.value=this.totalRayleigh(this.skyParams.reileigh),this.mixPass.uniforms.mieCoefficientS.value=e,this.mixPass.uniforms.sunEClamp.value=this.sunClamp(e)}})});