precision highp float;

const float Eta = 1.0/1.2;
const float FresnelPower1 = 0.6;
const float FresnelPower2 = 2.0;
const float F = ((1.0 - Eta) * (1.0 - Eta)) / ((1.0 + Eta) * (1.0 + Eta));
const float PI = 3.14159;

uniform mat4 uMBWMatrix;	
uniform mat4 uMVMatrix;
uniform mat4 uMPMatrix;

varying vec3 vTextureCoord;
varying vec3 vNormal;
varying vec3 vTangent;
varying vec3 vBinormal;
//uniform vec3 uViewer;

uniform vec2 uOSMX0;
uniform vec2 uOSMX1;


uniform vec4 myColor;

uniform float uFirst;
uniform float externalFactor ;
uniform float externalAlpha ;
uniform float externalThickness;

uniform samplerCube uShadowSampler;
uniform sampler2D uOSMSampler;
uniform samplerCube uReflection;

void main(void) 

{
		//gl_FragColor.rgba = vec4(vNormal.xyz,1);	
		//return;
    float uRefraction = 1.3333;
    float uLinesThickness = externalThickness;//1.0;
    float uOccultancy = 1.0;
    float uMixProj = 0.0;

	float Eta = 1.0/uRefraction;
	float F = ((1.0 - Eta) * (1.0 - Eta)) / ((1.0 + Eta) * (1.0 + Eta));
	
	vec3 ttt = vec3(-vNormal.z, vNormal.y, vNormal.x);
	
	vec4 OSMColor = texture2D(uOSMSampler, vTextureCoord.xy);
	vec3 ocean = vec3(122.0/255.0, 173.0/255.0, 214.0/255.0);
//	vec3 ocean = vec3(1.0, 0, 0);
    OSMColor.rgb = OSMColor.a * OSMColor.rgb + (1.0-OSMColor.a)*ocean;
    OSMColor.rgb *= externalFactor;
    OSMColor.a *= externalAlpha;
	
/*	float dist = distance(ocean, OSMColor.xyz);
	OSMColor.a = 0.5 + dist * 5.0;
	OSMColor.a = min(OSMColor.a, 1.0);*/
	OSMColor.a = 0.1 + 0.9*OSMColor.a;
	//OSMColor.a = min(OSMColor.a, 1.0);
	

	vec4 shadow;

	{
		shadow = vec4(1.0, 1.0, 1.0, 1.0);
		//vec4 diffuse = textureCube(uShadowSampler, ttt);
		//if(diffuse.r == 0.0)
		//{
		//	shadow.rgb = (0.6+0.4*diffuse.r)*shadow.rgb;
		//}
	}
	
	// Bump
	vec3 bump = vNormal; //vTextureCoord.xyz;
	
	// Fresnel
	vec3 ecPosition3  = vNormal.xyz - cameraPosition;
    vec3 i = normalize(ecPosition3);
	vec3 n = bump;
	float vRatio2 = F + (1.0 - F)*pow(1.0-clamp(dot(-i, n), 0.0, 1.0), FresnelPower2);
	vec3 vReflect = reflect(i, n);
    vec3 vRefract = refract(i,n,Eta);
//		gl_FragColor.rgba = vec4(vRefract,1);	
//		return;
	float k = -2.0*dot(vRefract, vNormal);
	vec3 vRR = k*vRefract + vNormal;
	vRefract = vRR;
	
	vec3 ttt1 = vec3(-vReflect.z, vReflect.y, vReflect.x);
	vec4 reflection2 = vec4(vRatio2*textureCube(uReflection, ttt1).rgb, 0);
	vRefract = normalize(vRefract);
	
	vec4 diffuse2;
	
	if(true)
	{
		diffuse2 = textureCube(uShadowSampler, vec3(-vRefract.z, vRefract.y, vRefract.x));
		diffuse2.a = 1.0 - diffuse2.r;
		
		// display meridians and parallels	
		if(uLinesThickness > 0.0)
		{
            float distance = 0.4*sqrt(length(cameraPosition)-1.0);
			float lat = 180.0*acos(vRefract.y)/3.1459;
			float lon = 180.0*asin(vRefract.z/sqrt(vRefract.z*vRefract.z + vRefract.x*vRefract.x))/3.1459;
            if(vRefract.x < 0.0)
            {
                lon = 180.0 - lon;
            }
            float modlat = mod(360.0+lat+10.0, 20.0);
            float modlon = mod(360.0+lon, 20.0);
			if(abs(modlat) < 0.25*uLinesThickness*distance || abs(modlon) < 0.5*uLinesThickness*distance )
			{
				diffuse2.a = 1.0;
			}
            
			lat = 180.0*acos(vNormal.y)/3.1459;
			lon = 180.0*asin(vNormal.z/sqrt(vNormal.z*vNormal.z + vNormal.x*vNormal.x))/3.1459;
            if(vNormal.x < 0.0)
            {
                lon = 180.0 - lon;
            }
            modlat = mod(360.0+lat+10.0, 20.0);
            modlon = mod(360.0+lon, 20.0);
			if(abs(modlat) < 0.25*uLinesThickness*distance|| abs(modlon) < 0.5*uLinesThickness*distance )
			{
				OSMColor = OSMColor.a * OSMColor + (1.0 - OSMColor.a)*vec4(1.0, 1.0, 1.0, 1.0);
			}
		}
	}
//	else
//	{
//		diffuse2 = vec4(1, 1, 1, 1);
//	}
	
	// Fresnel
	
	vec4 reflection;
	vec4 diffuse1 = vec4(0.0*vec3(77.0/255.0,132.0/255.0,175.0/255.0), 0.7);//k/uOccultancy);
	reflection = reflection2;
	 
	if (diffuse2.a > 0.5) diffuse2 = vec4(0.2,0.2,0.2,1); 
	else diffuse2 = vec4(0,0,0,0.0);
	
	vec4 tmpCol;
	tmpCol.rgb = (1.0-uMixProj)*1.5*reflection.rgb + diffuse1.a*diffuse1.rgb + (1.0-diffuse1.a)*diffuse2.rgb;
	tmpCol.a = max(diffuse1.a, diffuse2.a);
	
	float kk = 0.5;
	gl_FragColor = kk*tmpCol + (1.0-kk)*shadow;
	gl_FragColor.rgb = (1.0 - gl_FragColor.a*gl_FragColor.a)*vec3(1.0, 1.0, 1.0) + gl_FragColor.a*gl_FragColor.a*gl_FragColor.rgb;
	gl_FragColor.a = 1.0;

	gl_FragColor = (1.0-OSMColor.a)*gl_FragColor.r*OSMColor + OSMColor.a*OSMColor;
    //gl_FragColor.rgb = OSMColor.rgb;
	gl_FragColor.a = 1.0;
}
