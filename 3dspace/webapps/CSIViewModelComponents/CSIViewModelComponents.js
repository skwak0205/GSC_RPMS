define("DS/CSIViewModelComponents/CSIViewModelWebComponent",["DS/CSIViewModelWebProcessor/CSIVMClientManager","DS/CSIViewModelWebInterfaces/CSIVMClientTreeKey","DS/CSIViewModelWebInterfaces/CSIVMClientSelectionObject","DS/WebVisuParameters/WebVisuSceneGraphUpdater"],function(e,t,o,n){"use strict";function r(e){Object.defineProperty(this,"_options",{value:e,configurable:!1,writable:!1})}return r.prototype.getManager=function(){return this._manager},r.prototype.initialize=function(){if(this._manager||(this._manager=e.createClientManager(),this._manager&&this._manager.setCBOnCSICommunicationRequest(function(){var e={};if(void 0!==this.getExecutionContext){var t=this.getExecutionContext();if(t){var o=t.getComponent("CSICommunication");o&&o.isConnected()&&(e.node=o.getApplicationNode(),e.serverNodeId=o.getServerNodeId())}}return e}.bind(this))),!this._manager.getNotifier(t.prototype.ViewType.View3D)){const e=this.getExecutionContext(),o=e?e.getComponent("Viewer"):null,i=o?o.get3DViewer():null;i||(console.error("********************************************"),console.error("* Because of multi-viewer management initialize need to be called with a valid CSIViewer"),console.error('* Best way to provide the component is from the wafr configuration and have the CSIViewer to be defined with the key "Viewer"'),console.error("* In case of issues contact ywg6"),console.error("********************************************"));var r=new n(i);this._manager.setNotifier(t.prototype.ViewType.View3D,r)}return o.prototype._declareType(),UWA.Class.Promise.resolve()},r.prototype.clean=function(){return UWA.Class.Promise.resolve()},r.prototype.destroy=function(){return this._manager.reload(),UWA.Class.Promise.resolve()},r});