
/*@fullReview  ZUR 15/11/23 2017x Param Skeleton*/
/*global define,console*/
/*jslint nomen: true*/
define('DS/ParameterizationSkeleton/Views/ParamCollaboration/CollabItemsListView',
    [
        'DS/W3DXComponents/Views/Layout/GridScrollView',
        'DS/W3DXComponents/Views/Item/TileView',
        'DS/W3DXComponents/Views/Item/SetView',
        'css!DS/W3DXComponents/W3DXComponents'
    ], function(GridScrollView, ItemViewTile, ItemViewSet) {
        'use strict';
        var ItemsListView,
            _name = 'list';
        ItemsListView = ItemViewSet.extend({
            name : _name,
            defaultOptions : {
                contents : {
                    //defaultView: 'tile',
                    useInfiniteScroll : false,
                    usePullToRefresh : false,
                    selectionMode : 'oneToOne',
                    views : [ {
                        'id' : 'tile',
                        //'title' : 'Tile View',
                        'view' : GridScrollView,
                        'itemView' : ItemViewTile,
                        'scrollPosition' : 'center',
                        'layout' : {
                            column : 2
                        }
                    } ]
                }
            },

            destroy: function(options) {

                if (this.isDestroyed) {
                    return;
                }

                if (this.collection) {
                    this.stopListening(this.collection, this._externalEvents);
                }

                return this._parent.apply(this, arguments);
            },

            reload: function() {
                this.container.addClassName('loading');
                //  /!\ pour compenser l'absence de resetState dans la pageableCollection
                this.collection.state.totalRecords = null;
                //this.collection.reset();
                this.collection.getFirstPage();
            }
        });

        return ItemsListView;
    });

define('DS/ParameterizationSkeleton/Views/ParameterizationSystemsSafety/ParameterizationSystemsSafetyConstants', [], function() {
    'use strict';

    return Object.freeze({
        NEW_NOT_DEPLOYED: 'newNotDeployed',
        DEPLOYED: 'deployed',
        ADD: 'add',
        REMOVE: 'remove',
        MODIFY: 'modify'
    });
});


define('DS/ParameterizationSkeleton/Model/DELConfigurationParameterizationModel/DELConfigurationParamTranslationModel',
// -- Module Dependancies --
[
  'UWA/Core',
  'DS/Tree/TreeNodeModel'
],
// -- Main function with aliases for loaded modules

function (Core, Model) {
  'use strict';

  function DELConfigurationParamTranslationModel(options) {
    var that = this;

    this.options = {
      label: '',
      nls : ''
    };

    this.options = UWA.extend(this.options, options);

    that.translateValuesToNls();
    Model.call(this, this.options);
  };

  DELConfigurationParamTranslationModel.prototype = Object.create(Model.prototype);

  DELConfigurationParamTranslationModel.prototype.getGrid = function getGrid() {
    var that = this;
    return that.options.grid;
  };

  DELConfigurationParamTranslationModel.prototype.addGridAttributes = function addGridAttributes(attr) {
    var that = this;
    var keys = Object.keys(attr);
    var values = Object.values(attr);

    if (keys.length && values.length)
      that.options.grid[keys[0]] = values[0];
  };

  DELConfigurationParamTranslationModel.prototype.getData = function getData() {
    var that = this;
    return that.options.data;
  };

  /*DELConfigurationParamTranslationModel.prototype.addData = function getData() {
    var that = this;
    return that.options.data;
  };*/

  DELConfigurationParamTranslationModel.prototype.translateValuesToNls = function translateValuesToNls() {
    var that = this;

    if (that.options.nls === null || that.options.nls === undefined)
      return;

    var nodeKeys = Object.keys(this.options.data);
    var nodeValues = Object.values(this.options.data);

    var listOfNlsKeys = Object.keys(that.options.nls);
    var listOfNlsValues = Object.values(that.options.nls);

    if (this.options.grid === undefined)
      this.options.grid = Object.assign({}, this.options.data);

    var nodeValuesLength = nodeValues.length;
    for (var j=0;j<nodeValuesLength;j++)
    {
      var idx = listOfNlsKeys.indexOf(nodeValues[j]);
      if (idx >= 0)
        this.options.grid[nodeKeys[j]] = listOfNlsValues[idx];
    }
  };

  return UWA.namespace('DS/ParameterizationSkeleton/Model/DELConfigurationParameterizationModel/DELConfigurationParamTranslationModel', DELConfigurationParamTranslationModel);
}); // -- End of require

define('DS/ParameterizationSkeleton/Views/ParameterizationXEngineering/ParameterizationXEngineerConstants', [], function () {

	'use strict';

	const contants = {
		NEW_NOT_DEPLOYED: 'NewNotDeployed',
		USER_DEFINED: 'UserDefined',
		DEPOLOYED: 'Deployed',
		ADD: 'Add',
		REMOVE: 'Remove',
		MODIFY: 'Modify',
		OPERATION: 'UserOperation',
		ORDER: 'Order',
		TYPE: 'Type',
		NAME: 'Name',
		VALUE: 'Value',
		COUNTER_UNICITY: 'CounterUnicity',
		COUNTER_UNICITY_TRUE: "counterUnicityTrue",
		COUNTER_UNICITY_VALUE: "True",
		UPDATE_HIGHEST_COUNTER: 'UpdateAllCountersToHighestCounterValue',
		AVOID_DUP_COUNTER : "AvoidDupCounterUserSelectionRequired",
		AVOID_DUP_COUNTER_VALUE : "True",
		ATTRIBUTE: 'AttributeName',
		ATTRIBUTE_NLS_NAME: 'Attribute_NLS',
		COUNTER: 'CounterSize',
		FORMULA_ROW: "FormulaRow",
		FORMULA_CELL: "Formula",
		STRATEGY_ROW: "StrategyRow",
		BUSINESS_LOGIC: "BLDefined",
		STRATEGY_CELL: "Strategy",
		FORMAT_FREE: 'Free',
		FORMAT_STRING: 'String',
		FORMAT_ATTRIBUTE: 'Attribute',
		FORMAT_COUNTER: 'Counter',
		MAX_ROWS: 15,
		WIDTH_ARRAY: [15, 15, 15, 25, 15, 15, 15]

	};

	return Object.freeze(contants);

});

/*@fullReview  ZUR 15/11/23 2017x Param Skeleton*/
/*global define*/
define('DS/ParameterizationSkeleton/Model/ParameterizationDomainModel',
     [
        'UWA/Core',
        'UWA/Class/Model'
    ], function (UWA, Model) {
        "use strict";
        return Model.extend({
            defaults: function() {
                return {
                    id : '',
                    family : ''
                };
            }
        });
    });


/*global define*/
define('DS/ParameterizationSkeleton/Model/ParameterizationLifecycle/LifecycleListModel',
    [
        'UWA/Class/Model'
    ], function (Model) {
        "use strict";
        return Model.extend({
            defaults: function() {
                return {
                    title : '',
                    id: '',
                    subtitle : '',
                    date : '',
                    content : '',
                    image : '',
                    icon: '',
                    modifyTopology : true,
                    renameStates: true,
                    supportRules: true
                };
            }
        });
    });


/*@fullReview  NZV  17/03/02 FUN066122 Added compareArray */
/*@fullReview  ZUR 15/07/29 2016xFD01 Param Widgetization NG*/
/*global define, widget, document, setTimeout, console*/
/*jslint plusplus: true*/
/*jslint nomen: true*/
define('DS/ParameterizationSkeleton/Views/ParametersLayoutViewUtilities',
    [
        'UWA/Core',
        'UWA/Controls/Accordion',
        'DS/UIKIT/Accordion',
        'DS/UIKIT/Input/Button',
        'DS/UIKIT/Modal',
        'DS/UIKIT/Alert',
        'DS/UIKIT/Popover',
        'DS/UIKIT/Spinner',
        'DS/UIKIT/Autocomplete',
        'i18n!DS/ParameterizationSkeleton/assets/nls/ParamSkeletonNLS'
    ],
    function (UWA,
              UWAccordion, Accordion,
              Button,
              Modal,
              Alert, Popover, Spinner, Autocomplete,
              ParamSkeletonNLS) {

        'use strict';

        var UIview = {

            createFamilyAccordion : function () {
                var iAccord = new UWAccordion({
                    className: 'visu-debug-panel-section',
                    backgroundColor : 'white',
                    multiSelect : true
                });
                return iAccord;
            },

            createFamilyUIKITAccordion : function (parentDiv) {
                var iAccord = new Accordion({
                    className: 'styled divided filled',
                    exclusive: false,
                    items : []
                }).inject(parentDiv);
                return iAccord;
            },

            createInfoDiv : function (iTooltip) {
                var isubDiv =  UWA.createElement('div', {
                    'height'     : '5%'
                });
                UWA.createElement('p', {
                    text: iTooltip,// font-3dsbold 
                    'class': ''//font-3dslight
                }).inject(isubDiv);
                return isubDiv;
            },

            createParamsContainerDiv : function () {
                var iParamsDIV =  UWA.createElement('div', {
                        'id' : 'parametersDiv'
                    });
                return iParamsDIV;
            },

            createWdgAlert : function () {
                var iAlert = new Alert({
                    closable: true,
                    visible: true,
                    autoHide : true,
                    hideDelay : 2500
                });
                return iAlert;
            },

            beingDeployed: function (imageCell, imgTitle) {
                var paramDeploySpinner = new Spinner({visible : true});
                imageCell.empty();
                paramDeploySpinner.inject(imageCell);
                imageCell.set("Title", imgTitle);
            },

            beingModified : function (imageCell, imgTitle, iconSize) {
                //var imgClass = 'fonticon fonticon-2x fonticon-pencil';
                //var imgClass = 'fonticon fonticon-' + iconSize + 'x fonticon-pencil';
                var imgClass = 'fonticon fonticon-' + iconSize + 'x fonticon-cog';

                imageCell.empty();
                UWA.createElement('span', {
                    'class' : imgClass
                }).inject(imageCell);

                imageCell.set("Title", imgTitle);
            },

            updateIcon : function(result, imageCell) {

                var imgSpan,
                    imgTitle = ParamSkeletonNLS.deployedParamtxt,
                    imgClass = 'fonticon fonticon-2x fonticon-check',
                    iconColor = 'green';

                imageCell.empty();

                if (result != true) {
                    imgClass = 'fonticon fonticon-2x fonticon-alert';
                    imgTitle = ParamSkeletonNLS.notdeployedParamtxt;
                    iconColor = 'red';
                }
                imgSpan = UWA.createElement('span', {
                    'class' : imgClass
                }).inject(imageCell);
                imgSpan.setStyle("color", iconColor);
                imageCell.set("Title", imgTitle);
            },

            computePopoverPos : function (i, familyPosition, nbofRows) {
                var popoverPosition = "left";

                if (familyPosition === "first") {
                    popoverPosition = "bottom";
                } else if ((familyPosition === "last") && (i == nbofRows - 1)) {
                    popoverPosition = "top";
                }

                return popoverPosition;
            },

            isInteger : function (str) {
                str = str.trim();
                return (/^[-+]?[0-9]+$/).test(str);
            },

            isReal : function(value) {
                return ("." != value && "-" != value && "-." != value && /^-{0,1}\d*\.{0,1}\d*$/.test(value));
            },

            testDataType : function (iValue, iType) {
                if (iType === "integer") {
                    return this.isInteger(iValue);
                }
                return true;
            },

            getTypeErrorMsgNLS : function (iType) {
                if (iType === "integer") {
                    return ParamSkeletonNLS.Not_Integer;
                }
                return "error";
            },

            inputErrorCell : function (imageCell, imgTitle, imgColor, msgPopOver) {
                var imgSpan,
                    imgClass = 'fonticon fonticon-2x fonticon-attention';
                if (msgPopOver !== null) {
                    if (msgPopOver.isVisible) { msgPopOver.hide(); }
                    msgPopOver.destroy();
                } 
                imageCell.empty();
                imgSpan = UWA.createElement('span', {
                    'class' : imgClass
                }).inject(imageCell);

                imgSpan.setStyle("color", imgColor);
                imageCell.set("Title", "");
                msgPopOver = new Popover({
                    target   : imgSpan,
                    trigger  : "hover",
                    animate  : "true",
                    position : 'top',
                    body     : imgTitle,
                    title    : ''
                });
                msgPopOver.toggle();
                if (msgPopOver.isVisible) {
                    setTimeout(function () {msgPopOver.hide(); }, 3000);
                }
                return msgPopOver;
            },

            buildPopoverSpan : function (iContainerCell, tooltipNlsTxt) {
                var popoverTooltip,
                    imgInfoSpan = UWA.createElement('span', {
                        'class' : 'fonticon fonticon-info'
                    }).inject(iContainerCell);

                imgInfoSpan.setStyle("color", "black");

                popoverTooltip = new Popover({
                    target   : imgInfoSpan,
                    trigger  : "hover",
                    animate  : "true",
                    position : "top",
                    body     : tooltipNlsTxt,
                    title    : ''
                });
            },


            buildDeployStsCell : function (isParamDeployed, cellWidth, iconSize, cellAlign) {
                var imgCell, imgSpan,
                    imgTitle = ParamSkeletonNLS.deployedParamtxt,
                    imgClass = 'fonticon fonticon-' + iconSize + 'x fonticon-check',
                    iconColor = 'green';

                if (isParamDeployed === "false") {
                    imgClass = 'fonticon fonticon-' + iconSize + 'x fonticon-cog';
                    imgTitle =  ParamSkeletonNLS.notdeployedParamtxt;
                    iconColor = 'orange';
                } else if (isParamDeployed === "NewNotDeployed") {
                    imgClass = 'fonticon fonticon-' + iconSize + 'x fonticon-cog';
                    imgTitle =  ParamSkeletonNLS.newNotdeployedParam;
                    iconColor = 'black';
                }

                imgCell = UWA.createElement('td', {
                    'width' : cellWidth, //'15%',
                    'align' : cellAlign,//'class': 'paramtd','vertical-align': 'text-bottom',
                    'title' : imgTitle
                });

                imgSpan = UWA.createElement('span', {
                    'class' : imgClass
                }).inject(imgCell);

                imgSpan.setStyle("color", iconColor);
                imgCell.setStyle("vertical-align", "text-bottom");
                imgCell.setStyle("min-width", "46px");//NZV-fixed spinner issue
                return imgCell;
            },

            buildControlCell : function (iParamID, iArgument, cellWidth) {
                var controlObjectCell = UWA.createElement('td', {
                    'width' : cellWidth,
                    'align' : 'right'//nzv-IR-574318-3DEXPERIENCER2019x
                });
                controlObjectCell.setData('argumentNode', {
                    paramid     : iParamID,
                    argumentid  : iArgument.id,
                    defaultval  : iArgument.defaultValue,
                    argtype     : iArgument.type,
                    inputtype   : iArgument.input
                });
                controlObjectCell.setStyle("vertical-align", "text-bottom");
                return controlObjectCell;
            },
            //IR-733455-3DEXPERIENCER2021x : add argument to recevice tool tip for Reset button
            createApplyResetToolbar : function (insertdivID, activateApplyBtn, applyParams, confirmationModalShow, NLSTooltipForReset) {
                var applyDiv, tableButtons, lineButtons, buttonApplyCell, applyBttn,
                    buttonResetCell, resetBbttn, resetTooltip = ParamSkeletonNLS.ResetOnServertooltip;
                    //that = this;
                    //resetwidth = '100%';
                    //NLSTooltipForReset
                    if (NLSTooltipForReset === undefined) {
                        resetTooltip = ParamSkeletonNLS.ResetOnServertooltip;
                    } else {
                        resetTooltip = NLSTooltipForReset;
                    }
                applyDiv =  UWA.createElement('div', {
                    'id': 'ApplyResetDiv'
                }).inject(insertdivID);
                //                            
                tableButtons = UWA.createElement('table', {
                    'class' : '',
                    'id' : '',
                    'width' : '100%'
                }).inject(applyDiv);

                lineButtons = UWA.createElement('tr').inject(tableButtons);//tbody

                if (activateApplyBtn === true) {
                    buttonApplyCell = UWA.createElement('td', {
                        'width' : '50%',
                        'Align' : 'left'
                    }).inject(lineButtons);

                    applyBttn =  new Button({
                        className: 'primary',
                        id : 'buttonExport',
                        icon : 'export',//'download'//value: 'Button',          
                        attributes: {
                            disabled: false,
                            title: ParamSkeletonNLS.Applytooltip,//IR-651121-3DEXPERIENCER2019x/20x
                            text : ParamSkeletonNLS.Apply
                        },
                        events: {
                            onClick: function () {
                                applyParams();
                            }
                        }
                    }).inject(buttonApplyCell);
                    applyBttn.getContent().setStyle("width", 130);
                }

                buttonResetCell = UWA.createElement('td', {
                    'width' : '50%',
                    'Align' : 'right'//center
                }).inject(lineButtons);

                resetBbttn = new Button({
                    className: 'warning',
                    icon: 'loop',
                    attributes: {
                        disabled: false,
                        title: resetTooltip,
                        text : ParamSkeletonNLS.Reset
                    },
                    events: {
                        onClick: function () {
                            //that.resetParamsinSession();//testPreviewBlock();                               
                            confirmationModalShow();
                        }
                    }
                }).inject(buttonResetCell);

                resetBbttn.getContent().setStyle("width", 130);
                return applyDiv;
            },

            buildFormulaLine : function () {
                var cellLabel,
                    FormulaDetail = '{' + ParamSkeletonNLS.Prefix + '}-{' + ParamSkeletonNLS.Interfix + '}-<' + ParamSkeletonNLS.Counter + '>-{' + ParamSkeletonNLS.Suffix + '}',
                    lineParam = UWA.createElement('tr', {title: ''});

                UWA.createElement('td', {
                    'width': '30%',
                    'title': ParamSkeletonNLS.FormulaTxt,
                    'html' : ParamSkeletonNLS.FormulaTxt
                }).inject(lineParam);

                cellLabel = UWA.createElement('td',
                    {'width': '70%', 'colspan': '2', 'align': 'left', 'title': ''}).inject(lineParam);

                UWA.createElement('p', {
                    text: FormulaDetail,
                    'class': 'lead'//'uwa-input'//'width':'100%'    
                }).inject(cellLabel);

                return lineParam;
            },

            UpdateFinalFormatOverView : function(iPrefix, iAffix, iSuffix, iSeparator, iAppType, iInput) {
                var previewValue;

                if (iAffix != "") {
                    iAffix  = iAffix + iSeparator;
                    if (iPrefix != "") { iPrefix = iPrefix + iSeparator; }
                } else if ((iAppType == "CBP") && (iPrefix != "")) {
                    //To fix IR-529946-3DEXPERIENCER2017x\18x removed test for iAppType == "CBP"
                    //IR-685759-3DEXPERIENCER2020x : Revert change which we made with IR-529946-3DEXPERIENCER2017x\18x 
                    iPrefix = iPrefix + iSeparator;
                }

                if (iSuffix != "") {iSuffix = iSeparator + iSuffix; }

                previewValue = iPrefix + iAffix + '<' + ParamSkeletonNLS.Counter + '>' + iSuffix;
                iInput.setValue(previewValue);
                iInput.elements.input.title = previewValue;
            },

            getNamingControlInput : function (inputControls, inputID) {
                var foundInput;
                inputControls.forEach(function (iInput) {
                    if (iInput.elements.input.id == inputID) {
                        foundInput =  iInput;
                    }
                });
                return foundInput;
            },

            getCustoNamingElement : function (custoNamingsArray, iType) {
                var i;
                for (i = 0; i < custoNamingsArray.length; i++) {
                    if (custoNamingsArray[i].objTypeID == iType) {
                        return custoNamingsArray[i];
                    }
                }
                return custoNamingsArray[0];//default
            },

            getIndexInNamingArray : function(custoNamingsArray, iType) {
                var i;
                for (i = 0; i < custoNamingsArray.length; i++) {
                    if (custoNamingsArray[i].objTypeID == iType) {
                        return i;
                    }
                }
                return 0;
            },

            getCommonNamingElementItr : function(commonNamingArray, iID) {
                var i;
                for (i = 0; i < commonNamingArray.length; i++) {
                    if (commonNamingArray[i].namingID == iID) {
                        return i;
                    }
                }
                return 0;//default
            },

            testSpecialCharacters : function (iString, iAdditionalCharsToTest) {
                var i,
                    iChars = "!#$%^&*()+=[]\\\';,/{}|\":<>?";//-

                if (typeof iAdditionalCharsToTest === 'undefined') {
                    iAdditionalCharsToTest = '';
                } else {
                    iChars += iAdditionalCharsToTest;
                }

                for (i = 0; i < iString.length; i++) {
                    if (iChars.indexOf(iString.charAt(i)) != -1) {
                        return true;
                    }
                }

                return false;
            },

            containsAccents : function (iString) {
                var i,
                    accentChars = "ÀÃÂÄÅÇÑñÇçÈÉÊËÒÓÔÕÖØáàâãäåèéêëðòóôõöøùúûüýÿÑñçÙÚÛÜìîïÎÌ";
                for (i = 0; i < iString.length; i++) {
                    if (accentChars.indexOf(iString.charAt(i)) !== -1) {
                        return true;
                    }
                }
                return false;
            },

            containsBlanks : function (iStr) {
                if (/\s/.test(iStr)) {
                    return true;
                }
                return false;
            },

            removeBlancks : function (iInputStr) {
                return iInputStr.replace(/ /g, '');
            },

            CheckforRaisedWarnings : function(warnArrays) {
                var i;
                for (i = 0; i < warnArrays.length; i++) {
                    if (warnArrays[i].warnRaised == true) {
                        return "WARN";
                    }
                }
                return "OK";
            },

            getNamingDeployCellSts : function (tbodyreflist) {
                var iLines = tbodyreflist[0].children;
                return (iLines[0].cells[2]);
            },

            compareArray : function(arr1, arr2) {
                var isBothSame = false,
                    elementsFound = 0;

                if (arr1.length != arr2.length) {
                    return isBothSame;
                }

                arr1.forEach(function (arr1Element) {
                    arr2.forEach(function (arr2Element) {
                        if (arr2Element === arr1Element) {
                            elementsFound++;
                            // break;
                        }
                    });
                });

                if (elementsFound == arr1.length) {
                    isBothSame =  true;
                }
                return isBothSame;
            },

            /*//ZUR : Proto : Array view
            computeColumnsWidths : function (columnsList, widthArray) {
                var i, meanWidth,
                    initArrayLength = widthArray.length,
                    newArrayWidth = [];

                newArrayWidth.push(widthArray[0]);
                newArrayWidth.push(widthArray[1]);

                if (columnsList.length > 0) {
                    meanWidth = Math.round(widthArray[2] / columnsList.length);
                }

                for (i = 0; i < columnsList.length; i++) {
                    if (columnsList[i].widgetSize !== undefined) {
                        newArrayWidth.push(parseInt(columnsList[i].widgetSize, 10));
                    } else {
                        newArrayWidth.push(meanWidth);
                    }
                }
                newArrayWidth.push(widthArray[initArrayLength - 1]);
                return newArrayWidth;
            },*/

            buildImgSpan : function (iconChoice, iconSize, iconColor) {
                var imgClass = 'fonticon fonticon-' + iconSize + 'x fonticon-' + iconChoice,
                    imgSpan = UWA.createElement('span', {
                        'class' : imgClass
                    });

                imgSpan.setStyle("color", iconColor);
                return imgSpan;
            },

            buildImgCell : function (iconChoice, iconSize, iconColor, imgTitle, cellWidth, cellAlign) {
                var imgCell, imgSpan;

                imgCell = UWA.createElement('td', {
                    'width' : cellWidth, //'15%',
                    'align' : cellAlign,//'class': 'paramtd','vertical-align': 'text-bottom',
                    'title' : imgTitle
                });
                imgSpan = UIview.buildImgSpan(iconChoice, iconSize, iconColor);
                imgSpan.inject(imgCell);
                imgCell.setStyle("vertical-align", "text-bottom");

                return imgCell;
            },
            //NZV : Added with FUN085423 and removed createDeleteActionElements
            createActionElements : function (iTitle, removebtn) {
                var actionelts = [], actionSpan = UWA.createElement('span'), actionBtn, actionPop;
                if (removebtn == true) {
                    actionBtn = new Button({
                        className: 'close',
                        icon: 'fonticon fonticon-trash fonticon-1.5x',//value: 'Button', //fonticon-cancel  fonticon-minus-circled    
                        attributes: {
                            disabled: false,
                            'aria-hidden' : 'true'
                        }
                    }).inject(actionSpan);
                } else {
                    actionBtn = new Button({
                        className: 'close',
                        icon: 'fonticon fonticon-pencil fonticon-1.5x',//value: 'Button', //fonticon-cancel  fonticon-minus-circled    
                       
                        attributes: {
                            disabled: false,
                            'aria-hidden' : 'true'
                        }
                    }).inject(actionSpan);                  
                }

                actionPop = new Popover({
                      //class: 'parampopover',
                    target: actionSpan,//iCell,                        
                    trigger : "hover",
                    animate: "true",
                    position: "top",
                    body: iTitle,
                    title: ''//iParamObj.nlsKey
                });

                actionelts.push(actionSpan);
                actionelts.push(actionBtn);
                actionelts.push(actionPop);
                
                return actionelts;
            },

            /* // ZUR : Proto Array View
            buildColumnsTitleLine : function (columnsList, widthArray) {
                var i, columnCell,
                    titlesLine = UWA.createElement('tr', {title: ''});

                columnCell = UWA.createElement('td', {
                    'width' : widthArray[0].toString() + '%'
                }).inject(titlesLine);

                columnCell = UWA.createElement('td', {
                    'width' : widthArray[1].toString() + '%'
                }).inject(titlesLine);

                for (i = 0; i < columnsList.length; i++) {

                    columnCell = UWA.createElement('td', {
                        'width' : widthArray[i + 2].toString() + '%',
                        'title' : columnsList[i].tooltipNlsKey,
                        'id'    : columnsList[i].id
                    }).inject(titlesLine);

                    UWA.createElement('h4', {
                        text   : columnsList[i].nlsKey,
                        'class': 'font-3dslight' // font-3dsbold
                    }).inject(columnCell);
                }

                columnCell = UWA.createElement('td', {
                    'width' : widthArray[widthArray.length - 1].toString() + '%'
                }).inject(titlesLine);

                UWA.createElement('h4', {
                    text   : 'isDeployed',
                    'class': 'font-3dslight' // font-3dsbold
                }).inject(columnCell);

                return titlesLine;
            },*/

            buildSeparationLine : function (iText) {
                var cellTitle,
                    sepLine = UWA.createElement('tr');

                cellTitle = UWA.createElement('td', {
                    'colspan': '3',
                    'align': 'left'
                }).inject(sepLine);

                UWA.createElement('h4', {
                    text: iText,
                    'class': 'font-3dslight'
                }).inject(cellTitle);

                return sepLine;
            },

            createParamMask : function (iElement, iText) {
                var imgClass = 'fonticon fonticon-1x fonticon-attention',
                    imask = new UWA.createElement('div', { 'class': 'pmask' });

                new UWA.createElement('div', {
                    'class': 'pmask-wrapper',
                    html: {
                        tag: 'div',
                        'class': 'pmask-content',
                        html: [
                            new UWA.createElement('span', {
                                'class' : imgClass
                            }),
                            new UWA.createElement('span', {
                                'class': 'text',
                                text: iText
                            })
                        ]
                    }
                }).inject(imask);

                imask.inject(iElement);
            },

            isOnTheCloud : function (platformID) {

                if ((platformID !== null) &&
                        (platformID !== "") &&
                           (platformID != "OnPremise")) {
                    return true;
                }

                return false;
            },

            buildNoLicenseUI : function () {

                var licenseAlert = new Alert({
                    className : 'param-alert',
                    closable: true,
                    visible: true,
                    renderTo : document.body,
                    autoHide : false,
                    hideDelay : 5000,
                    messageClassName : 'warning'
                });

                return licenseAlert;
            },

            // getDisplayNameForTenant : function (iTenantID, iPlaformCollection) {

            //     var iTenantName = iTenantID;

            //     iPlaformCollection.forEach(function (model) {
            //         if (model.get('id') === iTenantID) {
            //             iTenantName = model.get('displayName');
            //         }
            //     });

            //     return iTenantName;
            // },

            getObjValFromACollection : function (valueToCompare, collectionOfObject, propNameToCompare, propNameToFetch) {

                var resultValue = "";

                collectionOfObject.forEach(function (model) {
                    if (model[propNameToCompare] === valueToCompare) {
                        resultValue = model[propNameToFetch];
                    }
                });

                return resultValue;
            },

            isDashboardChoosenTenantInPreferences : function (iDashboardTenantID, iPreferences) {

                var isTenantInPreferences = false;

                iPreferences.forEach(function (iPref) {
                    if (iPref.id === iDashboardTenantID) {
                        isTenantInPreferences = true;
                    }
                });

                return isTenantInPreferences;
            },
            compareContentNamingObject : function(Obj1, Obj2) {
                if (Obj1.nlsKey !== undefined && Obj2.nlsKey !== undefined) {
                    return Obj1.nlsKey.localeCompare(Obj2.nlsKey);
                }
            },
            //ZUR - IR-518037-3DEXPERIENCER2017x\18, IR-689657-3DEXPERIENCER2019x\20x
            showContextualDeleteModal : function (iTargetElement, modalCssClass, nlsMessage, nlsMsgOnOkBtn, nlsMsgOnCancelBtn, nlsTitle, removeOperation, data) {
                var deleteConfirmModal, deleteDiv,
                    lineModal, iCell, modalDeleteBtn, modalCancelBtn, mainText;

                deleteDiv = UWA.createElement('div', {
                    'id': 'deleteAttributeConfDiv'
                });

                lineModal = UWA.createElement('tr').inject(deleteDiv);
                iCell = UWA.createElement('td').inject(lineModal);
                //FUN102019 21x FD03
                if(nlsMessage.includes("\n")) {
                    var splitedStr = nlsMessage.split('\n');
                    splitedStr.forEach(function (splitedMsg) {
                         mainText = UWA.createElement('p', {
                            text   : splitedMsg,
                            'class': 'font-3dslight'
                        }).inject(iCell);                       
                    }); 

                } else {
                    mainText = UWA.createElement('p', {
                        text   : nlsMessage,
                        'class': 'font-3dslight'
                    }).inject(iCell);
                }

                UWA.createElement('br').inject(mainText);
                UWA.createElement('br').inject(mainText);

                UWA.createElement('p', {
                    text   : ParamSkeletonNLS.AreYouWantToProceed,
                    'class': 'font-3dslight'
                }).inject(mainText);

                modalDeleteBtn = new Button({
                    value : nlsMsgOnOkBtn, //ParamSkeletonNLS.RemoveElement,
                    className: 'attrConfRemoveBtn warning',
                    id    : "modalOKButton"
                });

                modalCancelBtn = new Button({
                    value : nlsMsgOnCancelBtn, //ParamSkeletonNLS.CancelButton,
                    className: 'attrConfCancelBtn default',
                    id    : 'modalCancelButton'
                });

                deleteConfirmModal = new Modal({
                    className : modalCssClass,
                    overlay : true,
                    closable : true,
                    header : '<h4>' + nlsTitle/*ParamSkeletonNLS.ConfirmDelete*/ + '</h4>',
                    body :   deleteDiv,
                    footer  : [ modalDeleteBtn, modalCancelBtn ]
                }).inject(iTargetElement);
                //deleteConfirmModal.setStyle("width")
                deleteConfirmModal.getContent().getElements('.attrConfRemoveBtn').forEach(function (element) {
                    element.addEvent('click', function () {
                        deleteConfirmModal.destroy();
                        removeOperation(data);
                    });
                });

                deleteConfirmModal.getContent().getElements('.attrConfCancelBtn').forEach(function (element) {
                    element.addEvent('click', function () {
                        deleteConfirmModal.destroy();
                    });
                });
                deleteConfirmModal.show();
            },

            showSearchInput: function(that) {
                var root, placeHolderMsg, fragmentSearch, searchDiv, noResultsMessage,
                    prefix = that.model._attributes.domainid, selectedItem,
                    autoCompAxiom = [], searchNode = null,
                    fragmentDataSet = {
                        'name' : 'Fragments',
                        'items': [{}],
                        searchEngine: function (dataset, text) {
                            var items = dataset.items;
                            if (text.length) {
                                return items.filter(function (item) {
                                    return (item.value && (item.subLabel.toLowerCase().contains(text.toLowerCase()) || item.value.toLowerCase().contains(text.toLowerCase())));
                                });
                            }
                            return [];
                        }
                    };

                that.collection._models.forEach(function (val) {
                    autoCompAxiom.push({
                        value : val._attributes.title,
                        subLabel : val._attributes.id
                    });
                });
                if (that.model.id === "AttributeDef") {
                    placeHolderMsg =  ParamSkeletonNLS.SelectAType; 
                    noResultsMessage = ParamSkeletonNLS.NoTypeFound;
                } else if (that.model.id === "XCADParameterization") {
                    placeHolderMsg =  ParamSkeletonNLS.SelectACADConfiguration; 
                    noResultsMessage = ParamSkeletonNLS.NoCADConfigurationFound;
                } else {
                    placeHolderMsg = ParamSkeletonNLS.SelectAPolicy; 
                    noResultsMessage = ParamSkeletonNLS.NoPolicyFound;
                }
                searchNode = this.container.getElement("#searchAutoCompleteInput");
                if (searchNode !== null) {
                    searchNode.destroy();
                }
                fragmentDataSet.items = fragmentDataSet.items.concat(autoCompAxiom);
                searchDiv = UWA.createElement('div', {
                    'id': 'searchAutoCompleteInput',
                    'class':'autoCompleteSearch'
                }).inject(this.container.children[0]);

                fragmentSearch = new Autocomplete({
                    multiSelect: false,
                    showSuggestsOnFocus: true,
                    noResultsMessage: noResultsMessage,
                    allowFreeInput: false,
                    placeholder: placeHolderMsg,
                    filterEngine: function (suggestions) { 
                        return suggestions;
                    },
                    events: {
                        onSelect: function() {
                            selectedItem = fragmentSearch.getSelection();
                            root = '/domains/' + prefix + '/parentRenderer/' + selectedItem.subLabel + '/?f=0';
                            that.pSkeleton.setRoute(root);
                            fragmentSearch.reset();
                        },
                        onKeyDown: function(e) {//IR-673291-3DEXPERIENCER2019x\20x
                            if (e.keyCode === 13) {
                                e.preventDefault();
                            }
                        },
                        onKeyUp: function(e) {
                            if (e.keyCode === 13) {
                                fragmentSearch.showAll();
                            }
                        }
                    }
                }).inject(searchDiv);

                fragmentSearch.addDataset(fragmentDataSet);//fragmentSearch.focus();
            }
        };

        return UIview;
    });

/*global define*/
define('DS/ParameterizationSkeleton/Model/PPRSynchronizationLifeCycle/PPRSyncMBOMmodel',
    [
        'UWA/Core',
        'UWA/Class/Model'
    ], function (UWA, Model) {
        "use strict";
        return Model.extend({
            defaults: function() {
                return {
                    id: '',
                    title : '',
                    Type : '',
                    ComputedResultingProduct: '',
                    //SPEC_DOC commented asked by Paul IR926203
                   // SpecDoc: '',
                    ChildTransformationTypes:'',
                    NewRevision : '',
                    NewBranch : '',
                    Duplicate: '',
                    Deletion:'',
                    TransferOwnership: '',
                    ChangeMaturity:''
                };
            }
        });
    });

/*! Copyright 2017, Dassault Systemes. All rights reserved. */
/*global define, widget, document, setTimeout, console*/
/*jslint nomen: true*/
/*@fullReview  ZUR 16/02/13 2017x HL*/
define('DS/ParameterizationSkeleton/Views/ParameterizationLifecycle/LifecycleDescriptionView',
    [
        'UWA/Core',
        'UWA/Class/View',
        'i18n!DS/ParameterizationSkeleton/assets/nls/ParamSkeletonNLS'
    ],
    function (UWA, View,
              ParamSkeletonNLS) {

        'use strict';

        var extendedView =  View.extend({
            tagName: 'div',
            className: 'generic-detail',

            init: function (options) {
                options = UWA.clone(options || {}, false);
                this._parent(options);
            },

            render: function () {
                var that = this;

                if (this.collection._models.length === 0) {
                    UWA.log("LifecycleDescriptionView::fist time");
                    this.listenTo(this.collection, {
                        onSync: that.onCompleteRequestDescription
                    });
                } else {
                    UWA.log("LifecycleDescriptionView::model already there");
                    that.onCompleteRequestDescription();
                }

                return this;
            },

            onCompleteRequestDescription : function () {
                UWA.log("LifecycleDescriptionView::onCompleteRequestDescription::");

                var mainDiv, newRow, newCell, SummaryTable, opTable, opTbody, optionText,
                    summaryDiv, operationsDiv, tooltiptoShow;

                mainDiv =  UWA.createElement('div', {
                    'id': 'DescriptionMainDiv'
                });

                tooltiptoShow = this.collection._models[0]._attributes.tooltip;

                if (!tooltiptoShow.startsWith("OOTBParameterization.LifecycleTopology")) {
                    summaryDiv =  UWA.createElement('div', {'id': 'summaryDiv'}).inject(mainDiv);
                    SummaryTable =  UWA.createElement('table', {
                        'padding-left': '100'
                    }).inject(summaryDiv);

                    newRow = UWA.createElement('tr', {title: ParamSkeletonNLS.SummaryText}).inject(SummaryTable);
                    //newRow.style.backgroundColor = "#659ac2";
                    newCell = UWA.createElement('td',
                            {'width': '100%', 'title': ParamSkeletonNLS.SummaryText}).inject(newRow);

                    UWA.createElement('h3', {
                        text: ParamSkeletonNLS.SummaryText,//this.collection._models[0]._attributes.title,
                        'class': ''//font-3dslight font-3dsbold  
                    }).inject(newCell);

                    newRow = UWA.createElement('tr').inject(SummaryTable);
                    newCell = UWA.createElement('td', {'width': '100%'}).inject(newRow);

                    UWA.createElement('h4', {
                        text   : tooltiptoShow,
                        'class': 'font-3dslight'
                    }).inject(newCell);
                }

                operationsDiv =  UWA.createElement('div', {
                    'id': 'operationsDiv'
                }).inject(mainDiv);

                SummaryTable =  UWA.createElement('table', {
                    'padding-left': '100'
                }).inject(operationsDiv);

                newRow = UWA.createElement('tr').inject(SummaryTable);
                //newRow.style.backgroundColor = "#659ac2";
                newCell = UWA.createElement('td', {
                    'width': '100%',
                    'title': ParamSkeletonNLS.PossibleOperationsTxt
                }).inject(newRow);

                UWA.createElement('h3', {text: ParamSkeletonNLS.PossibleOperationsTxt}).inject(newCell);

                newRow = UWA.createElement('tr').inject(SummaryTable);
                newCell = UWA.createElement('td', {'width': '100%'}).inject(newRow);
                UWA.createElement('h4', {
                    text   : ParamSkeletonNLS.possibleOperationsText + this.collection._models[0]._attributes.title,// font-3dsbold
                    'class': 'font-3dslight'
                }).inject(newCell);

                opTable = UWA.createElement('table', {
                    'id': 'optionstable',
                    'width': '30%',
                    'class': 'table table-condensed table-hover table-bordered'
                }).inject(operationsDiv);

                opTbody =  UWA.createElement('tbody', {
                    'width': '50%',
                    'class': ''
                }).inject(opTable);

                newRow = UWA.createElement('tr').inject(opTbody);
                newCell = UWA.createElement('td', {'width': '80%', 'class': 'active'}).inject(newRow);

                UWA.createElement('h4', {
                    text   : ParamSkeletonNLS.ModifyTopologyTxt,// font-3dsbold
                    'class': 'font-3dslight'
                }).inject(newCell);
                newCell = UWA.createElement('td', {'width': '20%'}).inject(newRow);

                optionText = ParamSkeletonNLS.NoText;
                if (this.model.get("modifyTopology")) {
                    optionText = ParamSkeletonNLS.YesText;

                }

                UWA.createElement('h4', {
                    text   : optionText,// font-3dsbold
                    'class': 'font-3dslight'
                }).inject(newCell);

                newRow = UWA.createElement('tr').inject(opTbody);
                newCell = UWA.createElement('td', {'width': '80%', 'class': 'active'}).inject(newRow);

                UWA.createElement('h4', {
                    text   : ParamSkeletonNLS.RenameStatesTxt,// font-3dsbold
                    'class': 'font-3dslight'
                }).inject(newCell);

                optionText = ParamSkeletonNLS.NoText;
                if (this.model.get("renameStates")) {
                    optionText = ParamSkeletonNLS.YesText;
                }

                newCell = UWA.createElement('td', {'width': '20%'}).inject(newRow);
                UWA.createElement('h4', {
                    text   : optionText,// font-3dsbold
                    'class': 'font-3dslight'
                }).inject(newCell);

                newRow = UWA.createElement('tr').inject(opTbody);
                newCell = UWA.createElement('td', {'width': '80%', 'class': 'active'}).inject(newRow);
                UWA.createElement('h4', {
                    text   : ParamSkeletonNLS.AddPromotionRulesTxt,// font-3dsbold
                    'class': 'font-3dslight'
                }).inject(newCell);

                optionText = ParamSkeletonNLS.NoText;
                if (this.model.get("supportRules")) {
                    optionText = ParamSkeletonNLS.YesText;
                }

                newCell = UWA.createElement('td', {'width': '20%'}).inject(newRow);
                UWA.createElement('h4', {
                    text   : optionText,// font-3dsbold
                    'class': 'font-3dslight'
                }).inject(newCell);

                this.container.setContent(mainDiv);
            },

            removeElement : function() {
                UWA.log(":");
            },

            restoreStates : function() {
                UWA.log(":");
            },

            showAddElementsModal : function() {
                UWA.log(":");
            },

            destroy : function() {
                this.stopListening();
                this._parent.apply(this, arguments);
            }

        });

        return extendedView;
    });

/*global define*/
define('DS/ParameterizationSkeleton/Model/ParameterizationDataModeling/TypeModel',
    [
        'UWA/Core',
        'UWA/Class/Model'
    ], function (UWA, Model) {
        "use strict";
        return Model.extend({
            defaults: function() {
                return {
                    id: '',
                    title : '',
                    listofAttributes : '',
                    listofSynchros : '',
                    listofSystemAttribues : '', //NZV :IR-540216-3DEXPERIENCER2018x
                    typeCategory : '' //VPM/CBP
                };
            }
        });
    });

/**
 * @author AMN14
 */
define('DS/ParameterizationSkeleton/Model/ParamCollaboration/CollabManagementModel',
    [
        'UWA/Class/Model'
    ], function (Model) {
        "use strict";
        return Model.extend({
            defaults: function() {
                return {
                    id: '',
                    title : '',
                    subtitle : '',
                    domainid : '',
                    image : ''
                };
            }
        });
    });

define('DS/ParameterizationSkeleton/Views/ParameterizationFLWeb/ParameterizationFLWebConstants', [], function() {

    'use strict';


    const contants = {
    		NEW_NOT_DEPLOYED : 'NewNotDeployed',
    		USER_DEFINED : 'UserDefined',
    		DEPOLOYED : 'Deployed',
    		ADD : 'add',
    		REMOVE : 'remove',
    		MODIFY : 'modify',
    		OPERATION : 'action',
    		ORDER : 'Order',
    		TYPE : 'Type',
    		NAME : 'Name',
    		VALUE : 'Value',
    		//ATTRIBUTE : 'AttributeName',
    		ATTRIBUTE : 'Attribute',
    		ATTRIBUTE_NLS_NAME : 'Attribute_NLS',
    		//COUNTER : 'CounterSize',
    		COUNTER : 'Size',
    		FORMULA_ROW : "FormulaRow",
    		FORMULA_CELL : "Formula",
    		STRATEGY_ROW : "StrategyRow",
    		BUSINESS_LOGIC : "BLDefined",
    		STRATEGY_CELL : "Strategy",
            /*FORMAT_FREE : 'Free',
            FORMAT_STRING :'String',
            FORMAT_ATTRIBUTE : 'Attribute',
            FORMAT_COUNTER : 'Counter',
            MAX_ROWS : 15,*/
    		FORMAT_FREE : 'UI',
            FORMAT_STRING :'FT',
            FORMAT_ATTRIBUTE : 'SA',
            FORMAT_COUNTER : 'CC',
            MAX_ROWS : 10,
            WIDTH_ARRAY: [15, 15, 15, 25, 15, 15]
           // WIDTH_ARRAY: [/*15,*/ 15, 15, 25, 15, 15]

    };

    return  Object.freeze(contants);

});

/*@fullReview  ZUR 15/11/23 2017x Param Skeleton*/
/*global define, widget*/
define('DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler',
    [
    ], function () {
        "use strict";

        var iHandler = {
            //
            init: function (url, tenant) {
                this.url = url;
                this.tenant = tenant;
            },

            setURL : function(url) {
                this.url = url;
            },

            getURL : function() {
                return this.url;
            },

            getTenant : function() {
                return this.tenant;
            },

            setTenant : function (itenant) {
                this.tenant = itenant;
            }

        };

        return iHandler;
    });

/*@fullReview  ZUR 15/11/23 2017x Param Skeleton*/
/*global define*/
/*jslint nomen: true */
/*jslint plusplus: true*/
define('DS/ParameterizationSkeleton/Utils/ParameterizationDataUtils',
    [
    ], function () {

        "use strict";
        var pUtils = {

            /*
            JSONreplace : function (data) {

                JSON.stringify(data, function (key, value) {
                    var k, replacement;
                    if (value && typeof value === 'object') {
                        replacement = {};
                        for (k in value) {
                            if (Object.hasOwnProperty.call(value, k)) {
                                replacement[k && k.charAt(0).toLowerCase() + k.substring(1)] = value[k];
                            }
                        }
                        return replacement;
                    }
                    return value;
                });
                return data;
            },//JSONreplace */

            paramStructBuilder: function (fields) {
                var i,
                    fields = fields.split(','),
                    count = fields.length;

                function constructor() {
                    for (i = 0; i < count; i++) {
                        this[fields[i]] = arguments[i];
                    }
                }
                return constructor;
            },

        };//pUtils

        return pUtils;

    });

/*global define*/
define('DS/ParameterizationSkeleton/Model/ParameterizationLifecycle/LifecycleDescriptionModel',
    [
        'UWA/Class/Model'
    ], function (Model) {

        'use strict';
        //
        return Model.extend({
            defaults: function() {
                return {
                    id : '',
                    text : '',
                    tooltip : ''
                };
            }
        });
    });


/*global define*/
define('DS/ParameterizationSkeleton/Model/ParamCollaboration/MappingModel',
    [
        'UWA/Core',
        'UWA/Class/Model'
    ], function (UWA, Model) {
        "use strict";
        return Model.extend({
            defaults: function() {
                return {
                    id: '',
                    title : '',
                    AttributeInfo : '',
                    TypeRelInfo : '',
                    InterfaceInfo : '',
                    TypeRelMapping : '',
                    InterfaceMapping : '',
                    AttributeMapping : '',
                };
            }
        });
    });

/*global define*/
define('DS/ParameterizationSkeleton/Model/ParameterizationDataModeling/TypesListModel',
    [
        'UWA/Class/Model'
    ], function (Model) {
        "use strict";
        return Model.extend({
            defaults: function() {
                return {
                    id: '',
                    title : '',
                    subtitle : '',
                    domainid : '',
                    image : ''
                };
            }
        });
    });

//@fullReview  ZUR 16/02/13 2017x
/*global define, console*/
/*jslint plusplus: true*/
define('DS/ParameterizationSkeleton/Views/ParameterizationLifecycle/ParamStepGeometry',
    [
        'egraph/core',
        'egraph/views',
        'egraph/utils'
    ],
    function(core, views, utils) {
        'use strict';

        var exports = {};

        function sign(x) {
            return typeof x === 'number' ? x ? x < 0 ? -1 : 1 : x === x ? 0 : NaN : NaN;
        }

        exports.ParamStepGeometry = function(stubScenario) {
            if (!isNaN(stubScenario)) {
                this.stubScenario = stubScenario;
            }
        };

        //StepGeometry.prototype.stubScenario = 1;   //gphSymbol
        //utils.inherit(exports.gphSymbol, views.HTMLView);
        //ParameterizationLifecycleWidget/Views

        exports.ParamStepGeometry.prototype.onupdate = function onupdate(e) {
            var x1, x2, y1, y2, stubminlength, randomHeight, iStub, signp,
                iIntervals, isum, j,
                maxLimit = 1.5;
            console.log("Build scenario " + this.stubScenario);
            console.log(e);

            x1 = e.cl1.c.aleft;
            y1 = e.cl1.c.atop;
            x2 = e.cl2.c.aleft;
            y2 = e.cl2.c.atop;

            // xm = 0.5*(x1 + x2);  //    xm = 0.9*x1 + 0.1*x2;
            stubminlength = 45;//50;
            if (this.stubScenario === 1) {
                e.set('path', [
                    core.PathCmd.M, x1, y1,
                    core.PathCmd.L, x2, y2
                ]);
            } else {
                randomHeight = 30 * Math.random();
                iStub = this.stubScenario;

                if (e.randomHeight == null) {
                    e.randomHeight = randomHeight;
                } else {
                    randomHeight = e.randomHeight;
                }

                signp = sign(iStub);
                //maxLimit = 1.5;//2
                if (Math.abs(iStub) > maxLimit) {
                    iIntervals = (Math.abs(iStub) - maxLimit);
                    isum = maxLimit;

                    for (j = 1; j <= iIntervals; j++) {
                        isum = isum + 0.5 / j;
                    }

                    iStub = signp * isum;
                }

                e.set('path', [
                    core.PathCmd.M, x1 + 3, y1,
                    core.PathCmd.L, x1 + 3, y1 + randomHeight - iStub * stubminlength,
                    core.PathCmd.L, x2, y2 + randomHeight - iStub * stubminlength,
                    core.PathCmd.L, x2, y2
                ]);
            }
        };

        return exports;
    });

define('DS/ParameterizationSkeleton/Views/\VersionNamingExt/VersionNamingExtAlertUtility', [
	'DS/UIKIT/Alert'
], 
function (Alert) {
	'use strict';
	return {
        errorAlert: null,
        successAlert: null,

        /**
         * Create an alert from UIKit
         *   @param {String} type
         *   @param {String} text
         */
        message: function (type, text) {
            if (type==='success') {
                if (!this.successAlert) {
                    this.successAlert = new Alert({
                        className : 'param-alert',
                        messageClassName: 'success',
                        visible: true
                    }).inject(document.body, "top");
                }
                this.successAlert.add(text);
            }
            else {
                if (!this.errorAlert) {
                    this.errorAlert = new Alert({
                        className : 'param-alert',
                        messageClassName: 'error',
                        visible: true
                    }).inject(document.body, "top");
                }
                this.errorAlert.add(text);
            }
        },
    };
}
);

define('DS/ParameterizationSkeleton/Views/ParameterizationSystemsSafety/SystemsSafetyViewUtilities', [
    'UWA/Core'
], function(
    UWA
) {

    'use strict';

    var SystemsSafetyViewUtilities = {
        LEFT_ALIGNMENT: 'left',
        RIGHT_ALIGNMENT: 'right',
        HTML_BOLD_FORMAT: 'h5',
        HTML_PARAG_FORMAT: null
    };

    SystemsSafetyViewUtilities.buildImgSpan = function(iconChoice, iconSize, iconColor, title) {
        var imgSpan = UWA.createElement('span', {
            'class': 'fonticon fonticon-' + iconSize + 'x fonticon-' + iconChoice,
            'title': title
        });

        imgSpan.setStyle("color", iconColor);
        return imgSpan;
    };

    SystemsSafetyViewUtilities.buildTextTableCell = function(alignment, cellWidth, row, cellTag, cellText, colspan) {
        var iCell = UWA.createElement('td', {
            'Align': alignment,
            'width': cellWidth,
            'colspan': colspan || '1',
            'class': 'architectureNumberingField'
        }).inject(row);

        if (cellTag) {
            UWA.createElement(cellTag, {
                text: cellText
            }).inject(iCell);
        } else {
            iCell.appendText(cellText);
        }
        return iCell;
    };

    return SystemsSafetyViewUtilities;
});

/**
* @quickreview  KB9 21:11:09
*/

define('DS/ParameterizationSkeleton/Views/DELConfigurationParameterization/DELConfigurationTreeListViewConstants',
[
  'UWA/Class',
  'i18n!DS/ParameterizationSkeleton/assets/nls/DELConfigurationTreeListViewConstants',
],
function
(
  Class,
  FixedNls
)
{
  'use strict';

  var DELConfigurationTreeListViewConstants = Class.extend({

        colIndex : [],
        colName : [],
        colVisibility : [],
        fixedColIndex : ["isDeployed","edit","delete"],
        fixedColName : [FixedNls.isDeployed, FixedNls.edit, FixedNls.delete],

        /*
        * setColumnsNameNls
        */
        setColumnsNameNls: function setColumnsNameNls(nls) {
          this.nls = nls;
        },

        /*
        * setColumnsIndex
        */
        setColumnsIndex: function setColumnsIndex(colIndex) {
          this.colIndex = colIndex;
        },

        /*
        * getColumnsIndex
        */
        getColumnsIndex: function getColumnsIndex() {
          var returnTab = [];
          for (var i=0;i<this.colIndex.length;i++)
            returnTab.push(this.colIndex[i]);

          for (var i=0;i<this.fixedColIndex.length;i++)
            returnTab.push(this.fixedColIndex[i]);

          return returnTab;
        },

        /*
        * setColumnsName
        */
        setColumnsName: function setColumnsName(colName) {
          this.colName = colName
        },

        /*
        * getColumnsName
        */
        getColumnsName: function getColumnsName() {
          var that = this;
            var returnTab = [];
            for (var i=0;i<that.colIndex.length;i++)
            {
              if ((that.nls != undefined || that.nls != null) && (that.nls[that.colIndex[i]] != undefined || that.nls[that.colIndex[i]] != null))
                returnTab.push(that.nls[that.colIndex[i]]);
              else
                returnTab.push(that.colIndex[i]);
            }

            for (var i=0;i<that.fixedColName.length;i++)
              returnTab.push(that.fixedColName[i]);

            return returnTab;
        },

        /*
        * setColumnsVisibilityStatus
        */
        setColumnsVisibilityStatus : function setColumnsVisibilityStatus(colVisibility)
        {
          this.colVisibility = colVisibility;
        },

        /*
        * getColumnsVisibilityStatus
        */
        getColumnsVisibilityStatus : function getColumnsVisibilityStatus()
        {
          return this.colVisibility;
        }
  });
  return DELConfigurationTreeListViewConstants;
});

define('DS/ParameterizationSkeleton/Model/ParameterizationLifecycle/LifecycleModel',
[
    'UWA/Core',
    'UWA/Class/Model'
], function (UWA, Model) {
    return Model.extend({
        defaults: function() {
            return {
                id : '',
                states : '',
                transitions : '',
                checks: '',
                types: '',
                appCategory : '',
            	title : '',
                subtitle : '',               
            };
        }
    });
});


define('DS/ParameterizationSkeleton/Views/ParameterizationSystemsSafety/SystemsSafetyModalStructureTreePattern', [
    'DS/UIKIT/Modal',
    'UWA/Core',
    'DS/UIKIT/Input/Text',
    'DS/UIKIT/Alert',
    'DS/UIKIT/Autocomplete',

    'i18n!DS/ParameterizationSkeleton/assets/nls/SystemsSafetyNLS'
], function(
    Modal,
    UWACore,
    Text,
    Alert,
    Autocomplete,

    SystemsSafetyNLS
) {

    'use strict';

    var SystemsSafetyModal = function(options) {
        this.options = UWACore.extend({
            title: 'Dialog',
            className: '',
            withFooter: true
        }, options);

        this.modal = new Modal({
            className: this.options.className || '',
            closable: true,
            header: '<h4>' + this.options.title + '</h4>',
            body: '',
            footer: ''
        });
        this.modal.inject(document.querySelector('#systemsSafetyMainDiv'));
        if (this.options.withFooter) {
            this._bindFooterEvent();
        }
    };

    SystemsSafetyModal.prototype.getDefaultFields = function(_formatContent, plmTypes, excludeTypes) {
        this._allowedTypes = [];
        if (plmTypes) {
            for (var iType = 0; iType < plmTypes.length; ++iType) {
                var plmType = plmTypes[iType];
                if (excludeTypes.indexOf(plmType.Name) < 0) {
                    this._allowedTypes.push({
                        value: plmType.Name !== plmType.nLSValue ? plmType.nLSValue + ' (' + plmType.Name + ')' : plmType.nLSValue,
                        _plmType: plmType.Name
                    });
                }
            }
            this._allowedTypes.sort(function(typeA, typeB) {
                return (typeA.value.localeCompare(typeB.value));
            });
        }

        var divTagForType = document.createElement('div');
        divTagForType.className = "formats-arch";
        var typeLabelDiv = document.createElement('div');
        typeLabelDiv.innerText = SystemsSafetyNLS.type;
        typeLabelDiv.style.width = '15%';
        divTagForType.appendChild(typeLabelDiv);
        var typeTextDiv = document.createElement('div');
        typeTextDiv.style.width = '85%';
        if (this._allowedTypes.length) {
            this.typeTextBox = new Autocomplete({
                events: {
                    onSelect: function(item) {
                        this.patternTextBox.elements.input.placeholder = item.value.indexOf('Instance') > 0 ? SystemsSafetyNLS.instanceTypePatternPlaceholder : SystemsSafetyNLS.referenceTypePatternPlaceholder;
                    }.bind(this)
                },
                allowFreeInput: false
            });
            this.typeTextBox.addDataset({
                items: this._allowedTypes
            });
        } else {
            this.typeTextBox = new Text();
        }
        this.typeTextBox.inject(typeTextDiv);
        divTagForType.appendChild(typeTextDiv);
        _formatContent.appendChild(divTagForType);

        var divTagForPattern = document.createElement('div');
        divTagForPattern.className = "formats-arch";
        var patternLabelDiv = document.createElement('div');
        patternLabelDiv.innerText = SystemsSafetyNLS.pattern;
        patternLabelDiv.style.width = '15%';
        divTagForPattern.appendChild(patternLabelDiv);
        var patternFieldDiv = document.createElement('div');
        patternFieldDiv.style.width = '85%';
        this.patternTextBox = new Text({
            placeholder: SystemsSafetyNLS.referenceTypePatternPlaceholder
        });
        this.patternTextBox.inject(patternFieldDiv);
        divTagForPattern.appendChild(patternFieldDiv);
        _formatContent.appendChild(divTagForPattern);
    };

    SystemsSafetyModal.prototype.getModalBody = function(plmTypes, excludeTypes) {
        var partNumberContent = this.modal.elements.body;

        var _errorsMessageDiv = UWACore.createElement('div');
        _errorsMessageDiv.className = "enox-part-number-error-content";

        var _formatContent = UWACore.createElement('div');
        _formatContent.className = "enox-arch-number-content";

        var _dynamicFormatContent = UWACore.createElement('div');
        _dynamicFormatContent.className = "enox-arch-number-dynamic-content";

        this.getDefaultFields(_formatContent, plmTypes, excludeTypes);

        partNumberContent.appendChild(_errorsMessageDiv);
        partNumberContent.appendChild(_formatContent);
        partNumberContent.appendChild(_dynamicFormatContent);
        return partNumberContent;
    };

    SystemsSafetyModal.prototype.displayAlertMessage = function(messageToDisplay, toDisplayOver) {
        var alert = new Alert({
            visible: true,
            className: 'param-alert',
            messageClassName: 'error',
            closable: true,
            renderTo: toDisplayOver,
            autoHide: true,
            hideDelay: 2000
        });
        alert.add({
            message: messageToDisplay
        });
    };

    SystemsSafetyModal.prototype.getUserEnteredValues = function() {
        var typeItem = typeof this.typeTextBox.getItemByLabel === 'function' ? this.typeTextBox.getItemByLabel(this.typeTextBox.getValue()) : {
            value: this.typeTextBox.getValue(),
            _plmType: this.typeTextBox._plmType
        };
        return {
            typeLabel: typeItem.value || '',
            type: typeItem._plmType || '',
            pattern: this.patternTextBox.getValue() || ''
        };
    };

    SystemsSafetyModal.prototype.show = function() {
        this.modal.show();
    };

    SystemsSafetyModal.prototype._bindFooterEvent = function() {
        var that = this;

        this.modal.getFooter().getElements('.btn').forEach(function(element) {
            if (element.name === 'cancelButton') {
                element.addEvent('click', function() {
                    that.modal.hide();
                });
            }
        });

    };

    SystemsSafetyModal.prototype.getContent = function() {
        return this.modal.getContent();
    };

    SystemsSafetyModal.prototype.destroy = function() {
        this.modal.destroy();
        var keys = Object.keys(this);
        for (var i = 0; i < keys.length; i++) {
            this[keys[i]] = undefined;
        }
    };

    return SystemsSafetyModal;
});

/*global define,clearTimeout,setTimeout */
define('DS/ParameterizationSkeleton/Views/ParameterizationLifecycle/ParamNodeView',
    [
        'UWA/Core',
        'egraph/views',
        'egraph/utils',
        'DS/UIKIT/Popover',
        'DS/UIKIT/Input/Text',
        'i18n!DS/ParameterizationSkeleton/assets/nls/ParamSkeletonNLS'
    ], function(UWA,
                views, utils, Popover,
                Text,
                ParamSkeletonNLS) {
        // 'DS/Param/Views/LifecycleViewUtilities'
        "use strict";
        var callfctrename, localthat,
            exports = {},
            areStatesRenamable = true,
            modifyTopology = true;

        exports.ParamNodeView = function(that, renameStates, iModifyTopology) {
            UWA.log("ParamNodeView::Inside");
           // callfctrename = renamefct;
            callfctrename = that.handleRenamingIssues;
            localthat = that;
            areStatesRenamable = renameStates;
            modifyTopology = iModifyTopology;
            views.HTMLNodeView.call(this);
        };

        utils.inherit(exports.ParamNodeView, views.HTMLNodeView);

        //Redefining the view of a node
        exports.ParamNodeView.prototype.buildNodeElement = function (iNode) {
            UWA.log("buildNodeElement");
            UWA.log(iNode);
            return customizeNode(iNode);
        };

        //Redefining actions of node select
        exports.ParamNodeView.prototype.onselect = function(e, selected) {
            UWA.log("ParamNodeView - onselect");
          /*if (selected) return (this.selectNode(e));  */
        };

        function customizeNode(iNode) {

            var mainDiv, iTable, newRow, newCell, imgSpan, stateNameInput, timerconn, stateLockPop,
                nodeLocked = false,
                lockTitle = ParamSkeletonNLS.StateCriticalText.format(iNode.name),
                ititle = iNode.name;

            if (!areStatesRenamable) {
                ititle = ititle + " - " + ParamSkeletonNLS.StatesCannotBeRenamedText;
            }

            mainDiv = UWA.createElement("div");
            iTable = UWA.createElement("table", {'height': '100%'}).inject(mainDiv);
            newRow = UWA.createElement('tr').inject(iTable);
            newCell = UWA.createElement('td',
                        {'width': '100%', 'colspan': '2'}).inject(newRow);

            stateNameInput = new Text({
                placeholder: "...",
                attributes: {
                    value: iNode.name,
                    multiline: false,
                    title : ititle,
                    disabled: !areStatesRenamable,
                    readonly: !areStatesRenamable
                },
                events: {
                    onChange: function () {
                        UWA.log("onchange");
                        this.elements.input.title = this.getValue();
                        callfctrename(iNode, localthat, this.getValue());
                      //  UIUtilities.beingModified(imgCell, ParamWdgNLS.Being_Modified);
                      //  updateParameterOnChange(this,controlObjectCell,imgCell);
                    },
                    onKeyDown: function () {
                        UWA.log("onKeyDown");

                        if (timerconn) { clearTimeout(timerconn); }

                        timerconn = setTimeout(function() {
                            callfctrename(iNode, localthat, stateNameInput.getValue());
                        }, 20);

                      //  UIUtilities.beingModified(imgCell, ParamWdgNLS.Being_Modified);
                    }
                }
            }).inject(newCell);

            newRow = UWA.createElement('tr').inject(iTable);
            newCell = UWA.createElement('td',
                        {'width': '50%', 'align' : 'left'}).inject(newRow);

            if (!modifyTopology) {
                nodeLocked = true;
                lockTitle = ParamSkeletonNLS.TopologyNotModifiable;
            } else if (iNode.isCritical === "true") {
                nodeLocked = true;
            }

            if (nodeLocked) {
                imgSpan = UWA.createElement('span', {
                    'class' : 'fonticon fonticon-2x fonticon-lock'
                }).inject(newCell);

                imgSpan.setStyle("color", "#77797c");
                newCell.setStyle("vertical-align", "bottom");//"text-bottom"

                stateLockPop = new Popover({
                    target: imgSpan,
                    trigger : "hover",
                    animate: "true",
                    position: "top",
                    body: lockTitle,
                    title: ''//iParamObj.nlsKey
                });
            }

            UWA.createElement('td',
                        {'width': '50%'}).inject(newRow);

            mainDiv.addClassName("my-node");
            return mainDiv;
        }

        return exports;
    });

define('DS/ParameterizationSkeleton/Views/ParameterizationDOCM/DOCMMappingViewUtilities',
		[
			'DS/UIKIT/Alert',
			'i18n!DS/ParameterizationSkeleton/assets/nls/DOCMContentMgmtNLS'
			],
			function (Alert, DOCMContentMgmtNLS) {

	'use strict';

	var docmViewUtilites = {

			getAlertMessage: function (message, className, toDisplayOn) {

				this.alertOptions = {
						visible: true,
						className: 'param-alert',
						messageClassName: className,
						closable: true,
						renderTo: toDisplayOn,
						autoHide: true,
						hideDelay: 2000
				};

				var alert = new Alert(this.alertOptions);
				alert.add({
					message: message,
				});
			},

			getValueFromHtmlElem: function (elementInfo) {

				return elementInfo.dsModel._properties.value.value;
			},

			defaultDocumentDownloadExpression: function(){
				
				return DOCMContentMgmtNLS.defaultOption;
			}
	};
	return docmViewUtilites;

});

/**
 * @author AMN14
 */

define('DS/ParameterizationSkeleton/Model/ParamCollaboration/TypesNotSyncMappingModel',
    [
        'UWA/Core',
        'UWA/Class/Model'
    ], function (UWA, Model) {
        "use strict";
        return Model.extend({
            defaults: function() {
                return {
                    id : '',
                    TNSMapping : '',
                    SpecializationTypes : ''
                };
            }
        });
    }
);

/*global define*/
define('DS/ParameterizationSkeleton/Views/ParameterizationDataModeling/AttributesTypesDefine',
    [
    ], function() {
        "use strict";
        var iList = {

            getListOfHandledTypes : function () {

                var typesArray = [];
                typesArray.push({ type: 'String', length: '' });
                typesArray.push({ type: 'String', length: '16' });
                typesArray.push({ type: 'String', length: '40' });
                typesArray.push({ type: 'String', length: '80' });
                typesArray.push({ type: 'Boolean', length: '' });
                typesArray.push({ type: 'Integer', length: '' });
                typesArray.push({ type: 'Real', length: '' });
                typesArray.push({ type: 'Date', length: '' });
                return typesArray;
            },
            //IR-759885-3DEXPERIENCER2021x
            checkAvailability : function (arr, val) {
                return arr.some(function(arrVal) {
                    return val.toUpperCase() === arrVal.toUpperCase();//val.localeCompare(arrVal);
                });
            },

            forbiddenAttributeNames : ["EXTENDED_BY","REMOVE_EXT","UPDATE_EXT","KEEP_OTHER_EXT",
            "KEEP_PREVIOUS_STATE","businessobject","connection","class","relationclass","SET","CONTEXT",
            "BEGIN_TRANSACTION","END_TRANSACTION","CREATE","UPDATE","DELETE","RETURN","ONEVENTS","SR",
            "SRID","CUSTO","ALL","NONE","DS","NULL","MQL","WITH","USING","Ext","interface","composer","category",
            "composition_rel","initpovfromself","mod","path","true","false","or","and","Add","Del","Sync"],

            isAttributeForbidden : function (attributeName) {
                return iList.checkAvailability(iList.forbiddenAttributeNames, attributeName);
            }
        };

        return iList;
    });

/**
 * @author AMN14
 */
define('DS/ParameterizationSkeleton/Model/ParameterizationSAX/ParamSAXModel',
    [
        'UWA/Class/Model'
    ], function (Model) {
        "use strict";
        return Model.extend({
            defaults: function() {
                return {
                    id: '',
                    title : '',
                    subtitle : '',
                    domainid : '',
                    image : '',
                    familyid: ''
                };
            }
        });
    });

/*global define*/
define('DS/ParameterizationSkeleton/Model/ParameterizationXCAD/XCADListModel',
    [
        'UWA/Class/Model'
    ], function (Model) {
        "use strict";
        return Model.extend({
            defaults: function() {
                return {
                    id: '',
                    title : '',
                    subtitle : '',
                    domainid : '',
                    image : ''
                };
            }
        });
    });

/*global define*/
define('DS/ParameterizationSkeleton/Model/ParameterizationXCAD/XCADModel',
    [
        'UWA/Class/Model'
    ], function (Model) {
        "use strict";
        return Model.extend({
            defaults: function() {
                return {
                    id: ''
                };
            }
        });
    });

define('DS/ParameterizationSkeleton/Views/ParamConfigurationManagement/CfgParamAlertUtility', [
	'DS/UIKIT/Alert'
], 
function (Alert) {
	'use strict';
	return  {

		alert: null,
	
	/**
	 * Create an alert from UIKit
	 *   @param {String} type
	 *   @param {String} text
	 */
		message: function(type, text){
			if (!this.alert) {
                this.alert = new Alert({
                    visible: true,
										autoHide: true,
                }).inject(document.body, 'top');
            }
            this.alert.add({
                className: type,
                message: text
            });
		},
	
	}
}
);


/*@fullReview  ZUR 15/11/23 2017x Param Skeleton*/
/*global define*/
define('DS/ParameterizationSkeleton/Model/ParameterizationDomainsListModel',
    [
        'UWA/Core',
        'UWA/Class/Model'
    ], function (UWA, Model) {
        "use strict";
        return Model.extend({
            defaults: function() {
                return {
                    id  : '',
                    title : '',
                    subtitle : '',
                    tooltip : '',
                    domainid: '',
                    familyid: '',
                    image : ''
                };
            }
        });
    });

define('DS/ParameterizationSkeleton/Views/PPRSynchronizationLifeCycle/PPRSynchroViewConstants', [], function () {

	'use strict';

	const contants = {
		TYPE: 'Type',
		COMPUTED_RESULTING_PRODUCT: 'LC_ResultingProduct',
		//SPEC_DOC:'LC_SpecificationDocument',
		CHILD_TRANSFORMATION_TYPES:'LC_ExpandMbomStructure',
		NEW_REVISION: 'Revise',
		NEW_BRANCH: 'NewBranch',
		DUPLICATE: 'Duplicate',
		DELETE: 'Delete',
		TRANSFER_OWNERSHIP: 'Change Owner',
		CHANGE_MATURIY: 'Change Status',
		LOCK: 'Lock',
		CHANGE_CONTROL: 'Change Control',
		TRANSFER: 'Transfer',
		SHARE: 'Share',
		//merged with New Revision 
		NEW_REVISION_FROM: 'New Revision From',
		//merged with Duplicate
		ADVANCE_DUPLICATE:'Advance Duplicate',
		BOOLEAN_TRUE_VALUE: 'True',
		//Type Item
		Provide: 'Provide',
			CreateAssembly: 'CreateAssembly',
			Fasten:'Fasten',
			ElementaryEndItem:'ElementaryEndItem',
			RemoveMaterial: 'RemoveMaterial',
			Predrill: 'Predrill',
			Drill: 'Drill',
			NoDrill: 'NoDrill',
			Cutting: 'Cutting',
			Grinding: 'Grinding',
			Beveling: 'Beveling',
			Transform: 'Transform',
			CreateKit: 'CreateKit',
			Marking: 'Marking',
			ContinuousProcessProvide: 'ProcessContinuousProvide',
			ContinuousProcessCreateMaterial: 'ProcessContinuousCreateMaterial',
			Installation: 'Installation',
			ServicePart: 'DELServicePartReference',
		ServiceKit: 'DELServiceKitReference',
		ServiceAssembly: 'DELServiceAssemblyReference',
		Machining: 'Machine',
		Split: 'SplitProcess',
		DetailedFasten:'DetailedFasten',
		NEW_NOT_DEPLOYED: 'NewNotDeployed',
		USER_DEFINED: 'UserDefined',
		DEPLOYED: 'Deployed',
		ADD: 'Add',
		REMOVE: 'Remove',
		MODIFY: 'Modify',
		OPERATION: 'UserOperation',
		NAME: 'Name',
		VALUE: 'Value',
		MAX_ROWS: 25,
		WIDTH_ARRAY: [10/*type*/, 7/*COMPUTED_RESULTING_PRODUCT*/, /*7 SPEC_DOC,*/ 7, 7, 7, 7, 7, 7, 7, 7/*lock*/, 7/*changecontrol*/, 7/*transfer*/, 7/*share*/, 3/*action*/, 3/*deploy*/]
	};

	return Object.freeze(contants);

});

define('DS/ParameterizationSkeleton/Views/ParameterizationSystemsSafety/SystemsSafetyModalPartner', [
    'DS/UIKIT/Modal',
    'UWA/Core',
    'DS/UIKIT/Input/Text',
    'DS/UIKIT/Alert',

    'i18n!DS/ParameterizationSkeleton/assets/nls/SystemsSafetyNLS'
], function(
    Modal,
    UWACore,
    Text,
    Alert,

    SystemsSafetyNLS
) {

    'use strict';

    var SystemsSafetyModal = function(options) {
        this.options = UWACore.extend({
            title: 'Dialog',
            className: '',
            withFooter: true
        }, options);

        this.modal = new Modal({
            className: this.options.className || '',
            closable: true,
            header: '<h4>' + this.options.title + '</h4>',
            body: '',
            footer: ''
        });
        this.modal.inject(document.querySelector('#systemsSafetyMainDiv'));
        if (this.options.withFooter) {
            this._bindFooterEvent();
        }
    };

    SystemsSafetyModal.prototype.getDefaultFields = function(_formatContent) {
        var divTagForName = document.createElement('div');
        divTagForName.className = "formats-arch";
        var labelDiv = document.createElement('div');
        labelDiv.innerText = SystemsSafetyNLS.partnerName;
        labelDiv.style.width = '20%';
        divTagForName.appendChild(labelDiv);
        var nameTextDiv = document.createElement('div');
        nameTextDiv.style.width = '80%';
        this.nameTextBox = new Text({
            placeholder: SystemsSafetyNLS.partnerNamePlaceholder
        });
        this.nameTextBox.inject(nameTextDiv);
        divTagForName.appendChild(nameTextDiv);
        _formatContent.appendChild(divTagForName);

        var divTagForUrl = document.createElement('div');
        divTagForUrl.className = "formats-arch";
        var urlLabelDiv = document.createElement('div');
        urlLabelDiv.innerText = SystemsSafetyNLS.url;
        urlLabelDiv.style.width = '20%';
        divTagForUrl.appendChild(urlLabelDiv);
        var urlFieldDiv = document.createElement('div');
        urlFieldDiv.style.width = '80%';
        this.urlTextBox = new Text({
            placeholder: SystemsSafetyNLS.urlPlaceholder
        });
        this.urlTextBox.inject(urlFieldDiv);
        divTagForUrl.appendChild(urlFieldDiv);
        _formatContent.appendChild(divTagForUrl);
    };

    SystemsSafetyModal.prototype.getModalBody = function() {
        var partNumberContent = this.modal.elements.body;

        var _errorsMessageDiv = UWACore.createElement('div');
        _errorsMessageDiv.className = "enox-part-number-error-content";

        var _formatContent = UWACore.createElement('div');
        _formatContent.className = "enox-arch-number-content";

        var _dynamicFormatContent = UWACore.createElement('div');
        _dynamicFormatContent.className = "enox-arch-number-dynamic-content";

        this.getDefaultFields(_formatContent);

        partNumberContent.appendChild(_errorsMessageDiv);
        partNumberContent.appendChild(_formatContent);
        partNumberContent.appendChild(_dynamicFormatContent);
        return partNumberContent;
    };

    SystemsSafetyModal.prototype.displayAlertMessage = function(messageToDisplay, toDisplayOver) {
        var alert = new Alert({
            visible: true,
            className: 'param-alert',
            messageClassName: 'error',
            closable: true,
            renderTo: toDisplayOver,
            autoHide: true,
            hideDelay: 2000
        });
        alert.add({
            message: messageToDisplay
        });
    };

    SystemsSafetyModal.prototype.getUserEnteredValues = function() {
        return {
            name: this.nameTextBox.getValue() || '',
            url: this.urlTextBox.getValue() || ''
        };
    };

    SystemsSafetyModal.prototype.show = function() {
        this.modal.show();
    };

    SystemsSafetyModal.prototype._bindFooterEvent = function() {
        var that = this;

        this.modal.getFooter().getElements('.btn').forEach(function(element) {
            if (element.name === 'cancelButton') {
                element.addEvent('click', function() {
                    that.modal.hide();
                });
            }
        });

    };

    SystemsSafetyModal.prototype.getContent = function() {
        return this.modal.getContent();
    };

    SystemsSafetyModal.prototype.destroy = function() {
        this.modal.destroy();
        var keys = Object.keys(this);
        for (var i = 0; i < keys.length; i++) {
            this[keys[i]] = undefined;
        }
    };

    return SystemsSafetyModal;
});

/*@fullReview  ZUR 15/11/23 2017x Param Skeleton*/
/*global define,console*/
/*jslint nomen: true*/
define('DS/ParameterizationSkeleton/Views/ParamItemsListView',
    [
        'DS/W3DXComponents/Views/Layout/GridScrollView',
        'DS/W3DXComponents/Views/Item/TileView',
        'DS/W3DXComponents/Views/Item/SetView',
        'css!DS/W3DXComponents/W3DXComponents'
    ], function(GridScrollView, ItemViewTile, ItemViewSet) {
        'use strict';
        var ItemsListView,
            _name = 'list';
        ItemsListView = ItemViewSet.extend({
            name : _name,
            defaultOptions : {
                contents : {
                    //defaultView: 'tile',
                    useInfiniteScroll : false,
                    usePullToRefresh : false,
                    selectionMode : 'oneToOne',
                    views : [ {
                        'id' : 'tile',
                        //'title' : 'Tile View',
                        'view' : GridScrollView,
                        'itemView' : ItemViewTile,
                        'scrollPosition' : 'center',
                        'layout' : {
                            column : 3
                        }
                    } ]
                }
            },



            /*destroy : function() {
                this.childView.destroy();
                this.stopListening();
                this._parent.apply(this, arguments);
            }
            destroy : function() {
                this.stopListening();
                this._parent.apply(this, arguments);
            }*/

            destroy: function(options) {

                if (this.isDestroyed) {
                    return;
                }

                if (this.collection) {
                    this.stopListening(this.collection, this._externalEvents);
                }

                return this._parent.apply(this, arguments);
            },

            reload: function() {
                this.container.addClassName('loading');
                //  /!\ pour compenser l'absence de resetState dans la pageableCollection
                this.collection.state.totalRecords = null;
                //this.collection.reset();
                this.collection.getFirstPage();
            }
        });

        return ItemsListView;
    });

define('DS/ParameterizationSkeleton/Views/ParameterizationFLWeb/SAXTileView',
    [
        'DS/W3DXComponents/Views/Layout/GridScrollView',
        'DS/W3DXComponents/Views/Item/TileView',
        'DS/W3DXComponents/Views/Item/SetView',
        'css!DS/W3DXComponents/W3DXComponents'
    ], function(GridScrollView, ItemViewTile, ItemViewSet) {
        'use strict';
        var ItemsListView, _name = 'list';
        ItemsListView = ItemViewSet.extend({
            name : _name,
            defaultOptions : {
                contents : {
                    //defaultView: 'tile',
                    useInfiniteScroll : false,
                    usePullToRefresh : false,
                    selectionMode : 'oneToOne',
                    views : [ {
                        'id' : 'tile',
                        //'title' : 'Tile View',
                        'view' : GridScrollView,
                        'itemView' : ItemViewTile,
                        'scrollPosition' : 'center',
                        'layout' : {
                            column : 2
                        }
                    } ]
                }
            },

            destroy: function(options) {
                if (this.isDestroyed) {
                    return;
                }
                if (this.collection) {
                    this.stopListening(this.collection, this._externalEvents);
                }
                return this._parent.apply(this, arguments);
            },

            reload: function() {
                this.container.addClassName('loading');
                this.collection.state.totalRecords = null;
                this.collection.getFirstPage();
            }
        });

        return ItemsListView;
    });

/**
 * @author AMN14
 */

define('DS/ParameterizationSkeleton/Collection/ParamCollaboration/TypesNotSyncMappingCollection', [
    'UWA/Core',
    'UWA/Class/Model',
    'UWA/Class/Collection',
    'DS/ParameterizationSkeleton/Model/ParamCollaboration/TypesNotSyncMappingModel',
    'DS/ParameterizationSkeleton/Utils/ParameterizationDataUtils',
    'DS/WAFData/WAFData',
    'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler'
], function (
		UWA,
		Model,
		Collection,
		TypesNotSyncMappingModel,
	    ParameterizationDataUtils,
	    WAFData,
	    URLHandler
	) {
	    'use strict';

	    var TNSMappingCollection = Collection.extend({

	    	/**
	    	 * Reference to the collection's model
	    	 */
	        model : TypesNotSyncMappingModel,

	        /**
	         * Initializing collection's URL
	         */
	        setup : function(model, options) {
	            UWA.log('TypesNotSyncMappingCollection::setup');
	            UWA.log(model);
	            UWA.log(options);

	            this.url = URLHandler.getURL() + "/resources/MappingWS/mapping/tnsmappinginfo?tenant=" + URLHandler.getTenant();
	        },

	        /**
	         *
	         */
	        sync : function(method, model, options) {
	            UWA.log('TypesNotSyncMappingCollection::sync');

	            options.contentType = 'application/json';
	            options.lang = widget.lang;
	            options.headers = {
	                Accept: 'application/json',
	                'Content-Type': 'application/json',
	                'Accept-Language' : widget.lang
	            };

	            UWA.log(options);

	            options = Object.assign({
	                ajax: WAFData.authenticatedRequest
	            }, options);

	            this._parent.apply(this, [method, model, options]);
	        },

	        /**
	         * Converting HTTP request response into an array of TypesNotSyncMappingModel objects
	         */
	        parse : function(data) {
	            UWA.log("TypesNotSyncMappingCollection::parse");
	            UWA.log(data);

              var TNSModel = ParameterizationDataUtils.paramStructBuilder("id, TNSMapping, SpecializationTypes");
              var oData = new TNSModel("", "");

              oData.id = data.id;
              oData.TNSMapping = [];
              oData.SpecializationTypes = [];

              // retrieving TNS mapping
              if(Array.isArray(data.typesNotSyncMapping)){
                data.typesNotSyncMapping.forEach(function(tnsMappingValue){
                  oData.TNSMapping.push(tnsMappingValue);
                });
              }

              // retrieving Part specialization types
              // convert the list of specialization types into a tree view showing types hierarchy
              if(Array.isArray(data.partSpecializationTypes)){
                oData.SpecializationTypes['Part'] = this.listToTreeView(data.partSpecializationTypes);
                this.eludeAbstractTypes(oData.SpecializationTypes['Part']);
              }

              // retrieving VPMReference specialization types
              // convert the list of specialization types into a tree view showing types hierarchy
              if(Array.isArray(data.vpmRefSpecializationTypes)){
                oData.SpecializationTypes['VPMReference'] = this.listToTreeView(data.vpmRefSpecializationTypes);
                this.eludeAbstractTypes(oData.SpecializationTypes['VPMReference']);
              }

	            return oData;
	        },

          /**
           * Convert a list of specialization types to a tree view representing types hierarchy.
           * @param specializationTypesList The list containing related types.
           */
          listToTreeView : function(specializationTypesList){
            UWA.log("TypesNotSyncMappingCollection::listToTreeView");

            //not supported on ie
            //var rootType = specializationTypesList.find(function(type){return !type.hasOwnProperty('derivationPath')});
            var rootType = null;
            // var i=1;
            // while(rootType===undefined && i<=specializationTypesList.length)
            // {
            // 	var type=specializationTypesList[i];
            // 	if(!type.hasOwnProperty('derivationPath'))
            // 		rootType=type;
            // 	i++;
            // }

            for(var i = 0 ; i < specializationTypesList.length ; i++){
              if(!specializationTypesList[i].derivationPath){
                rootType = specializationTypesList[i];
                break;
              }
            }

            var tree = {
              typeInfo : rootType,
              specializationTypes : {}
            };

            specializationTypesList.forEach(function(type){
              if(type.derivationPath){
                var parentTypes = type.derivationPath.split('/');
                if(parentTypes.length === 1) {
                  tree.specializationTypes[type.id] = {typeInfo : type, specializationTypes : {}, parentNode : tree};
                  return;
                }
                var currentNode = tree;
                for(var i = parentTypes.length - 2 ; i >= 0 ; i--){
                  if(typeof currentNode.specializationTypes[parentTypes[i]] === 'undefined') currentNode.specializationTypes[parentTypes[i]] = {typeInfo : null, specializationTypes : {}, parentNode : currentNode };
                  currentNode = currentNode.specializationTypes[parentTypes[i]];
                }
                currentNode.specializationTypes[type.id] = {typeInfo : type, specializationTypes : {}, parentNode : currentNode};
              }
            });

            return tree;
          },

          /**
            * Modify the tree representing the sub types arborescence to remove abstract types (so types which can't be mapped).
            * @param root The root node of the tree which is wanted to be modified.
            */
          eludeAbstractTypes : function(root, lastMappableParent){
            UWA.log("TypesNotSyncMappingCollection::eludeAbstractTypes");

            if(typeof lastMappableParent === 'undefined') lastMappableParent = root;
            else if(root.parentNode !== lastMappableParent) root.parentNode = lastMappableParent;
            for(var typeName in root.specializationTypes){
              // abstract types are corresponding to nodes which don't have a complete set of data to describe the type .
              if(root.typeInfo !== null){
                this.eludeAbstractTypes(root.specializationTypes[typeName], root);
              } else this.eludeAbstractTypes(root.specializationTypes[typeName], lastMappableParent);

            }
          }

	    });

	    return TNSMappingCollection;
	}
);

/* global widget */
define('DS/ParameterizationSkeleton/Collection/ParameterizationSystemsSafetyCollection', [
    'UWA/Core',
    'UWA/Class/Model',
    'UWA/Class/Collection',
    'DS/WAFData/WAFData',
    'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler'
], function(
    UWA,
    Model,
    Collection,
    WAFData,
    URLHandler
) {
    'use strict';

    return Collection.extend({
        model: function() {
            return Model.extend();
        },

        setup: function(models, options) {
            UWA.log('ParameterizationSystemsSafetyCollection::setup');
            if (typeof this.model === 'function') {
                this.model = this.model(options._modelKey._attributes.domainid);
            }
            this.url = URLHandler.getURL() + '/resources/sfy/parameters?tenant=' + URLHandler.getTenant();
        },

        sync: function(method, model, options) {
            options.contentType = 'application/json';
            options.lang = widget.lang;

            options.headers = {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
                'Accept-Language': widget.lang
            };
            UWA.log('ParameterizationSystemsSafetyCollection::sync');

            options = Object.assign({
                ajax: WAFData.authenticatedRequest
            }, options);
            this._parent(method, model, options);
        },

        parse: function(data) {
            UWA.log('ParameterizationSystemsSafetyCollection::parse');
            return this.parseMappingData(data);
        },

        create: function(attributes, options) {
            UWA.log('ParameterizationSystemsSafetyCollection::create');
            options.proxy = 'passport';
            this._parent(attributes, options);
        },

        parseMappingData: function(data) {
            var parsedData = {};

            var paramData = data.parameters;
            if (paramData) {
                parsedData.parameters = paramData;
                parsedData.parameters.sort(function(a, b) {
                    if (typeof a.type === 'string' && typeof b.type === 'string') {
                        return a.type.localeCompare(b.type);
                    }
                });
                parsedData.parameters.forEach(function(entry) {
                    entry.deployed = true;
                });
            }
            UWA.log('ParameterizationSystemsSafetyCollection::parsedData');
            return parsedData;
        }
    });
});

define('DS/ParameterizationSkeleton/Collection/ParameterizationFSXCollection', [
    'UWA/Core',
    'UWA/Class/Model',
    'UWA/Class/Collection',
    'DS/ParameterizationSkeleton/Utils/ParameterizationDataUtils',
    'DS/WAFData/WAFData',
    'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler'
], function (UWA, Model, Collection, ParameterizationDataUtils, WAFData, URLHandler) {
    'use strict';

    var handledDomain = null;

    return Collection.extend({
        model: function (modelid) {
            return Model.extend();
        },

        setup: function (models, options) {
            UWA.log('ParameterizationFSXCollection::setup');

            UWA.log(models);
            UWA.log(options);
           
            var _modelKey = options._modelKey;
            var domainID = _modelKey._attributes.domainid;

            if (UWA.is(this.model, "function")) {
                this.model = this.model(domainID);               
            }
            handledDomain = domainID;
            
            this.url = URLHandler.getURL() +
                "/resources/v1/fsxparam/getStandardFsxOwnership?tenant=" + URLHandler.getTenant();
        },

        sync: function (method, model, options) {
            UWA.log('ParameterizationFSXCollection::sync');
            options.contentType = 'text/plain';
            options.lang = widget.lang;

            options.headers = {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'Accept-Language': widget.lang
            };

            UWA.log(options);

            options = Object.assign({
                ajax: WAFData.authenticatedRequest
            }, options);
            this._parent.apply(this, [method, model, options]);
        },

        parse: function (data) {
            UWA.log("ParameterizationFSXCollection::parse");
            UWA.log(data);

            return this.parseMappingData(data);
        },

        create: function (attributes, options) {
            options.proxy = 'passport';
            this._parent.apply(this, [attributes, options]);
        },

        parseMappingData: function (data) {
            return data;
        }

    });
});

define('DS/ParameterizationSkeleton/Collection/ParameterizationMSFCollection', [
    'UWA/Core',
    'UWA/Class/Model',
    'UWA/Class/Collection',
    'DS/ParameterizationSkeleton/Utils/ParameterizationDataUtils',
    'DS/WAFData/WAFData',
    'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler'
], function (UWA, Model, Collection, ParameterizationDataUtils, WAFData, URLHandler) {
    'use strict';
    
    var handledDomain = null;

    return Collection.extend({
        model : function (modelid) {
             return Model.extend();
        },

        setup: function (models, options) {
        	UWA.log('ParameterizationMSFCollection::setup');

        	UWA.log(models);
        	UWA.log(options);

        	console.log("ParameterizationMSFCollection::setup, Successful");
        	var iObjID,
        	_modelKey = options._modelKey,
        	domainID = _modelKey._attributes.domainid;

        	if (UWA.is(this.model, "function")) {
        		this.model = this.model(domainID);
        		handledDomain = domainID;
        	}

        	iObjID = _modelKey._attributes.id;
        	this.url = URLHandler.getURL() +                    
        	"/resources/v1/msfParameterization/getCustomTypeMappings?tenant=" + URLHandler.getTenant();
        },

        sync : function(method, model, options) {
            UWA.log('ParameterizationMSFCollection::sync');
            options.contentType = 'application/json';
            options.lang = widget.lang;

            options.headers = {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
                'Accept-Language' : widget.lang
            };

            UWA.log(options);

            options = Object.assign({
                ajax: WAFData.authenticatedRequest
            }, options);  
            this._parent.apply(this, [method, model, options]);
        },

        parse: function (data) {
            UWA.log("ParameterizationMSFCollection::parse");
            UWA.log(data);

            return this.parseMappingData(data);           
        },

        create: function(attributes, options) {
            options.proxy = 'passport';
            this._parent.apply(this, [attributes, options]);
        },   

        parseMappingData: function (data) {        	
            return data;
        }

    });
});

/*@fullReview  SSV1 19/06/13  FUN090928 : SSV1 Engineering Definition configuration UI*/
/*global define, widget, document, setTimeout, console*/
/*jslint nomen: true */
define('DS/ParameterizationSkeleton/Collection/ParameterizationSAX/ParamSAXFormulaCollection', [
    // UWA
    'UWA/Core',
    'UWA/Class/Model',
    'UWA/Class/Collection',
    'DS/ParameterizationSkeleton/Utils/ParameterizationDataUtils',
    'DS/WAFData/WAFData',
    'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler'
], function (UWA, Model, Collection, ParameterizationDataUtils, WAFData, URLHandler) {
    'use strict';
    //

    var handledDomain = null;
	var _securityContext = null;
    return Collection.extend({
        model : function (modelid) {
           return Model.extend();
        },

        setup: function (models, options) {
            UWA.log('ParameterizationFLWeb::setup');
            UWA.log(models);
            UWA.log(options);
            var iURL, iObjID,
                _modelKey = options._modelKey,
                domainID = _modelKey._attributes.domainid,
                familyID = _modelKey._attributes.familyid;

            if (UWA.is(this.model, "function")) {
                this.model = this.model(domainID);
                handledDomain = domainID;
            }

            iObjID = _modelKey._attributes.id;
            this.url = URLHandler.getURL() +
              "/resources/v1/SystemsArchitectureDefinitionParam/getParamArchitectureNumberExpressions?tenant=" + URLHandler.getTenant();
        },

        sync : function(method, model, options) {
            UWA.log('ParameterizationFLWeb::sync');
            options.contentType = 'application/json';
            options.lang = widget.lang;

            options.headers = {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
                'Accept-Language' : widget.lang
            };
            UWA.log(options);

            options = Object.assign({
                ajax: WAFData.authenticatedRequest
            }, options);
            this._parent.apply(this, [method, model, options]);
        },

        parse: function (data) {
            UWA.log("ParameterizationFLWeb::parse");
            UWA.log(data);
            return this.parseMappingData(data);
        },

        create: function(attributes, options) {
            options.proxy = 'passport';
            this._parent.apply(this, [attributes, options]);
        },

        parseMappingData: function (data) {
    			var parsedData = {};
    			var paramData = data.ParameterExpressionList;
    			var attributes = data.Attribues;
          if(paramData){
    				parsedData.ExpressionList = paramData;
    	    	parsedData.ExpressionList.sort(function(a, b){
    	    	if(a.Order && b.Order){
    	    	    return a.Order - b.Order;
	    			}
	    		});
    			parsedData.ExpressionList.forEach(function(entry){
    					entry.Deployed = 'True';
    					entry.Label = entry.Name;
    				});
          }
    			if(attributes) {
    				parsedData.PhysicalProductAttributes = attributes;
    			}
    			parsedData.UnicityCheck = data.UnicityCheck;
    			return parsedData;
        },

		/**
         * Function will retrieve the security context
         * @returns {function} calls back the promise resolve method with the security context fetched from service
         */
   //     retrieveSecurityContext: function(){
   //         var that = this;
   //         return new Promise(function (resolve, reject) {
   //             WAFData.authenticatedRequest(URLHandler.getURL() + '/resources/pno/person/getsecuritycontext', {
   //                 method: 'GET',
   //                 type: 'json',
   //                 headers : {
   //                     Accept: 'application/json',
   //                     'Content-Type': 'application/json'
   //                 },
   //                 onComplete:function(resp){
   //					_securityContext = resp.SecurityContext;
   //                     //that._securityContext = resp.SecurityContext;
   //                     resolve('Done');
   //                 },
   //                 onFailure : reject,
   //                 onTimeout: reject
   //             });
   //         });
   //     }

    });
});

/*@fullReview  ZUR 15/11/23 2017x Param Widgetization NG*/
/*global define, widget, document, setTimeout, console*/
/*jslint nomen: true */
define('DS/ParameterizationSkeleton/Collection/ParameterizationXCADDomainsListCollection', [
    'UWA/Core',
    'UWA/Class/Collection',
    'DS/ParameterizationSkeleton/Model/ParameterizationDomainsListModel',
    'WebappsUtils/WebappsUtils',// WebApps
    'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler',
    'i18n!DS/ParameterizationSkeleton/assets/nls/ParamSkeletonNLS'
], function (UWA, Collection, ParameterizationDomainsModel, WebappsUtils, URLHandler, ParamSkeletonNLS) {
    'use strict';

    return Collection.extend({
        model : ParameterizationDomainsModel,

        setup: function () {
            UWA.log("ParameterizationDomainsListCollection::setup");
            this.url = WebappsUtils.getWebappsAssetUrl('ParameterizationSkeleton', 'Integrations.json');
        },

        sync : function(method, model, options) {
            UWA.log("ParameterizationDomainsListCollection::sync");
            //options.contentType = 'application/json';
            options.proxy = 'passport';

            options.headers = {
                'Accept-Language' : widget.lang
            };
            //'Accept-Language' : widget.lang
            //options.acceptLanguage = widget.lang;
            this._parent.apply(this, [method, model, options]);
        },

        parse: function (data) {
            UWA.log("ParameterizationDomainsListCollection::parse");
            var titleText, titleTooltip, paramEntries = [];

            /*var imgClass = 'fonticon fonticon-2x fonticon-flow-cascade';
            var imgSpan = UWA.createElement('span', {
                    'class' :  imgClass
            });*/

            if (Array.isArray(data)) {
                data.forEach(function (iElement) {
                    titleText = ParamSkeletonNLS[iElement.domainid + "Text"];
                    titleTooltip = ParamSkeletonNLS[iElement.domainid + "Tooltip"];

                    if ((iElement.familyid !== null) && (iElement.familyid !== "")) {
                        titleText = ParamSkeletonNLS[iElement.familyid + "Text"];
                        titleTooltip = ParamSkeletonNLS[iElement.familyid + "Tooltip"];
                    }

                    paramEntries.push({
                        title          : titleText,
                        subtitle       : titleTooltip,
                        introduction   : titleTooltip,
                        //image          : URLHandler.getURL() + "/widget/images/MyApps/" + iElement.image,
                        image          : URLHandler.getURL() + "/webapps/ParameterizationSkeleton/assets/img/" + iElement.image,
                        domainid       : iElement.domainid,
                        familyid       : iElement.familyid,
                        id             : iElement.domainid + iElement.familyid
                    });
                });
            }
            return paramEntries;

 /* "Iteration" "ENOWMOD_AP_AppIcon.png"
    "DataAccessRight" "ENOTASK_AP_AppIcon.png"
    "ObjectIdentification" "ENOCOEX_AP_AppIcon.png"
    "ObjectIdentification//ENOWCHG_AP_AppIcon.png"
    "EngineeringCentral//ENOREPR_AP_AppIcon.png"
    "AttributeDefENOBPCO_AP_AppIcon.png"*/

        }

    });
});

/**
 * @author AMN14
 */
define('DS/ParameterizationSkeleton/Collection/ParameterizationSAX/ParamSAXFormulaListCollection', [
    'UWA/Core',
    'UWA/Class/Model',
    'UWA/Class/Collection',
    'DS/ParameterizationSkeleton/Utils/ParameterizationDataUtils',
    'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler',
    'DS/ParameterizationSkeleton/Model/ParameterizationSAX/ParamSAXModel',
    'i18n!DS/ParameterizationSkeleton/assets/nls/FLWebNLS',
    'DS/WAFData/WAFData',
    'WebappsUtils/WebappsUtils'
], function ( UWA,
              Model,
              Collection,
              ParamDataUtils,
              URLHandler,
              ParamSAXModel,
               FLWebNLS,
              WAFData,
              WebappsUtils
            ) {
              'use strict';


              var collabManagementCollection = Collection.extend({

                  model : ParamSAXModel,

                  setup : function (models, options) {
                      UWA.log('SAXCollection::setup');
                      UWA.log(options);
                      this.childCollection = null;
                      var _modelKey = options._modelKey,
                          domainID = _modelKey._attributes.domainid,
                          familyID = _modelKey._attributes.familyid;
                      this.url = URLHandler.getURL() + "/resources/ParamWS/access/DomainElements?tenant=" + URLHandler.getTenant() + "&domainid=SystemsArchitectureDefinitionOtbParameter&familyid="+familyID;
                    //  this.url = WebappsUtils.getWebappsAssetUrl('ParameterizationSkeleton', 'ParamSAX_Entries.json');
                  },


                  sync : function(method, model, options) {
                      UWA.log("SAXCollection::sync");

                      options.headers = {
                          Accept: 'application/json',
                          'Accept-Language' : widget.lang
                      };

                      options = Object.assign({
                          ajax: WAFData.authenticatedRequest
                      }, options);

                      this._parent.apply(this, [method, model, options]);
                  },


                  parse: function (data) {
                      UWA.log("SAXCollection::parse");
                      UWA.log(data);
                      const familyDetails = data;
                      // var SAX_Entries = [];
                      //
                      // if(Array.isArray(data)) {
                      //
                      //   data.forEach(function(SAX_Entry) {
                      //     var title = FLWebNLS[SAX_Entry.familyid + "Text"];
                      //     var tooltip = FLWebNLS[SAX_Entry.familyid + "Tooltip"];
                      //
                      //     SAX_Entries.push({
                      //       title              : title,
                      //       subtitle           : tooltip,
                      //       image              : URLHandler.getURL() + "/webapps/ParameterizationSkeleton/assets/img/" + SAX_Entry.image,
                      //       id                 : SAX_Entry.domainid + SAX_Entry.familyid,
                      //       familyid           : SAX_Entry.familyid,
                      //       domainid           : SAX_Entry.domainid
                      //     });
                      //   });
                      // }

                      return familyDetails;
                  },

                  create : function(attributes, options) {
                      options.proxy = 'passport';
                      this._parent.apply(this, [attributes, options]);
                  }

              }
            );

            return collabManagementCollection;
          }
);

/**
 * @author AMN14
 */
define('DS/ParameterizationSkeleton/Collection/ParameterizationSAX/ParamSAXOtbCollection', [
    'UWA/Core',
    'UWA/Class/Model',
    'UWA/Class/Collection',
    'DS/ParameterizationSkeleton/Utils/ParameterizationDataUtils',
    'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler',
    'DS/ParameterizationSkeleton/Model/ParameterizationSAX/ParamSAXModel',
    'i18n!DS/ParameterizationSkeleton/assets/nls/FLWebNLS',
    'DS/WAFData/WAFData',
    'WebappsUtils/WebappsUtils'
], function ( UWA,
              Model,
              Collection,
              ParamDataUtils,
              URLHandler,
              ParamSAXModel,
               FLWebNLS,
              WAFData,
              WebappsUtils
            ) {
              'use strict';


              var collabManagementCollection = Collection.extend({

                  model : ParamSAXModel,

                  setup : function (models, options) {
                      UWA.log('SAXCollection::setup');
                      UWA.log(options);
                      this.childCollection = null;
                      var _modelKey = options._modelKey,
                          domainID = _modelKey._attributes.domainid,
                          familyID = _modelKey._attributes.familyid;
                      this.url = URLHandler.getURL() + "/resources/ParamWS/access/DomainElements?tenant=" + URLHandler.getTenant() + "&domainid=SystemsArchitectureDefinitionOtbParameter&familyid="+familyID;
                    //  this.url = WebappsUtils.getWebappsAssetUrl('ParameterizationSkeleton', 'ParamSAX_Entries.json');
                  },


                  sync : function(method, model, options) {
                      UWA.log("SAXCollection::sync");

                      options.headers = {
                          Accept: 'application/json',
                          'Accept-Language' : widget.lang
                      };

                      options = Object.assign({
                          ajax: WAFData.authenticatedRequest
                      }, options);

                      this._parent.apply(this, [method, model, options]);
                  },


                  parse: function (data) {
                      UWA.log("SAXCollection::parse");
                      UWA.log(data);
                      const familyDetails = data;
                      // var SAX_Entries = [];
                      //
                      // if(Array.isArray(data)) {
                      //
                      //   data.forEach(function(SAX_Entry) {
                      //     var title = FLWebNLS[SAX_Entry.familyid + "Text"];
                      //     var tooltip = FLWebNLS[SAX_Entry.familyid + "Tooltip"];
                      //
                      //     SAX_Entries.push({
                      //       title              : title,
                      //       subtitle           : tooltip,
                      //       image              : URLHandler.getURL() + "/webapps/ParameterizationSkeleton/assets/img/" + SAX_Entry.image,
                      //       id                 : SAX_Entry.domainid + SAX_Entry.familyid,
                      //       familyid           : SAX_Entry.familyid,
                      //       domainid           : SAX_Entry.domainid
                      //     });
                      //   });
                      // }

                      return familyDetails;
                  },

                  create : function(attributes, options) {
                      options.proxy = 'passport';
                      this._parent.apply(this, [attributes, options]);
                  }

              }
            );

            return collabManagementCollection;
          }
);

/*@fullReview  NZV 2022/05/10 FUN124183 */
/*global define, widget, document, setTimeout, console, clearTimeout, FileReader*/
/*jslint plusplus: true*/
/*jslint nomen: true*/
define('DS/ParameterizationSkeleton/Views/ParametersErrorView',
    [
        'UWA/Core',
        'UWA/Class/View',
        'DS/UIKIT/Modal',
        'DS/UIKIT/Mask',
        'DS/UIKIT/Scroller',
        'DS/ParameterizationSkeleton/Utils/ParameterizationDataUtils',
        'DS/ParameterizationSkeleton/Views/ParametersLayoutViewUtilities',
        'i18n!DS/ParameterizationSkeleton/assets/nls/ParamSkeletonNLS'
    ],
    function (UWA, View,
              Modal,
              Mask, Scroller,
              ParameterizationDataUtils,
              ParamLayoutUtilities,
              ParamSkeletonNLS) {

        'use strict';

        var extendedView;

        extendedView = View.extend({
            tagName: 'div',
            className: 'generic-detail',

            init: function (options) {
                UWA.log('ParametersErrorView::init');
                UWA.log(options);
                var initDate =  new Date(),
                    ConnectStruct = ParameterizationDataUtils.paramStructBuilder("domainName,tenantID,env_url");

                options = UWA.clone(options || {}, false);

                this._parent(options);

            },

            setup: function(options) {
                UWA.log('ParametersErrorView::setup!');
                UWA.log(options);
            },

            render: function () {
                UWA.log("ParametersErrorView::render");
                var introDiv,
                    that = this,
                    activateApply = false;

                this.contentDiv =  UWA.createElement('div', {
                    'id': 'mainParamDiv'
                });

                Mask.mask(this.contentDiv);

                this.container.setContent(this.contentDiv);
                  ParamLayoutUtilities.createParamMask(this.contentDiv, ParamSkeletonNLS.PageOnlyForBaselineEnv);
                //  UWA.log('unmask');
                  Mask.unmask(this.contentDiv);
                return this;
            },




            onKeyDownTextField : function (event) {

                UWA.log(event);
            },


            //show: function () {},
            destroy : function() {
                this.stopListening();
                this._parent.apply(this, arguments);
            }

        });

        return extendedView;
    });

/*@fullReview BXQ 2021:07:30 Widegt param Life Cycle rules on PPR Objects*/
/*global define, widget, document, setTimeout, console*/
/*jslint nomen: true */


define('DS/ParameterizationSkeleton/Collection/PPRSynchronizationLifeCycle/PPRSyncCommonParamCollection', [
    // UWA
    'UWA/Core',
    'UWA/Class/Model',
    'UWA/Class/Collection',
    'DS/ParameterizationSkeleton/Model/PPRSynchronizationLifeCycle/PPRSyncMBOMmodel',
    'DS/ParameterizationSkeleton/Utils/ParameterizationDataUtils',
    'DS/WAFData/WAFData',
    'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler'
], function (UWA, Model, Collection, PPRSynchronizationLifeCycleModel, ParameterizationDataUtils, WAFData, URLHandler) {
    'use strict';
    //

    var handledDomain = null;

    return Collection.extend({
        model : function (modelid) {
            return PPRSynchronizationLifeCycleModel;
        },

        setup: function (models, options) {
            UWA.log('ParametrizationPPRSyncRules::setup');

            UWA.log(models);
            UWA.log(options);

            console.log("ParametrizationPPRSyncRules::setup, Sucessful");
            var iURL, iObjID,
                _modelKey = options._modelKey,
                domainID = _modelKey._attributes.domainid,
                familyID = _modelKey._attributes.familyid;

            if (UWA.is(this.model, "function")) {
                this.model = this.model(domainID);
                handledDomain = domainID;
            }

            iObjID = _modelKey._attributes.id;

            //TO DO URL (java) to read Model
                //this.url = URLHandler.getURL() +
                //    "/resources/v1/xENGParameterization/getAdminPartNumberProperties?tenant=" + URLHandler.getTenant();

            this.url = URLHandler.getURL() + "/resources/DELLifecycleParametrization/lifecycle/options?modelerKey=DELLifecycleCouplingParam_MBOM"; 


        },

        sync: function (method, model, options) {
            UWA.log('ParameterizationCommonCollection::sync');
            options.contentType = 'application/json';//application/ds-json
            //options.proxy = 'passport';
            options.lang = widget.lang;

            options.headers = {
                Accept: 'application/json',
                'Content-Type': 'application/json',
                'Accept-Language': widget.lang
            };

            UWA.log(options);

            options = Object.assign({
                ajax: WAFData.authenticatedRequest
            }, options);
            //console.log(model);
            //this.childCollection.sync(method, model, options);
            this._parent.apply(this, [method, model, options]);
        },

        parse: function (data) {
  

            return this.parseMappingData(data);
           
        },

        create: function(attributes, options) {
            options.proxy = 'passport';
            this._parent.apply(this, [attributes, options]);
        },


        parseMappingData: function (data) {
            //parse method
            UWA.log("PPRSyncCommonParamCollection::parse");
            UWA.log(data);
            var parsedData = {};

            //Retrun the structure found by webservice
            parsedData.ExpressionsList = data.result.parameters;
            return parsedData;
        }
    });
});

/*@fullReview  ZUR 15/11/23 2017x Param Widgetization NG*/
/*global define, widget, document, setTimeout, console*/
/*jslint nomen: true */
define('DS/ParameterizationSkeleton/Collection/ParameterizationCommonCollection', [
    // UWA
    'UWA/Core',
    'UWA/Class/Model',
    'UWA/Class/Collection',
    'DS/ParameterizationSkeleton/Model/ParameterizationDomainModel',
    'DS/ParameterizationSkeleton/Model/ParameterizationDataModeling/TypeModel',
    'DS/ParameterizationSkeleton/Model/ParameterizationLifecycle/LifecycleModel',
    'DS/ParameterizationSkeleton/Model/ParameterizationXCAD/XCADModel',
    'DS/ParameterizationSkeleton/Utils/ParameterizationDataUtils',
    'DS/WAFData/WAFData',
    'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler'
], function (UWA, Model, Collection, ParameterizationDomainModel, TypeModel, LifecycleModel, XCADModel,
    ParameterizationDataUtils, WAFData, URLHandler) {
    'use strict';
    //

    var handledDomain = null;

    //var  ParameterizationParentCol = 
    return Collection.extend({
        model : function (modelid) {
            UWA.log('ParameterizationCommonCollection::model = ' + modelid);
            if (modelid === "AttributeDef") {
                return TypeModel;
            }
            if (modelid === "XCADParameterization") {
                return XCADModel;
            }
            return LifecycleModel;
        },

        //model:ParameterizationDomainModel,
        setup: function (models, options) {
            UWA.log('ParameterizationCommonCollection::setup');
            //this.childCollection = null;

            UWA.log(models);
            UWA.log(options);
            /*var options2 = this.options;
            UWA.log(options2);*/

            console.log("ParameterizationCommonCollection::setup, la suite");
            var iURL, iObjID,
                _modelKey = options._modelKey,
                domainID = _modelKey._attributes.domainid,
                familyID = _modelKey._attributes.familyid;

            if (UWA.is(this.model, "function")) {
                this.model = this.model(domainID);
                handledDomain = domainID;
            }

            if (domainID === 'AttributeDef') {
                UWA.log("ParameterizationCommonCollection::Attributes!");
                iObjID = _modelKey._attributes.id;
                this.url = URLHandler.getURL() +
                    "/resources/ParamWS/datamodel/listofattributesfortype?tenant=" + URLHandler.getTenant() + "&type=" + iObjID;
            } else if (domainID === 'LifecycleTopology') {
                iObjID = _modelKey._attributes.id;
                UWA.log("ParameterizationCommonCollection::Setting lifecycle URLs");
                this.url = URLHandler.getURL() +
                    "/resources/ParamWS/lifecycle/topology?tenant=" + URLHandler.getTenant() + "&policy=" + iObjID;

            } else if (domainID === 'XCADParameterization') {
                iObjID = _modelKey._attributes.id;
                UWA.log("ParameterizationCommonCollection::Setting xcad URLs");
                this.url = URLHandler.getURL() +
                    "/resources/xcadparam/gco/get?tenant=" + URLHandler.getTenant() + "&integration=" + iObjID;
           
		   } else {
                iURL = URLHandler.getURL() + "/resources/ParamWS/access/DomainElements?tenant=" + URLHandler.getTenant() + "&domainid=" + domainID;

                if ((familyID !== null) && (familyID !== "")) {
                    iURL = iURL + "&familyid=" + familyID;
                }
                this.url = iURL;
                //this.childCollection = new ParameterizationDomainCollection();
                //return this.childCollection.setup(models, options);
            }
        },

        sync : function(method, model, options) {
            UWA.log('ParameterizationCommonCollection::sync');
            options.contentType = 'application/json';//application/ds-json
            //options.proxy = 'passport';
            options.lang = widget.lang;
//IR-903905-3DEXPERIENCER2022x - revert the change no need to mention timeout
            options.headers = {
                Accept: 'application/json',
                //'Content-Type': 'application/json',
                'Accept-Language' : widget.lang
            };
            UWA.log(options);
            //IR-987186-3DEXPERIENCER2022x\23x
            options.timeout = 300000;
            options.onTimeout = function (networkError, error) {
              error = error || networkError;
              console.log("onTimeout");
              console.log(error);
            };
            options.onPassportError = function (networkError, error) {
              error = error || networkError;
              console.log("onPassportError");
              console.log(error);
            };
            options.onFailure = function(networkError, error) {
                error = error || networkError;
                console.log("onFailure");
                console.log(error);
            };

            options = Object.assign({
                ajax: WAFData.authenticatedRequest
            }, options);  
            //console.log(model);
            //this.childCollection.sync(method, model, options);
            this._parent.apply(this, [method, model, options]);
        },

        parse: function (data) {
            UWA.log("ParameterizationParentCollection::parse");
            //return this.childCollection.parse(data);
            UWA.log(data);

            if (handledDomain === "AttributeDef") {
                return this.parseTypeAttributesData(data);
            }

            if (handledDomain === "LifecycleTopology") {
                return this.parseMaturityData(data);
            }

            if (handledDomain === "XCADParameterization") {
                return this.parseXCADData(data);
            }
        },

        create: function(attributes, options) {
            options.proxy = 'passport';
            this._parent.apply(this, [attributes, options]);
        },

        parseTypeAttributesData : function (data) {
            UWA.log("ParameterizationCommonCollection::parseAttributesData");
            UWA.log(data);
            var oData = [], Attributes = [], Synchros = [], SystemAttributes = [];

            if (Array.isArray(data.attributeDescription)) {
                data.attributeDescription.forEach(function (rElement) {
                    Attributes.push(rElement);
                });
            }
			//FUN087050
			/*
            if (Array.isArray(data.attributesSynchronization)) {
                data.attributesSynchronization.forEach(function (rElement) {
                    Synchros.push(rElement);
                });
            }*/
            //NZV :IR-540216-3DEXPERIENCER2018x
            if (Array.isArray(data.attributesInSystem)) {
                data.attributesInSystem.forEach(function (rElement) {
                    SystemAttributes.push(rElement.sysAttribute);
                });
            }
			//FUN119390
            oData.push({
                id               : data.id,
                listofAttributes : Attributes,
                listofSynchros   : Synchros,
                listofSystemAttribues : SystemAttributes,
				existingConfiguredObjects : data.existingConfiguredObjects
            });
            return oData;
        },

        parseMaturityData: function (data) {
            var rPolicy, StateNodeModel,
                States  = [],
                Transitions = [],
                Checks = [],
                Types = [];

            UWA.log("LifecycleCollection::parse");
            UWA.log(data);

            StateNodeModel = ParameterizationDataUtils.paramStructBuilder("id,states");
            rPolicy = new StateNodeModel("", "");
            //:[{"id":"PRIVATE","stateUserName":"Private","isEnabled":"true","isCritical":"true","isDefault":"false","visuOrder":"0"},

            if (Array.isArray(data.state)) {
                data.state.forEach(function (rState) {
                    States.push({
                        id: rState.id,
                        stateUserName: rState.stateUserName,
                        isDefault  : rState.isDefault,
                        isEnabled  : rState.isEnabled,
                        isCritical : rState.isCritical,
                        visuOrder  : rState.visuOrder,
                        isDeployed : rState.isDeployed
                    });
                });
            }

            //":[{"name":"","sourceState":"Create","targetState":"Peer Review","isDefault":"false","isForbidden":"false","isCritical":"false"}
            if (Array.isArray(data.transition)) {
                data.transition.forEach(function (rTransition) {
                    Transitions.push({
                        name        : rTransition.name,
                        nlsname     : rTransition.nlsname,
                        sourceState : rTransition.sourceState,
                        targetState : rTransition.targetState,
                        isForbidden : rTransition.isForbidden,
                        isDefault   : rTransition.isDefault,
                        isCritical  : rTransition.isCritical,
                        isDeployed  : rTransition.isDeployed
                    });
                });
            }

            //<Check objType="Schema_Snapshot_Log" fromState="FROZEN" toState="RELEASED" ruleID="RejectOnCreator" additionalProps="NOINFO" isDeployed="true"/>
            if (Array.isArray(data.check)) {
                data.check.forEach(function (rCheck) {
                    Checks.push({
                        objType         : rCheck.objType,
                        sourceState     : rCheck.fromState,
                        targetState     : rCheck.toState,
                        ruleID          : rCheck.ruleID,
                        additionalProps : rCheck.additionalProps,
                        isDeployed      : (rCheck.isDeployed === "true"),
                        promote         : rCheck.promote //FUN087047
                    });
                });
            }

            if (Array.isArray(data.governedType)) {
                data.governedType.forEach(function (rType) {
                    Types.push(rType);
                });
            }
            //listofRules, typeCategory, typeID, typeNLS

            rPolicy.id = data.id;
            rPolicy.appCategory = data.appCategory;
            rPolicy.states = States;
            rPolicy.transitions = Transitions;
            rPolicy.checks = Checks;
            rPolicy.types = Types;
            return rPolicy;
        },

        parseXCADData : function (data) {
            UWA.log("ParameterizationCommonCollection::parseXCADData");
            UWA.log(data);
            var oData = [], Attributes = [], extension="";

            if (Array.isArray(data.Mapping)) {
                data.Mapping.forEach(function (rElement) {
                    Attributes.push(rElement);
                });
            }

			if(data.listofOOTBExtensionToShowInConsole !==null){
				extension=data.listofOOTBExtensionToShowInConsole;
			}
            oData.push({
              id               : data.Connector,
              Mapping : Attributes,
			  ExtensionList:extension
            });
            return oData;
        },



    });

    //return ParameterizationParentCol;
});

/**
 * @author AMN14
 */
define('DS/ParameterizationSkeleton/Views/ParamCollaboration/CollabManagementView',
    [
        'UWA/Core',
        'UWA/Class/View',
        'DS/W3DXComponents/Views/Layout/ListView',
        'DS/ParameterizationSkeleton/Views/ParamCollaboration/CollabItemsListView'
    ],
    function (
      UWA,
      View,
      ListView,
      CollabItemsListView
    ) {

        'use strict';

        return View.extend({

          defaultOptions : {
            type : 'default'
          },

          init : function(options) {
            UWA.log("CollabManagementView::init");
            UWA.log(options);

            this.options = options;
            this.childView = null;
          },

          render : function() {
            UWA.log("CollabManagementView::render");

                //myView = this.getViewFromDomainID(options);

            // if (myView !== null) {
            //      //myView.init();
            //     this.childView = myView;
            //     return myView.render();
            // }

            this.childView = new CollabItemsListView(this.options);

            var self = this;

    				// this.listenTo(this.collection, {
    				// 		onSync : self.onCompletedCollabEntriesRequest
    				// });

            return this.childView.render();
          },

          // getViewFromDomainID : function(options) {
          //   UWA.log("CollabManagementView::getViewFromDomainID");
          //
          //     var i,
          //         AppIntItemsDomainViewList = ["AttributeDef", "LifecycleTopology"];
          //
          //     for (i = 0; i < AppIntItemsDomainViewList.length; i++) {
          //         if (options.domainid === AppIntItemsDomainViewList[i]) {
          //             return new ParamItemsListView(options);
          //         }
          //     }
          //     return new ParametersLayoutView(options);
          // },

          onCompletedCollabEntriesRequest : function(){
            UWA.log("CollabManagementView::onCompletedCollabEntriesRequest");

            console.log(this.collection);
          },

          destroy : function() {
              this.childView.destroy();
              this.stopListening();
              this._parent.apply(this, arguments);
          }

        }
      );
    }
  );

/*@fullReview  ZUR 15/11/23 2017x Param Widgetization NG*/
/*global define, widget, document, setTimeout, console*/
/*jslint nomen: true */
define('DS/ParameterizationSkeleton/Collection/ParameterizationDomainsListCollection', [
    'UWA/Core',
    'UWA/Class/Collection',
    'DS/ParameterizationSkeleton/Model/ParameterizationDomainsListModel',
    'WebappsUtils/WebappsUtils',// WebApps
    'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler',
    'i18n!DS/ParameterizationSkeleton/assets/nls/ParamSkeletonNLS'
], function (UWA, Collection, ParameterizationDomainsModel, WebappsUtils, URLHandler, ParamSkeletonNLS) {
    'use strict';

    return Collection.extend({
        model : ParameterizationDomainsModel,

        setup: function () {
            UWA.log("ParameterizationDomainsListCollection::setup");
            this.url = WebappsUtils.getWebappsAssetUrl('ParameterizationSkeleton', 'Param_Entries.json');
        },

        sync : function(method, model, options) {
            UWA.log("ParameterizationDomainsListCollection::sync");
            //options.contentType = 'application/json';
            options.proxy = 'passport';

            options.headers = {
                'Accept-Language' : widget.lang
            };
            //'Accept-Language' : widget.lang
            //options.acceptLanguage = widget.lang;
            this._parent.apply(this, [method, model, options]);
        },

        parse: function (data) {
            UWA.log("ParameterizationDomainsListCollection::parse");
            var titleText, titleTooltip, paramEntries = [];
            //FUN119391
            let fixedDomainEntries = [], lastDomainEntry, finalDomainentries = [];
            let fixedSequenceDomains = ["AttributeDef", "ObjectIdentification",
                        "DataAccessRight", "LifecycleTopology"];
            let lastDomain = "Deployment";
            /*var imgClass = 'fonticon fonticon-2x fonticon-flow-cascade';
            var imgSpan = UWA.createElement('span', {
                    'class' :  imgClass
            });*/
            let separatorElm1 = {id: "elemSeparator1",
                            title          : ParamSkeletonNLS.CommonConfiguration,
                            disabled: 'true',
                            content:"<span id ='elemSep1'></span>",
                            domainid       : "elemSeparator",
                          };
            fixedDomainEntries.push(separatorElm1);
            if (Array.isArray(data)) {
                data.forEach(function (iElement) {
                    titleText = ParamSkeletonNLS[iElement.domainid + "Text"];
                    titleTooltip = ParamSkeletonNLS[iElement.domainid + "Tooltip"];

                    if ((iElement.familyid !== null) && (iElement.familyid !== "")) {
                        titleText = ParamSkeletonNLS[iElement.familyid + "Text"];
                        titleTooltip = ParamSkeletonNLS[iElement.familyid + "Tooltip"];
                    }
                    if ( fixedSequenceDomains.includes(iElement.domainid)) {
            						fixedDomainEntries.push({
            							title          : titleText,
            							subtitle       : titleTooltip,
            							introduction   : titleTooltip,
            							//image          : URLHandler.getURL() + "/widget/images/MyApps/" + iElement.image,
            							image          : URLHandler.getURL() + "/webapps/ParameterizationSkeleton/assets/img/" + iElement.image,
            							domainid       : iElement.domainid,
            							familyid       : iElement.familyid,
            							id             : iElement.domainid + iElement.familyid
            							});
            					}	else if ( lastDomain === iElement.domainid) {
            							lastDomainEntry = {
            								title          : titleText,
            								subtitle       : titleTooltip,
            								introduction   : titleTooltip,
                            //image          : URLHandler.getURL() + "/widget/images/MyApps/" + iElement.image,
            								image          : URLHandler.getURL() + "/webapps/ParameterizationSkeleton/assets/img/" + iElement.image,
            								domainid       : iElement.domainid,
            								familyid       : iElement.familyid,
            								id             : iElement.domainid + iElement.familyid
            							}
            					} else {
              						paramEntries.push({
              							title          : titleText,
              							subtitle       : titleTooltip,
              							introduction   : titleTooltip,
              							//image          : URLHandler.getURL() + "/widget/images/MyApps/" + iElement.image,
              							image          : URLHandler.getURL() + "/webapps/ParameterizationSkeleton/assets/img/" + iElement.image,
              							domainid       : iElement.domainid,
              							familyid       : iElement.familyid,
              							id             : iElement.domainid + iElement.familyid
              						});
                      }
                });
                fixedDomainEntries.push(lastDomainEntry);
                paramEntries.sort(function (paramEnt1, paramEnt2) {
                  if (paramEnt1.title !== undefined && paramEnt2.title !== undefined) {
                    return paramEnt1.title.localeCompare(paramEnt2.title);
                  } else {
                    // not possible case
                    console.log("sorting failed : " + paramEnt1);
                    console.log(paramEnt2);
                    return 0;
                  }
                });

                let separatorElm2 = {id: "elemSeparator2",
                                 title          : ParamSkeletonNLS.AppSpecificConfiguration,
                                 disabled: 'true',
                                 content:"<span id ='elemSep1'></span>",
                                 domainid       : "elemSeparator",
                               };
 					     fixedDomainEntries.push(separatorElm2);
           		 finalDomainentries =	fixedDomainEntries.concat(paramEntries);
            }
            return finalDomainentries;

 /* "Iteration" "ENOWMOD_AP_AppIcon.png"
    "DataAccessRight" "ENOTASK_AP_AppIcon.png"
    "ObjectIdentification" "ENOCOEX_AP_AppIcon.png"
    "ObjectIdentification//ENOWCHG_AP_AppIcon.png"
    "EngineeringCentral//ENOREPR_AP_AppIcon.png"
    "AttributeDefENOBPCO_AP_AppIcon.png"*/

        }

    });
});

/*@fullReview  ZUR 15/11/23 2017x Param Widgetization NG*/
/*global define, widget, document, setTimeout, console*/
/*jslint nomen: true */
define('DS/ParameterizationSkeleton/Collection/ParamCollaboration/ParameterizationMappingCollection', [
                                                                                                       // UWA
                                                                                                       'UWA/Core',
                                                                                                       'UWA/Class/Model',
                                                                                                       'UWA/Class/Collection',
                                                                                                       'DS/ParameterizationSkeleton/Model/ParamCollaboration/MappingModel',
                                                                                                       'DS/ParameterizationSkeleton/Utils/ParameterizationDataUtils',
                                                                                                       'DS/WAFData/WAFData',
                                                                                                       'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler'
                                                                                                       ], function (UWA, Model, Collection,  MappingModel, 
                                                                                                    		   ParameterizationDataUtils, WAFData, URLHandler) {
	'use strict';
	//

	var handledDomain = null;

	//var  ParameterizationParentCol = 
	return Collection.extend({
		model : function (modelid) {
			return MappingModel;
		},

		//model:ParameterizationDomainModel,
		setup: function (models, options) {
			UWA.log('ParameterizationCommonCollection::setup');
			//this.childCollection = null;

			UWA.log(models);
			UWA.log(options);
			/*var options2 = this.options;
            UWA.log(options2);*/

			console.log("ParameterizationCommonCollection::setup, la suite");
			var iURL, iObjID,
			_modelKey = options._modelKey,
			domainID = _modelKey._attributes.domainid,
			familyID = _modelKey._attributes.familyid;

			if (UWA.is(this.model, "function")) {
				this.model = this.model(domainID);
				handledDomain = domainID;
			}

			iObjID = _modelKey._attributes.id;
			this.url = URLHandler.getURL() +
			"/resources/MappingWS/mapping/mappinginformation?tenant=" + URLHandler.getTenant();

		},

		sync : function(method, model, options) {
			UWA.log('ParameterizationCommonCollection::sync');
			options.contentType = 'application/json';//application/ds-json
			//options.proxy = 'passport';
			options.lang = widget.lang;

			options.headers = {
					Accept: 'application/json',
					'Content-Type': 'application/json',
					'Accept-Language' : widget.lang
			};

			UWA.log(options);

			options = Object.assign({
				ajax: WAFData.authenticatedRequest
			}, options);  
			//console.log(model);
			//this.childCollection.sync(method, model, options);
			this._parent.apply(this, [method, model, options]);
		},

		parse: function (data) {
			UWA.log("ParameterizationParentCollection::parse");
			//return this.childCollection.parse(data);
			UWA.log(data);

			return this.parseMappingData(data);

		},

		create: function(attributes, options) {
			options.proxy = 'passport';
			this._parent.apply(this, [attributes, options]);
		},



		parseMappingData: function (data) {
			var rMapping, MappingNodeModel,
			AttributeInfo  = [],
			TypeRelInfo = [],
			InterfaceInfo = [],
			InterfaceMapping = [],
			TypeRelMapping = [],
			AttributeMapping =[];

			UWA.log("LifecycleCollection::parse");
			UWA.log(data);

			MappingNodeModel = ParameterizationDataUtils.paramStructBuilder("id,TypeRelInfo,InterfaceInfo,InterfaceMapping,TypeRelMapping");
			rMapping = new MappingNodeModel("", "", "", "", "", "");

			if (Array.isArray(data.typeRelInfo)) {

				data.typeRelInfo.forEach(function (rTypeRel) {

					AttributeInfo=[];

					if (Array.isArray(rTypeRel.mappableAttributes)) {
						rTypeRel.mappableAttributes.forEach(function (rAttrInfo) {

							AttributeInfo.push({
								id         : rAttrInfo.id,
								name : rAttrInfo.name,
								type :  rAttrInfo.type,
								range: rAttrInfo.range,
								itf: rAttrInfo.interface,
								basic: rAttrInfo.isbasic,
								deployed: rAttrInfo.isDeployed,
								isenum: rAttrInfo.isEnum,
								isreadonly: rAttrInfo.isReadOnly,
								isauthorized: rAttrInfo.isAuthorized,
								isUnknown: rAttrInfo.isUnknown
							
							});
						});
					}


					TypeRelInfo.push({
						id        : rTypeRel.id,
						attributeInfo : AttributeInfo,
						isType   : rTypeRel.isType,
						isCusto  : rTypeRel.isCusto,
						derivedFrom  : rTypeRel.derivedFrom,
						derivationPath : rTypeRel.derivationPath,
						name : rTypeRel.name
					});
				});
			}


			if (Array.isArray(data.typeRelMapping)) {
				data.typeRelMapping.forEach(function (rTypeRelMapping) {

					AttributeMapping=[];


					if (Array.isArray(rTypeRelMapping.attributeMapping)) {
						rTypeRelMapping.attributeMapping.forEach(function (rAttrMapping) {


							/*var VPMAttribute,MatrixAttribute,VPMTypeAttribute,MatrixTypeAttribute,VPMItfAttribute,MatrixItfAttribute;

             				VPMAttribute = rAttrMapping.vpmAttribute.id;
             				VPMTypeAttribute = rAttrMapping.vpmAttribute.type;
             				MatrixAttribute = rAttrMapping.mxAttribute.id;
             				MatrixTypeAttribute = rAttrMapping.mxAttribute.type;*/

             				/*var status = "Deployed";
             				if(!rAttrMapping.isDeployed)
             					status = "Stored";*/

             					AttributeMapping.push({
             						VPMAttribute         : {id:rAttrMapping.vpmAttribute.id,name:rAttrMapping.vpmAttribute.name,type:rAttrMapping.vpmAttribute.type,itf:rAttrMapping.vpmAttribute.interface,basic:rAttrMapping.vpmAttribute.isbasic,deployed:rAttrMapping.vpmAttribute.isDeployed,isenum:rAttrMapping.vpmAttribute.isEnum,range:rAttrMapping.vpmAttribute.range,isreadonly: rAttrMapping.vpmAttribute.isReadOnly, isauthorized: rAttrMapping.vpmAttribute.isAuthorized, isUnknown: rAttrMapping.vpmAttribute.isUnknown},
             						MatrixAttribute     :  {id:rAttrMapping.mxAttribute.id,name:rAttrMapping.mxAttribute.name,type:rAttrMapping.mxAttribute.type,itf:rAttrMapping.mxAttribute.interface,basic:rAttrMapping.mxAttribute.isbasic,deployed:rAttrMapping.mxAttribute.isDeployed,isenum:rAttrMapping.mxAttribute.isEnum, range:rAttrMapping.mxAttribute.range,isreadonly: rAttrMapping.mxAttribute.isReadOnly, isauthorized: rAttrMapping.mxAttribute.isAuthorized, isUnknown: rAttrMapping.mxAttribute.isUnknown },
             						SynchDirection          : rAttrMapping.synchDirection,
             						status          : rAttrMapping.deployedStatus,
             						OriginalSynchDirection:  rAttrMapping.synchDirection,
             						isBaseMapping: rAttrMapping.isBaseMapping,
             					});
						});
					}

					TypeRelMapping.push({	

						AttributeMapping:      AttributeMapping,
						KindOfMapping         : rTypeRelMapping.kindOfMapping,
						VPMObjectName         : rTypeRelMapping.vpmObject.name,
						VPMObject         : rTypeRelMapping.vpmObject.id,
						MatrixObject     : rTypeRelMapping.mxObject.id,
						MatrixObjectName     : rTypeRelMapping.mxObject.name,
						SynchDirection     : rTypeRelMapping.synchDirection,
						isBaseMapping          : rTypeRelMapping.isBaseMapping,
						DerivationPath   : rTypeRelMapping.derivationPath,
						status          : "deployed",
					});
				});
			}


			//listofRules, typeCategory, typeID, typeNLS

			rMapping.id = data.id;
			rMapping.TypeRelInfo = TypeRelInfo;
			rMapping.TypeRelMapping = TypeRelMapping;
			return rMapping;
		}

	});

	//return ParameterizationParentCol;

	//return ParameterizationParentCol;
});

define('DS/ParameterizationSkeleton/Views/ParameterizationDOCM/DOCMConfigurationLayoutView', [
	'UWA/Core',
	'UWA/Class/View',
	"DS/Controls/ButtonGroup",
	"DS/Controls/Toggle",
	"DS/UIKIT/Scroller",
	'DS/UIKIT/Mask',
	'DS/WAFData/WAFData',
	'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler',
	'DS/ParameterizationSkeleton/Views/ParametersLayoutViewUtilities',
	'DS/ParameterizationSkeleton/Views/ParameterizationDOCM/DOCMMappingViewUtilities',
	'i18n!DS/ParameterizationSkeleton/assets/nls/DOCMContentMgmtNLS'
],
function (UWA,
	View,
	WUXButtonGroup,
	WUXToggle,
	Scroller,
	Mask,
	WAFData,
	URLHandler,
	ParametersLayoutViewUtilities,
	DOCMViewUtilities,
	DOCMContentMgmtNLS) {

	'use strict';

	var extendedView;

	extendedView = View.extend({
		tagName: 'div',
		className: 'generic-detail',

		init: function (options) {
			options = UWA.clone(options || {}, false);
			this._parent(options);

			this.options = options;
			this.contentDiv = null;
			this.controlDiv = null;
		},

		setup: function (options) {
			UWA.log('DOCMConfiguration Layout::setup!');
			UWA.log(options);
		},

		render: function () {
			UWA.log("DOCMConfiguration LayoutView::render");
			var introDiv,
				that = this;

			this.contentDiv = UWA.createElement('div', {
				'id': 'titleMainDiv'
			});

			introDiv = UWA.createElement('div', {
				'class': 'information'
			}).inject(this.contentDiv);

			UWA.createElement('p', {
				text: DOCMContentMgmtNLS.intro
			}).inject(introDiv);

			var rule1 = UWA.createElement('div', {
				'class': "rule1"
			}).inject(this.contentDiv);
			UWA.createElement('span', {
				text: DOCMContentMgmtNLS.rule1
			}).inject(rule1);

			var sourceButtonGroup = new WUXButtonGroup({
				type: "radio",
				height: "24px"
			});
			var option1 = new WUXToggle({
				type: "radio",
				label: DOCMContentMgmtNLS.option1,
				value: DOCMContentMgmtNLS.defaultOption,
				checkFlag: true
			});
			var option2 = new WUXToggle({
				type: "radio",
				label: DOCMContentMgmtNLS.option2,
				value: DOCMContentMgmtNLS.Flatlist,
				checkFlag: false
			});
			sourceButtonGroup.addChild(option1);
			sourceButtonGroup.addChild(option2);
			sourceButtonGroup.inject(rule1);

			var url = URLHandler.getURL() + "/resources/v1/docmParameterization/DOCMDownloadRule?tenant=" + URLHandler.getTenant();
			WAFData.authenticatedRequest(url, {
				timeout: 250000,
				method: 'GET',
				type: 'string',
				headers: {
					'Content-Type': 'text/plain',
					'Accept': 'text/plain'
				},

				onFailure: function (str) {},

				onComplete: function (str) {
					Mask.unmask(that.contentDiv);
					if (str !== "") {
						var rule1 = that.contentDiv.getElements(".downloadRulesParent .rule1 .wux-controls-radio");
						for (var i = 0; i < rule1.length; i++) {
							if (str == rule1[i].dsModel._properties.value.value) {
								rule1[i].click();
							}
						}
					}
				}
			});

			this.paramsDIV = UWA.createElement('div', {
				'class': 'downloadRulesDiv',
			}).inject(this.contentDiv);


			this.baseAccordion = ParametersLayoutViewUtilities.createFamilyUIKITAccordion(this.paramsDIV);

			this.downloadRulesParentDiv = UWA.createElement('div', {
				'class': 'downloadRulesParent'
			});

			rule1.inject(this.downloadRulesParentDiv);
			this.controlDiv = ParametersLayoutViewUtilities.createApplyResetToolbar.call(this, this.downloadRulesParentDiv, true,
				this.applyParams.bind(this), this.resetParams.bind(this));


			this.container.setContent(this.contentDiv);

			this.baseAccordion.addItem({
				title: DOCMContentMgmtNLS.DownloadRules,
				content: this.downloadRulesParentDiv,
				selected: true,
				name: "documentdownloadconfig",
			});

			return this;
		},

		applyParams: function () {
			var that = this;
			var rule1 = this.contentDiv.getElements(".downloadRulesParent .rule1 .wux-controls-radio");
			var payloadToSend = "";
			Mask.mask(this.contentDiv);
			for (var i = 0; i < rule1.length; i++) {
				if (rule1[i].hasAttribute('checked')) {
					var value = DOCMViewUtilities.getValueFromHtmlElem(rule1[i]);
					payloadToSend = value;
					break;
				}
			}

			var url = URLHandler.getURL() + "/resources/v1/docmParameterization/DOCMDownloadRule?tenant=" + URLHandler.getTenant();
			WAFData.authenticatedRequest(url, {
				timeout: 250000,
				method: 'POST',
				data: payloadToSend,
				type: 'string',
				headers: {
					'Content-Type': 'text/plain',
					'Accept': 'text/plain'
				},

				onFailure: function (strRes) {
					Mask.unmask(that.contentDiv);
					DOCMViewUtilities.getAlertMessage(DOCMContentMgmtNLS.ApplyError, 'error', that.contentDiv);
				},

				onComplete: function (strRes) {
					Mask.unmask(that.contentDiv);
					if (strRes == "success") {
						DOCMViewUtilities.getAlertMessage(DOCMContentMgmtNLS.ApplySuccess, 'success', that.contentDiv);
					} else {
						DOCMViewUtilities.getAlertMessage(strRes.message, 'error', that.contentDiv);
					}
				}
			});
		},

		resetParams: function () {
			var that = this;

			var payloadToSend = "";
			Mask.mask(this.contentDiv);
			var value = DOCMViewUtilities.defaultDocumentDownloadExpression();
			payloadToSend = value;

			var url = URLHandler.getURL() + "/resources/v1/docmParameterization/DOCMDownloadRule?tenant=" + URLHandler.getTenant();
			WAFData.authenticatedRequest(url, {
				timeout: 250000,
				method: 'POST',
				data: payloadToSend,
				type: 'string',
				headers: {
					'Content-Type': 'text/plain',
					'Accept': 'text/plain'
				},

				onFailure: function (strRes) {
					Mask.unmask(that.contentDiv);
					DOCMViewUtilities.getAlertMessage(DOCMContentMgmtNLS.ApplyError, 'error', that.contentDiv);
				},

				onComplete: function (strRes) {
					Mask.unmask(that.contentDiv);
					if (strRes == "success") {
						var defaultDownloadRule = that.contentDiv.getElement('.downloadRulesParent .rule1 .wux-controls-radio');
						defaultDownloadRule.click();
						DOCMViewUtilities.getAlertMessage(DOCMContentMgmtNLS.ResetSuccess, 'success', that.contentDiv);
					} else {
						DOCMViewUtilities.getAlertMessage(strRes.message, 'error', that.contentDiv);
					}
				}
			});

		},

	});

	return extendedView;
});

/*@fullReview  SSV1 19/06/13  FUN090928 : SSV1 Engineering Definition configuration UI*/
/*global define, widget, document, setTimeout, console*/
/*jslint nomen: true */
define('DS/ParameterizationSkeleton/Collection/ParameterizationFLWebCollection', [
    // UWA
    'UWA/Core',
    'UWA/Class/Model',
    'UWA/Class/Collection',
    'DS/ParameterizationSkeleton/Utils/ParameterizationDataUtils',
    'DS/WAFData/WAFData',
    'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler'
], function (UWA, Model, Collection, ParameterizationDataUtils, WAFData, URLHandler) {
    'use strict';
    //

    var handledDomain = null;
	var _securityContext = null;
    return Collection.extend({
        model : function (modelid) {
           return Model.extend();
        },

        setup: function (models, options) {
            UWA.log('ParameterizationFLWeb::setup');

            UWA.log(models);
            UWA.log(options);

            console.log("ParameterizationFLWeb::setup, Sucessful");
            var iURL, iObjID,
                _modelKey = options._modelKey,
                domainID = _modelKey._attributes.domainid,
                familyID = _modelKey._attributes.familyid;

            if (UWA.is(this.model, "function")) {
                this.model = this.model(domainID);
                handledDomain = domainID;
            }

                iObjID = _modelKey._attributes.id;
                this.url = URLHandler.getURL() +
                    "/resources/v1/SystemsArchitectureDefinitionParam/getParamArchitectureNumberExpressions?tenant=" + URLHandler.getTenant();
        },

        sync : function(method, model, options) {
            UWA.log('ParameterizationFLWeb::sync');
            options.contentType = 'application/json';
            options.lang = widget.lang;

            options.headers = {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
                'Accept-Language' : widget.lang
            };
		//	method = 'create';
        //    options.data = JSON.stringify({});
            UWA.log(options);

            options = Object.assign({
                ajax: WAFData.authenticatedRequest
            }, options);
            this._parent.apply(this, [method, model, options]);
        },

        parse: function (data) {
            UWA.log("ParameterizationFLWeb::parse");
            UWA.log(data);

            return this.parseMappingData(data);

        },

        create: function(attributes, options) {
            options.proxy = 'passport';
            this._parent.apply(this, [attributes, options]);
        },



        parseMappingData: function (data) {
			var parsedData = {};
			
			var paramData = data.ParameterExpressionList;
			var attributes = data.Attribues;
			//var  i = 1;
        	if(paramData){
				parsedData.ExpressionList = paramData;
	    		parsedData.ExpressionList.sort(function(a, b){
	    			if(a.Order && b.Order){
	    				return a.Order - b.Order;
	    			}
	    		});
				parsedData.ExpressionList.forEach(function(entry){
					//entry.Name = 'Name'+i;
					entry.Deployed = 'True';
					entry.Label = entry.Name;
					//i++;
				});
        	}
			if(attributes) {
				parsedData.PhysicalProductAttributes = attributes;
			}
			parsedData.UnicityCheck = data.UnicityCheck;
			return parsedData;
            //return data;
        },
		
		/**
         * Function will retrieve the security context
         * @returns {function} calls back the promise resolve method with the security context fetched from service
         */
   //     retrieveSecurityContext: function(){
   //         var that = this;
   //         return new Promise(function (resolve, reject) {
   //             WAFData.authenticatedRequest(URLHandler.getURL() + '/resources/pno/person/getsecuritycontext', {
   //                 method: 'GET',
   //                 type: 'json',
   //                 headers : {
   //                     Accept: 'application/json',
   //                     'Content-Type': 'application/json'
   //                 },
   //                 onComplete:function(resp){
   //					_securityContext = resp.SecurityContext;
   //                     //that._securityContext = resp.SecurityContext;
   //                     resolve('Done');
   //                 },
   //                 onFailure : reject,
   //                 onTimeout: reject
   //             });
   //         });
   //     }

    });
});

/*! Copyright 2017, Dassault Systemes. All rights reserved. */
/*global define, widget, document, setTimeout, console*/
/*jslint nomen: true */
/*@fullReview  ZUR 15/11/23 2017x Param Widgetization NG*/
/*@fullReview  NZV 17/06/12 HL FUN060421, Interface name/Attribute group name set as InterfaceID (parseAttributesData)*/
/*@quickReview ZUR 18/04/24 FUN079262 2019x : EBOM-PS Collaboration Mapping Object Widget*/

define('DS/ParameterizationSkeleton/Collection/ParameterizationParentCollection', [
    // UWA
    'UWA/Core',
    'UWA/Class/Model',
    'UWA/Class/Collection',
    'DS/ParameterizationSkeleton/Model/ParameterizationDomainModel',
    'DS/ParameterizationSkeleton/Utils/ParameterizationDataUtils',
    'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler',
    'DS/ParameterizationSkeleton/Model/ParameterizationDataModeling/TypesListModel',
    'DS/ParameterizationSkeleton/Model/ParameterizationLifecycle/LifecycleListModel',
    'DS/ParameterizationSkeleton/Model/ParameterizationXCAD/XCADListModel',
    'DS/WAFData/WAFData',
    'WebappsUtils/WebappsUtils'
], function (UWA, Model, Collection, ParameterizationDomainModel,
             ParamDataUtils, URLHandler, TypesListModel, LifecycleListModel, XCADListModel, WAFData, WebappsUtils) {
    'use strict';
    //

    var handledDomain = null;

    //var  ParameterizationParentCol = 
    return Collection.extend({
        model : function (modelid) {
            UWA.log('ParameterizationParentCollection::model');
            if (modelid === "AttributeDef") {
                UWA.log('ParameterizationParentCollection::TypesListModel');
                return TypesListModel;
            }
            if (modelid === "LifecycleTopology") {
                UWA.log('ParameterizationParentCollection::LifecycleListModel');
                return LifecycleListModel;
            }
            if (modelid === "XCADParametrization") {
                UWA.log('ParameterizationParentCollection::XCADListModel');
                return XCADListModel;
            }

            return ParameterizationDomainModel;//previously worked only with ParameterizationDomainModel 
        },

        //model:ParameterizationDomainModel,
        setup: function (models, options) {
            UWA.log('ParameterizationParentCollection::setup');
            this.childCollection = null;

            UWA.log(models);
            UWA.log(options);
            /*var options2 = this.options;
            UWA.log(options2);*/

            console.log("ParameterizationParentCollection::setup, la suite");
            var iURL,
                _modelKey = options._modelKey,
                domainID = _modelKey._attributes.domainid,
                familyID = _modelKey._attributes.familyid;

            if (UWA.is(this.model, "function")) {
                this.model = this.model(domainID);
                handledDomain = domainID;
            }

            if (domainID === 'AttributeDef') {
                this.url = URLHandler.getURL() + "/resources/ParamWS/datamodel/listofsupportedtypes?tenant=" + URLHandler.getTenant();
                UWA.log("ParameterizationParentCollection::AttributeDef");
            } else if (domainID === 'LifecycleTopology') {
                this.url = URLHandler.getURL() + "/resources/ParamWS/lifecycle/listoflifecycles?tenant=" + URLHandler.getTenant();
                UWA.log("ParameterizationParentCollection::Setting lifecycle URLs");
             } else if (domainID === 'XCADParameterization') {
                this.url = URLHandler.getURL() + "/resources/xcadparam/gco/list?tenant=" + URLHandler.getTenant();
                UWA.log("ParameterizationParentCollection::Setting lifecycle URLs");
           } else {
                iURL = URLHandler.getURL() + "/resources/ParamWS/access/DomainElements?tenant=" + URLHandler.getTenant() + "&domainid=" + domainID;

                if ((familyID !== null) && (familyID !== "")) {
                    iURL = iURL + "&familyid=" + familyID;
                }
                this.url = iURL;
                //this.childCollection = new ParameterizationDomainCollection();
                //return this.childCollection.setup(models, options);
            }


            /*
            iURL = URLHandler.getURL() + "/resources/ParamWS/access/DomainElements?tenant=" + URLHandler.getTenant() + "&domainid=" + domainID;
            if ((familyID !== null) && (familyID !== "")) {
                iURL = iURL + "&familyid=" + familyID;
            }
            UWA.log(iURL);
            this.url = iURL;*/
            /*{"domainid": "AttributeDef","familyid": "","image": "paramAttributeDef.gif"}, 
              { "domainid": "ObjectIdentification", "familyid": "VersionNaming", "image": "paramVersionNaming.gif"}*/
        },

            /*init : function (models, options) {
            UWA.log('ParameterizationParentCollection::init');
            this.childCollection = null;
            this.mychosenModel = null;
            this.setup(models, options);
        },*/
        /*model : function (options) {
            //return this.mytest(options);
            
            //return ParameterizationParentCol.mytest(options);
            return ParameterizationDomainModel;
        },*/
        //model : ParameterizationParentCol.mytest(options),
        //model : this.mychosenModel,
        //model : ParameterizationDomainModel,
        //Application.version >= 2 ? TriangleV2 : Triangle;

        /*sync : function(method, model, options) {
            UWA.log('ParameterizationParentCollection::sync');
            options.contentType = 'application/json';//application/ds-json
            options.proxy = 'passport';
            options.lang = widget.lang;

            options.headers = {
                Accept: 'application/json',
                'Content-Type': 'application/json'
            };

            UWA.log(options);
            //console.log(model);
            //this.childCollection.sync(method, model, options);
            this._parent.apply(this, [method, model, options]);
        },*/

        sync : function(method, model, options) {
            UWA.log("ParameterizationParentCollection::sync::WD");
            //options.contentType = 'application/json';
            //options.proxy = 'passport';
            //options.lang = widget.lang;
            //options.lang = I18n.getCurrentLanguage(); doesn't work correctly
            //options.lang = widget.lang;
            //options.type = 'json';

            options.headers = {
                Accept: 'application/json',
               // 'Content-Type': 'application/json',
                'Accept-Language' : widget.lang
            };
            //ZUR in options.headers 'Accept-Language' : widget.lang --> IR-454515-3DEXPERIENCER2017x

            options = Object.assign({
                ajax: WAFData.authenticatedRequest
            }, options);

            this._parent.apply(this, [method, model, options]);
        },


        parse: function (data) {
            UWA.log("ParameterizationParentCollection::parse");
            //return this.childCollection.parse(data);
            UWA.log(data);

            if (handledDomain === "AttributeDef") {
                return this.parseAttributesData(data);
            }

            if (handledDomain === "LifecycleTopology") {
                return this.parseLifecylesData(data);
            }

            if (handledDomain === "XCADParameterization") {
                return this.parseXCADData(data);
            }

            var familyModel = ParamDataUtils.paramStructBuilder("id,family"),
                oData = new familyModel("", ""),
                Families = [];

            if (Array.isArray(data.family)) {
                data.family.forEach(function (rElement) {
                    Families.push(rElement);
                });
            }

            oData.id = data.id;
            oData.family = Families;
            return oData;
        },

        create: function(attributes, options) {
            options.proxy = 'passport';
            this._parent.apply(this, [attributes, options]);
        },

        parseAttributesData : function (data) {
            var paramEntries = [], paramTitle, paramSubTitle;

            if (Array.isArray(data.typeDescription)) {
                data.typeDescription.forEach(function (iElement) {
                    if (typeof iElement.interfaceID != "undefined" && iElement.interfaceID !== "") {
                        paramTitle = iElement.nlsName + ' - ' + iElement.interfaceID;
                        paramSubTitle = iElement.interfaceID;
                    } else {
                        paramTitle = iElement.nlsName;
                        paramSubTitle = iElement.id;
                    }
                    paramEntries.push({
                        title              : paramTitle,
                        subtitle           : paramSubTitle,
                        image              : URLHandler.getURL() + "/webapps/ParameterizationSkeleton/assets/img/" + "paramAttributeDef.png",
                        id                 : iElement.id,
                        domainid           : data.domainid
                        
                    });
                });
            }
            //ZUR - FUN079262 - 2019x : Deactivating Synchro Tile in Attributes Management, functionality moved to the new domain MappingManagement
            /*paramEntries.push({
                title          : ParamSkeletonNLS.PhysicalBOMCollabTitle,
                subtitle       : ParamSkeletonNLS.PhysicalBOMCollabTitle,
                image          : URLHandler.getURL() + "/webapps/ParameterizationSkeleton/assets/img/" + "paramAttributeSynchro.gif",
                id             : 'AttributeSynchronization',
                domainid       : data.domainid,
                sixwTagDescription : ''
            });*/
            // Promoted with IR IR-651121-3DEXPERIENCER2019x
           paramEntries.sort(function (paramEnt1, paramEnt2) {
                if (paramEnt1.title !== undefined && paramEnt2.title !== undefined) {
                    return paramEnt1.title.localeCompare(paramEnt2.title);
                } else {
                    // not possible case
                    console.log("sorting failed : " + paramEnt1);
                    console.log(paramEnt2);
                    return 0;
                }                
            });
            return paramEntries;
        },

        parseLifecylesData: function (data) {
            UWA.log("LifecycleListCollection::parse");
            UWA.log(data);
            var policies;

            UWA.log(URLHandler.getURL());
            if (Array.isArray(data.lifecycleDescription)) {

                policies = [];

                data.lifecycleDescription.forEach(function (ipolicy) {

                    policies.push({
                        title          : ipolicy.title,
                        subtitle       : ipolicy.id,
                        //content        : ipolicy.content,
                        image          : URLHandler.getURL() + "/webapps/ParameterizationSkeleton/assets/img/" + "paramLifecycleTopology.png",
                        id             : ipolicy.id,
                        domainid       : data.domainid,
                        modifyTopology : (ipolicy.areTransitionsEditable === "true"),
                        renameStates   : (ipolicy.areStatesRenamable === "true"),
                        supportRules   : (ipolicy.supportsPromoteRules === "true")
                        // parent: role.parent,//    child: role.child,
                    });
                });
            }
           // Promoted with IR IR-651121-3DEXPERIENCER2019x
           policies.sort(function (paramEnt1, paramEnt2) {
                if (paramEnt1.title !== undefined && paramEnt2.title !== undefined) {
                    return paramEnt1.title.localeCompare(paramEnt2.title);
                } else {
                    // not possible case
                    console.log("sorting failed : " + paramEnt1);
                    console.log(paramEnt2);
                    return 0;
                }                
            });
            return policies;
        },

      parseXCADData : function (data) {
          var paramEntries = [];
          
          if (Array.isArray(data.xcadDescription)) {
            data.xcadDescription.forEach(function (iElement) {
              paramEntries.push({
                title              : iElement.nlsName,
                subtitle           : '',
                image              : URLHandler.getURL() + "/webapps/ParameterizationSkeleton/assets/img/paramXCAD" + iElement.icon + ".png",
                id                 : iElement.id,
                domainid           : "XCADParameterization"
                
              });
            });
          }
          return paramEntries;
        }


    });

    //return ParameterizationParentCol;
});

define('DS/ParameterizationSkeleton/Collection/VersionNamingExtCollection', [
    // UWA
    'UWA/Core',
    'UWA/Class/Model',
    'UWA/Class/Collection',
    'DS/ParameterizationSkeleton/Utils/ParameterizationDataUtils',
    'DS/WAFData/WAFData',
    'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler'
], function (UWA, Model, Collection, ParameterizationDataUtils, WAFData, URLHandler) {
    'use strict';

    var handledDomain = null;

    return Collection.extend({
        model : function (modelid) {
             return Model.extend();
        },

        setup: function (models, options) {
            console.log("VersionNamingExtCollection::setup");

            console.log("VersionNamingExtCollection::setup, Successful");
            var _modelKey = options._modelKey;

            var domainID = _modelKey._attributes.domainid;
            var familyID = _modelKey._attributes.familyid;

            if (UWA.is(this.model, "function")) {
                this.model = this.model(domainID);
                handledDomain = domainID;
            }

            this.url = "";
        },

        sync : function(method, model, options) {
            console.log('VersionNamingExtCollection::sync');
           
            var familyModel = ParameterizationDataUtils.paramStructBuilder("id,family");
            var oData = new familyModel("", "");

            oData.id = "ObjectIdentification";
            oData.family = [];

            options.onComplete(oData);

            return {
                cancel: function () {
                    return;
                }
            };
        },

        parse: function (data) {
            //UWA.log("VersionNamingExtCollection::parse");
            //UWA.log(data);
            return data;
        },

        create: function(attributes, options) {
            options.proxy = 'passport';
            this._parent.apply(this, [attributes, options]);
        },
    });
});



/**
 * @author AMN14
 */
define('DS/ParameterizationSkeleton/Collection/ParamCollaboration/CollabManagementCollection', [
    'UWA/Core',
    'UWA/Class/Model',
    'UWA/Class/Collection',
    'DS/ParameterizationSkeleton/Utils/ParameterizationDataUtils',
    'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler',
    'DS/ParameterizationSkeleton/Model/ParamCollaboration/CollabManagementModel',
    'i18n!DS/ParameterizationSkeleton/assets/nls/CollaborationManagementNLS',
    'DS/WAFData/WAFData',
    'WebappsUtils/WebappsUtils'
], function ( UWA,
              Model,
              Collection,
              ParamDataUtils,
              URLHandler,
              CollabManagementModel,
              CollabManagementNLS,
              WAFData,
              WebappsUtils
            ) {
              'use strict';


              var collabManagementCollection = Collection.extend({

                  model : CollabManagementModel,

                  setup : function (models, options) {
                      UWA.log('CollabManagementCollection::setup');
                      UWA.log(options);

                      this.childCollection = null;

                      var _modelKey = options._modelKey,
                          domainID = _modelKey._attributes.domainid,
                          familyID = _modelKey._attributes.familyid;

                      this.url = WebappsUtils.getWebappsAssetUrl('ParameterizationSkeleton', 'CollabManagement_Entries.json');
                  },


                  sync : function(method, model, options) {
                      UWA.log("CollabManagementCollection::sync");

                      options.headers = {
                          Accept: 'application/json',
                          'Accept-Language' : widget.lang
                      };

                      options = Object.assign({
                          ajax: WAFData.authenticatedRequest
                      }, options);

                      this._parent.apply(this, [method, model, options]);
                  },


                  parse: function (data) {
                      UWA.log("CollabManagementCollection::parse");
                      UWA.log(data);

                      var collabEntries = [];

                      if(Array.isArray(data)) {

                        data.forEach(function(collabEntry) {
                          var title = CollabManagementNLS.CollaborationManagement[collabEntry.domainid + "Text"];
                          var tooltip = CollabManagementNLS.CollaborationManagement[collabEntry.domainid + "Tooltip"];

                          collabEntries.push({
                            title              : title,
                            subtitle           : tooltip,
                            image              : URLHandler.getURL() + "/webapps/ParameterizationSkeleton/assets/img/" + collabEntry.image,
                            id                 : collabEntry.domainid + collabEntry.familyid,
                            domainid           : collabEntry.domainid
                          });
                        });
                      }

                      return collabEntries;
                  },

                  create : function(attributes, options) {
                      options.proxy = 'passport';
                      this._parent.apply(this, [attributes, options]);
                  }

              }
            );

            return collabManagementCollection;
          }
);

/*global define, widget*/
/*jslint nomen: true*/
define('DS/ParameterizationSkeleton/Collection/LifecycleDescriptionCollection', [
    // UWA
    'UWA/Core',
    'UWA/Class/Collection',
    'DS/ParameterizationSkeleton/Model/ParameterizationLifecycle/LifecycleDescriptionModel',
    'DS/WAFData/WAFData',
    'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler'
], function (UWA, Collection, LifecycleDescriptionModel, WAFData, URLHandler) {
    "use strict";
    return Collection.extend({
        model : LifecycleDescriptionModel,
        setup: function (models, options) {
            var ipolicyID = options._modelKey._attributes.id;
            this.url = URLHandler.getURL() + "/resources/ParamWS/lifecycle/extendeddescription?tenant=" + URLHandler.getTenant() + "&policy=" + ipolicyID;
        },

        sync : function(method, model, options) {
            UWA.log('LifecycleDescriptionCollection::sync');
            //options.contentType = 'application/json';//application/ds-json
            //options.proxy = 'passport';
            //options.lang = widget.lang;

            options.headers = {
                'Accept-Language' : widget.lang
            };//ZUR IR-454515-3DEXPERIENCER2017x

            UWA.log(options);

            options = Object.assign({
                ajax: WAFData.authenticatedRequest
            }, options);
            //console.log(model);
            //this.childCollection.sync(method, model, options);
            this._parent.apply(this, [method, model, options]);
        },

        parse: function (data) {
            UWA.log("LifecycleDescriptionCollection::parse");
            return data;
        }

        /*create: function(attributes, options) {
            options.proxy = 'passport';
            // options.headers = 'headers%5BAccept%5D=application%2Fjson&headers%5BX-Request%5D=JSON';
            this._parent.apply(this, [attributes, options]);
        }*/

    });
});

define('DS/ParameterizationSkeleton/Collection/ConfigurationManagementCollection', [
    // UWA
    'UWA/Core',
    'UWA/Class/Model',
    'UWA/Class/Collection',
    'DS/ParameterizationSkeleton/Utils/ParameterizationDataUtils',
    'DS/WAFData/WAFData',
    'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler'
], function (UWA, Model, Collection, ParameterizationDataUtils, WAFData, URLHandler) {
    'use strict';
    //

    var handledDomain = null;

    return Collection.extend({
        model : function (modelid) {
             return Model.extend();
        },

        setup: function (models, options) {
            UWA.log('ConfigurationManagement::setup');

            UWA.log(models);
            UWA.log(options);

            console.log("ConfigurationManagement::setup, Sucessful");
            var iURL, iObjID,
                _modelKey = options._modelKey,
                domainID = _modelKey._attributes.domainid,
                familyID = _modelKey._attributes.familyid;

            if (UWA.is(this.model, "function")) {
                this.model = this.model(domainID);
                handledDomain = domainID;
            }

                iObjID = _modelKey._attributes.id;
               // this.url = URLHandler.getURL() + //Call WebService <- New URL Handler
                //    "/3DSpace/resources/modeler/configuration/settingsServices/getConfiguredExpressionXSLTDefault?tenant=" + URLHandler.getTenant();
        },

        sync : function(method, model, options) {
            UWA.log('ConfigurationManagement::sync');
            options.contentType = 'application/json';
            options.lang = widget.lang;

            options.headers = {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
                'Accept-Language' : widget.lang
            };

            UWA.log(options);

            options = Object.assign({
                ajax: WAFData.authenticatedRequest
            }, options);  
            this._parent.apply(this, [method, model, options]);
        },

        parse: function (data) {
            UWA.log("ConfigurationManagement::parse");
            UWA.log(data);

            return this.parseMappingData(data);
           
        },

        create: function(attributes, options) {
            options.proxy = 'passport';
            this._parent.apply(this, [attributes, options]);
        },

    

        parseMappingData: function (data) {
        	if(data.ExpressionList){
	    		data.ExpressionList.sort(function(a, b){
	    			if(a.Order && b.Order){
	    				return a.Order - b.Order;
	    			}
	    		});
        	}
        	
            return data;
        }

    });
    });



define('DS/ParameterizationSkeleton/Views/ParameterizationFLWeb/SAXMgmtView',
    [
        'UWA/Core',
        'UWA/Class/View',
        'DS/W3DXComponents/Views/Layout/ListView',
        'DS/ParameterizationSkeleton/Views/ParameterizationFLWeb/SAXTileView'
    ],
    function (
      UWA,
      View,
      ListView,
      SAXTileView
    ) {

        'use strict';

        return View.extend({

          defaultOptions : {
            type : 'default'
          },

          init : function(options) {
            UWA.log("SAXMgmtView::init");
            UWA.log(options);

            this.options = options;
            this.childView = null;
          },

          render : function() {
            UWA.log("SAXMgmtView::render");
            this.childView = new SAXTileView(this.options);
            return this.childView.render();
          },

          onCompletedCollabEntriesRequest : function(){
            UWA.log("SAXMgmtView::onCompletedEntriesRequest");
            console.log(this.collection);
          },

          destroy : function() {
              this.childView.destroy();
              this.stopListening();
              this._parent.apply(this, arguments);
          }

        }
      );
    }
  );

/*@fullReview  SSV1 19/06/13  FUN090928 : SSV1 Engineering Definition configuration UI*/
/*global define, widget, document, setTimeout, console*/
/*jslint nomen: true */
define('DS/ParameterizationSkeleton/Collection/ParameterizationSAX/ParamSAXUnicityCollection', [
    // UWA
    'UWA/Core',
    'UWA/Class/Model',
    'UWA/Class/Collection',
    'DS/ParameterizationSkeleton/Utils/ParameterizationDataUtils',
    'DS/WAFData/WAFData',
    'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler'
], function (UWA, Model, Collection, ParameterizationDataUtils, WAFData, URLHandler) {
    'use strict';
    //

    var handledDomain = null;
	var _securityContext = null;
    return Collection.extend({
        model : function (modelid) {
           return Model.extend();
        },

        setup: function (models, options) {
            UWA.log('ParameterizationFLWeb::setup');

            UWA.log(models);
            UWA.log(options);

            console.log("ParameterizationFLWeb::setup, Sucessful");
            var iURL, iObjID,
                _modelKey = options._modelKey,
                domainID = _modelKey._attributes.domainid,
                familyID = _modelKey._attributes.familyid;

            if (UWA.is(this.model, "function")) {
                this.model = this.model(domainID);
                handledDomain = domainID;
            }

                iObjID = _modelKey._attributes.id;
                this.url = URLHandler.getURL() +
                    "/resources/v1/SystemsArchitectureDefinitionParam/getCollaborativeSpaceGrouping?tenant=" + URLHandler.getTenant();
        },

        sync : function(method, model, options) {
            UWA.log('ParameterizationFLWebUnicity::sync');
            options.contentType = 'application/json';
            options.lang = widget.lang;

            options.headers = {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
                'Accept-Language' : widget.lang
            };
		//	method = 'create';
        //    options.data = JSON.stringify({});
            UWA.log(options);

            options = Object.assign({
                ajax: WAFData.authenticatedRequest
            }, options);
            this._parent.apply(this, [method, model, options]);
        },

        parse: function (data) {
            UWA.log("ParameterizationFLWebUnicity::parse");
            UWA.log(data);
            return data;
          //  return this.parseMappingData(data);

        },

        create: function(attributes, options) {
            options.proxy = 'passport';
            this._parent.apply(this, [attributes, options]);
        },



        parseMappingData: function (data) {
			var parsedData = {};

			var paramData = data.ParameterExpressionList;
			var attributes = data.Attribues;
			//var  i = 1;
        	if(paramData){
				parsedData.ExpressionList = paramData;
	    		parsedData.ExpressionList.sort(function(a, b){
	    			if(a.Order && b.Order){
	    				return a.Order - b.Order;
	    			}
	    		});
				parsedData.ExpressionList.forEach(function(entry){
					//entry.Name = 'Name'+i;
					entry.Deployed = 'True';
					entry.Label = entry.Name;
					//i++;
				});
        	}
			if(attributes) {
				parsedData.PhysicalProductAttributes = attributes;
			}
			parsedData.UnicityCheck = data.UnicityCheck;
			return parsedData;
            //return data;
        },

		/**
         * Function will retrieve the security context
         * @returns {function} calls back the promise resolve method with the security context fetched from service
         */
   //     retrieveSecurityContext: function(){
   //         var that = this;
   //         return new Promise(function (resolve, reject) {
   //             WAFData.authenticatedRequest(URLHandler.getURL() + '/resources/pno/person/getsecuritycontext', {
   //                 method: 'GET',
   //                 type: 'json',
   //                 headers : {
   //                     Accept: 'application/json',
   //                     'Content-Type': 'application/json'
   //                 },
   //                 onComplete:function(resp){
   //					_securityContext = resp.SecurityContext;
   //                     //that._securityContext = resp.SecurityContext;
   //                     resolve('Done');
   //                 },
   //                 onFailure : reject,
   //                 onTimeout: reject
   //             });
   //         });
   //     }

    });
});

/**
 * @author AMN14
 */
define('DS/ParameterizationSkeleton/Collection/ParameterizationSAX/ParamSAXCollection', [
    'UWA/Core',
    'UWA/Class/Model',
    'UWA/Class/Collection',
    'DS/ParameterizationSkeleton/Utils/ParameterizationDataUtils',
    'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler',
    'DS/ParameterizationSkeleton/Model/ParameterizationSAX/ParamSAXModel',
    'i18n!DS/ParameterizationSkeleton/assets/nls/FLWebNLS',
    'DS/WAFData/WAFData',
    'WebappsUtils/WebappsUtils'
], function ( UWA,
              Model,
              Collection,
              ParamDataUtils,
              URLHandler,
              ParamSAXModel,
               FLWebNLS,
              WAFData,
              WebappsUtils
            ) {
              'use strict';


              var collabManagementCollection = Collection.extend({

                  model : ParamSAXModel,

                  setup : function (models, options) {
                      UWA.log('SAXCollection::setup');
                      UWA.log(options);
                      this.childCollection = null;
                      var _modelKey = options._modelKey,
                          domainID = _modelKey._attributes.domainid,
                          familyID = _modelKey._attributes.familyid;
                      this.url = WebappsUtils.getWebappsAssetUrl('ParameterizationSkeleton', 'ParamSAX_Entries.json');
                  },


                  sync : function(method, model, options) {
                      UWA.log("SAXCollection::sync");

                      options.headers = {
                          Accept: 'application/json',
                          'Accept-Language' : widget.lang
                      };

                      options = Object.assign({
                          ajax: WAFData.authenticatedRequest
                      }, options);

                      this._parent.apply(this, [method, model, options]);
                  },


                  parse: function (data) {
                      UWA.log("SAXCollection::parse");
                      UWA.log(data);

                      var SAX_Entries = [];

                      if(Array.isArray(data)) {

                        data.forEach(function(SAX_Entry) {
                          var title = FLWebNLS[SAX_Entry.familyid + "Text"];
                          var tooltip = FLWebNLS[SAX_Entry.familyid + "Tooltip"];

                          SAX_Entries.push({
                            title              : title,
                            subtitle           : tooltip,
                            image              : URLHandler.getURL() + "/webapps/ParameterizationSkeleton/assets/img/" + SAX_Entry.image,
                            id                 : SAX_Entry.domainid + SAX_Entry.familyid,
                            familyid           : SAX_Entry.familyid,
                            domainid           : SAX_Entry.domainid
                          });
                        });
                      }

                      return SAX_Entries;
                  },

                  create : function(attributes, options) {
                      options.proxy = 'passport';
                      this._parent.apply(this, [attributes, options]);
                  }

              }
            );

            return collabManagementCollection;
          }
);

define('DS/ParameterizationSkeleton/Collection/ParameterizationDOCMCollection', [
    'UWA/Core',
    'UWA/Class/Model',
    'UWA/Class/Collection',
 //   'DS/ParameterizationSkeleton/Utils/ParameterizationDataUtils',
    'DS/WAFData/WAFData',
    'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler'
], function (UWA, Model, Collection, WAFData, URLHandler) {
    'use strict';
    
    var handledDomain = null;

    return Collection.extend({
        model : function (modelid) {
             return Model.extend();
        },

        setup: function (models, options) {
        	UWA.log('ParameterizationDOCMCollection::setup');

        	UWA.log(models);
        	UWA.log(options);

        	console.log("ParameterizationDOCMCollection::setup, Successful");
        	var iObjID,
        	_modelKey = options._modelKey,
        	domainID = _modelKey._attributes.domainid;

        	if (UWA.is(this.model, "function")) {
        		this.model = this.model(domainID);
        		handledDomain = domainID;
        	}

        	iObjID = _modelKey._attributes.id;
        	this.url = URLHandler.getURL() +                    
        	"/resources/v1/docmParameterization/DOCMDownloadRule?tenant=" + URLHandler.getTenant();
        },

        sync : function(method, model, options) {
            UWA.log('ParameterizationDOCMCollection::sync');
            options.contentType = 'application/json';
            options.lang = widget.lang;

            options.headers = {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
                'Accept-Language' : widget.lang
            };

            UWA.log(options);

            options = Object.assign({
                ajax: WAFData.authenticatedRequest
            }, options);  
            this._parent.apply(this, [method, model, options]);
        },

        parse: function (data) {
            UWA.log("ParameterizationDOCMCollection::parse");
            UWA.log(data);

            return this.parseMappingData(data);           
        },

        create: function(attributes, options) {
            options.proxy = 'passport';
            this._parent.apply(this, [attributes, options]);
        },   

        parseMappingData: function (data) {        	
            return data;
        }

    });
});

/*@fullReview  SSV1 19/06/13  FUN090928 : SSV1 Engineering Definition configuration UI*/
/*global define, widget, document, setTimeout, console*/
/*jslint nomen: true */
define('DS/ParameterizationSkeleton/Collection/ParameterizationXEngineeringCollection', [
    // UWA
    'UWA/Core',
    'UWA/Class/Model',
    'UWA/Class/Collection',
    'DS/ParameterizationSkeleton/Utils/ParameterizationDataUtils',
    'DS/WAFData/WAFData',
    'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler'
], function (UWA, Model, Collection, ParameterizationDataUtils, WAFData, URLHandler) {
    'use strict';
    //

    var handledDomain = null;

    return Collection.extend({
        model : function (modelid) {
             return Model.extend();
        },

        setup: function (models, options) {
            UWA.log('ParameterizationXEngineering::setup');

            UWA.log(models);
            UWA.log(options);

            console.log("ParameterizationXEngineering::setup, Sucessful");
            var iURL, iObjID,
                _modelKey = options._modelKey,
                domainID = _modelKey._attributes.domainid,
                familyID = _modelKey._attributes.familyid;

            if (UWA.is(this.model, "function")) {
                this.model = this.model(domainID);
                handledDomain = domainID;
            }

                iObjID = _modelKey._attributes.id;
                this.url = URLHandler.getURL() +
                    "/resources/v1/xENGParameterization/getAdminPartNumberProperties?tenant=" + URLHandler.getTenant();
        },

        sync : function(method, model, options) {
            UWA.log('ParameterizationXEngineering::sync');
            options.contentType = 'application/json';
            options.lang = widget.lang;

            options.headers = {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
                'Accept-Language' : widget.lang
            };

            UWA.log(options);

            options = Object.assign({
                ajax: WAFData.authenticatedRequest
            }, options);  
            this._parent.apply(this, [method, model, options]);
        },

        parse: function (data) {
            UWA.log("ParameterizationXEngineering::parse");
            UWA.log(data);

            return this.parseMappingData(data);
           
        },

        create: function(attributes, options) {
            options.proxy = 'passport';
            this._parent.apply(this, [attributes, options]);
        },

    

        parseMappingData: function (data) {
        	if(data.ExpressionList){
	    		data.ExpressionList.sort(function(a, b){
	    			if(a.Order && b.Order){
	    				return a.Order - b.Order;
	    			}
	    		});
        	}
        	
            return data;
        }

    });
});

/*@fullReview  ZUR 15/11/23 2017x Param Widgetization NG*/
/*global define, widget, document, setTimeout, console*/
/*jslint nomen: true */
define('DS/ParameterizationSkeleton/Collection/ParameterizationDomainCollection', [
    // UWA
    'UWA/Core',
    'UWA/Class/Model',
    'UWA/Class/Collection',
    'DS/ParameterizationSkeleton/Model/ParameterizationDomainModel',
    'DS/ParameterizationSkeleton/Utils/ParameterizationDataUtils',
    'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler',
    'DS/WAFData/WAFData',
    'WebappsUtils/WebappsUtils'
], function (UWA, Model, Collection, ParameterizationDomainModel, ParamDataUtils, URLHandler, WAFData, WebappsUtils) {
    'use strict';
    //
    return Collection.extend({
        model : ParameterizationDomainModel,
        setup: function (models, options) {
            console.log("ParameterizationDomainModel::setup::");
            var iURL,
                _modelKey = options._modelKey,
                domainID = _modelKey._attributes.domainid,
                familyID = _modelKey._attributes.familyid;

            iURL = URLHandler.getURL() + "/resources/ParamWS/access/DomainElements?tenant=" + URLHandler.getTenant() + "&domainid=" + domainID;

            if ((familyID !== null) && (familyID !== "")) {
                iURL = iURL + "&familyid=" + familyID;
            }
            UWA.log(iURL);
            this.url = iURL;
            /*if (domainID === "Deployment")
                this.url= "_Blank";//a tester si besoin
            */
        },

        /*sync : function(method, model, options) {
            UWA.log("ParameterizationDomainModel::sync");
            options.contentType = 'application/json';//application/ds-json
            options.proxy = 'passport';
            options.lang = widget.lang;
            options.type = 'json';

            options.headers = {
                 Accept: 'application/json',
                 'Content-Type': 'application/json'
            };          
            UWA.log(options);
            this._parent.apply(this, [method, model, options]);
        },*/

        sync : function(method, model, options) {
            UWA.log("ParameterizationDomainCollection::sync");
           // options.contentType = 'application/json';
            //options.proxy = 'passport';
            options.lang = widget.lang;
            options.type = 'json';

            options.headers = {
                 Accept: 'application/json',
                // 'Content-Type': 'application/json'
            };       

            options = Object.assign({
                ajax: WAFData.authenticatedRequest
            }, options);   

            this._parent.apply(this, [method, model, options]);
        },


          //options.Accept = 'application/json';
            //Content-Type:application/json

        parse: function (data) {
            UWA.log("ParameterizationDomainModel::parse");
            UWA.log(data);
            var familyModel = ParamDataUtils.paramStructBuilder("id,family"),
                oData = new familyModel("", ""),
                Families = [];

            if (Array.isArray(data.family)) {
                data.family.forEach(function (rElement) {
                    Families.push(rElement);
                });
            }

            //oData.id = "TESTID";
            oData.id = data.id;
            oData.family = Families;

            return oData;

            /*id: "EngineeringCentral"
                    nlsKey: "Engineering"
                    packaging: null
                    regSuite: null
                    solution: ""
                    tooltipNlsKey: "Engineering"*/
        },

        create: function(attributes, options) {
            options.proxy = 'passport';
            this._parent.apply(this, [attributes, options]);
        }

    });
});

/*! Copyright 2017, Dassault Systemes. All rights reserved. */
/*@fullReview  NZV 17/05/09 remove getDimensions function*/
/*@fullReview  NZV 17/04/28 Add function getDimensions*/
/*@fullReview  ZUR 15/07/24 2016xFD01*/
/*@quickReview ZUR 15/11/23 2017x Param Skeleton*/
/*global define*/
define(
    'DS/ParameterizationSkeleton/Utils/ParameterizationWebServices',
    [
        'UWA/Core',
        'UWA/Promise',
        'DS/WAFData/WAFData',
        'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler'
    ],
    function(UWA, Promise, WAFData, URLHandler) {

        'use strict';

        var wsUtils = {

            postParamsArrOnServer : function (connectProps, jsonArr, theImageCell, onFailurefct, onSuccessfct) {

                var url = URLHandler.getURL() + "/resources/ParamWS/access/postparams?tenant=" + URLHandler.getTenant(),
                    datatoSend = {
                        domain    : connectProps.domainName,
                        parameter : jsonArr
                    };
                    //onFailurefct = onFailurefct.bind(this);
                    //onSuccessfct = onSuccessfct.bind(this);
                    //WAFData.authenticatedRequest
                    //UWA.Data.request

                WAFData.authenticatedRequest(url, {
                    timeout: 100000,
                    method: 'POST',
                    data: JSON.stringify(datatoSend),
                    type: 'json',
                    //proxy: 'passport',

                    headers: {
                        'Content-Type' : 'application/json',
                        'Accept' : 'application/json'
                    },

                    onFailure : function (json) {
                        onFailurefct(json, theImageCell); //this.onApplyFailure(json, this, theImageCell);
                    },

                    onComplete: function(json) {
                        onSuccessfct(json, theImageCell);
                    }
                });
            },//postParamsArrOnServer
            //FUN095483
            genPostParamsArrOnServer : function (connectProps, webserviceName, jsonArr, theImageCell, onFailurefct, onSuccessfct) {

                var url = URLHandler.getURL() + "/resources/ParamWS/access/"+webserviceName+"?tenant=" + URLHandler.getTenant(),
                    datatoSend = {
                        domain    : connectProps.domainName,
                        parameter : jsonArr
                    };
                    //onFailurefct = onFailurefct.bind(this);
                    //onSuccessfct = onSuccessfct.bind(this);
                    //WAFData.authenticatedRequest
                    //UWA.Data.request

                WAFData.authenticatedRequest(url, {
                    timeout: 100000,
                    method: 'POST',
                    data: JSON.stringify(datatoSend),
                    type: 'json',
                    //proxy: 'passport',

                    headers: {
                        'Content-Type' : 'application/json',
                        'Accept' : 'application/json'
                    },

                    onFailure : function (json) {
                        onFailurefct(json, theImageCell); //this.onApplyFailure(json, this, theImageCell);
                    },

                    onComplete: function(json) {
                        onSuccessfct(json, theImageCell);
                    }
                });
            },//postParamsArrOnServer
            ImportParamToServer : function (iStream, iAction, importFailurefct, importSucessfct) {
                var url = URLHandler.getURL() + "/resources/ParamWS/access/importparams?tenant=" + URLHandler.getTenant();
                url = url + "&importAction=" + iAction;

                WAFData.authenticatedRequest(url, {
                    timeout: 600000,//R-929388-3DEXPERIENCER2022x/23x
                    method: 'POST',
                    data: iStream, //JSON.stringify(datatoSend),
                    type: 'text',
                    //proxy: 'passport',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    onFailure : function (json) {
                        importFailurefct(json);
                    },
                    onComplete: function(json) {
                        importSucessfct(json, iAction);
                    }
                });
            },

            deployParamsOnServer : function (onDeployFailure, onDeploySuccess) {
                var url = URLHandler.getURL() + "/resources/ParamWS/access/deployallparams?tenant=" + URLHandler.getTenant();

                WAFData.authenticatedRequest(url, {
                    timeout: 600000,//R-929388-3DEXPERIENCER2022x/23x
                    method: 'POST',
                    type: 'json',
                    //proxy: 'passport',

                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },

                    onFailure : function (json) {
                        onDeployFailure(json);
                    },

                    onComplete: function(json) {
                        onDeploySuccess(json);
                    }
                });
            },

            postLifecycleParams : function (datatoSend, onDeployFailurefct, onDeploySuccessfct) {
                var url = URLHandler.getURL() + "/resources/ParamWS/lifecycle/postlcparams?tenant=" + URLHandler.getTenant();
                WAFData.authenticatedRequest(url, {
                    timeout: 100000,
                    method: 'POST',
                    data: JSON.stringify(datatoSend),
                    type: 'json',

                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },

                    onFailure : function (json) {
                        onDeployFailurefct(json);
                    },

                    onComplete: function(json) {
                        onDeploySuccessfct(json);
                    }
                });
            },

            GetTicketForDownload: function(iFileID, onSuccessfct, onFailurefct) {
                var url = URLHandler.getURL() + "/resources/ParamWS/access/getCheckoutParamGenericFileTicket";//getCheckoutParamFileTicket

                WAFData.authenticatedRequest(url, {
                    data: {
                        fileID : iFileID,
                        tenant : URLHandler.getTenant()
                    },
                    headers: {
                        'Accept': 'application/json'//,
                       // 'Content-Type': 'application/json'
                    },
                    method: 'get',
                    type: 'json',
                    //proxy: 'passport',
                    onComplete: function(json) {
                        onSuccessfct(json, iFileID); //IR-684310-3DEXPERIENCER2019x
                    },
                    onFailure: function(json) {
                        onFailurefct(json, iFileID);
                    }
                });
            },
            //FUN102019 21x FD03
            getRquestOnParamService: function(requestStr, dataInfo, onSuccessfct, onFailurefct) {
                var url = URLHandler.getURL() + "/resources/ParamWS/"+requestStr;//getCheckoutParamFileTicket
                dataInfo.tenant = URLHandler.getTenant();
                WAFData.authenticatedRequest(url, {
                    data: dataInfo,
                    headers: {
                        'Accept': 'application/json'//,
                       // 'Content-Type': 'application/json'
                    },
                    method: 'get',
                    type: 'json',
                    //proxy: 'passport',
                    onComplete: function(json) {
                        onSuccessfct(json, dataInfo); //IR-684310-3DEXPERIENCER2019x
                    },
                    onFailure: function(json) {
                        onFailurefct(json, dataInfo);
                    }
                });
            },
            postAttributesOnServer : function (jsonArr, servicePath, onFailurefct, onSuccessfct) {

                var url = URLHandler.getURL() + "/resources/ParamWS/datamodel/" + servicePath + "?tenant=" + URLHandler.getTenant();
                //postattrparams

                WAFData.authenticatedRequest(url, {
                    timeout: 250000,
                    method: 'POST',
                    data: JSON.stringify(jsonArr),
                    type: 'json',
                    //proxy: 'passport',
                    headers: {
                        'Content-Type' : 'application/ds-json',
                        'Accept' : 'application/ds-json'
                    },
                    onFailure : function (json) {
                        onFailurefct(json);
                    },
                    onComplete: function(json) {
                        onSuccessfct(json);
                    }
                });
            },//postParamsArrOnServer

            launchServiceOnServer : function (wsPath, onSuccessfct, onFailurefct) {
                var url = URLHandler.getURL() + "/resources/ParamWS/" + wsPath;

                WAFData.authenticatedRequest(url, {
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    },
                    method: 'POST',
                    type: 'json',
                    //proxy: 'passport',
                    onComplete: function(json) {
                        onSuccessfct(json);
                    },
                    onFailure: function(json) {
                        onFailurefct(json);
                    }
                });
            },
            ////R-964136-3DEXPERIENCER2022x\23:get latest info that attribute referenced on other app's parameter
            getAttributeUsedInOther : function (collectID, attrName, userName) {
              var obj = new Promise(function (resolve, reject) {
                  var url =  URLHandler.getURL() + "/resources/ParamWS/datamodel/isattributereferencedinother?tenant=" + URLHandler.getTenant()
                  +"&type="+collectID+"&attributeName="+attrName + "&attributeUserName="+userName;
                  WAFData.authenticatedRequest(url, {
                    headers: {
                        'Accept' : 'application/json',
                        //'Content-Type' : 'application/json',
                        'Accept-Language' : widget.lang
                    },
                    proxy :'passport',
                    method: 'get',
                    type: 'json',
                    timeout:0,
                      onTimeout : function (networkError, error) {
                        error = error || networkError;
                        console.log("onTimeout");
                        console.log(error);
                      },

                      onComplete: function (json) {
                          if (json !== 'undefined') {
                              resolve(json);
                          }
                      },
                      onFailure: function(json) {
                          UWA.log("Paramaterization::Services falied! :" + url);
                          UWA.log(json);
                          reject(json);

                      }
                  });
              });
              return obj;
            }
        };

        return wsUtils;

    }
);



define(
  'DS/ParameterizationSkeleton/Utils/DELConfigurationParameterization/DELConfigurationParameterizationWebServices',
  [
    'UWA/Core',
    'UWA/Class',
    'DS/WAFData/WAFData',
    'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler'
  ],
  function(
    UWA,
    Class,
    WAFData,
    URLHandler
  ) {

    'use strict';

      var DELConfigurationParameterizationWebServices = Class.singleton({

        getEnvVar : function (callback) {
            var url = URLHandler.getURL() + "/resources/delmia/param/application/getEnvVar";

            WAFData.authenticatedRequest(url, {
                timeout: 100000,
                method: 'GET',
                type: 'json',
                headers: {
                    'Content-Type' : 'application/json',
                    'Accept' : 'application/json'
                },

                onFailure : function (json) {
                    callback.onFailure(json);
                },

                onComplete: function(json) {
                  callback.onSuccess(json);
                }
            });
        },

        getAllParameters : function (domainid, callback) {

            //var url = URLHandler.getURL() + "/resources/exchange/param/apriso/configuration/getParameters?familyID=";
            var url = URLHandler.getURL() + "/resources/delmia/param/configuration/getAllParameters";
            if ((domainid != null || domainid != undefined))
              url += "?domainID=" + domainid;

            WAFData.authenticatedRequest(url, {
                timeout: 100000,
                method: 'GET',
                type: 'json',
                headers: {
                    'Content-Type' : 'application/json',
                    'Accept' : 'application/json'
                },

                onFailure : function (json) {
                    callback.onFailure(json);
                },

                onComplete: function(json) {
                  callback.onSuccess(json);
                }
            });
        },

          getParameters : function (domainid, familyid, paramid, argid, callback) {

              //var url = URLHandler.getURL() + "/resources/exchange/param/apriso/configuration/getParameters?familyID=";
              var url = URLHandler.getURL() + "/resources/delmia/param/configuration/getParameters";
              if ((argid != null || argid != undefined) &&
                  (paramid != null || paramid != undefined) &&
                  (familyid != null || familyid != undefined) &&
                  (domainid != null || domainid != undefined))
                url += "?argID=" + argid + "&paramID=" + paramid + "&familyID=" + familyid + "&domainID=" + domainid;

              WAFData.authenticatedRequest(url, {
                  timeout: 100000,
                  method: 'GET',
                  type: 'json',
                  headers: {
                      'Content-Type' : 'application/json',
                      'Accept' : 'application/json'
                  },

                  onFailure : function (json) {
                      callback.onFailure(json);
                  },

                  onComplete: function(json) {
                    callback.onSuccess(json);
                  }
              });
          },

          setParameters : function (domainid, familyid, paramid, argid, params, callback) {

              //var url = URLHandler.getURL() + "/resources/exchange/param/apriso/configuration/setParameter";
              var url = URLHandler.getURL() + "/resources/delmia/param/configuration/setParameter";
              /*var datatoSend = {
                  params : params
              };*/

              var datatoSend = {
                domain : domainid,
                family : familyid,
                parameter : paramid,
                argument : argid,
                params : params
              }

              WAFData.authenticatedRequest(url, {
                  timeout: 100000,
                  method: 'POST',
                  data: JSON.stringify(datatoSend),
                  type: 'json',
                  headers: {
                      'Content-Type' : 'application/json',
                      'Accept' : 'application/json'
                  },

                  onFailure : function (json) {
                      callback.onFailure(json);
                  },

                  onComplete: function(json) {
                    callback.onSuccess(json);
                  }
              });
          },

          isDeployed : function (domainid, familyid, paramid, argid, params, callback) {

              //var url = URLHandler.getURL() + "/resources/exchange/param/apriso/configuration/isDeployed";
              var url = URLHandler.getURL() + "/resources/delmia/param/configuration/isDeployed";
              /*var datatoSend = {
                  params : params
              };*/

              var datatoSend = {
                domain : domainid,
                family : familyid,
                parameter : paramid,
                argument : argid,
                params : params
              }

              WAFData.authenticatedRequest(url, {
                  timeout: 100000,
                  method: 'POST',
                  data: JSON.stringify(datatoSend),
                  type: 'json',
                  headers: {
                      'Content-Type' : 'application/json',
                      'Accept' : 'application/json'
                  },

                  onFailure : function (json) {
                      callback.onFailure(json);
                  },

                  onComplete: function(json) {
                    callback.onSuccess(json);
                  }
              });
          },

          deleteParameter : function (domainid, familyid, paramid, argid, params, callback) {

              //var url = URLHandler.getURL() + "/resources/exchange/param/apriso/configuration/deleteParameter";
              var url = URLHandler.getURL() + "/resources/delmia/param/configuration/deleteParameter";
              /*var datatoSend = {
                  params : params
              };*/

              var datatoSend = {
                domain : domainid,
                family : familyid,
                parameter : paramid,
                argument : argid,
                params : params
              }

              WAFData.authenticatedRequest(url, {
                  timeout: 100000,
                  method: 'POST',
                  data: JSON.stringify(datatoSend),
                  type: 'json',
                  headers: {
                      'Content-Type' : 'application/json',
                      'Accept' : 'application/json'
                  },

                  onFailure : function (json) {
                      callback.onFailure(json);
                  },

                  onComplete: function(json) {
                    callback.onSuccess(json);
                  }
              });
          },


          deleteAllParameters : function (callback) {

              var url = URLHandler.getURL() + "/resources/exchange/param/apriso/configuration/deleteAllParameters";

              WAFData.authenticatedRequest(url, {
                  timeout: 100000,
                  method: 'DELETE',
                  type: 'json',
                  headers: {
                      'Content-Type' : 'application/json',
                      'Accept' : 'application/json'
                  },

                  onFailure : function (json) {
                      callback.onFailure(json);
                  },

                  onComplete: function(json) {
                    callback.onSuccess(json);
                  }
              });
          }

      });

      return DELConfigurationParameterizationWebServices;
    }
);

/**
* @quickreview  KB9 21:10:25 creation
* @quickreview  ROW 22:10:13 FUN129061 - removed OnPremise specific checks
*/


define('DS/ParameterizationSkeleton/Collection/ParameterizationDELCollection', [
    // UWA
    'UWA/Core',
    'UWA/Class/Model',
    'UWA/Class/Collection',
    'DS/ParameterizationSkeleton/Model/ParameterizationDomainModel',
    'DS/ParameterizationSkeleton/Utils/ParameterizationDataUtils',
    'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler',
    'DS/WAFData/WAFData',
    'WebappsUtils/WebappsUtils',
    'DS/ParameterizationSkeleton/Utils/DELConfigurationParameterization/DELConfigurationParameterizationWebServices'
], function (
  UWA,
  Model,
  Collection,
  ParameterizationDomainModel,
  ParamDataUtils,
  URLHandler,
  WAFData,
  WebappsUtils,
  DELConfigurationParameterizationWebServices
)
{
    'use strict';
    //
    return Collection.extend({
        model : ParameterizationDomainModel,
        setup: function (models, options) {
            console.log("ParameterizationDELCollection::setup::");

            var that = this;
            var _modelKey = options._modelKey;
            var domainID = _modelKey._attributes.domainid;
            that._domainID = domainID;

            var iURL = URLHandler.getURL() + "/resources/ParamWS/access/DomainElements?tenant=" + URLHandler.getTenant() + "&domainid=" + domainID;
            UWA.log(iURL);
            this.url = iURL
        },

        fetch : function (options) {
          UWA.log("ParameterizationDELCollectionList::setup");
          var that = this;

          // if (widget.getValue('x3dPlatformId') === 'OnPremise')
          // {
          var promiseTab = [];
          var promiseGetParam = new Promise(function (resolve, reject){
            DELConfigurationParameterizationWebServices.getAllParameters(that._domainID, {
              onSuccess : function(data)
              {
                that._paramdata = data;
                resolve();
              },
              onFailure : function(error)
              {
                that._paramdata = [];
                resolve();
                //reject("DELConfigurationParameterizationWebServices.getParameters");
                console.error("DELConfigurationParameterizationWebServices.getParameters");
              }
            });
          });

          promiseTab.push(promiseGetParam);

          /*var promiseConfiguration = new Promise(function (resolve, reject){
            DELConfigurationParameterizationResourceServices.initDELConfigurationProperties({
              onSuccess : function(configData)
              {
                resolve(configData);
              },
              onFailure : function(error)
              {
                reject("DELConfigurationParameterizationResourceServices.initDELConfigurationProperties");
                console.error("DELConfigurationParameterizationResourceServices.initDELConfigurationProperties");
              }
            });
          });

          promiseTab.push(promiseConfiguration);*/

          UWA.Promise.all(promiseTab).then(function(data) {
            Collection.prototype.fetch.call(that);
          });
          // }
          // else {
          //   Collection.prototype.fetch.call(that);
          // }
        },

        sync : function(method, model, options) {
            UWA.log("ParameterizationDELCollection::sync");
           // options.contentType = 'application/json';
            //options.proxy = 'passport';
            options.lang = widget.lang;
            options.type = 'json';

            options.headers = {
                 Accept: 'application/json',
                 'Accept-Language' : widget.lang
                // 'Content-Type': 'application/json'
            };

            options = Object.assign({
                ajax: WAFData.authenticatedRequest
            }, options);

            this._parent.apply(this, [method, model, options]);
        },


          //options.Accept = 'application/json';
            //Content-Type:application/json

        parse: function (data) {
            UWA.log("ParameterizationDELCollection::parse");
            UWA.log(data);

            var that = this;

            var familyModel = ParamDataUtils.paramStructBuilder("id,family"),
                oData = new familyModel("", ""),
                Families = [];

          // if (widget.getValue('x3dPlatformId') === 'OnPremise')
          // {
            if (Array.isArray(data.family)) {
                data.family.forEach(function (rElement) {
                    var listOfParams = that._paramdata;
                    var listOfParamsLength = listOfParams.length;
                    for (var i=0;i<listOfParamsLength;i++)
                    {
                      if (rElement.id === listOfParams[i].familyid)
                      {
                        var listOfAttr = rElement.parameter;
                        var listOfAttrLength = listOfAttr.length;
                        for (var j=0;j<listOfAttrLength;j++)
                        {
                          if (listOfAttr[j].id === listOfParams[i].paramid)
                          {
                            var listOfArg = listOfAttr[j].argument;
                            var listOfArgLength = listOfArg.length;
                            for (var k=0;k<listOfArgLength;k++)
                            {
                              if (listOfArg[k].id === listOfParams[i].argid && listOfParams[i].params.value !== undefined)
                                listOfArg[k].argValue = listOfParams[i].params.value;
                            }
                          }
                        }
                      }
                    }
                    Families.push(rElement);
                });
            }
          // }
          // else {
          //   if (Array.isArray(data.family)) {
          //        data.family.forEach(function (rElement) {
          //            Families.push(rElement);
          //        });
          //    }
          // }

            oData.id = data.id;
            oData.family = Families;

            return oData;
        },

        create: function(attributes, options) {
            options.proxy = 'passport';
            this._parent.apply(this, [attributes, options]);
        }

    });
});

define('DS/ParameterizationSkeleton/Views/ParameterizationFLWeb/FLWebModal',
		[
			'DS/UIKIT/Modal',
			'UWA/Core',
			'DS/UIKIT/Input/Select',
			'DS/UIKIT/Input/Text',
			'DS/UIKIT/Input/Number',
			'DS/UIKIT/Alert',
			'DS/UIKIT/Tooltip',
			'DS/WAFData/WAFData',
			'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler',
			'DS/ParameterizationSkeleton/Views/ParameterizationFLWeb/ParameterizationFLWebConstants',
			'i18n!DS/ParameterizationSkeleton/assets/nls/FLWebNLS'
			],
			function (Modal,
					UWACore,
					Select,
					Text,
					Number,
					Alert,
					Tooltip,
					WAFData,
					URLHandler,
					ParameterizationFLWebConstants,
					FLWebNLS) {

	'use strict';

	function _createModal(options) {
		var modal = new Modal({
			className: options.className || '',
			closable: true,
			header: '<h4>' + options.title + '</h4>',
			body: '',
			footer: ''
		});
		return modal;
	}

	function FLWebModal(options) {
		this.options = {
				title: 'Dialog',
				className: '',
				withFooter: true
		};
		this.options = UWACore.extend(this.options, options);

		this.modal = _createModal(this.options);
		this.modal.inject(document.querySelector('#typeMainDiv'));
		if (this.options.withFooter) {
			this._bindFooterEvent();
		}

	}

	FLWebModal.prototype.getPartNumberFormat = function () {

		var _formatContent = this.modal.getContent().getElement('.enox-arch-number-content');
		var that = this;

		if (this.partNumberTypeCombobox.getValue()[0] == ParameterizationFLWebConstants.FORMAT_FREE) {
			var _dynamicFormatContent = this.modal.getContent().getElement('.enox-arch-number-dynamic-content');
			_dynamicFormatContent.empty();
			that.destroyValueFieldComponents();
		} else if (this.partNumberTypeCombobox.getValue()[0] == ParameterizationFLWebConstants.FORMAT_STRING) {
			that.destroyValueFieldComponents();
			that.getValueField(_formatContent);
		} else if (this.partNumberTypeCombobox.getValue()[0] == ParameterizationFLWebConstants.FORMAT_ATTRIBUTE) {
			that.destroyValueFieldComponents();
			that.getDynamicFields(_formatContent, this.partNumberTypeCombobox.getValue()[0]);
		} else if (this.partNumberTypeCombobox.getValue()[0] == ParameterizationFLWebConstants.FORMAT_COUNTER) {
			that.destroyValueFieldComponents();
			that.getDynamicFields(_formatContent, this.partNumberTypeCombobox.getValue()[0]);
		}
	};

	FLWebModal.prototype.getDefaultFields = function (_formatContent) {

		var that = this;

		var divTag = document.createElement('div');
		divTag.className = "formats-arch";

		var labelDiv = document.createElement('div');
		labelDiv.className = "formats-arch-label";
		labelDiv.innerText = FLWebNLS.name; //formats-arch[i];

		var textBoxDiv = document.createElement('div');
		textBoxDiv.className = "formats-arch-tbox";
		var textOptions = {
				events: {
					//  onChange: that.validateEnteredNameValue.bind(that)
				}
		};

		this.nameTextBox = this.getTextBox(textOptions);
		this.nameTextBox.domId = FLWebNLS.name + "_textBox";
		this.nameTextBox.inject(textBoxDiv);

		divTag.appendChild(labelDiv);
		divTag.appendChild(textBoxDiv);

		_formatContent.appendChild(divTag);

		var divTagForNbrBox = document.createElement('div');
		divTagForNbrBox.className = "formats-arch";

		var labelDivForNbrBox = document.createElement('div');
		labelDivForNbrBox.className = "formats-arch-label";
		labelDivForNbrBox.innerText = FLWebNLS.order; //formats-arch[i];

		var textBoxDivForNbrBox = document.createElement('div');
		textBoxDivForNbrBox.className = "formats-arch-tbox";

		var numberOptions = {
				min: 1,
				max: ParameterizationFLWebConstants.MAX_ROWS,

				value: this.getHighestOrder() + 1,
				events: {}
		};

		this.numberOrderBox = this.getNumberBox(numberOptions);
		this.numberOrderBox.domId = FLWebNLS.order + "_textBox";
		this.numberOrderBox.inject(textBoxDivForNbrBox);




		divTagForNbrBox.appendChild(labelDivForNbrBox);
		divTagForNbrBox.appendChild(textBoxDivForNbrBox);

		_formatContent.appendChild(divTagForNbrBox);

		var divTagForType = document.createElement('div');
		divTagForType.className = "formats-arch";

		var typelabelDiv = document.createElement('div');
		typelabelDiv.className = "formats-arch-label";
		typelabelDiv.innerText = FLWebNLS.type;

		var typeComboBoxDiv = document.createElement('div');
		typeComboBoxDiv.className = "formats-arch-tbox";

		var selectOptions = {
				custom: false,
				placeholder: FLWebNLS.selectType,
				options: [{
					label: FLWebNLS.String,
					value: ParameterizationFLWebConstants.FORMAT_STRING
				}, {
					label: FLWebNLS.Free,
					value: ParameterizationFLWebConstants.FORMAT_FREE
				}, {
					label: FLWebNLS.Attribute,
					value: ParameterizationFLWebConstants.FORMAT_ATTRIBUTE
				}, {
					label: FLWebNLS.counterLabel,
					value: ParameterizationFLWebConstants.FORMAT_COUNTER
				}

				],
				events: {
					onChange: that.getPartNumberFormat.bind(that)
				}
		};

		this.partNumberTypeCombobox = this.getSelectComponent(selectOptions);
		this.partNumberTypeCombobox.setId(FLWebNLS.type + "_comboBox");
		this.partNumberTypeCombobox.inject(typeComboBoxDiv);

		divTagForType.appendChild(typelabelDiv);
		divTagForType.appendChild(typeComboBoxDiv);
		_formatContent.appendChild(divTagForType);

	};

	FLWebModal.prototype.getDynamicFields = function (_formatContent, format) {
		var that = this;

		var _dynamicFormatContent = this.modal.getContent().getElement('.enox-arch-number-dynamic-content');
		_dynamicFormatContent.empty();

		if (format == ParameterizationFLWebConstants.FORMAT_ATTRIBUTE) {
			that.getAttributeFormat(_formatContent, _dynamicFormatContent);

		} else if (format == ParameterizationFLWebConstants.FORMAT_COUNTER) {
			this.getCounterFormat(_formatContent, _dynamicFormatContent);
		}

	};
	FLWebModal.prototype.getAttributeFormat = function (_formatContent, _dynamicFormatContent) {

		var formatField = FLWebNLS.attribute;

		var divTag = document.createElement('div');
		divTag.className = "formats-arch";

		var labelDiv = document.createElement('div');
		labelDiv.className = "formats-arch-label";
		labelDiv.innerText = formatField;

		var comboBoxDiv = document.createElement('div');
		comboBoxDiv.className = "formats-arch-tbox";
		var allAttributes = [];

		if (typeof this.attributes.message === "undefined") {
			for (var key in this.attributes) {
				var attributes1 = {};

				attributes1["label"] = this.attributes[key]
				attributes1["value"] = key

				allAttributes.push(attributes1);
			}
		}

		var selectOptions = {
				custom: false,
				placeholder: FLWebNLS.selectAttribute,
				options: allAttributes
		};

		this.partNumberAttributeCombobox = this.getSelectComponent(selectOptions);

		this.partNumberAttributeCombobox.setId(formatField + "_comboBox");
		this.partNumberAttributeCombobox.inject(comboBoxDiv);

		divTag.appendChild(labelDiv);
		divTag.appendChild(comboBoxDiv);

		var formatFieldValue = FLWebNLS.defaultValue;
		var divTagForValue = document.createElement('div');
		divTagForValue.className = "formats-arch";

		var labelDivForValue = document.createElement('div');
		labelDivForValue.className = "formats-arch-label";
		labelDivForValue.innerText = formatFieldValue;

		var textBoxDivForValue = document.createElement('div');
		textBoxDivForValue.className = "formats-arch-tbox";
		this.valueDynTextBox = this.getTextBox();
		this.valueDynTextBox.domId = formatFieldValue + "_textBox";
		this.valueDynTextBox.inject(textBoxDivForValue);

		divTagForValue.appendChild(labelDivForValue);
		divTagForValue.appendChild(textBoxDivForValue);

		_dynamicFormatContent.appendChild(divTag);
		_dynamicFormatContent.appendChild(divTagForValue);
		_formatContent.appendChild(_dynamicFormatContent);

	};

	FLWebModal.prototype.getCounterFormat = function (_formatContent, _dynamicFormatContent) {
		var that = this;
		var divTagForNbrBox = document.createElement('div');
		divTagForNbrBox.className = "formats-arch";

		var labelDivForNbrBox = document.createElement('div');
		labelDivForNbrBox.className = "formats-arch-label";

		var divForLabel = document.createElement('div');
		divForLabel.className = 'label-counter-arch';

		var labelText = document.createElement('div');
		labelText.className = 'label-text-arch';
		labelText.innerText = FLWebNLS.digits;

		var informationDiv = document.createElement('div');
		informationDiv.className = "fonticon fonticon-attention";
		informationDiv.id = "information";
		informationDiv.style.color = "black";

		divForLabel.appendChild(labelText);
		divForLabel.appendChild(informationDiv);

		labelDivForNbrBox.appendChild(divForLabel);

		var textBoxDivForNbrBox = document.createElement('div');
		textBoxDivForNbrBox.className = "formats-arch-tbox";

		var numberOptions = {
				min: 1,
				max: ParameterizationFLWebConstants.MAX_ROWS /*Number.MAX_SAFE_INTEGER*/,
				step: 1,
				value: 6,
				events: {
					onChange: that.updateSampleText.bind(that)
				}
		};

		this.counterNumberBox = this.getNumberBox(numberOptions);
		this.counterNumberBox.domId = FLWebNLS.digits + "_textBox";
		this.counterNumberBox.inject(textBoxDivForNbrBox);

		divTagForNbrBox.appendChild(labelDivForNbrBox);
		divTagForNbrBox.appendChild(textBoxDivForNbrBox);

		_dynamicFormatContent.appendChild(divTagForNbrBox);

		var formatField = FLWebNLS.sample;

		var divTag = document.createElement('div');
		divTag.className = "formats-arch-sample";

		var labelDiv = document.createElement('div');
		labelDiv.className = "formats-arch-sample-label";
		//labelDiv.innerText = formatField;


		var sampleTextLabelSpan = document.createElement('span');
		sampleTextLabelSpan.id = "sampleTextLabel";
		sampleTextLabelSpan.innerText = formatField  +" : "  ;

		var sampleTextValueSpan = document.createElement('span');
		sampleTextValueSpan.id = "sampleValue-arch";

		var textBoxDiv = document.createElement('div');
		textBoxDiv.className = "formats-arch-sample-value";

		textBoxDiv.appendChild(sampleTextLabelSpan);
		textBoxDiv.appendChild(sampleTextValueSpan);
		//textBoxDiv.id = "sampleValue-arch";

		divTag.appendChild(labelDiv);
		divTag.appendChild(textBoxDiv);

		_dynamicFormatContent.appendChild(divTag);
		_formatContent.appendChild(_dynamicFormatContent);

		this.updateSampleText(); // sets the number of digits value

		this.modal.getContent().getElement('#information').addEvent('mouseover', function () {
			that.getInformation(that.modal.getContent().getElement("#information"), FLWebNLS.counterTooltip);
		});

		// this.modal.getContent().getElement('#sampleValue-arch').addEvent('mouseover', function () {
		//   that.getInformation(that.modal.getContent().getElement("#sampleValue-arch"), event.currentTarget.getText());
		//
		// })


		// this.modal.getContent().getElement('#sampleValue-arch').addEventListener('mouseout', function () {
		// 	//that.getInformation(that.modal.getContent().getElement("#sampleValue-arch"), event.currentTarget.getText());
		// 	console.log(that);
		// 	that.tooltip.elements.body.empty()
		//
		// })


	};

	FLWebModal.prototype.getInformation = function (targetElement, toDisplayOver) {

		var tooltipOtions = {
				target: targetElement,
				body: toDisplayOver
		};
		this.getTooltip(tooltipOtions);

	};

	FLWebModal.prototype.getValueField = function (_formatContent) {

		var _dynamicFormatContent = this.modal.getContent().getElement('.enox-arch-number-dynamic-content');

		_dynamicFormatContent.empty();

		var formatField = FLWebNLS.value;

		var divTag = document.createElement('div');
		divTag.className = "formats-arch";

		var labelDiv = document.createElement('div');
		labelDiv.className = "formats-arch-label";
		labelDiv.innerText = formatField;

		var textBoxDiv = document.createElement('div');
		textBoxDiv.className = "formats-arch-tbox";
		this.valueTextBox = this.getTextBox();
		this.valueTextBox.domId = formatField + "_textBox";
		this.valueTextBox.inject(textBoxDiv);

		divTag.appendChild(labelDiv);
		divTag.appendChild(textBoxDiv);

		_dynamicFormatContent.appendChild(divTag);
		_formatContent.appendChild(_dynamicFormatContent);

	};

	FLWebModal.prototype.getModalBody = function () {

		var partNumberContent = this.modal.elements.body;

		var _errorsMessageDiv = UWACore.createElement('div');
		_errorsMessageDiv.className = "enox-part-number-error-content";

		var _formatContent = UWACore.createElement('div');
		_formatContent.className = "enox-arch-number-content";

		var _dynamicFormatContent = UWACore.createElement('div');
		_dynamicFormatContent.className = "enox-arch-number-dynamic-content";

		this.getDefaultFields(_formatContent);

		partNumberContent.appendChild(_errorsMessageDiv);
		partNumberContent.appendChild(_formatContent);
		partNumberContent.appendChild(_dynamicFormatContent);
		return partNumberContent;
	};

	FLWebModal.prototype.createCollabUnicitySecAddFieldModalBody = function () {

		var modalBody = this.modal.elements.body;

		var _errorsMessageDiv = UWACore.createElement('div');
		_errorsMessageDiv.className = "enox-part-number-error-content";

		var _formatContent = UWACore.createElement('div');
		_formatContent.className = "enox-arch-number-content";

		// var _dynamicFormatContent = UWACore.createElement('div');
		// _dynamicFormatContent.className = "enox-arch-number-dynamic-content";

		//this.getDefaultFields(_formatContent);
		this.addDefaultFieldsToCollabUnicitySecModalBody(_formatContent);
		modalBody.appendChild(_errorsMessageDiv);
		modalBody.appendChild(_formatContent);
		//	modalBody.appendChild(_dynamicFormatContent);
		//return partNumberContent;
	};

	FLWebModal.prototype.addDefaultFieldsToCollabUnicitySecModalBody = function (_formatContent) {

		var that = this;
		var groupNameField = document.createElement('div');
		groupNameField.className = "formats-arch";

		var labelDiv = document.createElement('div');
		labelDiv.className = "formats-arch-label";
		labelDiv.innerText = FLWebNLS.label_groupName;

		var textBoxDiv = document.createElement('div');
		textBoxDiv.className = "formats-arch-tbox";
		var textOptions = {
				events: {
					//  onChange: that.validateEnteredNameValue.bind(that)
				}
		};
		this.nameTextBoxForCollabUnicity = this.getTextBox(textOptions);
		this.nameTextBoxForCollabUnicity.domId = FLWebNLS.name + "_textBox";
		this.nameTextBoxForCollabUnicity.inject(textBoxDiv);

		groupNameField.appendChild(labelDiv);
		groupNameField.appendChild(textBoxDiv);
		_formatContent.appendChild(groupNameField);

		var collabSpaceField = document.createElement('div');
		collabSpaceField.className = 'formats-arch';

		var collabSpacelabel = document.createElement('div');
		collabSpacelabel.className = 'formats-arch-label';
		collabSpacelabel.innerText = FLWebNLS.label_CSfield;

		var collabSpaceTextBoxContainer = document.createElement('div');
		collabSpaceTextBoxContainer.className = 'formats-arch-tbox';
		var csList =  JSON.parse(localStorage.getItem('csList'));
		var collabSpaceSelectOptions = {
				//placeholder: 'Select your option',
				multiple: true,
				options: csList,
				events: {
					//  onChange: that.validateEnteredNameValue.bind(that)
				}
		};
		this.collabListTextBox = this.getSelectComponent(collabSpaceSelectOptions);
		this.collabListTextBox.domId = FLWebNLS.name + "_textBox";
		this.collabListTextBox.inject(collabSpaceTextBoxContainer);

		collabSpaceField.appendChild(collabSpacelabel);
		collabSpaceField.appendChild(collabSpaceTextBoxContainer);

		_formatContent.appendChild(collabSpaceField);

	};

	FLWebModal.prototype.validateEnteredNameValue = function (operation, editingField) {
		var duplicateData = {};
		duplicateData.isValid = true;
		var userEnteredFormat = this.nameTextBox.getValue();
		var isSuccess = this.validateEnteredValues(userEnteredFormat, FLWebNLS.name, operation, editingField);
		if (!isSuccess) {
			duplicateData.isValid = false;
		}
		duplicateData.data = userEnteredFormat;
		return duplicateData;
	};

	FLWebModal.prototype.validateEnteredGroupNameValue = function (operation, editingField) {
		var duplicateData = {};
		duplicateData.isValid = true;
		var userEnteredName = this.nameTextBoxForCollabUnicity.getValue();
		var isSuccess = this.validateEnteredValuesForArchNumCollab(userEnteredName, FLWebNLS.name, operation, editingField);
		if (!isSuccess) {
			duplicateData.isValid = false;
		}
		duplicateData.data = userEnteredName;
		return duplicateData;
	};

	FLWebModal.prototype.validateEnteredOrderValue = function (operation, editingField) {

		var duplicateData = {};
		duplicateData.isValid = true;

		var userEnteredFormat = this.numberOrderBox.getValue();
		var isSuccess = this.validateEnteredValues(userEnteredFormat, FLWebNLS.order, operation, editingField);

		if (!isSuccess) {

			duplicateData.isValid = false;
		}

		duplicateData.data = userEnteredFormat;
		return duplicateData;
	};

	FLWebModal.prototype.validateEnteredValues = function (userEnteredFormat, field, operation, editingField) {
		var rowsOfMappedFields = document.querySelectorAll(".partNumberFieldMapping");
		var successFields = document.querySelector('.success');


		var isSuccess = true;

		if (operation == "edit") {
			for (var k = 0; k < rowsOfMappedFields.length; k++) {
				if (rowsOfMappedFields[k] != editingField) {
					for (var j = 0; j < 2; j++) {
						if (successFields.getChildren()[j].getText() == field && userEnteredFormat == rowsOfMappedFields[k].getChildren()[j].getText()) {
							isSuccess = false;
							break;
						}
					}
				}
			}
		} else {
			for (var k1 = 0; k1 < rowsOfMappedFields.length; k1++) {

				for (var j1 = 0; j1 < 2; j1++) {
					if (successFields.getChildren()[j1].getText() == field && userEnteredFormat == rowsOfMappedFields[k1].getChildren()[j1].getText()) {
						isSuccess = false;
						break;
					}
				}
			}
		}
		return isSuccess;
	};

	FLWebModal.prototype.validateEnteredValuesForArchNumCollab = function (userEnteredFormat, field, operation, editingField) {
		var rowsOfMappedFields = document.querySelectorAll("#archNumCollabTableRow");
		var successFields = document.querySelector('#headerRowArchNumCollab');
		var isSuccess = true;
		if (operation == "edit") {
			for (var k = 0; k < rowsOfMappedFields.length; k++) {
				if (rowsOfMappedFields[k] != editingField) {
					for (var j = 0; j < 2; j++) {
						if (successFields.getChildren()[j].getText() == field && userEnteredFormat == rowsOfMappedFields[k].getChildren()[j].getText()) {
							isSuccess = false;
							break;
						}
					}
				}
			}
		} else {
			for (var k1 = 0; k1 < rowsOfMappedFields.length; k1++) {
				for (var j1 = 0; j1 < 2; j1++) {
					if (successFields.getChildren()[j1].getText() == field && userEnteredFormat == rowsOfMappedFields[k1].getChildren()[j1].getText()) {
						isSuccess = false;
						break;
					}
				}
			}
		}
		return isSuccess;
	};

	FLWebModal.prototype.validateEnteredGroupNameValueNotNull = function () {
		var userEnteredFormat = this.nameTextBoxForCollabUnicity.getValue();
		var isNull = this.validateEnteredValuesNotNull(userEnteredFormat);
		return isNull;
	};

	FLWebModal.prototype.validateEnteredCollabListValueNotNull = function () {
		var userEnteredFormat = this.collabListTextBox.getValue()[0];
		var isNull = this.validateEnteredValuesNotNull(userEnteredFormat);
		return isNull;
	};

	FLWebModal.prototype.validateEnteredNameValueNotNull = function () {
		var userEnteredFormat = this.nameTextBox.getValue();
		var isNull = this.validateEnteredValuesNotNull(userEnteredFormat);
		return isNull;
	};

	FLWebModal.prototype.validateEnteredOrderValueNotNull = function () {
		var userEnteredFormat = this.numberOrderBox.getValue();
		var isNull = this.validateEnteredValuesNotNull(userEnteredFormat);
		return isNull;
	};

	FLWebModal.prototype.validateEnteredValueFieldValueNotNull = function () {
		var isNull = false;
		if (this.getUserEnteredValues().Type != ParameterizationFLWebConstants.FORMAT_ATTRIBUTE) {
			isNull = this.valueTextBox ? this.validateEnteredValuesNotNull(this.valueTextBox.getValue()) : this.valueDynTextBox ? this.validateEnteredValuesNotNull(this.valueDynTextBox.getValue()) : false;
		}
		return isNull;
	};

	FLWebModal.prototype.validatSelectedTypeFieldValueNotNull = function () {
		var userEnteredFormat = this.partNumberTypeCombobox.getValue()[0];
		var isNull = this.validateEnteredValuesNotNull(userEnteredFormat);
		return isNull;
	};

	FLWebModal.prototype.validateSelectedAttributeFieldValueNotNull = function () {
		var userEnteredFormat = this.partNumberAttributeCombobox ? this.partNumberAttributeCombobox.getValue()[0] : '';
		var isNull = false;
		if (this.partNumberTypeCombobox.getValue()[0] == ParameterizationFLWebConstants.FORMAT_ATTRIBUTE) {
			isNull = this.validateEnteredValuesNotNull(userEnteredFormat);
		}

		return isNull;
	};

	FLWebModal.prototype.validateEnteredCounterFieldValueNotNull = function () {
		var userEnteredFormat = this.counterNumberBox ? this.counterNumberBox.getValue() : '';
		var isNull = false;
		if (this.partNumberTypeCombobox.getValue()[0] == ParameterizationFLWebConstants.FORMAT_COUNTER) {
			isNull = this.validateEnteredValuesNotNull(userEnteredFormat);
		}

		return isNull;
	};


	FLWebModal.prototype.validateEnteredValuesNotNull = function (userEnteredFormat) {

		var isNull = false;
		if (userEnteredFormat == '' || userEnteredFormat == "") {
			isNull = true;
		}
		return isNull;
	};

	FLWebModal.prototype.displayAlertMessage = function (messageToDisplay, toDisplayOver) {
		var alertOptions = {
				visible: true,
				className: 'param-alert',
				messageClassName: 'error',
				closable: true,
				renderTo: toDisplayOver,
				autoHide: true,
				hideDelay: 2000
		};
		var alert = this.getAlertComponent(alertOptions);

		alert.add({
			message: messageToDisplay
		});

	};

	FLWebModal.prototype.getUserEnteredValues = function () {

		var userEnteredFormatValues = {};

		var valueField = this.valueTextBox ? this.valueTextBox.getValue() : this.valueDynTextBox ? this.valueDynTextBox.getValue() : this.modal.getContent().getElement('#sampleValue-arch') ? this.modal.getContent().getElement('#sampleValue-arch').innerText : '';
		var attributeFieldLabel = this.partNumberAttributeCombobox ? this.partNumberAttributeCombobox.getOption(this.partNumberAttributeCombobox.getValue()[0]).getText() : '';
		var attributeFieldValue = this.partNumberAttributeCombobox ? this.partNumberAttributeCombobox.getValue()[0] : '';
		var numberOfDigits = this.counterNumberBox ? this.counterNumberBox.getValue() : '';

		userEnteredFormatValues[ParameterizationFLWebConstants.NAME] = this.nameTextBox.getValue();
		userEnteredFormatValues[ParameterizationFLWebConstants.ORDER] = this.numberOrderBox.getValue();
		userEnteredFormatValues[ParameterizationFLWebConstants.TYPE] = this.partNumberTypeCombobox.getValue()[0];
		userEnteredFormatValues[ParameterizationFLWebConstants.ATTRIBUTE] = attributeFieldValue;
		userEnteredFormatValues[ParameterizationFLWebConstants.ATTRIBUTE_NLS_NAME] = attributeFieldLabel;
		userEnteredFormatValues[ParameterizationFLWebConstants.COUNTER] = numberOfDigits;
		userEnteredFormatValues[ParameterizationFLWebConstants.VALUE] = valueField;

		return userEnteredFormatValues;
	};

	FLWebModal.prototype.getUserEnteredValuesForArchNumCollabUnicity = function () {
		var userEnteredFormatValues = {};
		var fieldValue = '';
		var csSelectList = this.collabListTextBox.getValue();
		if(Array.isArray(csSelectList)) {
			for(var i = 0; i < csSelectList.length-1; i++) {
				fieldValue += csSelectList[i] + ',';
			};
			fieldValue += csSelectList[i];
		} else {
			fieldValue = csSelectList;
		}
		userEnteredFormatValues[ParameterizationFLWebConstants.NAME] = this.nameTextBoxForCollabUnicity.getValue();
		userEnteredFormatValues[ParameterizationFLWebConstants.VALUE] = fieldValue;
		return userEnteredFormatValues;
	};

	FLWebModal.prototype.updateSampleText = function () {

		var sampleTextDiv = this.modal.getContent().getElement('#sampleValue-arch');
		var updatedCount = this.counterNumberBox ? this.counterNumberBox.getValue() : '';
		var noOFDigits = "";
		for (var i = 0; i < parseInt(updatedCount); i++) {
			noOFDigits = '0' + noOFDigits;
		}
		if (sampleTextDiv != null) {
			sampleTextDiv.innerText = noOFDigits;
		}

	};

	FLWebModal.prototype.getTotalFormatRows = function () {
		return document.querySelectorAll(".partNumberFieldMapping").length;
	};

	FLWebModal.prototype.getHighestOrder = function () {
		var rowsOfMappedFields = document.querySelectorAll(".partNumberFieldMapping");
		var toCheckTheExistingRows = rowsOfMappedFields.length;
		var highestOrder = 0;
		if (toCheckTheExistingRows > 0) {
			for (var k = 0; k < rowsOfMappedFields.length; k++) {
				if (parseInt(rowsOfMappedFields[k].getChildren()[1].getText()) > highestOrder) {
					highestOrder = parseInt(rowsOfMappedFields[k].getChildren()[1].getText());
				}
			}
		}

		return highestOrder;

	};
	FLWebModal.prototype.isCounterExists = function (field) {
		var rowsOfMappedFields = document.querySelectorAll(".partNumberFieldMapping");
		var toCheckTheExistingRows = rowsOfMappedFields.length;
		var isSuccess = false;
		if (toCheckTheExistingRows > 0) {
			for (var k = 0; k < rowsOfMappedFields.length; k++) {
				if (rowsOfMappedFields[k].getChildren()[2].value == ParameterizationFLWebConstants.FORMAT_COUNTER) {
					isSuccess = true;
					break;
				}
			}
		}

		return isSuccess;
	};

	FLWebModal.prototype.destroyValueFieldComponents = function () {

		this.valueTextBox = undefined;
		this.valueDynTextBox = undefined;
		this.counterNumberBox = undefined;

	};

	FLWebModal.prototype.getAttributes = function (data) {
		var that = this;
		that.storeAttributes(data);
	};

	FLWebModal.prototype.storeAttributes = function (data) {

		this.attributes = data;

	};


	FLWebModal.prototype.getTextBox = function (textBoxOptions) {

		this.textBox = new Text(textBoxOptions);
		return this.textBox;
	};
	FLWebModal.prototype.getNumberBox = function (numberOptions) {

		this.numberBox = new Number(numberOptions);
		return this.numberBox;
	};

	FLWebModal.prototype.getSelectComponent = function (selectOptions) {
		this.select = new Select(selectOptions);
		return this.select;
	};

	FLWebModal.prototype.getAlertComponent = function (alertOptions) {

		this.alert = new Alert(alertOptions);
		return this.alert;
	};

	FLWebModal.prototype.getTooltip = function (tooltipOtions) {
		this.tooltip = new Tooltip(tooltipOtions);
		return this.tooltip;
	};

	FLWebModal.prototype.show = function () {
		this.modal.show();
	};


	FLWebModal.prototype._bindFooterEvent = function () {
		var that = this;

		this.modal.getFooter().getElements('.btn').forEach(function (element) {
			if (element.name === 'cancelButton') {
				element.addEvent('click', function () {
					that.modal.hide();
				});
			}
		});

	};

	FLWebModal.prototype.getContent = function () {
		return this.modal.getContent();
	};

	FLWebModal.prototype.destroy = function () {
		this.modal.destroy();
		var keys = Object.keys(this);
		for (var i = 0; i < keys.length; i++) {
			this[keys[i]] = undefined;
		}
	};

	return FLWebModal;
});

define('DS/ParameterizationSkeleton/Views/VersionNamingExt/VersionNamingExtUtility', [
	'UWA/Core',
	'DS/WAFData/WAFData',
	'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler',
], 
function (UWA,  WAFData, URLHandler) {

	const ShortNameToName = {
		"DashedRev" :       "---,--A,--B,--C,--D,--E,--F,--G,--H,--I,--J,--K,--L,--M,--N,--O,--P,--Q,--R,--S,--T,--U,--V,--W,--X,--Y,--Z,-AA,-BB,-CC,-DD,-EE,-FF,-GG,-HH,-II,-JJ,-KK,-LL,-MM,-NN,-OO,-PP,-QQ,-RR,-SS,-TT,-UU,-VV,-WW,-XX,-YY,-ZZ,AAA,BBB,CCC,DDD,EEE,FFF,GGG,HHH,III,JJJ,KKK,LLL,MMM,NNN,OOO,PPP,QQQ,RRR,SSS,TTT,UUU,VVV,WWW,XXX,YYY,ZZZ",
		"AlphabeticalRev":  "A,B,C,...",
		"NumericalRev":     "1,2,3,...",
		"RomanRev":         "I,II,III,IV,V,VI,VII,VIII,IX,X,XI,XII,XIII,XIV,XV,XVI,XVII,XVIII,XIX,XX,XXI,XXII,XXIII,XXIV,XXV,XXVI,XXVII,XXVIII,XXIX,XXX,XXXI,XXXII,XXXIII,XXXIV,XXXV,XXXVI,XXXVII,XXXVIII,XXXIX,XL",
		"NthRev":           "1st Rev,2nd Rev,3rd Rev,4th Rev,5th Rev,6th Rev,7th Rev,8th Rev,9th Rev,10th Rev,11th Rev,12th Rev,13th Rev,14th Rev,15th Rev,16th Rev,17th Rev,18th Rev,19th Rev,20th Rev,21st Rev,22nd Rev,23rd Rev,24th Rev,25th Rev,26th Rev,27th Rev,28th Rev,29th Rev,30th Rev,31st Rev,32nd Rev,33rd Rev,34th Rev,35th Rev,36th Rev,37th Rev,38th Rev,39th Rev,40th Rev",
		"ASMEY1435Rev (1)": "-,[A,B,C,D,E,F,G,H,J,K,L,M,N,P,R,T,U,V,W,Y]",
        "ASMEY1435Rev":     "-,A,B,C,D,E,F,G,H,J,K,L,M,N,P,R,T,U,V,W,Y,AA,AB,AC,AD,AE,AF,AG,AH,AJ,AK,AL,AM,AN,AP,AR,AT,AU,AV,AW,AY,BA,BB,BC,BD,BE,BF,BG,BH,BJ,BK,BL,BM,BN,BP,BR,BT,BU,BV,BW,BY,CA,CB,CC,CD,CE,CF,CG,CH,CJ,CK,CL,CM,CN,CP,CR,CT,CU,CV,CW,CY,DY,DA,DB,DC,DD,DE,DF,DG,DH,DJ,DK,DL,DM,DN,DP,DR,DT,DU,DV,DW,DY,EA,EB,EC,ED,EE,EF,EG,EH,EJ,EK,EL,EM,EN,EP,ER,ET,EU,EV,EW,EY,FA,FB,FC,FD,FE,FF,FG,FH,FJ,FK,FL,FM,FN,FP,FR,FT,FU,FV,FW,FY,FA,GB,GC,GD,GE,GF,GG,GH,GJ,GK,GL,GM,GN,GP,GR,GT,GU,GV,GW,GY,HA,HB,HC,HD,HE,HF,HG,HH,HJ,HK,HL,HM,HN,HP,HR,HT,HU,HV,HW,HY,JA,JB,JC,JD,JE,JF,JG,JH,JJ,JK,JL,JM,JN,JP,JR,JT,JU,JV,JW,JY,KA,KB,KC,KD,KE,KF,KG,KH,KJ,KK,KL,KM,KN,KP,KR,KT,KU,KV,KW,KY,LA,LB,LC,LD,LE,LF,LG,LH,LJ,LK,LL,LM,LN,LP,LR,LT,LU,LV,LW,LY,MA,MB,MC,MD,ME,MF,MG,MH,MJ,MK,ML,MM,MN,MP,MR,MT,MU,MV,MW,MY,NA,NB,NC,ND,NE,NF,NG,NH,NJ,NK,NL,NM,NN,NP,NR,NT,NU,NV,NW,NY,PA,PB,PC,PD,PE,PF,PG,PH,PJ,PK,PL,PM,PN,PP,PR,PT,PU,PV,PW,PY,RA,RB,RC,RD,RE,RF,RG,RH,RJ,RK,RL,RM,RN,RP,RR,RT,RU,RV,RW,RY,TA,TB,TC,TD,TE,TF,TG,TH,TJ,TK,TL,TM,TN,TP,TR,TT,TU,TV,TW,TY,UA,UB,UC,UD,UE,UF,UG,UH,UJ,UK,UL,UM,UN,UP,UR,UT,UU,UV,UW,UY,VA,VB,VC,VD,VE,VF,VG,VH,VJ,VK,VL,VM,VN,VP,VR,VT,VU,VV,VW,VY,WA,WB,WC,WD,WE,WF,WG,WH,WJ,WK,WL,WM,WN,WP,WR,WT,WU,WV,WW,WY,YA,YB,YC,YD,YE,YF,YG,YH,YJ,YK,YL,YM,YN,YP,YR,YT,YU,YV,YW,YY,...",
		"NumericalZeroRev (1)": "0,1,2,...",
        "NumericalZeroRev": "0,1,2,3,..."
	};

	const NameToShortName = {
		"---,--A,--B,--C,--D,--E,--F,--G,--H,--I,--J,--K,--L,--M,--N,--O,--P,--Q,--R,--S,--T,--U,--V,--W,--X,--Y,--Z,-AA,-BB,-CC,-DD,-EE,-FF,-GG,-HH,-II,-JJ,-KK,-LL,-MM,-NN,-OO,-PP,-QQ,-RR,-SS,-TT,-UU,-VV,-WW,-XX,-YY,-ZZ,AAA,BBB,CCC,DDD,EEE,FFF,GGG,HHH,III,JJJ,KKK,LLL,MMM,NNN,OOO,PPP,QQQ,RRR,SSS,TTT,UUU,VVV,WWW,XXX,YYY,ZZZ": "DashedRev",
		"A,B,C,...": "AlphabeticalRev",
		"1,2,3,...": "NumericalRev",
		"I,II,III,IV,V,VI,VII,VIII,IX,X,XI,XII,XIII,XIV,XV,XVI,XVII,XVIII,XIX,XX,XXI,XXII,XXIII,XXIV,XXV,XXVI,XXVII,XXVIII,XXIX,XXX,XXXI,XXXII,XXXIII,XXXIV,XXXV,XXXVI,XXXVII,XXXVIII,XXXIX,XL": "RomanRev",
		"1st Rev,2nd Rev,3rd Rev,4th Rev,5th Rev,6th Rev,7th Rev,8th Rev,9th Rev,10th Rev,11th Rev,12th Rev,13th Rev,14th Rev,15th Rev,16th Rev,17th Rev,18th Rev,19th Rev,20th Rev,21st Rev,22nd Rev,23rd Rev,24th Rev,25th Rev,26th Rev,27th Rev,28th Rev,29th Rev,30th Rev,31st Rev,32nd Rev,33rd Rev,34th Rev,35th Rev,36th Rev,37th Rev,38th Rev,39th Rev,40th Rev": "NthRev",
		"-,[A,B,C,D,E,F,G,H,J,K,L,M,N,P,R,T,U,V,W,Y]": "ASMEY1435Rev",
        "-,A,B,C,D,E,F,G,H,J,K,L,M,N,P,R,T,U,V,W,Y,AA,AB,AC,AD,AE,AF,AG,AH,AJ,AK,AL,AM,AN,AP,AR,AT,AU,AV,AW,AY,BA,BB,BC,BD,BE,BF,BG,BH,BJ,BK,BL,BM,BN,BP,BR,BT,BU,BV,BW,BY,CA,CB,CC,CD,CE,CF,CG,CH,CJ,CK,CL,CM,CN,CP,CR,CT,CU,CV,CW,CY,DY,DA,DB,DC,DD,DE,DF,DG,DH,DJ,DK,DL,DM,DN,DP,DR,DT,DU,DV,DW,DY,EA,EB,EC,ED,EE,EF,EG,EH,EJ,EK,EL,EM,EN,EP,ER,ET,EU,EV,EW,EY,FA,FB,FC,FD,FE,FF,FG,FH,FJ,FK,FL,FM,FN,FP,FR,FT,FU,FV,FW,FY,FA,GB,GC,GD,GE,GF,GG,GH,GJ,GK,GL,GM,GN,GP,GR,GT,GU,GV,GW,GY,HA,HB,HC,HD,HE,HF,HG,HH,HJ,HK,HL,HM,HN,HP,HR,HT,HU,HV,HW,HY,JA,JB,JC,JD,JE,JF,JG,JH,JJ,JK,JL,JM,JN,JP,JR,JT,JU,JV,JW,JY,KA,KB,KC,KD,KE,KF,KG,KH,KJ,KK,KL,KM,KN,KP,KR,KT,KU,KV,KW,KY,LA,LB,LC,LD,LE,LF,LG,LH,LJ,LK,LL,LM,LN,LP,LR,LT,LU,LV,LW,LY,MA,MB,MC,MD,ME,MF,MG,MH,MJ,MK,ML,MM,MN,MP,MR,MT,MU,MV,MW,MY,NA,NB,NC,ND,NE,NF,NG,NH,NJ,NK,NL,NM,NN,NP,NR,NT,NU,NV,NW,NY,PA,PB,PC,PD,PE,PF,PG,PH,PJ,PK,PL,PM,PN,PP,PR,PT,PU,PV,PW,PY,RA,RB,RC,RD,RE,RF,RG,RH,RJ,RK,RL,RM,RN,RP,RR,RT,RU,RV,RW,RY,TA,TB,TC,TD,TE,TF,TG,TH,TJ,TK,TL,TM,TN,TP,TR,TT,TU,TV,TW,TY,UA,UB,UC,UD,UE,UF,UG,UH,UJ,UK,UL,UM,UN,UP,UR,UT,UU,UV,UW,UY,VA,VB,VC,VD,VE,VF,VG,VH,VJ,VK,VL,VM,VN,VP,VR,VT,VU,VV,VW,VY,WA,WB,WC,WD,WE,WF,WG,WH,WJ,WK,WL,WM,WN,WP,WR,WT,WU,WV,WW,WY,YA,YB,YC,YD,YE,YF,YG,YH,YJ,YK,YL,YM,YN,YP,YR,YT,YU,YV,YW,YY,...": "ASMEY1435Rev",
		"0,1,2,...": "NumericalZeroRev",
        "0,1,2,3,...": "NumericalZeroRev"
	};

	const requestHelper = function(url, methodType, data, onSuccess, onFailure) {
		const urlSecurityContext =URLHandler.getURL() +"/resources/pno/person/getsecuritycontext?tenant=" + URLHandler.getTenant();
		console.log("Get security context:");
		WAFData.authenticatedRequest(urlSecurityContext, {
			timeout : 250000,
			method : 'GET',
			data : "",
			type : 'json',
			headers : {
				'Content-Type' : 'application/json',
				'Accept' : 'application/json'
			},
			onFailure : function (json) {
                console.log('VersionNamingExtUtility::requestHelper - Failure');
				console.log(json);
			},
			onComplete: function(securityContext) {
				const urlFinal =URLHandler.getURL()+ url + "?tenant=" + URLHandler.getTenant();
				WAFData.authenticatedRequest(urlFinal, {
					timeout : 250000,
					method : methodType,
					data : data,
					type : 'json',
					headers : {
						'Content-Type' : 'application/json',
						'Accept' : 'application/json',
						'SecurityContext' : securityContext.SecurityContext,
					},
					onFailure : function (result) {
                        console.log('VersionNamingExtUtility::requestHelper - Failure');
						console.log(result);
						onFailure(result);
					},
                    onComplete: function (result) {
                        console.log('VersionNamingExtUtility::requestHelper - Success');
                        onSuccess(result);
					}
				});
			}
		});
	};

    const requestHelperPromise = function(url, methodType, data) {
        return new Promise( (resolve, reject ) => {
            requestHelper(url, methodType, data, (result) => resolve(result), (error) => reject(error));
        });
    };

    const isExtendedSeq = function(seqname) {
        if (!!NameToShortName[seqname])
            return false;
        console.log("isExtendedSeq returning true for: ");
        console.log(seqname);
        return true;
    };

    return {

        getAllRevisionSequencesPromise : function() {
            return new Promise(function (resolve, reject) {
                var url =  "/resources/v1/dslc/getrevisionsequences";
                var jsonData = { "sequences" : [ { "search": "*" } ] };

                requestHelper(url, "POST", JSON.stringify(jsonData), 
                    (json) => {
                        if (json && Array.isArray(json.sequences)) {
                            var result = [];
                            json.sequences.forEach( (seq) => {
                                if (seq.sequence) {
                                    let altname = NameToShortName[seq.sequence.name];
                                    seq.sequence.altname = altname || seq.sequence.name;
                                    seq.sequence.extended = isExtendedSeq(seq.sequence.name);
                                    if (seq.sequence.altname==="ASMEY1435Rev (1)")
                                        seq.sequence.altname = "ASMEY1435Rev";
                                    if (seq.sequence.altname==="NumericalZeroRev (1)")
                                        seq.sequence.altname = "NumericalZeroRev";
                                    result.push(seq.sequence);
                                }
                            });
                            resolve(result);
                            return;
                        }
                        else if (json && Array.isArray(json)) {
                            var result = [];
                            json.forEach( (seq) => {
                                if (seq) {
                                    let altname = NameToShortName[seq.name];
                                    seq.altname = altname || seq.name;
                                    seq.extended = isExtendedSeq(seq.name);
                                    if (seq.altname==="ASMEY1435Rev (1)")
                                        seq.altname = "ASMEY1435Rev";
                                    if (seq.altname==="NumericalZeroRev (1)")
                                        seq.altname = "NumericalZeroRev";
                                    result.push(seq);
                                }
                            });
                            resolve(result);
                            return;
                        }
                        reject(json);
                    }, 
                    (json) => {
                        reject(json);
                    });
            });
        },

        downloadRevisionSequencesPromise : function() {
            return new Promise(function (resolve, reject) {
                var url =  "/resources/v1/dslc/getrevisionsequences";
                var jsonData = { "sequences" : [ { "search": "*" } ] };

                requestHelper(url, "POST", JSON.stringify(jsonData), 
                    (json) => {
                        if (json && Array.isArray(json.sequences)) {
                            var result = [];
                            json.sequences.forEach( (seq) => {
                                if (seq.sequence && isExtendedSeq(seq.sequence.name)) {
                                    result.push(seq.sequence);
                                }
                            });
                            resolve(result);
                            return;
                        }
                        else if (json && Array.isArray(json)) {
                            var result = [];
                            json.forEach( (seq) => {
                                if (seq && isExtendedSeq(seq.name)) {
                                    result.push(seq);
                                }
                            });
                            resolve(result);
                            return;
                        }
                        reject(json);
                    }, 
                    (json) => {
                        reject(json);
                    });
            });
        },

        getAssociatedSequencesPromise : function(policies, types) {
            return new Promise(function (resolve, reject) {
                var url =  "/resources/v1/dslc/associaterevisionsequences";
                var sequences = [];

                policies = policies || new Map();
                for (const v of policies.values()) {
                    v.forEach( (policy) => {
                        sequences.push( {operator: "GET", policy: policy} );
                    });
                }
                
                types = types || new Map();
                for (const v of types.values()) {
                    v.forEach( (type) => {
                        sequences.push( {operator: "GET", type: type} );
                    });
                }

                var jsonData = { sequences : sequences };

                requestHelper(url, "POST", JSON.stringify(jsonData), 
                    (json) => {
                        if (json && Array.isArray(json.sequences)) {
                            var result = [];
                            json.sequences.forEach( (seq) => {
                                seq.altname = NameToShortName[seq.name] || seq.name;
                                if (seq.altname==="ASMEY1435Rev (1)")
                                    seq.altname = "ASMEY1435Rev";
                                if (seq.altname==="NumericalZeroRev (1)")
                                    seq.altname = "NumericalZeroRev";
                                result.push(seq);
                                
                            });
                            resolve(result);
                            return;
                        }
                        reject(json);
                    }, 
                    (json) => {
                        reject(json);
                    });
            });
        },

		uploadRevisionSequencesPromise: function(jsonData) {
            var url =  "/resources/v1/dslc/editrevisionsequences";
            return requestHelperPromise(url, "POST", JSON.stringify(jsonData));
		},
        
		/*associateRevisionSequencesPromise: function(sequences) {

            sequences.forEach( (seq) => {
                let name = seq.name;
                if (name==="ASMEY1435Rev (1)")
                    name = "ASMEY1435Rev";
                if (name==="NumericalZeroRev (1)")
                    name = "NumericalZeroRev";
                let realname = ShortNameToName[name];
                seq.altname = name;
                seq.name = realname || name;
            });

            var url =  "/resources/v1/dslc/associaterevisionsequences";
            var jsonData = { sequences : sequences };
            //attention au cas ASMEY1435Rev
            return requestHelperPromise(url, "POST", JSON.stringify(jsonData));
		},*/
	}
});

define('DS/ParameterizationSkeleton/Collection/VersionNamingCollection', [
    'UWA/Core',
    'UWA/Class/Model',
    'UWA/Class/Collection',
    'DS/ParameterizationSkeleton/Utils/ParameterizationDataUtils',
    'DS/ParameterizationSkeleton/Utils/ParameterizationWebServices',
    'DS/WAFData/WAFData',
    'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler',
    'DS/ParameterizationSkeleton/Views/VersionNamingExt/VersionNamingExtUtility'
], function (UWA, Model, Collection, ParameterizationDataUtils, ParameterizationWebServices, WAFData, URLHandler, VNEUtility) {
    'use strict';

    return Collection.extend({
        model: function (modelid) {
            return Model.extend();
        },

        setup: function (models, options) {
            console.log("VersionNamingCollection::setup");

            var _modelKey = options._modelKey;

            var domainID = _modelKey._attributes.domainid;
            var familyID = _modelKey._attributes.familyid;

            if (UWA.is(this.model, "function")) {
                console.log("bizarrerie");
                this.model = this.model(domainID);
            }

            var iURL = URLHandler.getURL() + "/resources/ParamWS/access/DomainElements?tenant=" + URLHandler.getTenant() + "&domainid=" + domainID;

            if (familyID !== null && familyID !== "")
                iURL = iURL + "&familyid=" + familyID;

            this.url = iURL;
        },

        /*fetch: function (options) {
            UWA.log("VersionNamingCollection::fetch");
            var that = this;

            var promiseTab = [];
            var promiseEnvVar = new Promise(function (resolve, reject) {
                setTimeout(() => {
                    resolve();
                }, 1000);
            });

            promiseTab.push(promiseEnvVar);

            UWA.Promise.all(promiseTab).then(function (data) {
                Collection.prototype.fetch.call(that);
            });
        },*/

        sync: function (method, model, options) {
            var that = this;

            console.log("VersionNamingCollection::sync");
            options.contentType = "application/json";
            if(typeof widget != 'undefined')
                options.lang = widget.lang;

            options.headers = {
                Accept: "application/json",
                "Content-Type": "application/json"
            };
            if(typeof widget != 'undefined')
                options.headers["Accept-Language"] = widget.lang;

            options.ajax = WAFData.authenticatedRequest;

            var parent_onComplete = options.onComplete;
            var parent_onFailure = options.onFailure;

            options.onComplete = function(arg) {
                try {
                    var parameters = arg.family[0].parameter;

                    var policies = new Map();
                    var types = new Map();

                    var getPolicyNamesHelper = function(par) {
                        return that.getPolicyNamesHelper(par);
                    };
                    
                    parameters.forEach( (par) => {
                        policies.set(par.id,getPolicyNamesHelper(par));
                    });

                    Promise.all([VNEUtility.getAssociatedSequencesPromise(policies,types),VNEUtility.getAllRevisionSequencesPromise()])
                    .then( ([json1, json2]) => {

                        var checkParamValueConsistentWithAssociatedSeq = function(par) {
                            let argValue = par.argument[0].argValue;
                            let policies = getPolicyNamesHelper(par);
                            
                            let check = false;
                            for (let policy of policies) {
                                json1.forEach( (js1) => {
                                    if (js1.policy === policy && (js1.name === argValue || js1.altname === argValue)) 
                                        check = true;
                                });
                            }
                            if (!check) {
                                console.log("not found " + argValue + " / ");
                                for (let policy of policies) {
                                    json1.forEach( (js1) => {
                                        if (js1.policy === policy) 
                                            console.log("     "  + js1.name + " " + js1.altname);
                                    });
                                }
                            }
                            return check;
                        };

                        var checkSeqIsNotAlreadyOnParameter = function(par,extseq) {
                            for (let v in par.argument[0].value) {
                                if (v.id === extseq.altname)
                                    return false;
                            }
                            return true;
                        };

                        var checkSeqIsAllowedOnParameter = function(par,extseq) {
                            // 1
                            let with_extended_revision_sequence = false;
                            for(let c of par.constant) {
                                if (c.id==="with_extended_revision_sequence")
                                    with_extended_revision_sequence = c.value;
                            }

                            if (par.id==="VNaming_VPLM_SMB_Definition") with_extended_revision_sequence = true;
                            if (par.id==="VNaming_VPLM_SMB_Resource") with_extended_revision_sequence = true;
                            if (par.id==="VNaming_VPLM_SMB_Evaluation") with_extended_revision_sequence = true;

                            if (!with_extended_revision_sequence)
                                return false;

                            console.log("VersionNamingCollection " + par.id + " allows extended revision");

                            // 2
                            let tags = extseq.tags || [];
                            let policies = getPolicyNamesHelper(par);
                            for (let policy of policies) {
                                if (tags.includes(policy))
                                    return false;
                            }

                            return true;
                        };

                        parameters.forEach( (par) => {
                            if (!Array.isArray(par.argument) || par.argument.length!=1) {
                                console.log("VersionNamingCollection::sync error 1, invalid case " + par);
                                console.log(par);
                                return;
                            }
                            if (!Array.isArray(par.argument[0].value) || par.argument[0].value.length==0) {
                                console.log("VersionNamingCollection::sync error 2, invalid case " + par);
                                console.log(par);
                                return;
                            }

                            var argValue = par.argument[0].argValue;

                            for (let extseq of json2) {
                                if(extseq.extended && checkSeqIsNotAlreadyOnParameter(par,extseq) && checkSeqIsAllowedOnParameter(par,extseq)) {
                                    let addingseq = {id: extseq.name, nlsKey: extseq.title, tooltipNlsKey: extseq.description};
                                    par.argument[0].value.push( addingseq );
                                    console.log(par.id + " completed with : " + extseq.name);
                                }
                            }

                            var isAppliedValueInSeqList = false;
                            for (var seq of par.argument[0].value) {
                                if (seq.id===argValue)
                                    isAppliedValueInSeqList = true;
                            }
                            if (par.isDeployed && !isAppliedValueInSeqList) {
                                console.log("error : " + par.id + " is associated to an invalid seq name (" + argValue + ")")
                                par.isDeployed = "false";
                            }
                            
                            if (par.isDeployed && !checkParamValueConsistentWithAssociatedSeq(par)) {
                                console.log("error : " + par.id + " is not associated to seq name (" + argValue + ")")
                                par.isDeployed = "false";
                            }
                        });

                        parent_onComplete(arg);
                    })
                    .catch( (e) => {
                        throw e;
                    });
                }
                catch(e) {
                    console.log(e);
                    parent_onComplete(arg);
                }
            };

            options.onFailure = function(arg) {
                parent_onFailure(arg);
            };

            this._parent.apply(this, [method, model, options]);
        },

        getPolicyNamesHelper: function(par) {
            if (par.id.endsWith("SMB_Definition"))
                return ["VPLM_SMB_Definition", "VPLM_SMB_Definition_MajorRev", "VPLM_SMB_Definition_Document", "VPLM_SMB_Definition_Document_MajorRev"];
            else if (par.id.endsWith("SMB_Evaluation"))
                return ["VPLM_SMB_Evaluation", "VPLM_SMB_Evaluation_MajorRev"];
            else if (par.id.endsWith("SMB_Resource"))
                return ["VPLM_SMB_Resource", "VPLM_SMB_Resource_MajorRev"];
            else if (par.id.endsWith("DEC_Definition"))
                return ["Design TEAM Definition"];
            else {
                for(let c of par.constant) {
                    if (c.id==="policy")
                        return [c.value];
                    if (c.id==="apply_on_policies") {
                        try {
                            return c.value.split(",");
                        }
                        catch (e) {
                            console.log(e); 
                        }
                        return [];
                    }
                }
            }
            return [];
        },

        parse: function (data) {
            //UWA.log("VersionNamingCollection::parse");
            //UWA.log(data);
            return data;
        },

        create: function (attributes, options) {
            options.proxy = "passport";
            this._parent.apply(this, [attributes, options]);
        },

        /*genPostParamsArrOnServer: function (connectProps, webserviceName, jsonArr, theImageCell, onFailurefct, onSuccessfct, modelAttrs) {
            var that = this;

            ParameterizationWebServices.genPostParamsArrOnServer(connectProps, webserviceName, jsonArr, theImageCell, onFailurefct, onSuccessfct);
            return;
        },*/

    });
});

/*@fullReview  ZUR 15/11/23 2017x Param Skeleton*/
/*global define, widget*/
define('DS/ParameterizationSkeleton/Views/VersionNamingExt/VersionNamingExtLayoutView',
    [
        'UWA/Core',
        'UWA/Class/View',
        'DS/UIKIT/Mask',
        'DS/UIKIT/Scroller',
        'DS/UIKIT/Input/Button',
        'DS/UIKIT/Input/File',
        'DS/UIKIT/Popover',
        'DS/Controls/Label',
        'DS/Controls/Editor',
        'DS/ParameterizationSkeleton/Views/VersionNamingExt/VersionNamingExtUtility',
        'DS/ParameterizationSkeleton/Views/VersionNamingExt/VersionNamingExtAlertUtility',
        'i18n!DS/ParameterizationSkeleton/assets/nls/VersionNamingNLS'
    ], function (UWA, View, Mask, Scroller, Button, UXFile, Popover, Label, Editor, VNEUtility, AlertUtility, VersionNamingNLS) {
        'use strict';

        var extendedView = View.extend({

            defaultOptions: {
                type: 'default'
            },

            // The ‘options’ object is passed via the ‘viewOptions’ specified in the Renderer at the Skeleton instantiation
            init : function (options) {
                console.log("VersionNamingExtLayoutView::init");
                this.options  = UWA.clone(options || {}, false); //environment options
                this._parent(options); 
                this.childView = null;
            },

            render: function () {
                var that = this;

                //
                that.contentDiv =  UWA.createElement('div', {'id': "VersionNamingExtParamContainer"});
                //that.contentDiv.style.width = "100%"; NO!! (à cause du margin dans le css)
                that.contentDiv.style.height = "100%";
                that.contentDiv.style.margin = "14px";
                that.container.setContent(that.contentDiv);

                //
                that.createHeader(that.contentDiv);

                //
                var versionNamingTable1 = UWA.createElement('table', {'id': "VersionNamingExtParamTable"});
                versionNamingTable1.style.width = "100%";
                versionNamingTable1.style.marginBottom = "10px";
                //versionNamingTable1.style.height = "100%";
                versionNamingTable1.inject(that.contentDiv);

                var versionNamingDiv =UWA.createElement('tr',{'id': "Elmt1"}).inject(versionNamingTable1);
                this.createComponents(versionNamingDiv);

                return that;
            },

            createComponents: function(versionNamingDiv){
                var that = this;
                var file = null;

                var browseDiv =  UWA.createElement('div', {'id': "browseDiv",'display': "inline"}).inject(versionNamingDiv);
                
                var fileSelector = new UXFile({
                    multiple: false,
                    buttonBefore: false,
                    name: 'file-input',
                    buttonClassName: 'default',
                    placeholder: VersionNamingNLS.SelectAFile,
                    buttonText: VersionNamingNLS.BrowseButtonText
                }).inject(browseDiv);
                
                fileSelector.onChange = function(data){
                    file = fileSelector.elements.input.files[0];
                    fileSelector.elements.container.getChildren()[0].placeholder = file.name;
                }
                
                // Upload button to upload selected file
                var uploadButton = new Button({ id:"uploadButton_", className:"primary", value: VersionNamingNLS.UploadButtonText, icon: 'upload'})
                .inject(browseDiv);
                uploadButton.elements.container.style.marginTop = "5px";
                uploadButton.addEvent('onClick', function(){

                    if(!file){
                        AlertUtility.message('error', VersionNamingNLS.NoFileToUpload);
                        fileSelector.elements.container.getChildren()[0].placeholder = VersionNamingNLS.SelectAFile;
                        fileSelector.clear();
                        return;
                    }

                    //Parse & checks
                    var reader = new FileReader();
                    reader.onload = function(event) { 
                        var fileContent = reader.result;
                        that.parseFileContent(fileContent,
                            (json1) => {
                                var parsedRevisionSequences = json1;
                                console.log("revision sequences' file " + file.name + " parsed OK");
                                if(!parsedRevisionSequences){
                                    AlertUtility.message('error', VersionNamingNLS.NoContentToUpload);
                                    file = null;
                                    fileSelector.elements.container.getChildren()[0].placeholder = VersionNamingNLS.SelectAFile;
                                    fileSelector.clear();
                                    return;
                                }
                                var jsonData = parsedRevisionSequences;
                                VNEUtility.uploadRevisionSequencesPromise(jsonData)
                                .then( (jsonres) => {
                                    if (!jsonres || jsonres.severity==="FATAL_ERROR") {
                                        if (jsonres && !!jsonres.errorMessage)
                                            AlertUtility.message('error', jsonres.errorMessage);
                                        else
                                            AlertUtility.message('error', VersionNamingNLS.UploadFailedAlert);
                                    }
                                    else {
                                        AlertUtility.message('success', VersionNamingNLS.UploadSuccessAlert);
                                    }
                                    file = null;
                                    fileSelector.elements.container.getChildren()[0].placeholder = VersionNamingNLS.SelectAFile;
                                    fileSelector.clear();
                                })
                                .catch ( (e) => {
                                    file = null;
                                    fileSelector.elements.container.getChildren()[0].placeholder = VersionNamingNLS.SelectAFile;
                                    fileSelector.clear();
                                    if (!e) e = VersionNamingNLS.UploadFailedAlert;
                                    AlertUtility.message('error', e);
                                });
                            },
                            (errorMsg,e) => {
                                console.log("revision sequences' file " + file.name + " parsing failed");                
                                file = null;
                                fileSelector.elements.container.getChildren()[0].placeholder = VersionNamingNLS.SelectAFile;
                                fileSelector.clear();
                
                                console.log(errorMsg);
                                console.log(e);
                                var msg = errorMsg;
                                if (!!e)
                                    msg += "<br/>" + e;
                                AlertUtility.message('error', msg);
                            }
                        );
                    };
                    reader.readAsText(file);
                });

                var downloadButton = new Button({ id:"downloadButton_", className:"default", value: VersionNamingNLS.DownloadButtonText, icon: 'download'})
                .inject(browseDiv);
                downloadButton.elements.container.style.marginTop = "5px";
                downloadButton.elements.container.style.marginLeft = "5px";
                downloadButton.elements.container.style.float = "right";
                downloadButton.addEvent('onClick', function(){ //Push content on server
                    VNEUtility.downloadRevisionSequencesPromise()
                    .then( (content) => {
                        var concatedcontent = that.concatSequences(content);
                        var hrefcontent = concatedcontent; //encodeURIComponent(concatedcontent);
                        return hrefcontent;
                    })
                    .then( (hrefcontent) => {
                        var element = document.createElement('a');
			            element.setAttribute('href', 'data:text/plain;charset=utf-8,' + hrefcontent);
			            element.setAttribute('download', "revisions.json");

			            element.style.display = 'none';
			            document.body.appendChild(element);

			            element.click();

			            document.body.removeChild(element);
                    })
                    .catch ( (e) => {
                        if (!e) e = VersionNamingNLS.DownloadFailedAlert;
                        AlertUtility.message('error', e);
                    });
                });
                
                /*var resetButton = new Button({ id:"resetButton_", className:"default", value: VersionNamingNLS.ResetButtonText, icon: 'reset'})
                .inject(browseDiv);
                resetButton.elements.container.style.marginTop = "5px";
                resetButton.elements.container.style.float = "right";
                resetButton.addEvent('onClick', function(){ //Push content on server
                    var jsonData = { "sequences": [ { "operator": "RESET" } ] };
                    VNEUtility.uploadRevisionSequencesPromise(jsonData)
                    .then( (jsonres) => {
                        if (!jsonres || jsonres.severity==="FATAL_ERROR") {
                            if (jsonres && !!jsonres.errorMessage)
                                AlertUtility.message('error', jsonres.errorMessage);
                            else
                                AlertUtility.message('error', VersionNamingNLS.ResetFailedAlert);
                        }
                        else {
                            AlertUtility.message('success', VersionNamingNLS.ResetSuccessAlert);
                        }
                        file = null;
                        fileSelector.elements.container.getChildren()[0].placeholder = VersionNamingNLS.SelectAFile;
                        fileSelector.clear();
                    })
                    .catch ( (e) => {
                        file = null;
                        fileSelector.elements.container.getChildren()[0].placeholder = VersionNamingNLS.SelectAFile;
                        fileSelector.clear();
                        if (!e) e = VersionNamingNLS.ResetFailedAlert;
                        AlertUtility.message('error', e);
                    });
                });*/
            },

            parseFileContent(content,onOk,onFailure) {
                var json = {};
                try {
                    json = JSON.parse(content);
                }
                catch(e) {
                    onFailure("Failed to parse file as json",e);
                    return;
                }

                if (!json) {
                    onFailure("Failed to read file");
                    return;
                }
                
                var error = "";
                if (!!error)
                    onFailure(error);
                else {
                    onOk(json);
                }
            },

            concatSequences(seqs) {
                var strres = "[";
                var firstone = true;
                seqs.forEach ( (seq) => {
                    if (!firstone) strres += ",";
                    firstone = false;
                    strres += JSON.stringify(seq);
                });
                strres += "]";
                return strres;
            },
  
            createHeader: function (parentElement) {
                var d = UWA.createElement('div', {
                    html: VersionNamingNLS.VersionNamingExtHeader
                }).inject(parentElement);
                d.style.marginBottom = "10px";

                //UWA.createElement("b").setContent(VersionNamingNLS.VersionNamingExt).inject(d);

		        var imgInfoSpan = UWA.createElement('span', {
			        'class': 'fonticon fonticon-info'
		        }).inject(d);
		        imgInfoSpan.setStyle("color", "black");
                imgInfoSpan.setStyle("padding-left","5px");

		        var popover = new Popover({
			        target: imgInfoSpan,
			        trigger: "hover",
			        animate: "true",
			        position: 'left',
			        body: VersionNamingNLS.VersionNamingExtTooltip,
			        title: ''
		        });
            },

            onCompleteRequestMapping : function(){
                Mask.unmask(this.contentDiv);
            },

            destroy: function() {
                this.stopListening();
                this._parent.apply(this, arguments);
            },            

        });
        return extendedView;
    });

define('DS/ParameterizationSkeleton/Views/PPRSynchronizationLifeCycle/PPRSynchroAddLineDialog',
	[
		'DS/UIKIT/Modal',
		'UWA/Core',
		'DS/UIKIT/Input/Toggle',
		'DS/UIKIT/Input/Select',
		'DS/UIKIT/Input/Text',
		'DS/UIKIT/Input/Number',
		'DS/UIKIT/Alert',
		'DS/UIKIT/Tooltip',
		'DS/UIKIT/Popover',
		'DS/WAFData/WAFData',
		'UWA/Controls/Accordion',
		'DS/UIKIT/Accordion',
		'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler',
		'DS/ParameterizationSkeleton/Views/PPRSynchronizationLifeCycle/PPRSynchroViewConstants',
		'i18n!DS/ParameterizationSkeleton/assets/nls/PPRSynchroLifeCycleNLS'
	],
	function (Modal,
		UWACore,
		Toggle,
		Select,
		Text,
		Number,
		Alert,
		Tooltip,
		Popover,
		WAFData,
		UWAccordion,
		Accordion,
		URLHandler,
		PPRSynchroViewConstants,
		PPRSynchroLifeCycleNLS) {

		'use strict';

		function _createModal(options) {
			var modal = new Modal({
				className: options.className || '',
				closable: true,
				header: '<h4>' + options.title + '</h4>',
				body: '',
				footer: ''
			});
			return modal;
		}

		function PPRSynchroAddLineModal(options) {
			this.options = {
				title: 'Dialog',
				className: '',
				withFooter: true
			};
			this.options = UWACore.extend(this.options, options);

			this.modal = _createModal(this.options);
			this.modal.inject(document.querySelector('#typeMainDiv'));
			if (this.options.withFooter) {
				this._bindFooterEvent();
			}

		}


		PPRSynchroAddLineModal.prototype.getDefaultFields = function (_formatContent, selectComboTypeOptions) {

		var that = this;


		var divTagForType = document.createElement('div');
		divTagForType.className = "formats";

		//label Type for ComboType
		var typelabelDiv = document.createElement('div');
		typelabelDiv.className = "formats-label";
		typelabelDiv.innerText = PPRSynchroLifeCycleNLS.Type;
	

		var typeComboBoxDiv = document.createElement('div');
		typeComboBoxDiv.className = "formats-tbox";

		//ComboBox type given as input argument
		this.typeCombobox = selectComboTypeOptions;
		this.typeCombobox.setId(PPRSynchroLifeCycleNLS.Type + "_comboBox");
		this.typeCombobox.inject(typeComboBoxDiv);
	
		divTagForType.appendChild(typelabelDiv);
		divTagForType.appendChild(typeComboBoxDiv);
		_formatContent.appendChild(divTagForType);

		//divTagSection1 will contain the 1st section on accordion (Life Cycle Rules)
		var divTagSection1 = document.createElement('div');

		//ComputedResultingProduct
		var divTagComputedResultingProduct = document.createElement('div');
		divTagComputedResultingProduct.className = "formats";

		var labelComputedResultingProduct = document.createElement('div');
		labelComputedResultingProduct.className = "formats-label";
		labelComputedResultingProduct.innerText = PPRSynchroLifeCycleNLS.ComputedResultingProduct;

		divTagComputedResultingProduct.appendChild(labelComputedResultingProduct);

		var imgInfoSpan = UWA.createElement('span', {
			'class': 'fonticon fonticon-info'
		}).inject(divTagComputedResultingProduct);

		imgInfoSpan.setStyle("color", "black");

		var PopoverComputedResultingProductDiv = new Popover({
			target: imgInfoSpan,
			trigger: "hover",
			animate: "true",
			position: 'top',
			body: PPRSynchroLifeCycleNLS.ComputedResultingProductTooltip,/*tooltip*/
			title: ''
		});

		//check resulting Product
		this.ComputedResultingProductSwitchToogle = new Toggle({
			type: 'switch',//value: 'option1',
			label: ''
		}).check().inject(divTagComputedResultingProduct);

		this._ComputedResultingProduct = false;

		this.ComputedResultingProductSwitchToogle.addEvent('onChange', function () {
			if (this.isChecked()) {
				this._ComputedResultingProduct = true;
			} else {
				this._ComputedResultingProduct = false;
			}
		});
		divTagSection1.appendChild(divTagComputedResultingProduct);

		//SPEC_DOC commented asked by Paul IR926203

		//SpecDoc
		//var divTagSpecDoc = document.createElement('div');
		//divTagSpecDoc.className = "formats";

			//SPEC_DOC commented asked by Paul IR926203
		//var labelSpecDoc = document.createElement('div');
		//labelSpecDoc.className = "formats-label";
		//labelSpecDoc.innerText = PPRSynchroLifeCycleNLS.SpecDoc;

		//divTagSpecDoc.appendChild(labelSpecDoc);

		//var imgInfoSpan = UWA.createElement('span', {
		//	'class': 'fonticon fonticon-info'
		//}).inject(divTagSpecDoc);

		//imgInfoSpan.setStyle("color", "black");



		//var PopoverSpecDocDiv = new Popover({
		//	target: imgInfoSpan,
		//	trigger: "hover",
		//	animate: "true",
		//	position: 'top',
		//	body: PPRSynchroLifeCycleNLS.SpecDocTooltip,/*tooltip*/
		//	title: ''
		//});
		
		//this.SpecDocSwitchToogle = new Toggle({
		//	type: 'switch',//value: 'option1',
		//	label: ''
		//}).uncheck().inject(divTagSpecDoc);

		//divTagSection1.appendChild(divTagSpecDoc);


		//ChildTransformationTypes

		var divTagChildTransformationTypes = document.createElement('div');
		divTagChildTransformationTypes.className = "formats";

		var labelChildTransformationTypes = document.createElement('div');
		labelChildTransformationTypes.className = "formats-label";
		labelChildTransformationTypes.innerText = PPRSynchroLifeCycleNLS.ChildTransformationTypes;

		divTagChildTransformationTypes.appendChild(labelChildTransformationTypes);

		var imgInfoSpan = UWA.createElement('span', {
			'class': 'fonticon fonticon-info'
		}).inject(divTagChildTransformationTypes);

		imgInfoSpan.setStyle("color", "black");

		var PopoverChildTransformationTypesDiv = new Popover({
			target: imgInfoSpan,
			trigger: "hover",
			animate: "true",
			position: 'top',
			body: PPRSynchroLifeCycleNLS.ChildTransformationTypesTooltip,/*tooltip*/
			title: ''
		});

		//check combo ChildTransformationTypes by default
		this.ChildTransformationTypesSwitchToogle = new Toggle({
			type: 'switch',//value: 'option1',
			label: ''
		}).check().inject(divTagChildTransformationTypes);


		//addAttributeMappingIcon.addEvent('click', that.ShowAddMappingAttributePanel.bind(that, VPMType, PartType, txtSide, typeMapping, attributesTable.getElement(".attrstbodyMapping")));
		divTagSection1.appendChild(divTagChildTransformationTypes);


		//divTagSection2 will contain the 2nd section on accordion (Commands Rules)
		var divTagSection2 = document.createElement('div');

		//NewRevision
		var divTagNewRevision = document.createElement('div');
		divTagNewRevision.className = "formats";

		var labelNewRevision = document.createElement('div');
		labelNewRevision.className = "formats-label";
		labelNewRevision.innerText = PPRSynchroLifeCycleNLS.NewRevision;

		divTagNewRevision.appendChild(labelNewRevision);

		var imgInfoSpan = UWA.createElement('span', {
			'class': 'fonticon fonticon-info'
		}).inject(divTagNewRevision);

		imgInfoSpan.setStyle("color", "black");

		var PopoverNewRevisionDiv = new Popover({
			target: imgInfoSpan,
			trigger: "hover",
			animate: "true",
			position: 'top',
			body: PPRSynchroLifeCycleNLS.NewRevisionTooltip,/*tooltip*/
			title: ''
		});

		this.NewRevisionSwitchToogle = new Toggle({
			type: 'switch',//value: 'option1',
			label: ''
		}).check().inject(divTagNewRevision);


		divTagSection2.appendChild(divTagNewRevision);

		//addAttributeMappingIcon.addEvent('click', that.ShowAddMappingAttributePanel.bind(that, VPMType, PartType, txtSide, typeMapping, attributesTable.getElement(".attrstbodyMapping")));
		divTagSection2.appendChild(divTagNewRevision);

		//New Branch
		var divTagNewBranch = document.createElement('div');
		divTagNewBranch.className = "formats";

		var labelNewBranch = document.createElement('div');
		labelNewBranch.className = "formats-label";
		labelNewBranch.innerText = PPRSynchroLifeCycleNLS.NewBranch;

		divTagNewBranch.appendChild(labelNewBranch);

		var imgInfoBranchSpan = UWA.createElement('span', {
			'class': 'fonticon fonticon-info'
		}).inject(divTagNewBranch);

		imgInfoBranchSpan.setStyle("color", "black");

		var PopoverNewBranchDiv = new Popover({
			target: imgInfoBranchSpan,
			trigger: "hover",
			animate: "true",
			position: 'top',
			body: PPRSynchroLifeCycleNLS.NewBranchTooltip,/*tooltip*/
			title: ''
		});

		this.NewBranchSwitchToogle = new Toggle({
			type: 'switch',//value: 'option1', 
			label: ''
		}).check().inject(divTagNewBranch);

		divTagSection2.appendChild(divTagNewBranch);


		//Duplicate
		var divTagDuplicate = document.createElement('div');
		divTagDuplicate.className = "formats";

		var labelDuplicate = document.createElement('div');
		labelDuplicate.className = "formats-label";
		labelDuplicate.innerText = PPRSynchroLifeCycleNLS.Duplicate;

		divTagDuplicate.appendChild(labelDuplicate);

		var imgInfoDuplicateSpan = UWA.createElement('span', {
			'class': 'fonticon fonticon-info'
		}).inject(divTagDuplicate);

		imgInfoDuplicateSpan.setStyle("color", "black");

		var PopoverDuplicateDiv = new Popover({
			target: imgInfoDuplicateSpan,
			trigger: "hover",
			animate: "true",
			position: 'top',
			body: PPRSynchroLifeCycleNLS.DuplicateTooltip,/*tooltip*/
			title: ''
		});

		this.DuplicateSwitchToogle = new Toggle({
			type: 'switch',//value: 'option1',
			label: ''
		}).uncheck().inject(divTagDuplicate);
		divTagSection2.appendChild(divTagDuplicate);

		//Delete
		var divTagDelete = document.createElement('div');
		divTagDelete.className = "formats";

		var labelDelete = document.createElement('div');
		labelDelete.className = "formats-label";
		labelDelete.innerText = PPRSynchroLifeCycleNLS.Delete;

		divTagDelete.appendChild(labelDelete);

		 var imgInfoDeleteSpan = UWA.createElement('span', {
			'class': 'fonticon fonticon-info'
		}).inject(divTagDelete);

		imgInfoDeleteSpan.setStyle("color", "black");

		var PopoverDeleteDiv = new Popover({
			target: imgInfoDeleteSpan,
			trigger: "hover",
			animate: "true",
			position: 'top',
			body: PPRSynchroLifeCycleNLS.DeleteTooltip,/*tooltip*/
			title: ''
		});

		this.DeleteSwitchToogle = new Toggle({
			type: 'switch',//value: 'option1',
			label: ''
		}).uncheck().inject(divTagDelete);
		divTagSection2.appendChild(divTagDelete);

		//TransferOwnership
		var divTagTransferOwnership = document.createElement('div');
		divTagTransferOwnership.className = "formats";

		var labelTransferOwnership = document.createElement('div');
		labelTransferOwnership.className = "formats-label";
		labelTransferOwnership.innerText = PPRSynchroLifeCycleNLS.TransferOwnership;

		divTagTransferOwnership.appendChild(labelTransferOwnership);

		var imgInfoTransferOwnershipSpan = UWA.createElement('span', {
			'class': 'fonticon fonticon-info'
		}).inject(divTagTransferOwnership);

		imgInfoTransferOwnershipSpan.setStyle("color", "black");

		var PopoverTransferOwnershipDiv = new Popover({
			target: imgInfoTransferOwnershipSpan,
			trigger: "hover",
			animate: "true",
			position: 'top',
			body: PPRSynchroLifeCycleNLS.TransferOwnershipTooltip,/*tooltip*/
			title: ''
		});

		this.TransferOwnershipSwitchToogle = new Toggle({
			type: 'switch',//value: 'option1',
			label: ''
		}).uncheck().inject(divTagTransferOwnership);

		divTagSection2.appendChild(divTagTransferOwnership);

		//ChangeMaturity
		var divTagChangeMaturity = document.createElement('div');
		divTagChangeMaturity.className = "formats";

		var labelChangeMaturity = document.createElement('div');
		labelChangeMaturity.className = "formats-label";
		labelChangeMaturity.innerText = PPRSynchroLifeCycleNLS.ChangeMaturity;

		divTagChangeMaturity.appendChild(labelChangeMaturity);

		var imgInfoChangeMaturitySpan = UWA.createElement('span', {
				'class': 'fonticon fonticon-info'
			}).inject(divTagChangeMaturity);

		imgInfoChangeMaturitySpan.setStyle("color", "black");

		var PopoverChangeMaturityDiv = new Popover({
			target: imgInfoChangeMaturitySpan,
			trigger: "hover",
			animate: "true",
			position: 'top',
			body: PPRSynchroLifeCycleNLS.ChangeMaturityTooltip,/*tooltip*/
			title: ''
		});

		this.ChangeMaturitySwitchToogle = new Toggle({
			type: 'switch',//value: 'option1',
			label: ''
		}).uncheck().inject(divTagChangeMaturity);

		divTagSection2.appendChild(divTagChangeMaturity);


		//Lock
		var divTagLock = document.createElement('div');
		divTagLock.className = "formats";

		var labelLock = document.createElement('div');
		labelLock.className = "formats-label";
		labelLock.innerText = PPRSynchroLifeCycleNLS.Lock;

		divTagLock.appendChild(labelLock);

		var imgInfoLockSpan = UWA.createElement('span', {
				'class': 'fonticon fonticon-info'
			}).inject(divTagLock);

		imgInfoLockSpan.setStyle("color", "black");

		var PopoverLockDiv = new Popover({
				target: imgInfoLockSpan,
				trigger: "hover",
				animate: "true",
				position: 'top',
				body: PPRSynchroLifeCycleNLS.LockTooltip,/*tooltip*/
				title: ''
		});

		this.LockSwitchToogle = new Toggle({
				type: 'switch',//value: 'option1',
				label: ''
		}).uncheck().inject(divTagLock);

		divTagSection2.appendChild(divTagLock);

		//ChangeControl
		var divTagChangeControl = document.createElement('div');
		divTagChangeControl.className = "formats";

		var labelChangeControl = document.createElement('div');
		labelChangeControl.className = "formats-label";
		labelChangeControl.innerText = PPRSynchroLifeCycleNLS.ChangeControl;

		divTagChangeControl.appendChild(labelChangeControl);

		var imgInfoChangeControlSpan = UWA.createElement('span', {
			'class': 'fonticon fonticon-info'
		}).inject(divTagChangeControl);

		imgInfoChangeControlSpan.setStyle("color", "black");

		var PopoverChangeControlDiv = new Popover({
			target: imgInfoChangeControlSpan,
			trigger: "hover",
			animate: "true",
			position: 'top',
			body: PPRSynchroLifeCycleNLS.ChangeControlTooltip,/*tooltip*/
			title: ''
		});

		this.ChangeControlSwitchToogle = new Toggle({
			type: 'switch',//value: 'option1',
			label: ''
		}).uncheck().inject(divTagChangeControl);

		divTagSection2.appendChild(divTagChangeControl);

		//Transfer
		var divTagTransfer = document.createElement('div');
		divTagTransfer.className = "formats";

		var labelTransfer = document.createElement('div');
		labelTransfer.className = "formats-label";
		labelTransfer.innerText = PPRSynchroLifeCycleNLS.Transfer;

		divTagTransfer.appendChild(labelTransfer);

		var imgInfoTransferSpan = UWA.createElement('span', {
				'class': 'fonticon fonticon-info'
		}).inject(divTagTransfer);

		imgInfoTransferSpan.setStyle("color", "black");

		var PopoverTransferDiv = new Popover({
			target: imgInfoTransferSpan,
			trigger: "hover",
			animate: "true",
			position: 'top',
			body: PPRSynchroLifeCycleNLS.TransferTooltip,/*tooltip*/
			title: ''
		});

		this.TransferSwitchToogle = new Toggle({
			type: 'switch',//value: 'option1',
			label: ''
		}).uncheck().inject(divTagTransfer);

		divTagSection2.appendChild(divTagTransfer);


		//Share
		var divTagShare = document.createElement('div');
		divTagShare.className = "formats";
		var labelShare = document.createElement('div');
		labelShare.className = "formats-label";
		labelShare.innerText = PPRSynchroLifeCycleNLS.Share;

		divTagShare.appendChild(labelShare);

		var imgInfoShareSpan = UWA.createElement('span', {
			'class': 'fonticon fonticon-info'
		}).inject(divTagShare);

		imgInfoShareSpan.setStyle("color", "black");

		var PopoverShareDiv = new Popover({
			target: imgInfoShareSpan,
			trigger: "hover",
			animate: "true",
			position: 'top',
			body: PPRSynchroLifeCycleNLS.ShareTooltip,/*tooltip*/
			title: ''
		});

		this.ShareSwitchToogle = new Toggle({
			type: 'switch',//value: 'option1',
			label: ''
		}).uncheck().inject(divTagShare);

		divTagSection2.appendChild(divTagShare);

		var accordionDiv = UWA.createElement('div', {
			'class': 'accordion1bodydiv',
		})

		/////create accordion Section 1 : LifeCycleRules + Section 2 Commands Rules
		var accordionSections = new Accordion({
			className: 'styled divided filled',
			exclusive: false,
			items: [{
				title: PPRSynchroLifeCycleNLS.LifeCycleRulesTitle,
				content: divTagSection1,
				selected: true,
			},
			{
				title: PPRSynchroLifeCycleNLS.CommandsRulesTitle,
				content: divTagSection2,
				selected: true,
			}]
		}).inject(accordionDiv);

		//Add accordion to dialog
		_formatContent.appendChild(accordionDiv);

	};


	PPRSynchroAddLineModal.prototype.getModalBody = function (selectComboTypeOptions) {

		var partNumberContent = this.modal.elements.body;

		var _errorsMessageDiv = UWACore.createElement('div');
		_errorsMessageDiv.className = "ppr-lifecycling-rules-error-content";

		var _formatContent = UWACore.createElement('div');
		_formatContent.className = "ppr-lifecycling-rules-content";

		var _staticFormatContent = UWACore.createElement('div');
		_staticFormatContent.className = "ppr-lifecycling-rules-static-content";
		var _dynamicFormatContent = UWACore.createElement('div');
		_dynamicFormatContent.className = "ppr-lifecycling-rules-dynamic-content";

		_formatContent.appendChild(_staticFormatContent);
		_formatContent.appendChild(_dynamicFormatContent);
		this.getDefaultFields(_staticFormatContent, selectComboTypeOptions);

		partNumberContent.appendChild(_errorsMessageDiv);
		partNumberContent.appendChild(_formatContent);
		partNumberContent.appendChild(_dynamicFormatContent);
		return partNumberContent;
	};


	//To check that at least one type has been selected
		PPRSynchroAddLineModal.prototype.typeSelectionNotValid = function () {
		var isNull = false;
		var userEnteredFormat = this.typeCombobox.getValue()[0];
		if (userEnteredFormat == '' || userEnteredFormat == "")
				isNull = true;
		return isNull;
	};

	//To check that at least one dependant has been selected
		PPRSynchroAddLineModal.prototype.lifeCycleRulesSelectionNotValid = function () {
			var isNull = false;
			var computedResultingProductToggleValue = this.ComputedResultingProductSwitchToogle ? this.ComputedResultingProductSwitchToogle.isChecked() : false;
			//SPEC_DOC commented asked by Paul IR926203
			//var specDocToggleValue = this.SpecDocSwitchToogle ? this.SpecDocSwitchToogle.isChecked() : false;
			var childTransformationsTypeToggleValue = this.ChildTransformationTypesSwitchToogle ? this.ChildTransformationTypesSwitchToogle.isChecked() : false;
			if (!computedResultingProductToggleValue /*&& !specDocToggleValue*/ && !childTransformationsTypeToggleValue)
				isNull = true;
			return isNull;
		};

		//To check that at least one command has been selected
		PPRSynchroAddLineModal.prototype.commandSelectionNotValid = function () {
			var isNull = false;
			var newRevisionToggleValue = this.NewRevisionSwitchToogle ? this.NewRevisionSwitchToogle.isChecked() : false;
			var newBranchToggleValue = this.NewBranchSwitchToogle ? this.NewBranchSwitchToogle.isChecked() : false;
			var duplicateToggleValue = this.DuplicateSwitchToogle ? this.DuplicateSwitchToogle.isChecked() : false;
			var deletionToggleValue = this.DeleteSwitchToogle ? this.DeleteSwitchToogle.isChecked() : false;
			var transferOnwershipToggleValue = this.TransferOwnershipSwitchToogle ? this.TransferOwnershipSwitchToogle.isChecked() : false;
			var changeMaturityToggleValue = this.ChangeMaturitySwitchToogle ? this.ChangeMaturitySwitchToogle.isChecked() : false;
			var lockToggleValue = this.LockSwitchToogle ? this.LockSwitchToogle.isChecked() : false;
			var changeControlToggleValue = this.ChangeControlSwitchToogle ? this.ChangeControlSwitchToogle.isChecked() : false;
			var transferToggleValue = this.TransferSwitchToogle ? this.TransferSwitchToogle.isChecked() : false;
			var shareToggleValue = this.ShareSwitchToogle ? this.ShareSwitchToogle.isChecked() : false;

			if (!newRevisionToggleValue && !newBranchToggleValue && !duplicateToggleValue
				&& !deletionToggleValue && !transferOnwershipToggleValue && !changeMaturityToggleValue
				&& !lockToggleValue && !changeControlToggleValue && !transferToggleValue && !shareToggleValue)
				isNull = true;
			return isNull;
		};

	PPRSynchroAddLineModal.prototype.displayAlertMessage = function (messageToDisplay, toDisplayOver) {
		var alertOptions = {
			visible: true,
			className: 'param-alert',
			messageClassName: 'error',
			closable: true,
			renderTo: toDisplayOver,
			autoHide: true,
			hideDelay: 2000
		};
		var alert = this.getAlertComponent(alertOptions);

		alert.add({
			message: messageToDisplay
		});

	};

	PPRSynchroAddLineModal.prototype.getUserEnteredValues = function () {

		var userEnteredFormatValues = {};

		var typelist = this.typeCombobox.getValue();


		userEnteredFormatValues[PPRSynchroViewConstants.TYPE] = typelist;

		var computedResultingProductToggleValue = this.ComputedResultingProductSwitchToogle ? this.ComputedResultingProductSwitchToogle.isChecked() : false;
		//SPEC_DOC commented asked by Paul IR926203
		//var specDocToggleValue = this.SpecDocSwitchToogle ? this.SpecDocSwitchToogle.isChecked() : false;
		var childTransfomrationsTypeToggleValue = this.ChildTransformationTypesSwitchToogle ? this.ChildTransformationTypesSwitchToogle.isChecked() : false;

		var newRevisionToggleValue = this.NewRevisionSwitchToogle ? this.NewRevisionSwitchToogle.isChecked() : false;
		var newBranchToggleValue = this.NewBranchSwitchToogle ? this.NewBranchSwitchToogle.isChecked() : false;
		var duplicateToggleValue = this.DuplicateSwitchToogle ? this.DuplicateSwitchToogle.isChecked() : false;
		var deletionToggleValue = this.DeleteSwitchToogle ? this.DeleteSwitchToogle.isChecked() : false;
		var transferOnwershipToggleValue = this.TransferOwnershipSwitchToogle ? this.TransferOwnershipSwitchToogle.isChecked() : false;
		var changeMaturityToggleValue = this.ChangeMaturitySwitchToogle ? this.ChangeMaturitySwitchToogle.isChecked() : false;
		var lockToggleValue = this.LockSwitchToogle ? this.LockSwitchToogle.isChecked() : false;
		var ChangeControlToggleValue = this.ChangeControlSwitchToogle ? this.ChangeControlSwitchToogle.isChecked() : false;
		var transferToggleValue = this.TransferSwitchToogle ? this.TransferSwitchToogle.isChecked() : false;
		var shareToggleValue = this.ShareSwitchToogle ? this.ShareSwitchToogle.isChecked() : false;


		userEnteredFormatValues[PPRSynchroViewConstants.COMPUTED_RESULTING_PRODUCT] = computedResultingProductToggleValue;
		//SPEC_DOC commented asked by Paul IR926203
		//userEnteredFormatValues[PPRSynchroViewConstants.SPEC_DOC] = specDocToggleValue;
		userEnteredFormatValues[PPRSynchroViewConstants.CHILD_TRANSFORMATION_TYPES] = childTransfomrationsTypeToggleValue;

		userEnteredFormatValues[PPRSynchroViewConstants.NEW_REVISION] = newRevisionToggleValue;
		userEnteredFormatValues[PPRSynchroViewConstants.NEW_BRANCH] = newBranchToggleValue;
		userEnteredFormatValues[PPRSynchroViewConstants.DUPLICATE] = duplicateToggleValue;
		userEnteredFormatValues[PPRSynchroViewConstants.DELETE] = deletionToggleValue;
		userEnteredFormatValues[PPRSynchroViewConstants.TRANSFER_OWNERSHIP] = transferOnwershipToggleValue;
		userEnteredFormatValues[PPRSynchroViewConstants.CHANGE_MATURIY] = changeMaturityToggleValue;

		userEnteredFormatValues[PPRSynchroViewConstants.LOCK] = lockToggleValue;
		userEnteredFormatValues[PPRSynchroViewConstants.CHANGE_CONTROL] = ChangeControlToggleValue;
		userEnteredFormatValues[PPRSynchroViewConstants.TRANSFER] = transferToggleValue;
		userEnteredFormatValues[PPRSynchroViewConstants.SHARE] = shareToggleValue;

		return userEnteredFormatValues;
	};

	PPRSynchroAddLineModal.prototype.getTotalFormatRows = function () {
		return document.querySelectorAll(".PPRLifeCycleRulesMapping").length;
	};

	PPRSynchroAddLineModal.prototype.storeAttributes = function (data) {
		this.attributes = data;
	};

	PPRSynchroAddLineModal.prototype.getAlertComponent = function (alertOptions) {

		this.alert = new Alert(alertOptions);
		return this.alert;
	};

	PPRSynchroAddLineModal.prototype.getTooltip = function (tooltipOtions) {
		this.tooltip = new Tooltip(tooltipOtions);
		return this.tooltip;
	};

	PPRSynchroAddLineModal.prototype.show = function () {
		this.modal.show();
	};


	PPRSynchroAddLineModal.prototype._bindFooterEvent = function () {
		var that = this;

		this.modal.getFooter().getElements('.btn').forEach(function (element) {
			if (element.name === 'cancelButton') {
				element.addEvent('click', function () {
					that.modal.hide();
				});
			}
		});

	};

	PPRSynchroAddLineModal.prototype.getContent = function () {
		return this.modal.getContent();
	};

	PPRSynchroAddLineModal.prototype.destroy = function () {
		this.modal.destroy();
		var keys = Object.keys(this);
		for (var i = 0; i < keys.length; i++) {
			this[keys[i]] = undefined;
		}
	};

	PPRSynchroAddLineModal.prototype.setEditValueFields = function (fetchedData) {
		//Type
		this.typeCombobox.select(fetchedData.Type, true);
		//in edition mode Type cannot be modified
		this.typeCombobox.disable();

		this.ComputedResultingProductSwitchToogle.setCheck(fetchedData[PPRSynchroViewConstants.COMPUTED_RESULTING_PRODUCT]);
		//SPEC_DOC commented asked by Paul IR926203
		//this.SpecDocSwitchToogle.setCheck(fetchedData[PPRSynchroViewConstants.SPEC_DOC]);
		this.ChildTransformationTypesSwitchToogle.setCheck(fetchedData[PPRSynchroViewConstants.CHILD_TRANSFORMATION_TYPES]);

		this.NewRevisionSwitchToogle.setCheck(fetchedData[PPRSynchroViewConstants.NEW_REVISION]);
		this.NewBranchSwitchToogle.setCheck(fetchedData[PPRSynchroViewConstants.NEW_BRANCH]);
		this.DuplicateSwitchToogle.setCheck(fetchedData[PPRSynchroViewConstants.DELETE]);
		this.DeleteSwitchToogle.setCheck(fetchedData[PPRSynchroViewConstants.DUPLICATE]);
		this.TransferOwnershipSwitchToogle.setCheck(fetchedData[PPRSynchroViewConstants.TRANSFER_OWNERSHIP]);
		this.ChangeMaturitySwitchToogle.setCheck(fetchedData[PPRSynchroViewConstants.CHANGE_MATURIY]);

		this.LockSwitchToogle.setCheck(fetchedData[PPRSynchroViewConstants.LOCK]);
		this.ChangeControlSwitchToogle.setCheck(fetchedData[PPRSynchroViewConstants.CHANGE_CONTROL]);
		this.TransferSwitchToogle.setCheck(fetchedData[PPRSynchroViewConstants.TRANSFER]);
		this.ShareSwitchToogle.setCheck(fetchedData[PPRSynchroViewConstants.SHARE]);

	};

	return PPRSynchroAddLineModal;
});

define('DS/ParameterizationSkeleton/Views/ParameterizationXEngineering/XENGModal',
	[
		'DS/UIKIT/Modal',
		'UWA/Core',
		'DS/UIKIT/Input/Toggle',
		'DS/UIKIT/Input/Select',
		'DS/UIKIT/Input/Text',
		'DS/UIKIT/Input/Number',
		'DS/UIKIT/Alert',
		'DS/UIKIT/Tooltip',
		'DS/WAFData/WAFData',
		'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler',
		'DS/ParameterizationSkeleton/Views/ParameterizationXEngineering/ParameterizationXEngineerConstants',
		'i18n!DS/ParameterizationSkeleton/assets/nls/XEngineeringNLS'
	],
	function (Modal,
		UWACore,
		Toggle,
		Select,
		Text,
		Number,
		Alert,
		Tooltip,
		WAFData,
		URLHandler,
		ParameterizationXEngineerConstants,
		XEngineeringNLS) {

	'use strict';

	function _createModal(options) {
		var modal = new Modal({
				className: options.className || '',
				closable: true,
				header: '<h4>' + options.title + '</h4>',
				body: '',
				footer: ''
			});
		return modal;
	}

	function XEngineerModal(options) {
		this.options = {
			title: 'Dialog',
			className: '',
			withFooter: true
		};
		this.options = UWACore.extend(this.options, options);

		this.modal = _createModal(this.options);
		this.modal.inject(document.querySelector('#typeMainDiv'));
		if (this.options.withFooter) {
			this._bindFooterEvent();
		}

	}

	XEngineerModal.prototype.getPartNumberFormat = function () {

		var _formatContent = this.modal.getContent().getElement('.enox-part-number-content');
		var that = this;

		if (this.partNumberTypeCombobox.getValue()[0] == ParameterizationXEngineerConstants.FORMAT_FREE) {
			var _dynamicFormatContent = this.modal.getContent().getElement('.enox-part-number-dynamic-content');
			_dynamicFormatContent.empty();
			that.destroyValueFieldComponents();
		} else if (this.partNumberTypeCombobox.getValue()[0] == ParameterizationXEngineerConstants.FORMAT_STRING) {
			that.destroyValueFieldComponents();
			that.getValueField(_formatContent);
		} else if (this.partNumberTypeCombobox.getValue()[0] == ParameterizationXEngineerConstants.FORMAT_ATTRIBUTE) {
			that.destroyValueFieldComponents();
			that.getDynamicFields(_formatContent, this.partNumberTypeCombobox.getValue()[0]);
		} else if (this.partNumberTypeCombobox.getValue()[0] == ParameterizationXEngineerConstants.FORMAT_COUNTER) {
			that.destroyValueFieldComponents();
			that.getDynamicFields(_formatContent, this.partNumberTypeCombobox.getValue()[0]);
		}
	};

	XEngineerModal.prototype.getDefaultFields = function (_formatContent) {

		var that = this;

		var divTag = document.createElement('div');
		divTag.className = "formats";

		var labelDiv = document.createElement('div');
		labelDiv.className = "formats-label";
		labelDiv.innerText = XEngineeringNLS.name; //formats[i];

		var textBoxDiv = document.createElement('div');
		textBoxDiv.className = "formats-tbox";
		var textOptions = {
			events: {
				//  onChange: that.validateEnteredNameValue.bind(that)
			}
		};

		this.nameTextBox = this.getTextBox(textOptions);
		this.nameTextBox.domId = XEngineeringNLS.name + "_textBox";
		this.nameTextBox.inject(textBoxDiv);

		divTag.appendChild(labelDiv);
		divTag.appendChild(textBoxDiv);

		_formatContent.appendChild(divTag);

		var divTagForNbrBox = document.createElement('div');
		divTagForNbrBox.className = "formats";

		var labelDivForNbrBox = document.createElement('div');
		labelDivForNbrBox.className = "formats-label";
		labelDivForNbrBox.innerText = XEngineeringNLS.order; //formats[i];

		var textBoxDivForNbrBox = document.createElement('div');
		textBoxDivForNbrBox.className = "formats-tbox";

		var numberOptions = {
			min: 1,
			max: ParameterizationXEngineerConstants.MAX_ROWS,

			value: this.getHighestOrder() + 1,
			events: {}
		};

		this.numberOrderBox = this.getNumberBox(numberOptions);
		this.numberOrderBox.domId = XEngineeringNLS.order + "_textBox";
		this.numberOrderBox.inject(textBoxDivForNbrBox);




		divTagForNbrBox.appendChild(labelDivForNbrBox);
		divTagForNbrBox.appendChild(textBoxDivForNbrBox);

		_formatContent.appendChild(divTagForNbrBox);

		var divTagForType = document.createElement('div');
		divTagForType.className = "formats";

		var typelabelDiv = document.createElement('div');
		typelabelDiv.className = "formats-label";
		typelabelDiv.innerText = XEngineeringNLS.type;

		var typeComboBoxDiv = document.createElement('div');
		typeComboBoxDiv.className = "formats-tbox";

		var selectOptions = {
				custom: false,
				placeholder: XEngineeringNLS.selectType,
				options: [{
						label: XEngineeringNLS.String,
						value: ParameterizationXEngineerConstants.FORMAT_STRING
					}, {
						label: XEngineeringNLS.Free,
						value: ParameterizationXEngineerConstants.FORMAT_FREE
					}, {
						label: XEngineeringNLS.Attribute,
						value: ParameterizationXEngineerConstants.FORMAT_ATTRIBUTE
					}, {
						label: XEngineeringNLS.Counter,
						value: ParameterizationXEngineerConstants.FORMAT_COUNTER
					}

				],
				events: {
					onChange: that.getPartNumberFormat.bind(that)
				}
			};

		this.partNumberTypeCombobox = this.getSelectComponent(selectOptions);
		this.partNumberTypeCombobox.setId(XEngineeringNLS.type + "_comboBox");
		this.partNumberTypeCombobox.inject(typeComboBoxDiv);

		divTagForType.appendChild(typelabelDiv);
		divTagForType.appendChild(typeComboBoxDiv);
		_formatContent.appendChild(divTagForType);

	};

	XEngineerModal.prototype.getDynamicFields = function (_formatContent, format) {
		var that = this;

		var _dynamicFormatContent = this.modal.getContent().getElement('.enox-part-number-dynamic-content');
		_dynamicFormatContent.empty();

		if (format == ParameterizationXEngineerConstants.FORMAT_ATTRIBUTE) {
			that.getAttributeFormat(_formatContent, _dynamicFormatContent);

		} else if (format == ParameterizationXEngineerConstants.FORMAT_COUNTER) {
			this.getCounterFormat(_formatContent, _dynamicFormatContent);
		}

	};
	XEngineerModal.prototype.getAttributeFormat = function (_formatContent, _dynamicFormatContent) {
		var that = this;
		var formatField = XEngineeringNLS.attribute;

		var divTag = document.createElement('div');
		divTag.className = "formats";

		var labelDiv = document.createElement('div');
		labelDiv.className = "formats-label";
		labelDiv.innerText = formatField;

		var comboBoxDiv = document.createElement('div');
		comboBoxDiv.className = "formats-tbox";
		var allAttributes = [];

		if (typeof this.attributes.message === "undefined") {
			for (var key in this.attributes) {
				var attributes1 = {};

				attributes1["label"] = this.attributes[key]
				attributes1["value"] = key

				allAttributes.push(attributes1);
			}
		}

		var selectOptions = {
			custom: false,
			placeholder: XEngineeringNLS.selectAttribute,
			options: allAttributes
		};

		this.partNumberAttributeCombobox = this.getSelectComponent(selectOptions);

		this.partNumberAttributeCombobox.setId(formatField + "_comboBox");
		this.partNumberAttributeCombobox.inject(comboBoxDiv);

		divTag.appendChild(labelDiv);
		divTag.appendChild(comboBoxDiv);

		var formatFieldValue = XEngineeringNLS.defaultValue;
			var divTagForValue = document.createElement('div');
		divTagForValue.className = "formats";

		var labelDivForValue = document.createElement('div');
		labelDivForValue.className = "formats-label";
		labelDivForValue.innerText = formatFieldValue;

		var textBoxDivForValue = document.createElement('div');
		textBoxDivForValue.className = "formats-tbox";
		this.valueDynTextBox = this.getTextBox();
		this.valueDynTextBox.domId = formatFieldValue + "_textBox";
		this.valueDynTextBox.inject(textBoxDivForValue);

		this.counterCheckbox = new Toggle({ type: "checkbox", label: XEngineeringNLS.newCounter});
		var newCounterDiv = document.createElement('div');
		newCounterDiv.className = "new-counter";
		this.counterCheckbox.inject(newCounterDiv);
		this.updateHighestCounterCheckbox = new Toggle({ type: "checkbox", label: XEngineeringNLS.updateHighestCounter});
		this.updateHighestCounterCheckbox.setCheck(true);
		var updateCounterDiv = document.createElement('div');
		updateCounterDiv.className = "update-highest-counter";
		this.updateHighestCounterCheckbox.inject(updateCounterDiv);
		var updateCounterCheckboxDiv = document.createElement('span');
		updateCounterCheckboxDiv.className = "update-highest-counter-checkbox";
		this.updateHighestCounterCheckbox.inject(updateCounterCheckboxDiv);
		var updateCounterInfoDiv = document.createElement('span');
		updateCounterInfoDiv.className = "update-highest-counter-info fonticon fonticon-info";
		this.getInformation(updateCounterInfoDiv, XEngineeringNLS.updateHighestCounterTooltip);
		updateCounterDiv.hidden = true
		this.counterCheckbox.onChange = function(e){
			if(that.options[ParameterizationXEngineerConstants.AVOID_DUP_COUNTER] == ParameterizationXEngineerConstants.AVOID_DUP_COUNTER_VALUE){
				updateCounterDiv.hidden = false;
			}
		}
		updateCounterDiv.appendChild(updateCounterCheckboxDiv);
		updateCounterDiv.appendChild(updateCounterInfoDiv);
		divTagForValue.appendChild(labelDivForValue);
		divTagForValue.appendChild(textBoxDivForValue);

		_dynamicFormatContent.appendChild(divTag);
		_dynamicFormatContent.appendChild(divTagForValue);
		_dynamicFormatContent.appendChild(newCounterDiv);
		_dynamicFormatContent.appendChild(updateCounterDiv);
		_formatContent.appendChild(_dynamicFormatContent);

	};

	XEngineerModal.prototype.getCounterFormat = function (_formatContent, _dynamicFormatContent) {
		var that = this;
		var divTagForNbrBox = document.createElement('div');
		divTagForNbrBox.className = "formats";

		var labelDivForNbrBox = document.createElement('div');
		labelDivForNbrBox.className = "formats-label";

		var divForLabel = document.createElement('div');
		divForLabel.className = 'label-counter';

		var labelText = document.createElement('div');
		labelText.className = 'label-text';
		labelText.innerText = XEngineeringNLS.digits;

		var informationDiv = document.createElement('div');
		informationDiv.className = "fonticon fonticon-attention";
		informationDiv.id = "information";
		informationDiv.style.color = "black";

		divForLabel.appendChild(labelText);
		divForLabel.appendChild(informationDiv);

		labelDivForNbrBox.appendChild(divForLabel);

		var textBoxDivForNbrBox = document.createElement('div');
		textBoxDivForNbrBox.className = "formats-tbox";

		var numberOptions = {
			min: 1,
			max: ParameterizationXEngineerConstants.MAX_ROWS /*Number.MAX_SAFE_INTEGER*/,
			step: 1,
			value: 6,
			events: {
				onChange: that.updateSampleText.bind(that)
			}
		};

		this.counterNumberBox = this.getNumberBox(numberOptions);
		this.counterNumberBox.domId = XEngineeringNLS.digits + "_textBox";
		this.counterNumberBox.inject(textBoxDivForNbrBox);

		divTagForNbrBox.appendChild(labelDivForNbrBox);
		divTagForNbrBox.appendChild(textBoxDivForNbrBox);

		_dynamicFormatContent.appendChild(divTagForNbrBox);

		var formatField = XEngineeringNLS.sample;

		var divTag = document.createElement('div');
		divTag.className = "formats-sample";

		var labelDiv = document.createElement('div');
		labelDiv.className = "formats-sample-label";
		//labelDiv.innerText = formatField;


		var sampleTextLabelSpan = document.createElement('span');
		sampleTextLabelSpan.id = "sampleTextLabel";
		sampleTextLabelSpan.innerText = formatField  +" : "  ;

		var sampleTextValueSpan = document.createElement('span');
		sampleTextValueSpan.id = "sampleValue";

		var textBoxDiv = document.createElement('div');
		textBoxDiv.className = "formats-sample-value";

		textBoxDiv.appendChild(sampleTextLabelSpan);
		textBoxDiv.appendChild(sampleTextValueSpan);
		//textBoxDiv.id = "sampleValue";

		divTag.appendChild(labelDiv);
		divTag.appendChild(textBoxDiv);

		_dynamicFormatContent.appendChild(divTag);
		_formatContent.appendChild(_dynamicFormatContent);

		this.updateSampleText(); // sets the number of digits value

		this.modal.getContent().getElement('#information').addEvent('mouseover', function () {
			that.getInformation(that.modal.getContent().getElement("#information"), XEngineeringNLS.counterTooltip);
		});

		// this.modal.getContent().getElement('#sampleValue').addEvent('mouseover', function () {
		//   that.getInformation(that.modal.getContent().getElement("#sampleValue"), event.currentTarget.getText());
		//
		// })


		// this.modal.getContent().getElement('#sampleValue').addEventListener('mouseout', function () {
		// 	//that.getInformation(that.modal.getContent().getElement("#sampleValue"), event.currentTarget.getText());
		// 	console.log(that);
		// 	that.tooltip.elements.body.empty()
		//
		// })


	};

	XEngineerModal.prototype.getInformation = function (targetElement, toDisplayOver) {

		var tooltipOtions = {
			target: targetElement,
			body: toDisplayOver
		};
		this.getTooltip(tooltipOtions);

	};

	XEngineerModal.prototype.getValueField = function (_formatContent) {

		var _dynamicFormatContent = this.modal.getContent().getElement('.enox-part-number-dynamic-content');

		_dynamicFormatContent.empty();

		var formatField = XEngineeringNLS.value;

		var divTag = document.createElement('div');
		divTag.className = "formats";

		var labelDiv = document.createElement('div');
		labelDiv.className = "formats-label";
		labelDiv.innerText = formatField;

		var textBoxDiv = document.createElement('div');
		textBoxDiv.className = "formats-tbox";
		this.valueTextBox = this.getTextBox();
		this.valueTextBox.domId = formatField + "_textBox";
		this.valueTextBox.inject(textBoxDiv);

		divTag.appendChild(labelDiv);
		divTag.appendChild(textBoxDiv);

		_dynamicFormatContent.appendChild(divTag);
		_formatContent.appendChild(_dynamicFormatContent);

	};

	XEngineerModal.prototype.getModalBody = function () {

		var partNumberContent = this.modal.elements.body;

		var _errorsMessageDiv = UWACore.createElement('div');
		_errorsMessageDiv.className = "enox-part-number-error-content";

		var _formatContent = UWACore.createElement('div');
		_formatContent.className = "enox-part-number-content";

		var _staticFormatContent = UWACore.createElement('div');
		_staticFormatContent.className = "enox-part-number-static-content";
		var _dynamicFormatContent = UWACore.createElement('div');
		_dynamicFormatContent.className = "enox-part-number-dynamic-content";

		_formatContent.appendChild(_staticFormatContent);
		_formatContent.appendChild(_dynamicFormatContent);
		this.getDefaultFields(_staticFormatContent);

		partNumberContent.appendChild(_errorsMessageDiv);
		partNumberContent.appendChild(_formatContent);
		partNumberContent.appendChild(_dynamicFormatContent);
		return partNumberContent;
	};

	XEngineerModal.prototype.validateEnteredNameValue = function (operation, editingField) {

		var duplicateData = {};
		duplicateData.isValid = true;
		var userEnteredFormat = this.nameTextBox.getValue();
		var isSuccess = this.validateEnteredValues(userEnteredFormat, XEngineeringNLS.name, operation, editingField);

		if (!isSuccess) {
			duplicateData.isValid = false;
		}
		duplicateData.data = userEnteredFormat;
		return duplicateData;
	};

	XEngineerModal.prototype.validateEnteredOrderValue = function (operation, editingField) {

		var duplicateData = {};
		duplicateData.isValid = true;

		var userEnteredFormat = this.numberOrderBox.getValue();
		var isSuccess = this.validateEnteredValues(userEnteredFormat, XEngineeringNLS.order, operation, editingField);

		if (!isSuccess) {

			duplicateData.isValid = false;
		}

		duplicateData.data = userEnteredFormat;
		return duplicateData;
	};

	XEngineerModal.prototype.validateEnteredValues = function (userEnteredFormat, field, operation, editingField) {
		var rowsOfMappedFields = document.querySelectorAll(".partNumberFieldMapping");
		var successFields = document.querySelector('.success');


		var isSuccess = true;

		if (operation == "edit") {
			for (var k = 0; k < rowsOfMappedFields.length; k++) {
				if (rowsOfMappedFields[k] != editingField) {
					for (var j = 0; j < 2; j++) {
						if (successFields.getChildren()[j].getText() == field && userEnteredFormat == rowsOfMappedFields[k].getChildren()[j].getText()) {
							isSuccess = false;
							break;
						}
					}
				}
			}
		} else {
			for (var k1 = 0; k1 < rowsOfMappedFields.length; k1++) {

				for (var j1 = 0; j1 < 2; j1++) {
					if (successFields.getChildren()[j1].getText() == field && userEnteredFormat == rowsOfMappedFields[k1].getChildren()[j1].getText()) {
						isSuccess = false;
						break;
					}
				}
			}
		}
	return isSuccess;
	};

	XEngineerModal.prototype.validateEnteredNameValueNotNull = function () {
		var userEnteredFormat = this.nameTextBox.getValue();
		var isNull = this.validateEnteredValuesNotNull(userEnteredFormat);
		return isNull;
	};

	XEngineerModal.prototype.validateEnteredOrderValueNotNull = function () {
		var userEnteredFormat = this.numberOrderBox.getValue();
		var isNull = this.validateEnteredValuesNotNull(userEnteredFormat);
		return isNull;
	};

	XEngineerModal.prototype.validateEnteredValueFieldValueNotNull = function () {
		var isNull = false;
		if (this.getUserEnteredValues().Type != ParameterizationXEngineerConstants.FORMAT_ATTRIBUTE) {
			isNull = this.valueTextBox ? this.validateEnteredValuesNotNull(this.valueTextBox.getValue()) : this.valueDynTextBox ? this.validateEnteredValuesNotNull(this.valueDynTextBox.getValue()) : false;
		}
		return isNull;
	};

	XEngineerModal.prototype.validatSelectedTypeFieldValueNotNull = function () {
		var userEnteredFormat = this.partNumberTypeCombobox.getValue()[0];
		var isNull = this.validateEnteredValuesNotNull(userEnteredFormat);
		return isNull;
	};

	XEngineerModal.prototype.validateSelectedAttributeFieldValueNotNull = function () {
		var userEnteredFormat = this.partNumberAttributeCombobox ? this.partNumberAttributeCombobox.getValue()[0] : '';
		var isNull = false;
		if (this.partNumberTypeCombobox.getValue()[0] == ParameterizationXEngineerConstants.FORMAT_ATTRIBUTE) {
			isNull = this.validateEnteredValuesNotNull(userEnteredFormat);
		}

		return isNull;
	};

	XEngineerModal.prototype.validateEnteredCounterFieldValueNotNull = function () {
		var userEnteredFormat = this.counterNumberBox ? this.counterNumberBox.getValue() : '';
		var isNull = false;
		if (this.partNumberTypeCombobox.getValue()[0] == ParameterizationXEngineerConstants.FORMAT_COUNTER) {
			isNull = this.validateEnteredValuesNotNull(userEnteredFormat);
		}

		return isNull;
	};


	XEngineerModal.prototype.validateEnteredValuesNotNull = function (userEnteredFormat) {

		var isNull = false;
		if (userEnteredFormat == '' || userEnteredFormat == "") {
			isNull = true;
		}
		return isNull;
	};

	XEngineerModal.prototype.displayAlertMessage = function (messageToDisplay, toDisplayOver) {
		var alertOptions = {
			visible: true,
			className: 'param-alert',
			messageClassName: 'error',
			closable: true,
			renderTo: toDisplayOver,
			autoHide: true,
			hideDelay: 2000
		};
		var alert = this.getAlertComponent(alertOptions);

		alert.add({
			message: messageToDisplay
		});

	};

	XEngineerModal.prototype.getUserEnteredValues = function () {

		var userEnteredFormatValues = {};

		var valueField = this.valueTextBox ? this.valueTextBox.getValue() : this.valueDynTextBox ? this.valueDynTextBox.getValue() : this.modal.getContent().getElement('#sampleValue') ? this.modal.getContent().getElement('#sampleValue').innerText : '';
		var attributeFieldLabel = this.partNumberAttributeCombobox ? this.partNumberAttributeCombobox.getOption(this.partNumberAttributeCombobox.getValue()[0]).getText() : '';
		var attributeFieldValue = this.partNumberAttributeCombobox ? this.partNumberAttributeCombobox.getValue()[0] : '';
		var numberOfDigits = this.counterNumberBox ? this.counterNumberBox.getValue() : '';
		var counterUnicityCheckBox = this.counterCheckbox  ? this.counterCheckbox.isChecked() : false;
		var updateHighestCounterCheckBox = this.updateHighestCounterCheckbox  ? this.updateHighestCounterCheckbox.isChecked() : false;
		
		userEnteredFormatValues[ParameterizationXEngineerConstants.NAME] = this.nameTextBox.getValue();
		userEnteredFormatValues[ParameterizationXEngineerConstants.ORDER] = this.numberOrderBox.getValue();
		userEnteredFormatValues[ParameterizationXEngineerConstants.TYPE] = this.partNumberTypeCombobox.getValue()[0];
		userEnteredFormatValues[ParameterizationXEngineerConstants.ATTRIBUTE] = attributeFieldValue;
		userEnteredFormatValues[ParameterizationXEngineerConstants.ATTRIBUTE_NLS_NAME] = attributeFieldLabel;
		userEnteredFormatValues[ParameterizationXEngineerConstants.COUNTER] = numberOfDigits;
		userEnteredFormatValues[ParameterizationXEngineerConstants.VALUE] = valueField;
		userEnteredFormatValues[ParameterizationXEngineerConstants.COUNTER_UNICITY] = (counterUnicityCheckBox) ? counterUnicityCheckBox : "";
		userEnteredFormatValues[ParameterizationXEngineerConstants.UPDATE_HIGHEST_COUNTER] = updateHighestCounterCheckBox;

		return userEnteredFormatValues;
	};

	XEngineerModal.prototype.updateSampleText = function () {

		var sampleTextDiv = this.modal.getContent().getElement('#sampleValue');
		var updatedCount = this.counterNumberBox ? this.counterNumberBox.getValue() : '';
		//var noOFDigits = "1";
			var noOFDigits = "";



		for (var i = 0; i < parseInt(updatedCount); i++) {
			noOFDigits = '0' + noOFDigits;
		}

		if (sampleTextDiv != null) {
			sampleTextDiv.innerText = noOFDigits;
		}

	};

	XEngineerModal.prototype.getTotalFormatRows = function () {
		return document.querySelectorAll(".partNumberFieldMapping").length;
	};

	XEngineerModal.prototype.getHighestOrder = function () {
		var rowsOfMappedFields = document.querySelectorAll(".partNumberFieldMapping");
		var toCheckTheExistingRows = rowsOfMappedFields.length;
		var highestOrder = 0;
		if (toCheckTheExistingRows > 0) {
			for (var k = 0; k < rowsOfMappedFields.length; k++) {
				if (parseInt(rowsOfMappedFields[k].getChildren()[1].getText()) > highestOrder) {
					highestOrder = parseInt(rowsOfMappedFields[k].getChildren()[1].getText());
				}
			}
		}

		return highestOrder;

	};
	XEngineerModal.prototype.isCounterExists = function (field) {
		var rowsOfMappedFields = document.querySelectorAll(".partNumberFieldMapping");
		var toCheckTheExistingRows = rowsOfMappedFields.length;
		var isSuccess = false;
		if (toCheckTheExistingRows > 0) {
			for (var k = 0; k < rowsOfMappedFields.length; k++) {
				if (rowsOfMappedFields[k].getChildren()[2].value == ParameterizationXEngineerConstants.FORMAT_COUNTER) {
					isSuccess = true;
					break;
				}
			}
		}

		return isSuccess;
	};

	XEngineerModal.prototype.destroyValueFieldComponents = function () {

		this.valueTextBox = undefined;
		this.valueDynTextBox = undefined;
		this.counterNumberBox = undefined;

	};

	XEngineerModal.prototype.getAttributes = function (data) {
		var that = this;
		that.storeAttributes(data);
	};

	XEngineerModal.prototype.storeAttributes = function (data) {

		this.attributes = data;

	};


	XEngineerModal.prototype.getTextBox = function (textBoxOptions) {

		this.textBox = new Text(textBoxOptions);
		return this.textBox;
	};
	XEngineerModal.prototype.getNumberBox = function (numberOptions) {

		this.numberBox = new Number(numberOptions);
		return this.numberBox;
	};

	XEngineerModal.prototype.getSelectComponent = function (selectOptions) {

		this.select = new Select(selectOptions);
		return this.select;
	};

	XEngineerModal.prototype.getAlertComponent = function (alertOptions) {

		this.alert = new Alert(alertOptions);
		return this.alert;
	};

	XEngineerModal.prototype.getTooltip = function (tooltipOtions) {
		this.tooltip = new Tooltip(tooltipOtions);
		return this.tooltip;
	};

	XEngineerModal.prototype.show = function () {
		this.modal.show();
	};


	XEngineerModal.prototype._bindFooterEvent = function () {
		var that = this;

		this.modal.getFooter().getElements('.btn').forEach(function (element) {
			if (element.name === 'cancelButton') {
				element.addEvent('click', function () {
					that.modal.hide();
				});
			}
		});

	};

	XEngineerModal.prototype.getContent = function () {
		return this.modal.getContent();
	};

	XEngineerModal.prototype.destroy = function () {
		this.modal.destroy();
		var keys = Object.keys(this);
		for (var i = 0; i < keys.length; i++) {
			this[keys[i]] = undefined;
		}
	};

	return XEngineerModal;
});

define('DS/ParameterizationSkeleton/Views/ParameterizationFLWeb/FLWebModalSlideIn',
		[
			'DS/UIKIT/Modal',
			'UWA/Core',
			'DS/UIKIT/Input/Select',
			'DS/UIKIT/Input/Text',
			'DS/UIKIT/Input/Number',
			'DS/UIKIT/Alert',
			'DS/UIKIT/Tooltip',
			'DS/WAFData/WAFData',
			'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler',
			'DS/ParameterizationSkeleton/Views/ParameterizationFLWeb/ParameterizationFLWebConstants',
			'i18n!DS/ParameterizationSkeleton/assets/nls/FLWebNLS'
			],
			function (Modal,
					UWACore,
					Select,
					Text,
					Number,
					Alert,
					Tooltip,
					WAFData,
					URLHandler,
					ParameterizationFLWebConstants,
					FLWebNLS) {

	'use strict';

	function _createModal(options) {
		const editFieldContainer = UWA.createElement('div',{
			id:'add-edit-field-container',
			styles: {
				position: 'absolute',
				top: 0, left: 0, right: 0, bottom: 0
			}
		});
		const header =  UWA.createElement('div',{
			id:'add-edit-field-header',
			html: options.isadd? FLWebNLS.addField : FLWebNLS.updateField,
			styles: {
				padding: '1.3rem',
				'text-overflow': 'ellipsis',
				'white-space': 'nowrap',
				'color': 'hsl(216deg 2% 48%)',
				'font-size': '1.4em',
				'font-weight': 'bold',
				'display': 'absolute',
				top: 0, left:0, right: 0
			}
		});
		const body =  UWA.createElement('div',{
			id:'add-edit-field-body',
			styles: {
				overflow: 'auto',
				width: '100%'
			}
		});
		const footer =  UWA.createElement('div',{
			id:'add-edit-field-footer',
			styles: {
				padding: '1rem',
				'text-align': 'right',
				position: 'absolute',
				bottom: '5px',
				width: '100%'
			}
		});
		header.inject(editFieldContainer);
		body.inject(editFieldContainer);
		footer.inject(editFieldContainer);
		editFieldContainer.elements = {
			body: body,
			header: header,
			footer: footer
		}
		editFieldContainer.getContent =  function(){
			return this;
		}
		editFieldContainer.getFooter = function(){
			return this.elements.footer;
		}
		editFieldContainer.setFooter = function(btnHTML){
			this.elements.footer.innerHTML = btnHTML;
		}
		return editFieldContainer;
	}

	function FLWebModal(options) {
		this.options = {
				title: 'Dialog',
				className: '',
				withFooter: true
		};
		this.options = UWACore.extend(this.options, options);

		this.modal = _createModal(this.options);
		this.modal.inject(document.querySelector('.side-panel-editANField'));
		if (this.options.withFooter) {
			this._bindFooterEvent();
		}
	}

	FLWebModal.prototype.setFooter = function(btnElem){
		this.modal.setFooter(btnElem);
	},
	FLWebModal.prototype.getPartNumberFormat = function () {

		var _formatContent = this.modal.getContent().getElement('.enox-arch-number-content');
		var that = this;

		if (this.partNumberTypeCombobox.getValue()[0] == ParameterizationFLWebConstants.FORMAT_FREE) {
			var _dynamicFormatContent = this.modal.getContent().getElement('.enox-arch-number-dynamic-content');
			_dynamicFormatContent.empty();
			that.destroyValueFieldComponents();
		} else if (this.partNumberTypeCombobox.getValue()[0] == ParameterizationFLWebConstants.FORMAT_STRING) {
			that.destroyValueFieldComponents();
			that.getValueField(_formatContent);
		} else if (this.partNumberTypeCombobox.getValue()[0] == ParameterizationFLWebConstants.FORMAT_ATTRIBUTE) {
			that.destroyValueFieldComponents();
			that.getDynamicFields(_formatContent, this.partNumberTypeCombobox.getValue()[0]);
		} else if (this.partNumberTypeCombobox.getValue()[0] == ParameterizationFLWebConstants.FORMAT_COUNTER) {
			that.destroyValueFieldComponents();
			that.getDynamicFields(_formatContent, this.partNumberTypeCombobox.getValue()[0]);
		}
	};

	FLWebModal.prototype.getDefaultFields = function (_formatContent) {

		var that = this;

		var divTag = document.createElement('div');
		divTag.className = "formats-arch";

		var labelDiv = document.createElement('div');
		labelDiv.className = "formats-arch-label";
		labelDiv.innerText = FLWebNLS.name; //formats-arch[i];

		var textBoxDiv = document.createElement('div');
		textBoxDiv.className = "formats-arch-tbox";
		var textOptions = {
				events: {
					//  onChange: that.validateEnteredNameValue.bind(that)
				}
		};

		this.nameTextBox = this.getTextBox(textOptions);
		this.nameTextBox.domId = FLWebNLS.name + "_textBox";
		this.nameTextBox.inject(textBoxDiv);

		divTag.appendChild(labelDiv);
		divTag.appendChild(textBoxDiv);

		_formatContent.appendChild(divTag);

		var divTagForNbrBox = document.createElement('div');
		divTagForNbrBox.className = "formats-arch";

		var labelDivForNbrBox = document.createElement('div');
		labelDivForNbrBox.className = "formats-arch-label";
		labelDivForNbrBox.innerText = FLWebNLS.order; //formats-arch[i];

		var textBoxDivForNbrBox = document.createElement('div');
		textBoxDivForNbrBox.className = "formats-arch-tbox";

		var numberOptions = {
				min: 1,
				max: ParameterizationFLWebConstants.MAX_ROWS,

				value: this.getHighestOrder() + 1,
				events: {}
		};

		this.numberOrderBox = this.getNumberBox(numberOptions);
		this.numberOrderBox.domId = FLWebNLS.order + "_textBox";
		this.numberOrderBox.inject(textBoxDivForNbrBox);




		divTagForNbrBox.appendChild(labelDivForNbrBox);
		divTagForNbrBox.appendChild(textBoxDivForNbrBox);

		_formatContent.appendChild(divTagForNbrBox);

		var divTagForType = document.createElement('div');
		divTagForType.className = "formats-arch";

		var typelabelDiv = document.createElement('div');
		typelabelDiv.className = "formats-arch-label";
		typelabelDiv.innerText = FLWebNLS.type;

		var typeComboBoxDiv = document.createElement('div');
		typeComboBoxDiv.className = "formats-arch-tbox";

		var selectOptions = {
				custom: false,
				placeholder: FLWebNLS.selectType,
				options: [{
					label: FLWebNLS.String,
					value: ParameterizationFLWebConstants.FORMAT_STRING
				}, {
					label: FLWebNLS.Free,
					value: ParameterizationFLWebConstants.FORMAT_FREE
				}, {
					label: FLWebNLS.Attribute,
					value: ParameterizationFLWebConstants.FORMAT_ATTRIBUTE
				}, {
					label: FLWebNLS.counterLabel,
					value: ParameterizationFLWebConstants.FORMAT_COUNTER
				}

				],
				events: {
					onChange: that.getPartNumberFormat.bind(that)
				}
		};

		this.partNumberTypeCombobox = this.getSelectComponent(selectOptions);
		this.partNumberTypeCombobox.setId(FLWebNLS.type + "_comboBox");
		this.partNumberTypeCombobox.inject(typeComboBoxDiv);

		divTagForType.appendChild(typelabelDiv);
		divTagForType.appendChild(typeComboBoxDiv);
		_formatContent.appendChild(divTagForType);

	};

	FLWebModal.prototype.getDynamicFields = function (_formatContent, format) {
		var that = this;

		var _dynamicFormatContent = this.modal.getContent().getElement('.enox-arch-number-dynamic-content');
		_dynamicFormatContent.empty();

		if (format == ParameterizationFLWebConstants.FORMAT_ATTRIBUTE) {
			that.getAttributeFormat(_formatContent, _dynamicFormatContent);

		} else if (format == ParameterizationFLWebConstants.FORMAT_COUNTER) {
			this.getCounterFormat(_formatContent, _dynamicFormatContent);
		}

	};

	FLWebModal.prototype.getAttributeFormat = function (_formatContent, _dynamicFormatContent) {

		var formatField = FLWebNLS.attribute;

		var divTag = document.createElement('div');
		divTag.className = "formats-arch";

		var labelDiv = document.createElement('div');
		labelDiv.className = "formats-arch-label";
		labelDiv.innerText = formatField;

		var comboBoxDiv = document.createElement('div');
		comboBoxDiv.className = "formats-arch-tbox";
		var allAttributes = [];

		if (typeof this.attributes.message === "undefined") {
			for (var key in this.attributes) {
				var attributes1 = {};

				attributes1["label"] = this.attributes[key]
				attributes1["value"] = key

				allAttributes.push(attributes1);
			}
		}

		var selectOptions = {
				custom: false,
				placeholder: FLWebNLS.selectAttribute,
				options: allAttributes
		};

		this.partNumberAttributeCombobox = this.getSelectComponent(selectOptions);

		this.partNumberAttributeCombobox.setId(formatField + "_comboBox");
		this.partNumberAttributeCombobox.inject(comboBoxDiv);

		divTag.appendChild(labelDiv);
		divTag.appendChild(comboBoxDiv);

		var formatFieldValue = FLWebNLS.defaultValue;
		var divTagForValue = document.createElement('div');
		divTagForValue.className = "formats-arch";

		var labelDivForValue = document.createElement('div');
		labelDivForValue.className = "formats-arch-label";
		labelDivForValue.innerText = formatFieldValue;

		var textBoxDivForValue = document.createElement('div');
		textBoxDivForValue.className = "formats-arch-tbox";
		this.valueDynTextBox = this.getTextBox();
		this.valueDynTextBox.domId = formatFieldValue + "_textBox";
		this.valueDynTextBox.inject(textBoxDivForValue);

		divTagForValue.appendChild(labelDivForValue);
		divTagForValue.appendChild(textBoxDivForValue);

		_dynamicFormatContent.appendChild(divTag);
		_dynamicFormatContent.appendChild(divTagForValue);
		_formatContent.appendChild(_dynamicFormatContent);

	};

	FLWebModal.prototype.getCounterFormat = function (_formatContent, _dynamicFormatContent) {
		var that = this;
		var divTagForNbrBox = document.createElement('div');
		divTagForNbrBox.className = "formats-arch";

		var labelDivForNbrBox = document.createElement('div');
		labelDivForNbrBox.className = "formats-arch-label";

		var divForLabel = document.createElement('div');
		divForLabel.className = 'label-counter-arch';

		var labelText = document.createElement('div');
		labelText.className = 'label-text-arch';
		labelText.innerText = FLWebNLS.digits;

		var informationDiv = document.createElement('div');
		informationDiv.className = "fonticon fonticon-attention";
		informationDiv.id = "information";
		informationDiv.style.color = "black";

		divForLabel.appendChild(labelText);
		divForLabel.appendChild(informationDiv);

		labelDivForNbrBox.appendChild(divForLabel);

		var textBoxDivForNbrBox = document.createElement('div');
		textBoxDivForNbrBox.className = "formats-arch-tbox";

		var numberOptions = {
				min: 1,
				max: ParameterizationFLWebConstants.MAX_ROWS /*Number.MAX_SAFE_INTEGER*/,
				step: 1,
				value: 6,
				events: {
					onChange: that.updateSampleText.bind(that)
				}
		};

		this.counterNumberBox = this.getNumberBox(numberOptions);
		this.counterNumberBox.domId = FLWebNLS.digits + "_textBox";
		this.counterNumberBox.inject(textBoxDivForNbrBox);

		divTagForNbrBox.appendChild(labelDivForNbrBox);
		divTagForNbrBox.appendChild(textBoxDivForNbrBox);

		_dynamicFormatContent.appendChild(divTagForNbrBox);

		var formatField = FLWebNLS.sample;

		var divTag = document.createElement('div');
		divTag.className = "formats-arch-sample";

		var labelDiv = document.createElement('div');
		labelDiv.className = "formats-arch-sample-label";
		//labelDiv.innerText = formatField;


		var sampleTextLabelSpan = document.createElement('span');
		sampleTextLabelSpan.id = "sampleTextLabel";
		sampleTextLabelSpan.innerText = formatField  +" : "  ;

		var sampleTextValueSpan = document.createElement('span');
		sampleTextValueSpan.id = "sampleValue-arch";

		var textBoxDiv = document.createElement('div');
		textBoxDiv.className = "formats-arch-sample-value";

		textBoxDiv.appendChild(sampleTextLabelSpan);
		textBoxDiv.appendChild(sampleTextValueSpan);
		//textBoxDiv.id = "sampleValue-arch";

		divTag.appendChild(labelDiv);
		divTag.appendChild(textBoxDiv);

		_dynamicFormatContent.appendChild(divTag);
		_formatContent.appendChild(_dynamicFormatContent);

		this.updateSampleText(); // sets the number of digits value

		this.modal.getContent().getElement('#information').addEvent('mouseover', function () {
			that.getInformation(that.modal.getContent().getElement("#information"), FLWebNLS.counterTooltip);
		});

		// this.modal.getContent().getElement('#sampleValue-arch').addEvent('mouseover', function () {
		//   that.getInformation(that.modal.getContent().getElement("#sampleValue-arch"), event.currentTarget.getText());
		//
		// })


		// this.modal.getContent().getElement('#sampleValue-arch').addEventListener('mouseout', function () {
		// 	//that.getInformation(that.modal.getContent().getElement("#sampleValue-arch"), event.currentTarget.getText());
		// 	console.log(that);
		// 	that.tooltip.elements.body.empty()
		//
		// })


	};

	FLWebModal.prototype.getInformation = function (targetElement, toDisplayOver) {

		var tooltipOtions = {
				target: targetElement,
				body: toDisplayOver
		};
		this.getTooltip(tooltipOtions);

	};

	FLWebModal.prototype.getValueField = function (_formatContent) {

		var _dynamicFormatContent = this.modal.getContent().getElement('.enox-arch-number-dynamic-content');

		_dynamicFormatContent.empty();

		var formatField = FLWebNLS.value;

		var divTag = document.createElement('div');
		divTag.className = "formats-arch";

		var labelDiv = document.createElement('div');
		labelDiv.className = "formats-arch-label";
		labelDiv.innerText = formatField;

		var textBoxDiv = document.createElement('div');
		textBoxDiv.className = "formats-arch-tbox";
		this.valueTextBox = this.getTextBox();
		this.valueTextBox.domId = formatField + "_textBox";
		this.valueTextBox.inject(textBoxDiv);

		divTag.appendChild(labelDiv);
		divTag.appendChild(textBoxDiv);

		_dynamicFormatContent.appendChild(divTag);
		_formatContent.appendChild(_dynamicFormatContent);

	};

	FLWebModal.prototype.getModalBody = function () {

		var partNumberContent = this.modal.elements.body;

		var _errorsMessageDiv = UWACore.createElement('div');
		_errorsMessageDiv.className = "enox-part-number-error-content";

		var _formatContent = UWACore.createElement('div');
		_formatContent.className = "enox-arch-number-content";

		var _dynamicFormatContent = UWACore.createElement('div');
		_dynamicFormatContent.className = "enox-arch-number-dynamic-content";

		this.getDefaultFields(_formatContent);

		partNumberContent.appendChild(_errorsMessageDiv);
		partNumberContent.appendChild(_formatContent);
		partNumberContent.appendChild(_dynamicFormatContent);
		return partNumberContent;
	};

	FLWebModal.prototype.createCollabUnicitySecAddFieldModalBody = function () {

		var modalBody = this.modal.elements.body;

		var _errorsMessageDiv = UWACore.createElement('div');
		_errorsMessageDiv.className = "enox-part-number-error-content";

		var _formatContent = UWACore.createElement('div');
		_formatContent.className = "enox-arch-number-content";

		// var _dynamicFormatContent = UWACore.createElement('div');
		// _dynamicFormatContent.className = "enox-arch-number-dynamic-content";

		//this.getDefaultFields(_formatContent);
		this.addDefaultFieldsToCollabUnicitySecModalBody(_formatContent);
		modalBody.appendChild(_errorsMessageDiv);
		modalBody.appendChild(_formatContent);
		//	modalBody.appendChild(_dynamicFormatContent);
		//return partNumberContent;
	};

	FLWebModal.prototype.addDefaultFieldsToCollabUnicitySecModalBody = function (_formatContent) {

		var that = this;
		var groupNameField = document.createElement('div');
		groupNameField.className = "formats-arch";

		var labelDiv = document.createElement('div');
		labelDiv.className = "formats-arch-label";
		labelDiv.innerText = FLWebNLS.label_groupName;

		var textBoxDiv = document.createElement('div');
		textBoxDiv.className = "formats-arch-tbox";
		var textOptions = {
				events: {
					//  onChange: that.validateEnteredNameValue.bind(that)
				}
		};
		this.nameTextBoxForCollabUnicity = this.getTextBox(textOptions);
		this.nameTextBoxForCollabUnicity.domId = FLWebNLS.name + "_textBox";
		this.nameTextBoxForCollabUnicity.inject(textBoxDiv);

		groupNameField.appendChild(labelDiv);
		groupNameField.appendChild(textBoxDiv);
		_formatContent.appendChild(groupNameField);

		var collabSpaceField = document.createElement('div');
		collabSpaceField.className = 'formats-arch';

		var collabSpacelabel = document.createElement('div');
		collabSpacelabel.className = 'formats-arch-label';
		collabSpacelabel.innerText = FLWebNLS.label_CSfield;

		var collabSpaceTextBoxContainer = document.createElement('div');
		collabSpaceTextBoxContainer.className = 'formats-arch-tbox';
		var csList =  JSON.parse(localStorage.getItem('csList'));
		var collabSpaceSelectOptions = {
				//placeholder: 'Select your option',
				multiple: true,
				options: csList,
				events: {
					//  onChange: that.validateEnteredNameValue.bind(that)
				}
		};
		this.collabListTextBox = this.getSelectComponent(collabSpaceSelectOptions);
		this.collabListTextBox.domId = FLWebNLS.name + "_textBox";
		this.collabListTextBox.inject(collabSpaceTextBoxContainer);

		collabSpaceField.appendChild(collabSpacelabel);
		collabSpaceField.appendChild(collabSpaceTextBoxContainer);

		_formatContent.appendChild(collabSpaceField);

	};

	FLWebModal.prototype.validateEnteredNameValue = function (operation, editingField) {
		var duplicateData = {};
		duplicateData.isValid = true;
		var userEnteredFormat = this.nameTextBox.getValue();
		var isSuccess = this.validateEnteredValues(userEnteredFormat, FLWebNLS.name, operation, editingField);
		if (!isSuccess) {
			duplicateData.isValid = false;
		}
		duplicateData.data = userEnteredFormat;
		return duplicateData;
	};

	FLWebModal.prototype.validateEnteredGroupNameValue = function (operation, editingField) {
		var duplicateData = {};
		duplicateData.isValid = true;
		var userEnteredName = this.nameTextBoxForCollabUnicity.getValue();
		var isSuccess = this.validateEnteredValuesForArchNumCollab(userEnteredName, FLWebNLS.name, operation, editingField);
		if (!isSuccess) {
			duplicateData.isValid = false;
		}
		duplicateData.data = userEnteredName;
		return duplicateData;
	};

	FLWebModal.prototype.validateEnteredOrderValue = function (operation, editingField) {

		var duplicateData = {};
		duplicateData.isValid = true;

		var userEnteredFormat = this.numberOrderBox.getValue();
		var isSuccess = this.validateEnteredValues(userEnteredFormat, FLWebNLS.order, operation, editingField);

		if (!isSuccess) {

			duplicateData.isValid = false;
		}

		duplicateData.data = userEnteredFormat;
		return duplicateData;
	};

	FLWebModal.prototype.validateEnteredValues = function (userEnteredFormat, field, operation, editingField) {
		var rowsOfMappedFields = document.querySelectorAll(".partNumberFieldMapping");
		var successFields = document.querySelector('.success');


		var isSuccess = true;

		if (operation == "edit") {
			for (var k = 0; k < rowsOfMappedFields.length; k++) {
				if (rowsOfMappedFields[k] != editingField) {
					for (var j = 0; j < 2; j++) {
						if (successFields.getChildren()[j].getText() == field && userEnteredFormat == rowsOfMappedFields[k].getChildren()[j].getText()) {
							isSuccess = false;
							break;
						}
					}
				}
			}
		} else {
			for (var k1 = 0; k1 < rowsOfMappedFields.length; k1++) {

				for (var j1 = 0; j1 < 2; j1++) {
					if (successFields.getChildren()[j1].getText() == field && userEnteredFormat == rowsOfMappedFields[k1].getChildren()[j1].getText()) {
						isSuccess = false;
						break;
					}
				}
			}
		}
		return isSuccess;
	};

	FLWebModal.prototype.validateEnteredValuesForArchNumCollab = function (userEnteredFormat, field, operation, editingField) {
		var rowsOfMappedFields = document.querySelectorAll("#archNumCollabTableRow");
		var successFields = document.querySelector('#headerRowArchNumCollab');
		var isSuccess = true;
		if (operation == "edit") {
			for (var k = 0; k < rowsOfMappedFields.length; k++) {
				if (rowsOfMappedFields[k] != editingField) {
					for (var j = 0; j < 2; j++) {
						if (successFields.getChildren()[j].getText() == field && userEnteredFormat == rowsOfMappedFields[k].getChildren()[j].getText()) {
							isSuccess = false;
							break;
						}
					}
				}
			}
		} else {
			for (var k1 = 0; k1 < rowsOfMappedFields.length; k1++) {
				for (var j1 = 0; j1 < 2; j1++) {
					if (successFields.getChildren()[j1].getText() == field && userEnteredFormat == rowsOfMappedFields[k1].getChildren()[j1].getText()) {
						isSuccess = false;
						break;
					}
				}
			}
		}
		return isSuccess;
	};

	FLWebModal.prototype.validateEnteredGroupNameValueNotNull = function () {
		var userEnteredFormat = this.nameTextBoxForCollabUnicity.getValue();
		var isNull = this.validateEnteredValuesNotNull(userEnteredFormat);
		return isNull;
	};

	FLWebModal.prototype.validateEnteredCollabListValueNotNull = function () {
		var userEnteredFormat = this.collabListTextBox.getValue()[0];
		var isNull = this.validateEnteredValuesNotNull(userEnteredFormat);
		return isNull;
	};

	FLWebModal.prototype.validateEnteredNameValueNotNull = function () {
		var userEnteredFormat = this.nameTextBox.getValue();
		var isNull = this.validateEnteredValuesNotNull(userEnteredFormat);
		return isNull;
	};

	FLWebModal.prototype.validateEnteredOrderValueNotNull = function () {
		var userEnteredFormat = this.numberOrderBox.getValue();
		var isNull = this.validateEnteredValuesNotNull(userEnteredFormat);
		return isNull;
	};

	FLWebModal.prototype.validateEnteredValueFieldValueNotNull = function () {
		var isNull = false;
		if (this.getUserEnteredValues().Type != ParameterizationFLWebConstants.FORMAT_ATTRIBUTE) {
			isNull = this.valueTextBox ? this.validateEnteredValuesNotNull(this.valueTextBox.getValue()) : this.valueDynTextBox ? this.validateEnteredValuesNotNull(this.valueDynTextBox.getValue()) : false;
		}
		return isNull;
	};

	FLWebModal.prototype.validatSelectedTypeFieldValueNotNull = function () {
		var userEnteredFormat = this.partNumberTypeCombobox.getValue()[0];
		var isNull = this.validateEnteredValuesNotNull(userEnteredFormat);
		return isNull;
	};

	FLWebModal.prototype.validateSelectedAttributeFieldValueNotNull = function () {
		var userEnteredFormat = this.partNumberAttributeCombobox ? this.partNumberAttributeCombobox.getValue()[0] : '';
		var isNull = false;
		if (this.partNumberTypeCombobox.getValue()[0] == ParameterizationFLWebConstants.FORMAT_ATTRIBUTE) {
			isNull = this.validateEnteredValuesNotNull(userEnteredFormat);
		}

		return isNull;
	};

	FLWebModal.prototype.validateEnteredCounterFieldValueNotNull = function () {
		var userEnteredFormat = this.counterNumberBox ? this.counterNumberBox.getValue() : '';
		var isNull = false;
		if (this.partNumberTypeCombobox.getValue()[0] == ParameterizationFLWebConstants.FORMAT_COUNTER) {
			isNull = this.validateEnteredValuesNotNull(userEnteredFormat);
		}

		return isNull;
	};

	FLWebModal.prototype.validateEnteredValuesNotNull = function (userEnteredFormat) {

		var isNull = false;
		if (userEnteredFormat == '' || userEnteredFormat == "") {
			isNull = true;
		}
		return isNull;
	};

	FLWebModal.prototype.displayAlertMessage = function (messageToDisplay, toDisplayOver) {
		var alertOptions = {
				visible: true,
				className: 'param-alert',
				messageClassName: 'error',
				closable: true,
				renderTo: toDisplayOver,
				autoHide: true,
				hideDelay: 2000
		};
		var alert = this.getAlertComponent(alertOptions);

		alert.add({
			message: messageToDisplay
		});

	};

	FLWebModal.prototype.getUserEnteredValues = function () {

		var userEnteredFormatValues = {};

		var valueField = this.valueTextBox ? this.valueTextBox.getValue() : this.valueDynTextBox ? this.valueDynTextBox.getValue() : this.modal.getContent().getElement('#sampleValue-arch') ? this.modal.getContent().getElement('#sampleValue-arch').innerText : '';
		var attributeFieldLabel = this.partNumberAttributeCombobox ? this.partNumberAttributeCombobox.getOption(this.partNumberAttributeCombobox.getValue()[0]).getText() : '';
		var attributeFieldValue = this.partNumberAttributeCombobox ? this.partNumberAttributeCombobox.getValue()[0] : '';
		var numberOfDigits = this.counterNumberBox ? this.counterNumberBox.getValue() : '';

		userEnteredFormatValues[ParameterizationFLWebConstants.NAME] = this.nameTextBox.getValue();
		userEnteredFormatValues[ParameterizationFLWebConstants.ORDER] = this.numberOrderBox.getValue();
		userEnteredFormatValues[ParameterizationFLWebConstants.TYPE] = this.partNumberTypeCombobox.getValue()[0];
		userEnteredFormatValues[ParameterizationFLWebConstants.ATTRIBUTE] = attributeFieldValue;
		userEnteredFormatValues[ParameterizationFLWebConstants.ATTRIBUTE_NLS_NAME] = attributeFieldLabel;
		userEnteredFormatValues[ParameterizationFLWebConstants.COUNTER] = numberOfDigits;
		userEnteredFormatValues[ParameterizationFLWebConstants.VALUE] = valueField;

		return userEnteredFormatValues;
	};

	FLWebModal.prototype.getUserEnteredValuesForArchNumCollabUnicity = function () {
		var userEnteredFormatValues = {};
		var fieldValue = '';
		var csSelectList = this.collabListTextBox.getValue();
		if(Array.isArray(csSelectList)) {
			for(var i = 0; i < csSelectList.length-1; i++) {
				fieldValue += csSelectList[i] + ',';
			};
			fieldValue += csSelectList[i];
		} else {
			fieldValue = csSelectList;
		}
		userEnteredFormatValues[ParameterizationFLWebConstants.NAME] = this.nameTextBoxForCollabUnicity.getValue();
		userEnteredFormatValues[ParameterizationFLWebConstants.VALUE] = fieldValue;
		return userEnteredFormatValues;
	};

	FLWebModal.prototype.updateSampleText = function () {

		var sampleTextDiv = this.modal.getContent().getElement('#sampleValue-arch');
		var updatedCount = this.counterNumberBox ? this.counterNumberBox.getValue() : '';
		var noOFDigits = "";
		for (var i = 0; i < parseInt(updatedCount); i++) {
			noOFDigits = '0' + noOFDigits;
		}
		if (sampleTextDiv != null) {
			sampleTextDiv.innerText = noOFDigits;
		}

	};

	FLWebModal.prototype.getTotalFormatRows = function () {
		return document.querySelectorAll(".partNumberFieldMapping").length;
	};

	FLWebModal.prototype.getHighestOrder = function () {
		var rowsOfMappedFields = document.querySelectorAll(".partNumberFieldMapping");
		var toCheckTheExistingRows = rowsOfMappedFields.length;
		var highestOrder = 0;
		if (toCheckTheExistingRows > 0) {
			for (var k = 0; k < rowsOfMappedFields.length; k++) {
				if (parseInt(rowsOfMappedFields[k].getChildren()[1].getText()) > highestOrder) {
					highestOrder = parseInt(rowsOfMappedFields[k].getChildren()[1].getText());
				}
			}
		}

		return highestOrder;

	};

	FLWebModal.prototype.isCounterExists = function (field) {
		var rowsOfMappedFields = document.querySelectorAll(".partNumberFieldMapping");
		var toCheckTheExistingRows = rowsOfMappedFields.length;
		var isSuccess = false;
		if (toCheckTheExistingRows > 0) {
			for (var k = 0; k < rowsOfMappedFields.length; k++) {
				if (rowsOfMappedFields[k].getChildren()[2].value == ParameterizationFLWebConstants.FORMAT_COUNTER) {
					isSuccess = true;
					break;
				}
			}
		}

		return isSuccess;
	};

	FLWebModal.prototype.destroyValueFieldComponents = function () {

		this.valueTextBox = undefined;
		this.valueDynTextBox = undefined;
		this.counterNumberBox = undefined;

	};

	FLWebModal.prototype.getAttributes = function (data) {
		var that = this;
		that.storeAttributes(data);
	};

	FLWebModal.prototype.storeAttributes = function (data) {

		this.attributes = data;

	};

	FLWebModal.prototype.getTextBox = function (textBoxOptions) {

		this.textBox = new Text(textBoxOptions);
		return this.textBox;
	};

	FLWebModal.prototype.getNumberBox = function (numberOptions) {

		this.numberBox = new Number(numberOptions);
		return this.numberBox;
	};

	FLWebModal.prototype.getSelectComponent = function (selectOptions) {
		this.select = new Select(selectOptions);
		return this.select;
	};

	FLWebModal.prototype.getAlertComponent = function (alertOptions) {

		this.alert = new Alert(alertOptions);
		return this.alert;
	};

	FLWebModal.prototype.getTooltip = function (tooltipOtions) {
		this.tooltip = new Tooltip(tooltipOtions);
		return this.tooltip;
	};

	FLWebModal.prototype.show = function () {
		this.modal.show();
	};

	FLWebModal.prototype._bindFooterEvent = function () {
		var that = this;

		this.modal.getFooter().getElements('.btn').forEach(function (element) {
			if (element.name === 'cancelButton') {
				element.addEvent('click', function () {
				  that.modal.destroy();
					that.options.skeletonView.setCollapseFlagFromUIInteraction("right", true);
					//************BackUP below*****************
				//	that.options.skeletonView.setCollapseFlagFromUIInteraction("right", !that.options.skeletonView.rightContainerCollapsedFlag);
				});
			}
		});

	};

	FLWebModal.prototype.getContent = function () {
		return this.modal.getContent();
	};

	FLWebModal.prototype.destroy = function () {
		this.modal.destroy();
		var keys = Object.keys(this);
		for (var i = 0; i < keys.length; i++) {
			this[keys[i]] = undefined;
		}
	};

	return FLWebModal;
});

define('DS/ParameterizationSkeleton/Views/ParameterizationFLWeb/CompanyIDViewUtilities',
		[
			'UWA/Core',
			'DS/UIKIT/Input/Select',
			'DS/UIKIT/Modal',
			'DS/UIKIT/Input/Text',
			'DS/UIKIT/Input/Number',
			'DS/ParameterizationSkeleton/Views/ParametersLayoutViewUtilities',
			'DS/WAFData/WAFData',
			'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler',
			'DS/ParameterizationSkeleton/Views/ParameterizationFLWeb/ParameterizationFLWebConstants',
			'DS/ParameterizationSkeleton/Views/ParameterizationFLWeb/FLWebModal',
			'DS/ParameterizationSkeleton/Views/ParameterizationFLWeb/FLWebModalSlideIn',
			'i18n!DS/ParameterizationSkeleton/assets/nls/FLWebNLS',
			],
			function(UWA,
					Select,
					Modal,
					Text,
					Number,
					ParametersLayoutViewUtilities,
					WAFData,
					URLHandler,
					ParameterizationFLWebConstants,
					FLWebModal,
					FLWebModalSlideIn,
					FLWebNLS) {

	'use strict';

	var LEFT_ALIGNMENT = 'left';
	var RIGHT_ALIGNMENT = 'right';
	var HTML_BOLD_FORMAT = 'h5';
	var HTML_PARAG_FORMAT = null;
	var partNumberTable = UWA.createElement('table', {
		'class': 'partNumberTableMapping table table-condensed'
	});
	var archNumCollabSecTable = UWA.createElement('table', {
		'class': 'partNumberTableMapping table table-condensed',
		'id': 'archNumCollabUnicityTableContainer'
	});
	var widthTable = ParameterizationFLWebConstants.WIDTH_ARRAY;

	var physicalProductAttributesValues = {};

	var strategySelectorCombobox = [{
		label: FLWebNLS.UserDefined,
		value: "UserDefined"
	}/*,{
                        label: FLWebNLS.External,
                        value: "External"
             }*/];

	var strategyCombobox;

	var partNumberView = {

			initVariable: function() {
				this.cellsIndex = {
						"name": 0,
						"order": 1,
						"type": 2,
						"value": 3,
						"action": 4,
						"deployFlag": 5,
						"size": 6
				};
				this.cellsIndexForArchNumCollab = {
						"name": 0,
						"value": 1,
						"action": 2,
						"deployFlag": 3
				};
			},

			argsForUpdatingFormulaHeader: null,
			physicalProductAttributes: function(attributeMapping) {
				physicalProductAttributesValues = attributeMapping;
			},

			buildImgSpan: function(iconChoice, iconSize, iconColor, title) {
				var imgClass = 'fonticon fonticon-' + iconSize + 'x fonticon-' + iconChoice,
				imgSpan = UWA.createElement('span', {
					'class': imgClass,
					'title': title
				});

				imgSpan.setStyle("color", iconColor);
				return imgSpan;
			},

			buildTextTableCell: function(alignment, cellWidth, row, cellFormat, cellTest, colspan) {
				var colspanValue = (colspan) ? colspan : '1';
				var iCell = UWA.createElement('td', {
					'Align': alignment,
					'width': cellWidth,
					'colspan': colspanValue,
					'class': 'architectureNumberingField'// font-3dsbold
				}).inject(row);

				if (cellFormat) {
					UWA.createElement(cellFormat, {
						text: cellTest
					}).inject(iCell);
				} else {
					iCell.appendText(cellTest);
				}
				return iCell;
			},

			buildAttributeTable: function(data) {

				var pNFieldbody = UWA.createElement('tbody', {
					'class': 'partNumberFieldbody'
				}).inject(partNumberTable);


				var fieldInfo;
				/*fieldInfo = partNumberView.buildPNStrategyRow(data);
                fieldInfo.inject(pNFieldbody);*/

				fieldInfo = partNumberView.buildPNFormulaRow(data);
				fieldInfo.inject(pNFieldbody);

				fieldInfo = partNumberView.buildPNTableHeading();
				fieldInfo.inject(pNFieldbody);

				return partNumberTable;
			},

			buildArchNumCollabUnicitySecTable: function() {

				var tableBody = UWA.createElement('tbody', {
					'class': 'partNumberFieldbody',
					'id': 'archNumCollabUnicityTableBody'
				}).inject(archNumCollabSecTable);

				var fieldInfo;
				/*fieldInfo = partNumberView.buildPNStrategyRow(data);
                fieldInfo.inject(pNFieldbody);*/

				// fieldInfo = partNumberView.buildPNFormulaRow(data);
				// fieldInfo.inject(pNFieldbody);

				fieldInfo = partNumberView.buildArchNumCollabTableHeader();
				fieldInfo.inject(tableBody);

				return archNumCollabSecTable;
			},



			buildPNFormulaRow: function(data) {
				var fieldInfo, iCell;

				fieldInfo = UWA.createElement('tr', {
					'class': 'partNumberFormulaMapping',
					'id': 'partNumberFormulaMapping'
				});

				fieldInfo.value = [];


				partNumberView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.name], fieldInfo, HTML_PARAG_FORMAT, FLWebNLS.Formula);

				var imgClass = 'fonticon fonticon-' + '2.5' + 'x  fonticon-info';

				if (data[ParameterizationFLWebConstants.BUSINESS_LOGIC]) {

					iCell = UWA.createElement('td', {
						'Align': LEFT_ALIGNMENT,
						'width': widthTable[this.cellsIndex.order],
						'class': 'architectureNumberingField font-3dslight'// font-3dsbold
					}).inject(fieldInfo);

					UWA.createElement(HTML_PARAG_FORMAT, {
						'class': imgClass,
						'title': FLWebNLS.FormulaTooltip
					}).inject(iCell);

				} else {
					partNumberView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.name], fieldInfo, HTML_PARAG_FORMAT, "");
				}

				iCell = partNumberView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.type], fieldInfo, HTML_BOLD_FORMAT, "[" + FLWebNLS.freeValue + "]", "3");

				iCell = UWA.createElement('td', {
					'width': widthTable[this.cellsIndex.deployFlag],
					'align': RIGHT_ALIGNMENT,
					'title': FLWebNLS.deployStatus,
					'class': 'architectureNumberingField font-3dslight'// font-3dsbold
				});

				var imgSpan = partNumberView.buildImgSpan('check', '2.5', 'green', FLWebNLS.Deployed);
				imgSpan.inject(iCell);
				iCell.value = "success";
				iCell.inject(fieldInfo);

				return fieldInfo;
			},

			buildPNTableHeading: function() {
				var fieldInfo;

				fieldInfo = UWA.createElement('tr', {
					'class': 'success'
				});

				// partNumberView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.name], fieldInfo, HTML_BOLD_FORMAT, FLWebNLS.name);
				partNumberView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.name], fieldInfo, HTML_BOLD_FORMAT, FLWebNLS.name);
				partNumberView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.order], fieldInfo, HTML_BOLD_FORMAT, FLWebNLS.order);
				partNumberView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.type], fieldInfo, HTML_BOLD_FORMAT, FLWebNLS.type);
				partNumberView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.value], fieldInfo, HTML_BOLD_FORMAT, FLWebNLS.value);
				partNumberView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.action], fieldInfo, HTML_BOLD_FORMAT, FLWebNLS.actions);
				partNumberView.buildTextTableCell(RIGHT_ALIGNMENT, widthTable[this.cellsIndex.deployFlag], fieldInfo, HTML_BOLD_FORMAT, FLWebNLS.deployStatus);

				return fieldInfo;
			},

			buildArchNumCollabTableHeader: function() {
				var fieldInfo;
				fieldInfo = UWA.createElement('tr', {
					'class': 'success',
					id:'headerRowArchNumCollab'
				});

				// partNumberView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.name], fieldInfo, HTML_BOLD_FORMAT, FLWebNLS.name);
				partNumberView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.type], fieldInfo, HTML_BOLD_FORMAT, FLWebNLS.name);
				partNumberView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.type], fieldInfo, HTML_BOLD_FORMAT, FLWebNLS.value);
				partNumberView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.action], fieldInfo, HTML_BOLD_FORMAT, FLWebNLS.actions);
				partNumberView.buildTextTableCell(RIGHT_ALIGNMENT, widthTable[this.cellsIndex.deployFlag], fieldInfo, HTML_BOLD_FORMAT, FLWebNLS.deployStatus);

				return fieldInfo;
			},

			addEditButtonToCellRow: function(iCell, fieldInfo, forArchNumCollabTable) {
				var editElts = ParametersLayoutViewUtilities.createActionElements(forArchNumCollabTable?FLWebNLS.label_edit:FLWebNLS.editField, false);
				var editSpan = editElts[0], that = this;
				editSpan.setStyle("float", LEFT_ALIGNMENT);
				editSpan.setStyle("padding", "0px 8px");
				editSpan.inject(iCell);
				var editAttributeButton = editElts[1];
				var editPop = editElts[2];

				editAttributeButton.addEvent("onClick", function(event) {
					var fieldToEdit = event.currentTarget.getParent().getParent().getParent();
					if(forArchNumCollabTable){
						partNumberView.editFieldDialogForArchNumCollab(fieldToEdit);
					} else {
						partNumberView.editFieldDialog(fieldToEdit, physicalProductAttributesValues);
						if(that.skeletonView.rightContainerCollapsedFlag)
							that.skeletonView.setCollapseFlagFromUIInteraction("right", !that.skeletonView.rightContainerCollapsedFlag);
					}
				});

				return editAttributeButton;
			},

			addRemoveButtonToCellRow: function(iCell, fieldInfo, forArchNumCollabTable) {
				var removelts = ParametersLayoutViewUtilities.createActionElements(FLWebNLS.removeField, true);
				var deleteSpan = removelts[0];
				deleteSpan.setStyle("float", LEFT_ALIGNMENT);
				deleteSpan.setStyle("padding", "0px 8px");
				deleteSpan.inject(iCell);
				var removeAttributeButton = removelts[1];
				var removePop = removelts[2];

				removeAttributeButton.addEvent("onClick", function(e) {
					if(forArchNumCollabTable){
						partNumberView.removefieldArchNumGrouping(fieldInfo);
					} else {
						partNumberView.removefieldLineCallBack(fieldInfo);
					}
				});

				return removeAttributeButton;
			},


			buildValueCellInPNTable: function(valueCell, name, order, type, value, attributeName, isDeployed, size, firstBuild) {

				var cellText = value;
				if (ParameterizationFLWebConstants.FORMAT_ATTRIBUTE == type) {
					if (physicalProductAttributesValues && physicalProductAttributesValues[attributeName]) {
						cellText = physicalProductAttributesValues[attributeName];
					} else {
						cellText = attributeName;
					}

				}

				valueCell.setText((cellText)?cellText:"");
				valueCell.value = value;
				if(order){
					partNumberView.updateFormulaTextFields(order, type, cellText, isDeployed, size, firstBuild);
				}
			},

			buildPartNumberField: function(fieldInfo, name, order, type, value, attributeName, isDeployed, size) {
				//buildPartNumberField: function(fieldInfo, /*name,*/ order, type, value, attributeName, isDeployed) {
				var that = this;
				var iCell;
				fieldInfo.value = isDeployed;
				var firstBuild = true;
				// partNumberView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.name], fieldInfo, HTML_PARAG_FORMAT, name);
				partNumberView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.name], fieldInfo, HTML_PARAG_FORMAT, name);
				order? partNumberView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.order], fieldInfo, HTML_PARAG_FORMAT, order) : null;
				type? partNumberView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.type], fieldInfo, HTML_PARAG_FORMAT, FLWebNLS[type]).value = type : null;
				partNumberView.buildValueCellInPNTable(partNumberView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.value], fieldInfo, HTML_PARAG_FORMAT, value), name, order, type, value, attributeName, isDeployed, size, firstBuild);

				iCell = UWA.createElement('td', {
					'Align': LEFT_ALIGNMENT,
					'width': widthTable[4],
					'class': 'architectureNumberingField font-3dslight'// font-3dsbold
				}).inject(fieldInfo);

				var forArchNumCollabTable = order ? false : true;
				var editAttributeButton = partNumberView.addEditButtonToCellRow(iCell, fieldInfo, forArchNumCollabTable);
				var removeAttributeButton = partNumberView.addRemoveButtonToCellRow(iCell, fieldInfo, forArchNumCollabTable);


				iCell = UWA.createElement('td', {
					'Align': RIGHT_ALIGNMENT,
					'width': widthTable[5],
					'class': 'architectureNumberingField font-3dslight'// font-3dsbold
				}).inject(fieldInfo);

				if (isDeployed == ParameterizationFLWebConstants.DEPOLOYED) {
					var imgSpan = partNumberView.buildImgSpan('check', '2.5', 'green', FLWebNLS.Deployed);
					imgSpan.inject(iCell);
				} else if (isDeployed === ParameterizationFLWebConstants.NEW_NOT_DEPLOYED) {
					var imgSpan = partNumberView.buildImgSpan('cog', '2.5', 'orange', FLWebNLS.Modified);
					imgSpan.inject(iCell);
				}


				iCell.inject(fieldInfo);

				return fieldInfo;
			},


			buildsFieldJsonObject: function(fieldInfo) {
				var type = fieldInfo.cells[this.cellsIndex.type].getText();
				var value = fieldInfo.cells[this.cellsIndex.value].getText();

				var obj = {};

				obj[ParameterizationFLWebConstants.TYPE] = fieldInfo.cells[this.cellsIndex.type].value;
				obj[ParameterizationFLWebConstants.NAME] = fieldInfo.cells[this.cellsIndex.name].getText();

				obj['Label'] = fieldInfo.cells['label']? fieldInfo.cells['label']: '';

				obj[ParameterizationFLWebConstants.ORDER] = fieldInfo.cells[this.cellsIndex.order].getText();
				if(value) {
					obj[ParameterizationFLWebConstants.VALUE] = value;
				}

				if (FLWebNLS.SA == type) {
					var defaultAttr = fieldInfo.cells[this.cellsIndex.value].value? fieldInfo.cells[this.cellsIndex.value].value:'';
					if(defaultAttr !== null) {
						obj[ParameterizationFLWebConstants.VALUE] = defaultAttr;
						obj['Default'] = defaultAttr;
					}
				}

				if(fieldInfo.cells[this.cellsIndex.value][ParameterizationFLWebConstants.ATTRIBUTE]) {
					obj[ParameterizationFLWebConstants.ATTRIBUTE] = fieldInfo.cells[this.cellsIndex.value][ParameterizationFLWebConstants.ATTRIBUTE];
				}

				if(fieldInfo.cells[this.cellsIndex.value][ParameterizationFLWebConstants.COUNTER]) {
					obj[ParameterizationFLWebConstants.COUNTER] = fieldInfo.cells[this.cellsIndex.value][ParameterizationFLWebConstants.COUNTER];
				}
				obj[ParameterizationFLWebConstants.OPERATION] = fieldInfo.cells[this.cellsIndex.deployFlag].value;
				return obj;

			},

			buildsFieldJsonObjectForArchNUmCollab: function(fieldInfo) {
				//var type = fieldInfo.cells[this.cellsIndexForArchNumCollab.type].getText();
				var value = fieldInfo.cells[this.cellsIndexForArchNumCollab.value].getText();
				var obj = {};
				//obj[ParameterizationFLWebConstants.TYPE] = fieldInfo.cells[this.cellsIndex.type].value;
				obj.Name = fieldInfo.cells[this.cellsIndexForArchNumCollab.name].getText();
				//obj['Label'] = fieldInfo.cells['label']? fieldInfo.cells['label']: '';
				//obj[ParameterizationFLWebConstants.ORDER] = fieldInfo.cells[this.cellsIndex.order].getText();
				if(value) {
					obj.Value = value;
				}

				// if (FLWebNLS.SA == type) {
				//   var defaultAttr = fieldInfo.cells[this.cellsIndex.value].value? fieldInfo.cells[this.cellsIndex.value].value:'';
				//   if(defaultAttr !== null) {
				//     obj[ParameterizationFLWebConstants.VALUE] = defaultAttr;
				//     obj['Default'] = defaultAttr;
				//     }
				// }
				// if(fieldInfo.cells[this.cellsIndex.value][ParameterizationFLWebConstants.ATTRIBUTE]) {
				//   obj[ParameterizationFLWebConstants.ATTRIBUTE] = fieldInfo.cells[this.cellsIndex.value][ParameterizationFLWebConstants.ATTRIBUTE];
				// }
				// if(fieldInfo.cells[this.cellsIndex.value][ParameterizationFLWebConstants.COUNTER]) {
				//   obj[ParameterizationFLWebConstants.COUNTER] = fieldInfo.cells[this.cellsIndex.value][ParameterizationFLWebConstants.COUNTER];
				// }
				obj[ParameterizationFLWebConstants.OPERATION] = fieldInfo.cells[this.cellsIndexForArchNumCollab.deployFlag].value;
				return obj;
			},

			buildJsonObjForPNField: function(operation, name, order, type, value, attributeName, counterSize, label, defaultAttr) {
				var obj = {};

				obj[ParameterizationFLWebConstants.OPERATION] = operation;
				obj[ParameterizationFLWebConstants.NAME] = name;
				obj[ParameterizationFLWebConstants.TYPE] = type;
				obj[ParameterizationFLWebConstants.VALUE] = value ? value : defaultAttr;
				obj[ParameterizationFLWebConstants.ORDER] = order;
				obj[ParameterizationFLWebConstants.ATTRIBUTE] = attributeName;
				obj[ParameterizationFLWebConstants.COUNTER] = counterSize;
				obj['label'] = label;
				return obj;


			},

			buildNewPartNumberField: function(objParam, isDeployedStatus, skeletonView) {
				var fieldInfo;
				this.skeletonView = skeletonView;
				fieldInfo = UWA.createElement('tr', {
					'class': 'partNumberFieldMapping'
				});

				//partNumberView.buildPartNumberField(fieldInfo, /*objParam.Name,*/ objParam.Order, objParam.Type, objParam.Value, objParam[ParameterizationFLWebConstants.ATTRIBUTE], isDeployedStatus);
				partNumberView.buildPartNumberField(fieldInfo, objParam.Name, objParam.Order, objParam.Type, objParam.Value, objParam[ParameterizationFLWebConstants.ATTRIBUTE], isDeployedStatus, objParam.Size);
				fieldInfo.cells[this.cellsIndex.value][ParameterizationFLWebConstants.ATTRIBUTE] = objParam[ParameterizationFLWebConstants.ATTRIBUTE];
				fieldInfo.cells[this.cellsIndex.value][ParameterizationFLWebConstants.COUNTER] = objParam[ParameterizationFLWebConstants.COUNTER];
				fieldInfo.cells[this.cellsIndex.deployFlag].value = ParameterizationFLWebConstants.ADD;
				fieldInfo.cells['label'] = objParam.label;
				return fieldInfo;
			},

			buildNewArchNumCollabField: function(objParam, isDeployedStatus) {
				var fieldInfo;
				fieldInfo = UWA.createElement('tr', {
					'class': 'ArchNumUnicityGroupingTableRow',
					'id': 'archNumCollabTableRow'
				});
				// var fieldValue = '';
				// if(Array.isArray(objParam.Value)) {
				//   for(var i = 0; i < objParam.Value.length-1; i++) {
				//     fieldValue += objParam.Value[i] + ',';
				//   };
				//   fieldValue += objParam.Value[i];
				// } else {
				//   fieldValue = objParam.Value;
				// }
				partNumberView.buildPartNumberField(fieldInfo, objParam.Name, null, null, objParam.Value, null, isDeployedStatus, null);
				fieldInfo.cells[this.cellsIndexForArchNumCollab.deployFlag].value = ParameterizationFLWebConstants.ADD;
				fieldInfo.cells['label'] = objParam.label;
				return fieldInfo;
			},

			modifyPartNumberField: function(fieldInfo, objParam, isDeployedStatus) {
				fieldInfo.value = isDeployedStatus;
				var existOrder = fieldInfo.cells[this.cellsIndex.order].getText();
				if (objParam.Order != existOrder) {
					partNumberView.updateFormulaTextFields(existOrder, objParam.Type, null, ParameterizationFLWebConstants.NEW_NOT_DEPLOYED);
				}
				fieldInfo.cells[this.cellsIndex.name].setText(objParam.Name);
				fieldInfo.cells[this.cellsIndex.order].setText(objParam.Order);
				fieldInfo.cells[this.cellsIndex.type].setText(FLWebNLS[objParam.Type]);
				fieldInfo.cells[this.cellsIndex.type].value = objParam.Type;
				if(fieldInfo.cells[this.cellsIndex.size]) {
					fieldInfo.cells[this.cellsIndex.size].value = objParam.Size;
				}
				partNumberView.buildValueCellInPNTable(fieldInfo.cells[this.cellsIndex.value], objParam.Name, objParam.Order, objParam.Type, (objParam.Value) ? objParam.Value : "", objParam[ParameterizationFLWebConstants.ATTRIBUTE], isDeployedStatus);
				fieldInfo.cells[this.cellsIndex.value][ParameterizationFLWebConstants.ATTRIBUTE] = objParam[ParameterizationFLWebConstants.ATTRIBUTE];
				fieldInfo.cells[this.cellsIndex.value][ParameterizationFLWebConstants.COUNTER] = objParam[ParameterizationFLWebConstants.COUNTER];
				var deploycell = fieldInfo.cells[this.cellsIndex.deployFlag];
				deploycell.empty();
				var imgSpan = partNumberView.buildImgSpan('cog', '2.5', 'orange', FLWebNLS.Modified);
				imgSpan.inject(deploycell);
				deploycell.value = ParameterizationFLWebConstants.MODIFY;
				return fieldInfo;
			},

			modifyArchNumCollabField: function(fieldInfo, objParam, isDeployedStatus) {
				fieldInfo.value = isDeployedStatus;
				fieldInfo.cells[this.cellsIndexForArchNumCollab.name].setText(objParam.Name);
				partNumberView.buildValueCellInPNTable(fieldInfo.cells[this.cellsIndexForArchNumCollab.value], objParam.Name, objParam.Order, objParam.Type, (objParam.Value) ? objParam.Value : "", objParam[ParameterizationFLWebConstants.ATTRIBUTE], isDeployedStatus);
				var deploycell = fieldInfo.cells[this.cellsIndexForArchNumCollab.deployFlag];
				deploycell.empty();
				var imgSpan = partNumberView.buildImgSpan('cog', '2.5', 'orange', FLWebNLS.Modified);
				imgSpan.inject(deploycell);
				deploycell.value = ParameterizationFLWebConstants.MODIFY;
				return fieldInfo;
			},

			updateFormulaTextFields: function(index, type, value, isDeployed, size, firstBuild) {
				var field = document.querySelector(".partNumberFormulaMapping");
				if(field){
					var newVal = "";
					if (type) {
						if (type == ParameterizationFLWebConstants.FORMAT_ATTRIBUTE && value) {
							newVal = "{" + value + "}";
						} else if (type == ParameterizationFLWebConstants.FORMAT_COUNTER && (value||size)) {
							newVal = "&lt;" + FLWebNLS.counterValue + "&gt;";
						} else if (type == ParameterizationFLWebConstants.FORMAT_FREE && ((value != null) || firstBuild)) {
							newVal = "[" + FLWebNLS.freeValue + "]";
						} else if (value) {
							newVal = value;
						}
					}
					field.value[index] = newVal;
					field.cells[this.cellsIndex.type].empty();
					field.cells[this.cellsIndex.type].setStyle("font-size", "21px");
					var newFormula = field.value.join("");
					var counterInfoCell = field.cells[this.cellsIndex.type];
					if(newFormula != ""){
						if (newFormula.indexOf(FLWebNLS.counterValue) == -1) {
							counterInfoCell.empty();
							var imgClass = 'fonticon fonticon-' + '1' + 'x  fonticon-attention';
							UWA.createElement(HTML_PARAG_FORMAT, {
								'class': imgClass,
								'title': FLWebNLS.counterTooltipAttention
							}).inject(counterInfoCell);
						} else {
							counterInfoCell.empty();
						}
					}
					if(!newFormula){
						field.cells[this.cellsIndex.type].addContent("[" + FLWebNLS.freeValue + "]");
					}
					field.cells[this.cellsIndex.type].addContent(field.value.join(""));
					var iCell = field.cells[this.cellsIndex.value];
					if (isDeployed == ParameterizationFLWebConstants.DEPOLOYED) {
						iCell.empty();
						var imgSpan = partNumberView.buildImgSpan('check', '2.5', 'green', FLWebNLS.Deployed);
						imgSpan.inject(iCell);
					} else if (isDeployed === ParameterizationFLWebConstants.NEW_NOT_DEPLOYED) {
						iCell.empty();
						var imgSpan = partNumberView.buildImgSpan('cog', '2.5', 'orange', FLWebNLS.Modified);;
						imgSpan.inject(iCell);
					}
				} else {
					if(Array.isArray(this.argsForUpdatingFormulaHeader)){
						this.argsForUpdatingFormulaHeader.push(arguments);
					}
				}
			},

			removefieldLineCallBack: function(fieldInfo) {
				if (fieldInfo != "undefined") {
					partNumberView.updateFormulaTextFields(fieldInfo.cells[this.cellsIndex.order].getText(), fieldInfo.cells[this.cellsIndex.type].value, null, ParameterizationFLWebConstants.NEW_NOT_DEPLOYED);
					if (fieldInfo.value === ParameterizationFLWebConstants.NEW_NOT_DEPLOYED) {
						fieldInfo.remove();
					} else {
						partNumberView.setForRemoveFieldLine(fieldInfo);
					}
				}
			},

			removefieldArchNumGrouping: function(fieldInfo) {
				if (fieldInfo != "undefined") {
					if (fieldInfo.value === ParameterizationFLWebConstants.NEW_NOT_DEPLOYED) {
						fieldInfo.remove();
					} else {
						partNumberView.setForRemoveFieldArchNumGrouping(fieldInfo);
					}
				}
			},

			resetForAdd: function(fieldInfo) {
				partNumberView.updateFormulaTextFields(fieldInfo.cells[this.cellsIndex.order].getText(), fieldInfo.cells[this.cellsIndex.type].value, null, ParameterizationFLWebConstants.DEPOLOYED);
			},

			resetForRemove: function(fieldInfo) {
				var cellValue = fieldInfo.cells[partNumberView.cellsIndex.deployFlag].value;
				var imgSpan = partNumberView.buildImgSpan('check', '2.5', 'green', FLWebNLS.Deployed);
				var actionCell = fieldInfo.cells[partNumberView.cellsIndex.action];
				var deploycell = fieldInfo.cells[partNumberView.cellsIndex.deployFlag];
				partNumberView.addEditButtonToCellRow(actionCell, fieldInfo);
				partNumberView.addRemoveButtonToCellRow(actionCell, fieldInfo);
				deploycell.empty();
				imgSpan.inject(deploycell);
				partNumberView.updateFormulaTextFields(fieldInfo.cells[this.cellsIndex.order].getText(), fieldInfo.cells[this.cellsIndex.type].value, fieldInfo.cells[this.cellsIndex.value].getText(), ParameterizationFLWebConstants.DEPOLOYED);
			},

			resetForRemoveArchNumGrouping: function(fieldInfo) {
				var cellValue = fieldInfo.cells[partNumberView.cellsIndexForArchNumCollab.deployFlag].value;
				var imgSpan = partNumberView.buildImgSpan('check', '2.5', 'green', FLWebNLS.Deployed);
				var actionCell = fieldInfo.cells[partNumberView.cellsIndexForArchNumCollab.action];
				var deploycell = fieldInfo.cells[partNumberView.cellsIndexForArchNumCollab.deployFlag];
				partNumberView.addEditButtonToCellRow(actionCell, fieldInfo);
				partNumberView.addRemoveButtonToCellRow(actionCell, fieldInfo, true);
				deploycell.empty();
				imgSpan.inject(deploycell);
			},

			resetForModify: function(fieldInfo, savedInfo) {
				var imgSpan = partNumberView.buildImgSpan('check', '2.5', 'green', FLWebNLS.Deployed);
				var actionCell = fieldInfo.cells[partNumberView.cellsIndex.action];
				var deploycell = fieldInfo.cells[partNumberView.cellsIndex.deployFlag];
				if (savedInfo) {
					var existOrder = fieldInfo.cells[this.cellsIndex.order].getText();
					if (savedInfo[ParameterizationFLWebConstants.ORDER] != existOrder) {
						partNumberView.updateFormulaTextFields(existOrder, savedInfo[ParameterizationFLWebConstants.TYPE], null, ParameterizationFLWebConstants.NEW_NOT_DEPLOYED);
					}
					fieldInfo.cells[this.cellsIndex.name].setText(savedInfo[ParameterizationFLWebConstants.NAME]);
					fieldInfo.cells[this.cellsIndex.type].setText(FLWebNLS[savedInfo[ParameterizationFLWebConstants.TYPE]]);
					fieldInfo.cells[this.cellsIndex.type].value = savedInfo[ParameterizationFLWebConstants.TYPE];
					fieldInfo.cells[this.cellsIndex.order].setText(savedInfo[ParameterizationFLWebConstants.ORDER]);
					partNumberView.buildValueCellInPNTable(fieldInfo.cells[this.cellsIndex.value], savedInfo[ParameterizationFLWebConstants.NAME], savedInfo[ParameterizationFLWebConstants.ORDER], savedInfo[ParameterizationFLWebConstants.TYPE], savedInfo[ParameterizationFLWebConstants.VALUE], savedInfo[ParameterizationFLWebConstants.ATTRIBUTE], ParameterizationFLWebConstants.DEPOLOYED);
				}
				deploycell.empty();
				imgSpan.inject(deploycell);
			},

			resetForModifyArchNumGrouping: function(fieldInfo, savedInfo) {
				var imgSpan = partNumberView.buildImgSpan('check', '2.5', 'green', FLWebNLS.Deployed);
				var actionCell = fieldInfo.cells[partNumberView.cellsIndexForArchNumCollab.action];
				var deploycell = fieldInfo.cells[partNumberView.cellsIndexForArchNumCollab.deployFlag];
				if (savedInfo) {
					var existOrder = fieldInfo.cells[this.cellsIndex.order].getText();
					if (savedInfo[ParameterizationFLWebConstants.ORDER] != existOrder) {
						partNumberView.updateFormulaTextFields(existOrder, savedInfo[ParameterizationFLWebConstants.TYPE], null, ParameterizationFLWebConstants.NEW_NOT_DEPLOYED);
					}
					fieldInfo.cells[this.cellsIndex.name].setText(savedInfo[ParameterizationFLWebConstants.NAME]);
					fieldInfo.cells[this.cellsIndex.type].setText(FLWebNLS[savedInfo[ParameterizationFLWebConstants.TYPE]]);
					fieldInfo.cells[this.cellsIndex.type].value = savedInfo[ParameterizationFLWebConstants.TYPE];
					fieldInfo.cells[this.cellsIndex.order].setText(savedInfo[ParameterizationFLWebConstants.ORDER]);
					partNumberView.buildValueCellInPNTable(fieldInfo.cells[this.cellsIndex.value], savedInfo[ParameterizationFLWebConstants.NAME], savedInfo[ParameterizationFLWebConstants.ORDER], savedInfo[ParameterizationFLWebConstants.TYPE], savedInfo[ParameterizationFLWebConstants.VALUE], savedInfo[ParameterizationFLWebConstants.ATTRIBUTE], ParameterizationFLWebConstants.DEPOLOYED);
				}
				deploycell.empty();
				imgSpan.inject(deploycell);
			},

			resetForFieldLineChanges: function(fieldInfo, savedInfo) {
				if (fieldInfo.value == ParameterizationFLWebConstants.NEW_NOT_DEPLOYED) {
					var cellValue = fieldInfo.cells[partNumberView.cellsIndex.deployFlag].value;
					if (cellValue == ParameterizationFLWebConstants.ADD) {
						partNumberView.resetForAdd(fieldInfo);
						return fieldInfo;
					} else if (cellValue == ParameterizationFLWebConstants.REMOVE) {
						partNumberView.resetForRemove(fieldInfo);
					} else if (cellValue == ParameterizationFLWebConstants.MODIFY) {
						partNumberView.resetForModify(fieldInfo, savedInfo);
					}
					fieldInfo.value = ParameterizationFLWebConstants.DEPOLOYED;
					fieldInfo.cells[partNumberView.cellsIndex.deployFlag].value = ParameterizationFLWebConstants.ADD;
				}
			},

			resetForFieldLineChangesArchNumGrouping: function(fieldInfo, savedInfo) {
				if (fieldInfo.value == ParameterizationFLWebConstants.NEW_NOT_DEPLOYED) {
					var cellValue = fieldInfo.cells[partNumberView.cellsIndexForArchNumCollab.deployFlag].value;
					if (cellValue == ParameterizationFLWebConstants.ADD) {
						//partNumberView.resetForAdd(fieldInfo);
						return fieldInfo;
					} else if (cellValue == ParameterizationFLWebConstants.REMOVE) {
						partNumberView.resetForRemoveArchNumGrouping(fieldInfo);
					} else if (cellValue == ParameterizationFLWebConstants.MODIFY) {
						partNumberView.resetForModifyArchNumGrouping(fieldInfo, savedInfo);
					}
					fieldInfo.value = ParameterizationFLWebConstants.DEPOLOYED;
					fieldInfo.cells[partNumberView.cellsIndexForArchNumCollab.deployFlag].value = ParameterizationFLWebConstants.ADD;
				}
			},

			setForRemoveFieldLine: function(fieldInfo) {
				fieldInfo.value = ParameterizationFLWebConstants.NEW_NOT_DEPLOYED;
				var arrayAction = fieldInfo.cells[partNumberView.cellsIndex.action].getElements('span');
				arrayAction.forEach(function(action) {
					action.hide();
				});
				var deploycell = fieldInfo.cells[partNumberView.cellsIndex.deployFlag];
				var imgSpan = partNumberView.buildImgSpan('trash', '1.5', 'red', FLWebNLS.removedField);
				deploycell.empty();
				deploycell.value = ParameterizationFLWebConstants.REMOVE;
				imgSpan.inject(deploycell);
			},

			setForRemoveFieldArchNumGrouping: function(fieldInfo) {
				fieldInfo.value = ParameterizationFLWebConstants.NEW_NOT_DEPLOYED;
				var arrayAction = fieldInfo.cells[partNumberView.cellsIndexForArchNumCollab.action].getElements('span');
				arrayAction.forEach(function(action) {
					action.hide();
				});
				var deploycell = fieldInfo.cells[partNumberView.cellsIndexForArchNumCollab.deployFlag];
				var imgSpan = partNumberView.buildImgSpan('trash', '1.5', 'red', FLWebNLS.removedField);
				deploycell.empty();
				deploycell.value = ParameterizationFLWebConstants.REMOVE;
				imgSpan.inject(deploycell);
			},

			editFieldDialog: function(editField, result) {
				var that = this;
				var options = {
						className: "part-number-edit-modal",
						title: "Edit Field",
						skeletonView: that.skeletonView
				};
				this.modal = new FLWebModalSlideIn(options);
				this.modal.attributes = result;
				function _getFooter() {
					return "<button type='button'  name='addButton' id='add-button' class='btn btn-primary'>" + FLWebNLS.done + "</button> " + "</button>" + "<button type='button' name='cancelButton' id='cancel-button' class='btn btn-default'>" + FLWebNLS.cancel + "</button>"
				}
				this.modal.modal.setFooter(_getFooter());
				this.modal.getModalBody();
				this.modal._bindFooterEvent();
				var editingField = editField;
				var rowsOfMappedFields = document.querySelectorAll(".partNumberFieldMapping");
				var successFields = document.querySelector('.success');
				var toCheckTheExistingRows = rowsOfMappedFields.length;
				var fetchedData = this.buildsFieldJsonObject(editField);
				this.modal.nameTextBox.setValue(fetchedData.Name);
				this.modal.numberOrderBox.setValue(fetchedData.Order);
				this.modal.partNumberTypeCombobox.select(fetchedData.Type, true);
				this.modal.nameTextBox.disable();
				if (fetchedData.Type == ParameterizationFLWebConstants.FORMAT_STRING) {
					this.modal.valueTextBox.setValue(fetchedData.Value);
				} else if (fetchedData.Type == ParameterizationFLWebConstants.FORMAT_ATTRIBUTE) {
					this.modal.partNumberAttributeCombobox.select(editingField.cells[this.cellsIndex.value][ParameterizationFLWebConstants.ATTRIBUTE], true);
					this.modal.valueDynTextBox.setValue(fetchedData.Value);
				} else if (fetchedData.Type == ParameterizationFLWebConstants.FORMAT_COUNTER) {
					var numberOfDigits = fetchedData.Value && fetchedData.Value.length? fetchedData.Value.length: fetchedData.Size;
					this.modal.counterNumberBox.setValue(numberOfDigits);
				}
				this.tableWdthArray = ParameterizationFLWebConstants.WIDTH_ARRAY
				this.modal.partNumberTypeCombobox.disable();
				this.modal.getContent().getElements('.btn').forEach(function(element) {
					if (element.name === 'addButton') {
						element.addEvent('click', function() {
							var userEditedFormat = that.modal.getUserEnteredValues();
							var duplicateData = {};
							var checkStatus = {};
							checkStatus.isSuccess = true;
							var toDisplayOver = that.modal.getContent().getElement('.enox-arch-number-content');
							if (that.modal.validateEnteredNameValueNotNull()) {
								that.modal.displayAlertMessage(FLWebNLS.nameNullMessage, toDisplayOver);
							} else if (that.modal.validateEnteredOrderValueNotNull()) {
								that.modal.displayAlertMessage(FLWebNLS.orderNullMessage, toDisplayOver);
							} else if (that.modal.validatSelectedTypeFieldValueNotNull()) {
								that.modal.displayAlertMessage(FLWebNLS.selectTypeMessage, toDisplayOver);
							} else if (that.modal.validateSelectedAttributeFieldValueNotNull()) {
								that.modal.displayAlertMessage(FLWebNLS.selectAttributeMessage, toDisplayOver);
							}else if (that.modal.validateEnteredCounterFieldValueNotNull()) {
								that.modal.displayAlertMessage(FLWebNLS.counterIsEmptyMessage, toDisplayOver);
							} else if (that.modal.validateEnteredValueFieldValueNotNull()) {
								that.modal.displayAlertMessage(FLWebNLS.valueEmptyMessage, toDisplayOver);
							} else {
								if (!that.modal.validateEnteredNameValue("edit", editingField).isValid) {
									that.modal.displayAlertMessage(FLWebNLS.nameMessage + ' ' + FLWebNLS.alreadyExists, toDisplayOver);
								} else if (!that.modal.validateEnteredOrderValue("edit", editingField).isValid) {
									that.modal.displayAlertMessage(FLWebNLS.orderMessage + ' ' + FLWebNLS.alreadyExists, toDisplayOver);
								}  else {
									var userSelectedFormat = that.modal.getUserEnteredValues();
									userEditedFormat[ParameterizationFLWebConstants.OPERATION] = ParameterizationFLWebConstants.MODIFY;
									var fieldInfo = partNumberView.modifyPartNumberField(editingField, userEditedFormat, ParameterizationFLWebConstants.NEW_NOT_DEPLOYED);
									that.skeletonView.setCollapseFlagFromUIInteraction("right", true);
									that.modal.destroy();
								}
							}
						});
					}
				});
			//	this.modal.show();
			},

			editFieldDialogForArchNumCollab: function(editField) {
				var options = {
						className: "part-number-edit-modal",
						title: "Edit Field",
						id: "ArchNumCollabEditDialog"
				};
				var that = this;
				this.modal = new FLWebModal(options);
				function _getFooter() {
					return "<button type='button'  name='addButton' id='add-button' class='btn btn-primary'>" + FLWebNLS.add + "</button> " + "</button>" + "<button type='button' name='cancelButton' id='cancel-button' class='btn btn-default'>" + FLWebNLS.cancel + "</button>"
				}
				this.modal.modal.setFooter(_getFooter());
				this.modal.createCollabUnicitySecAddFieldModalBody();
				this.modal._bindFooterEvent();
				var editingField = editField;
				var rowsOfMappedFields = document.querySelectorAll("#archNumCollabTableRow");
				var toCheckTheExistingRows = rowsOfMappedFields.length;
				var fetchedData = this.buildsFieldJsonObjectForArchNUmCollab(editField);
				this.modal.nameTextBoxForCollabUnicity.setValue(fetchedData.Name);
				this.modal.collabListTextBox.setValue(fetchedData.Value.split(',')); //To be changed
				this.modal.nameTextBoxForCollabUnicity.disable();
				this.tableWdthArray = ParameterizationFLWebConstants.WIDTH_ARRAY
				this.modal.getContent().getElements('.btn').forEach(function(element) {
					if (element.name === 'addButton') {
						element.addEvent('click', function() {
							var userEditedFormat = that.modal.getUserEnteredValuesForArchNumCollabUnicity();
							var duplicateData = {};
							var checkStatus = {};
							checkStatus.isSuccess = true;
							var toDisplayOver = that.modal.getContent().getElement('.enox-arch-number-content');
							if (that.modal.validateEnteredGroupNameValueNotNull()) {
								that.modal.displayAlertMessage(FLWebNLS.nameNullMessage, toDisplayOver);
							} else if (that.modal.validateEnteredCollabListValueNotNull()) {
								that.modal.displayAlertMessage(FLWebNLS.msg_CSFieldBlankAlert, toDisplayOver);
							} else {
								if (!that.modal.validateEnteredGroupNameValue("edit", editingField).isValid) {
									that.modal.displayAlertMessage(FLWebNLS.nameMessage + ' ' + FLWebNLS.alreadyExists, toDisplayOver);
								} else {
									var userSelectedFormat = that.modal.getUserEnteredValuesForArchNumCollabUnicity();
									userEditedFormat[ParameterizationFLWebConstants.OPERATION] = ParameterizationFLWebConstants.MODIFY;
									var fieldInfo = partNumberView.modifyArchNumCollabField(editingField, userEditedFormat, ParameterizationFLWebConstants.NEW_NOT_DEPLOYED);
									that.modal.destroy();
								}
							}
						});
					}
				});
				this.modal.show();
			}
	};
	partNumberView.initVariable();
	return partNumberView;
});

//@fullReview  ZUR 15/03/11 2016x HL 
//@fullReview  ZUR 16/02/13 2017x
//@fullReview  ZUR 17/07/06 2018x IR-529086-3DEXPERIENCER2018x
/*global define, document*/
/*jslint plusplus: true*/

define('DS/ParameterizationSkeleton/Views/ParameterizationLifecycle/LifecycleViewUtilities',
    [
        'UWA/Core',
        'DS/UIKIT/Input/Button',
        'DS/ParameterizationSkeleton/Views/ParametersLayoutViewUtilities',
        'i18n!DS/ParameterizationSkeleton/assets/nls/ParamSkeletonNLS'
    ],
    function(UWA,
            Button,
            ParametersLayoutViewUtilities,
            ParamSkeletonNLS) {

        'use strict';
        //'UWA/Controls/Abstract',
        var lcview = {

            buildLifecycleChecksView : function(wdthArray, appCategory) {
                //UWA.log("buildLifecycleChecksView");
                var k, iTitleRowSum, AlreadySetRlsDiv, rulesTbl, tbody, newRow, newCell,
                    expandButton, reduceButton, numOfColumn = 6;

                AlreadySetRlsDiv =  UWA.createElement('div', {
                    'id': 'AlreadySetRules'
                });
                /*AlreadySetRlsDiv.style.overflowY = 'auto';
                AlreadySetRlsDiv.style.overflowX = 'auto';      
                AlreadySetRlsDiv.style.minHeight = '20%';*/
                //document.getElementsByTagName('body')[0].appendChild(AlreadySetRlsDiv);
                //
                rulesTbl =  UWA.createElement('table', {
                    'id': 'rulestable',
                    'class': 'table table-condensed table-hover'
                });
                /*      
                rulesTbl.style.width="100%";
                rulesTbl.style.height="20%";        
                rulesTbl.cellPadding="0"; rulesTbl.cellSpacing="2";
                rulesTbl.style.backgroundColor="white";*/
                tbody =  UWA.createElement('tbody', {
                    'class': 'paramtbody'
                }).inject(rulesTbl);

                newRow = UWA.createElement('tr').inject(tbody);//row1
                 //FUN087047
                if(appCategory === "CBP" ) {
                    numOfColumn = 7;                    
                }
                for (k = 0; k < numOfColumn; k++) {
                    iTitleRowSum = iTitleRowSum + wdthArray[k];
                }
                //{title: ParamSkeletonNLS.CurrentControlsTitle}
                //newRow.style.backgroundColor = "#659ac2";

                newCell = UWA.createElement('td',
                        {'width': iTitleRowSum.toString() + '%', 'colspan': numOfColumn.toString(), 'title': ParamSkeletonNLS.CurrentControlsTitle}).inject(newRow);//60%
                //
                UWA.createElement('h5', {
                    text: ParamSkeletonNLS.CurrentControlsTitle// font-3dsbold
                    //'class': 'font-3dslight'
                }).inject(newCell);

                newCell = UWA.createElement('td',
                    {'width': wdthArray[6].toString() + '%', 'align' : 'right'}).inject(newRow);//20%

                newCell.setStyle("padding-right", "15px");

                expandButton = new Button({
                    className: 'close',
                    icon: 'fonticon fonticon-resize-full',//value: 'Button', //fonticon-cancel  fonticon-minus-circled  
                    attributes: {
                        disabled: false,
                        title : ParamSkeletonNLS.Expand,//"expand",
                        'aria-hidden' : 'true'
                    }
                }).inject(newCell);

                reduceButton = new Button({
                    className: 'close',
                    icon: 'fonticon fonticon-resize-small',
                    attributes: {
                        disabled: false,
                        title : ParamSkeletonNLS.Reduce, //"reduce",
                        'aria-hidden' : 'true'
                    },
                    events: {
                        onClick: function () {
                            UWA.log(AlreadySetRlsDiv);//.log(AlreadySetRlsDiv.getStyle("height"));
                            AlreadySetRlsDiv.setStyle("height", "30%");
                            this.hide();
                            expandButton.show();
                        }
                    }
                }).inject(newCell);
                reduceButton.hide();

                expandButton.addEvent("onClick", function () {
                    AlreadySetRlsDiv.setStyle("height", "50%");
                    this.hide();
                    reduceButton.show();
                });

                newRow = UWA.createElement('tr', {title: ''}).inject(tbody);//row2                    
                //newRow.style.backgroundColor = "#CDD8EB";
                k = 0;
                newCell = UWA.createElement('td',
                    {'width': wdthArray[k++].toString() + '%', 'title': ParamSkeletonNLS.DataTypeLabel}).inject(newRow);

                UWA.createElement('h5', {
                    //'class': 'font-3dslight',//'',font-3dsregular
                    text: ParamSkeletonNLS.DataTypeLabel
                }).inject(newCell);

                newCell = UWA.createElement('td', {
                    'width': wdthArray[k++].toString() + '%',//10
                    'title': ParamSkeletonNLS.FromStatusLabel
                }).inject(newRow);

                UWA.createElement('h5', {
                    //'class': 'font-3dslight',
                    text: ParamSkeletonNLS.FromStatusLabel
                }).inject(newCell);

                newCell = UWA.createElement('td',
                        {'width': wdthArray[k++].toString() + '%', 'title': ParamSkeletonNLS.ToStatusLabel}).inject(newRow);//10

                UWA.createElement('h5', {
                    //'class': 'font-3dslight',
                    text: ParamSkeletonNLS.ToStatusLabel
                }).inject(newCell);

                newCell = UWA.createElement('td',
                        {'width': wdthArray[k++].toString() + '%', 'title': ParamSkeletonNLS.Rulelabel}).inject(newRow);//15

                UWA.createElement('h5', {
                    //'class': 'font-3dslight',
                    text: ParamSkeletonNLS.Rulelabel
                }).inject(newCell);

                //FUN087047
                if (appCategory === "CBP") {
                    newCell = UWA.createElement('td',
                        {'width': wdthArray[k++].toString() + '%', 'title': ParamSkeletonNLS.Action}).inject(newRow);//15

                    UWA.createElement('h5', {
                        //'class': 'font-3dslight',
                        text: ParamSkeletonNLS.Action
                    }).inject(newCell);
                }

                newCell = UWA.createElement('td', {
                    'width': '15%',
                    'title': ParamSkeletonNLS.AdditionalInfoTitle
                }).inject(newRow);

                UWA.createElement('h5', {
                    //'class': 'font-3dslight',
                    text: ParamSkeletonNLS.AdditionalInfoTitle
                }).inject(newCell);

                newCell = UWA.createElement('td', {
                    'width': wdthArray[k++].toString() + '%',//15
                    'title': ParamSkeletonNLS.RemoveElement //NZV:IR-629593-3DEXPERIENCER2019x
                }).inject(newRow);

                UWA.createElement('h5', {
                    //'class': 'font-3dslight',
                    text: ParamSkeletonNLS.RemoveElement
                }).inject(newCell);

                newCell = UWA.createElement('td', {
                    'width' : wdthArray[k++].toString() + '%',//7
                    'title' : ParamSkeletonNLS.DeployStatus
                }).inject(newRow);//dernière colonne : pas de titre        

                AlreadySetRlsDiv.appendChild(rulesTbl);

                return AlreadySetRlsDiv;
            },

            addDeployIndicator : function (deployStatus) {
                UWA.log("addApplyIndicator");
                var deployIndicDiv, deployTable, dtbody, newRow, imageCell, imgSpan,
                    imgTitle = ParamSkeletonNLS.deployedParamtxt,
                    imgClass = 'fonticon fonticon-2x fonticon-check',
                    iconColor = 'green';

                deployIndicDiv =  UWA.createElement('div', {
                    'id': 'IndicatorDiv'
                });

                deployTable =  UWA.createElement('table', {
                    'id': 'rulestable',
                    'class': 'table table-condensed table-hover'
                }).inject(deployIndicDiv);

                dtbody =  UWA.createElement('tbody', {
                    'class': 'indicatortbody'
                }).inject(deployTable);

                newRow = UWA.createElement('tr').inject(dtbody);//row1
                //newRow.style.backgroundColor = "#659ac2";
                imageCell = UWA.createElement('td',
                        {'width': '100%', 'title': ParamSkeletonNLS.deployedParamtxt}).inject(newRow);

                if (deployStatus === false) {
                    iconColor = "orange";
                    imgClass = 'fonticon fonticon-2x fonticon-cog';
                    imgTitle =  ParamSkeletonNLS.notdeployedParamtxt;//"Some Parameters are not Deployed"
                }

                imgSpan = UWA.createElement('span', {
                    'class' : imgClass
                }).inject(imageCell);

                imgSpan.setStyle("color", iconColor);
                imageCell.set("Title", imgTitle);

                return deployIndicDiv;
            },

            updateIcon : function(result, imageCell) {
                var imgSpan,
                    imgTitle = ParamSkeletonNLS.deployedParamtxt,
                    imgClass = 'fonticon fonticon-2x fonticon-check',
                    iconColor = 'green';

                imageCell.empty();

                if (result !== true) {
                    imgClass = 'fonticon fonticon-2x fonticon-alert';
                    imgTitle = ParamSkeletonNLS.notdeployedParamtxt;
                    iconColor = 'red';
                }
                imgSpan = UWA.createElement('span', {
                    'class' : imgClass
                }).inject(imageCell);
                imgSpan.setStyle("color", iconColor);
                imageCell.set("Title", imgTitle);
            },

            beingModified : function (imageCell, imgTitle) {
                var imgClass = 'fonticon fonticon-2x fonticon-pencil';

                imageCell.empty();
                UWA.createElement('span', {
                    'class' : imgClass
                }).inject(imageCell);

                imageCell.set("Title", imgTitle);
            },

            getNamingDeployCellSts : function (tbodyreflist) {
                var iLines = tbodyreflist[0].children;
                return (iLines[0].cells[0]);
            },

            getCurrentChecks : function(iContentDiv, appCategory) {
                var tbodyref = iContentDiv.getElements('.paramtbody')[0],
                    listofLines = tbodyref.children,
                    nbofLines = listofLines.length,
                    clistofChecks = [],
                    iadditionalinfo = "",
                    i,
                    iRule,
                    iID, promoteVal=false;

                this.clearPreviousChecksHighlighting(listofLines);

                for (i = 2; i < nbofLines; i++) {
                    iRule = listofLines[i].cells[3].value;

                    /* if ( (document.getElementById('rulestable').rows[i].cells[4].childNodes[0])==null)
                        iadditionalinfo="";
                    else
                        iadditionalinfo = document.getElementById('rulestable').rows[i].cells[4].childNodes[0].value;
    
                    if (iRule=="RejectIfAttributeNotValuated") {
                        var iID=iadditionalinfo.indexOf(":");
                        iadditionalinfo=iadditionalinfo.substring(iID+1,iadditionalinfo.length);
                    }
                
                    if ((iRule=="RejectIfAnyOfTheCommonlyGovernedChildNotOnTargetState")
                            &&(iadditionalinfo!="ALL")) {
                            iadditionalinfo = document.getElementById('rulestable').rows[i].cells[4].value; 
                    }*/
                    //FUN087047 
                    if(appCategory === "CBP") {
                        
                        if (listofLines[i].cells[5].value === null) {
                            iadditionalinfo = "";
                        } else {
                            iadditionalinfo = listofLines[i].cells[5].value;
                        }
                        promoteVal = listofLines[i].cells[4].value;
                    } else {
                        if (listofLines[i].cells[4].value === null) {
                            iadditionalinfo = "";
                        } else {
                            iadditionalinfo = listofLines[i].cells[4].value;
                        }
                        promoteVal = true;
                    }
                    // if (listofLines[i].cells[4].value === null) {
                    //     iadditionalinfo = "";
                    // } else {
                    //     iadditionalinfo = listofLines[i].cells[4].value;
                    // }
                    //
                    if (iRule === "RejectIfAttributeNotValuated") {
                        iID = iadditionalinfo.indexOf(":");
                        iadditionalinfo = iadditionalinfo.substring(iID + 1, iadditionalinfo.length);
                    }
                    //
                    if ((iRule === "RejectIfAnyOfTheCommonlyGovernedChildNotOnTargetState")
                                && (iadditionalinfo !== "ALL")) {
                        iadditionalinfo = listofLines[i].cells[4].value;
                    }

                    clistofChecks.push({
                        objType         : listofLines[i].cells[0].value,
                        fromState       : listofLines[i].cells[1].value,
                        toState         : listofLines[i].cells[2].value,
                        ruleID          : iRule,
                        additionalProps : iadditionalinfo,
                        promote         : promoteVal
                    });
                }
                return clistofChecks;
            },

            printTransitionList : function (iList) {
                var e, nbofTransitions = 0;

                for (e = iList.first; e; e = e.next) {
                    UWA.log(e);
                    UWA.log("from : " + e.cl1.c.node.stateid + " to : " + e.cl2.c.node.stateid);
                    nbofTransitions++;
                }
                UWA.log("nbofTransitions = " + nbofTransitions);
            },

            printNodesList : function (iList) {
                var e, nbofstates = 0;

                for (e = iList.first; e; e = e.next) {
                    UWA.log(e);
                    UWA.log(e.stateid + "<-->" + e.name);
                    nbofstates++;
                }
                UWA.log("nbofstates =" + nbofstates);
            },

            sortArrayByKey: function(array, key) {
                return array.sort(function(a, b) {
                    var x = a[key],
                        y = b[key];
                    return ((x < y) ? -1 : ((x > y) ? 1 : 0));
                });
            },

            clearPreviousChecksHighlighting: function (iListofRows) {
                var i, nbofRows = iListofRows.length;

                for (i = 2; i < nbofRows; i++) {
                    iListofRows[i].removeClassName("info");
                }
            },

            resetLifecycleChecks : function(listofLines) {
                var i = listofLines.length - 1;
                while (i >= 2) {
                    listofLines[i].remove();
                    i--;
                }
            },

            populateAddInfoSelect: function (iSelect, selectedType, iListofSortedTypes) {
                var i,
                    nbofTypes = iListofSortedTypes.length,
                    currTypeCategory;

                for (i = 0; i < nbofTypes; i++) {
                    if (selectedType[0] === iListofSortedTypes[i].typeID) {
                        currTypeCategory = iListofSortedTypes[i].typeCategory;
                        break;
                    }
                }

                iSelect.remove();
                iSelect.add([{
                    label: ParamSkeletonNLS.AllChildrenTypes,
                    value: "ALL"
                }]);

                for (i = 0; i < nbofTypes; i++) {
                    if (currTypeCategory === iListofSortedTypes[i].typeCategory) {
                        iSelect.add([{
                            label: iListofSortedTypes[i].typeNLS,
                            value: iListofSortedTypes[i].typeID
                        }]);
                    }
                }

                return;
            },

            getListofAttributesForType : function(selectedType, sortedTypes) {

                var i,
                    nbofTypes = sortedTypes.length,
                    listofAttrs = "";

                for (i = 0; i < nbofTypes; i++) {
                    if (selectedType[0] === sortedTypes[i].typeID) {
                        if (sortedTypes[i].listofAddedAttributes !== undefined) {
                            listofAttrs = sortedTypes[i].listofAddedAttributes;
                        }
                        break;
                    }
                }
                return listofAttrs;
            },

            populateAttributesSelector : function (attributesSelector, iAttributes) {

                var i,
                    nbofAttr,
                    iListofAttributes;

                attributesSelector.remove();

                if (iAttributes !== "") {
                    iListofAttributes = iAttributes.split(';');
                    nbofAttr = iListofAttributes.length;

                    for (i = 0; i < nbofAttr; i++) {
                        attributesSelector.add([{
                            label: iListofAttributes[i],
                            value: iListofAttributes[i]
                        }]);
                    }
                }
            },

            updateRulesListforType : function(RulesListSelect, selectedType, iListofSortedTypes) {
                var i, rulesforType, listofRulesForType, nbofRules,
                    nbofTypes = iListofSortedTypes.length;

                for (i = 0; i < nbofTypes; i++) {
                    if (selectedType[0] == iListofSortedTypes[i].typeID) {
                        rulesforType = iListofSortedTypes[i].listofRules;
                        break;
                    }
                }

                listofRulesForType = rulesforType.split(',');
                nbofRules = listofRulesForType.length;

                RulesListSelect.remove();

                for (i = 0; i < nbofRules; i++) {
                    RulesListSelect.add([{
                        //label: eval("ParamSkeletonNLS." + listofRulesForType[i] + "Text"),
                        label: ParamSkeletonNLS[listofRulesForType[i] + "Text"],
                        value: listofRulesForType[i]
                    }]);
                }
            },

            getMatchingNode : function(iNodeList, iNodeID) {
                var e;
                for (e = iNodeList.first; e; e = e.next) {
                    if (e.stateid == iNodeID) {
                        return e;
                    }
                }
                return null;
            },

            checkforSingletonStates : function(iNodes, iEdges) {
                var eNode, itr,
                    edgeList = iEdges,//this.grph.edges,
                    isNodeConnected = false;
                    //this.grph.nodes.first
                for (eNode = iNodes.first; eNode; eNode = eNode.next) {
                    isNodeConnected = false;
                    for (itr = edgeList.first; itr; itr = itr.next) {
                        if ((itr.cl1.c.node.stateid == eNode.stateid) ||
                                (itr.cl2.c.node.stateid == eNode.stateid)) {
                            isNodeConnected = true;
                            break;
                        }
                    }
                    if (isNodeConnected === false) {//IR-529086-3DEXPERIENCER2018x
                        if (eNode.next !== null || eNode.prev !== null) {
                            UWA.log(eNode.stateid + " is not connected ");
                            return false;
                        }
                    }
                }

                return true;
            },

            removeRelatedChecksForTransition : function (iSource, iDestination, tbodyref) {
                var listofLines = tbodyref.children,
                    i = listofLines.length - 1;

                while (i >= 2) {
                    if ((listofLines[i].cells[1].value == iSource) &&
                            (listofLines[i].cells[2].value == iDestination)) {
                        listofLines[i].remove();
                    }
                    i--;
                }
            },

            removeRelatedChecksForState : function (iStateID, tbodyref) {
                var i,
                    listofLines = tbodyref.children;
                //
                i = listofLines.length - 1;
                while (i >= 2) {
                    if ((listofLines[i].cells[1].value == iStateID) ||
                            (listofLines[i].cells[2].value == iStateID)) {
                        listofLines[i].remove();
                    }
                    i--;
                }
            },

            isCheckAlreadyAdded : function (iType, iSource, iDestination, iRule, iAddinfo, tbodyref, iPromote) {
                //var tbodyref = this.contentDiv.getElements('.paramtbody')[0];
                var i,
                    listofLines = tbodyref.children,
                    nbofLines = listofLines.length, addiInfoCell = 4, promoteChk = true;

                for (i = 2; i < nbofLines; i++) {
                    if ((listofLines[i].cells[1].value == iSource) &&
                            (listofLines[i].cells[2].value == iDestination) &&
                                (listofLines[i].cells[0].value == iType) &&
                                    (listofLines[i].cells[3].value == iRule)) {
                        //FUN087047
                        addiInfoCell = 4;
                        promoteChk = true;
                        if (listofLines[i].cells.length > 7) {
                            if(listofLines[i].cells[4].value !== iPromote) {
                                promoteChk = false;
                            }
                            addiInfoCell = 5;
                        } 
                        //Additional Infos Tests
                        if (promoteChk && iAddinfo == listofLines[i].cells[addiInfoCell].value) {
                            return true;//Check Already there
                        }
                        if (promoteChk && ((iAddinfo === "ALL") ||
                                (listofLines[i].cells[addiInfoCell].value === "ALL"))) {
                            UWA.log("Check Already there::ALL");
                            return true;
                        }
                        
                    }
                }
                return false;
            },

            UpdateLifecycleChecksStsInTable : function(iContentDiv) {
                var imgSpan,
                    tbodyreflist = iContentDiv.getElements('.paramtbody'),
                    iLines = tbodyreflist[0].childNodes,
                    nbofLines = iLines.length,
                    i = nbofLines - 1;

                while (i > 1) {
                    /*if (iLines[i].cells[10].value === "DeletedNotDeployed") {
                        iLines[i].remove();
                    } else */
                    if (iLines[i].cells.length > 7) { // only when policy type is ER, appCategory is CBP
                        if (iLines[i].cells[7].value !== undefined && iLines[i].cells[7].value === "newcheck") {
                            iLines[i].cells[7].empty();
                            iLines[i].cells[7].value = true;
                            imgSpan = ParametersLayoutViewUtilities.buildImgSpan('check', '1.5', 'green');
                            imgSpan.inject(iLines[i].cells[7]);
                        }
                    } else {
                        if (iLines[i].cells[6].value === "newcheck") {
                            iLines[i].cells[6].empty();
                            iLines[i].cells[6].value = true;
                            imgSpan = ParametersLayoutViewUtilities.buildImgSpan('check', '1.5', 'green');
                            imgSpan.inject(iLines[i].cells[6]);
                        }
                    }
                    i--;
                }
            },

            disableApplyButton : function (iContentDiv) {
                var applyBttnPtr = iContentDiv.getElements('.btn-primary')[0];
                applyBttnPtr.disabled = true;
            },

            enableApplyButton : function (iContentDiv) {
                var applyBttnPtr = iContentDiv.getElements('.btn-primary')[0];
                applyBttnPtr.disabled = false;
            },

            sign: function (x) {
                return typeof x === 'number' ? x ? x < 0 ? -1 : 1 : x === x ? 0 : NaN : NaN;
            },

            transformCoordinates : function(iCoord, transVec) {
                //this.grph.views.main.vpt
                var xL, yL,
                    s = transVec[2],
                    tx = transVec[0],
                    ty = transVec[1],
                    lCoord = [];

                xL = (iCoord[0] + tx) * s;
                yL = (iCoord[1] + ty) * s;

                lCoord.push(xL);
                lCoord.push(yL);

                return lCoord;
            }

        };

        return lcview;

    });

define('DS/ParameterizationSkeleton/Views/ParameterizationMSF/MSFGCOMappingViewUtilities',
		[
			'UWA/Core',
			'DS/UIKIT/Alert',
			'DS/ParameterizationSkeleton/Views/ParametersLayoutViewUtilities',
			'i18n!DS/ParameterizationSkeleton/assets/nls/MSFContentMgmtNLS'
			],
			function (UWA, Alert, ParametersLayoutViewUtilities, MSFContentMgmtNLS) {

	'use strict';

	var gcoMappingViewUtilites = {

			initVariable: function() {
				this.cellsIndex = {
						"internalType": 0,
						"experienceType": 1,
						"policy": 2,
						"format": 3,
						"relationship": 4,
						"action": 5,
						"deploy": 6
				};
			},
			buildJsonObjectFromTableRow: function (rowInfo) {

				var obj = {};

				obj["InternalType"] = rowInfo.cells[this.cellsIndex.internalType].innerHTML;
				obj["OfficeType"] = rowInfo.cells[this.cellsIndex.experienceType].innerHTML;
				obj["Policy"] = rowInfo.cells[this.cellsIndex.policy].innerHTML;
				obj["Format"] = rowInfo.cells[this.cellsIndex.format].innerHTML;
				obj["Relationship"] = rowInfo.cells[this.cellsIndex.relationship].innerHTML;
				obj["UserOperation"] = rowInfo.cells[this.cellsIndex.deploy].UserOperation;

				return obj;
			},

			resetForFieldLineChanges: function (fieldInfo) {

				var that = this;
				if (fieldInfo.IsDeployed == "NewNotDeployed") {
					var cellValue = fieldInfo.cells[this.cellsIndex.deploy].UserOperation;
					if (cellValue == "Add") {
						return fieldInfo;
					} else if ("Remove") {
						that.resetForRemove(fieldInfo);
					}
					fieldInfo.IsDeployed = "Deployed";
					fieldInfo.cells[this.cellsIndex.deploy].UserOperation = null;
				}
			},
			
			resetForRemove: function (fieldInfo) {

				var that = this;
				var imgSpan = that.buildImgSpan('check', '2.5', 'green', MSFContentMgmtNLS.Deployed);
				var actionCell = fieldInfo.cells[this.cellsIndex.action];
				var deploycell = fieldInfo.cells[this.cellsIndex.deploy];

				that.addRemoveButtonToCellRow(actionCell, fieldInfo);
				deploycell.empty();
				imgSpan.inject(deploycell);
			},

			buildImgSpan: function (iconChoice, iconSize, iconColor, title) {
				var imgClass = 'fonticon fonticon-' + iconSize + 'x fonticon-' + iconChoice,
				imgSpan = UWA.createElement('span', {
					'class': imgClass,
					'title': title
				});

				imgSpan.setStyle("color", iconColor);
				return imgSpan;
			},

			addRemoveButtonToCellRow: function (cell, fieldInfo) {
				var removelts = ParametersLayoutViewUtilities.createActionElements(MSFContentMgmtNLS.removeMapping, true);
				var deleteSpan = removelts[0];
				deleteSpan.setStyle("float", "left");
				deleteSpan.setStyle("padding", "0px 25px");
				deleteSpan.inject(cell);
				var removeAttributeButton = removelts[1];
				var removePop = removelts[2];

				var that = this;
				removeAttributeButton.addEvent("onClick", function (e) {
					that.removeRowCallBack(fieldInfo);
				});

				return removeAttributeButton;
			},

			removeRowCallBack: function (fieldInfo) {

				if (fieldInfo.IsDeployed === "NewNotDeployed") {
					fieldInfo.remove();
				} else {
					this.removeDeployedRow(fieldInfo);
				}
			},

			removeDeployedRow: function (fieldInfo) {
				fieldInfo.IsDeployed = "NewNotDeployed";
				var arrayAction = fieldInfo.cells[this.cellsIndex.action].getElements('span');
				arrayAction.forEach(function (action) {
					action.hide();
				});

				var deploycell = fieldInfo.cells[this.cellsIndex.deploy];
				var imgSpan = this.buildImgSpan('trash', '1.5', 'red', MSFContentMgmtNLS.removedField);

				deploycell.empty();
				deploycell.UserOperation = "Remove";

				imgSpan.inject(deploycell);
			},

			getAlertMessage: function (message, className, toDisplayOn) {

				this.alertOptions = {
						visible: true,
						className: 'param-alert',
						messageClassName: className,
						closable: true,
						renderTo: toDisplayOn,
						autoHide: true,
						hideDelay: 2000
				};

				var alert = new Alert(this.alertOptions);
				alert.add({
					message: message,
				});
			}
	};
	gcoMappingViewUtilites.initVariable();
	return gcoMappingViewUtilites;

});

/**
* @quickreview  KB9 21:11:08
*/

define('DS/ParameterizationSkeleton/Utils/DELConfigurationParameterization/DELConfigurationParameterizationResourceServices',
[
  'UWA/Core',
  'UWA/Class',
  'UWA/Json',
  'DS/Logger/Logger',
  'DS/Core/Events',
  'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler'
],
function (
  UWA,
  Class,
  Json,
  Logger,
  WUXEvents,
  URLHandler
) {

  'use strict';

  var DELConfigurationParameterizationResourceServices = Class.singleton({

	  name:            'DELConfigurationParameterizationResourceServices',
    _logger:         null,
    _attributesModal : null,
    _configurationProperties : null,

    /**
    * Init Resources
    *
    * @param {string} options.assetsModule - Assets module name
    */
    init: function init(options) {
      var that = this;

      that._parent(options);

      if (UWA.is(Logger)) {
    	  that._logger = Logger.getLogger(DELConfigurationParameterizationResourceServices);
      }

 	   return that;
    },

    /**
    * initAttributeModal.
    */
    initAttributeModal : function initAttributeModal(domainId, callback){
    var that = this;

 	   if (that._attributesModal == null || that._attributesModal.get(domainId) == null){
       if (that._attributesModal == null)
        that._attributesModal = new Map();

       that.initDELConfigurationProperties({
         onSuccess: function (configurationProperties) {

           var configFileTab = [];
           var configurationPropertiesLength = configurationProperties.length;
           for (var i=0;i<configurationPropertiesLength;i++)
           {
             var domainIdTMP = configurationProperties[i].domainid;
              if (domainIdTMP === domainId)
              {
                var argTab = configurationProperties[i].argid;
                var argTabLength = argTab.length;
                for (var j=0;j<argTabLength;j++)
                {
                  if (that._attributesModal.get(argTab[j]) === undefined)
                    configFileTab.push(argTab[j]);
                }
              }
           }

           if (configFileTab.length > 0)
           {
             var attrModal = new Map();
             var promiseTab = [];

             var configFileTabLength = configFileTab.length;
             for (var i=0;i<configFileTabLength;i++)
             {
               var configFile = configFileTab[i];

               var url = URLHandler.getURL();
               if (url === undefined)
                  url = '/ParameterizationSkeleton/assets/xml/' + configFile + '.xml';
               else
                  url = url + '/webapps/ParameterizationSkeleton/assets/xml/' + configFile + '.xml';

               var lPath = url;// + '/webapps/ParameterizationSkeleton/assets/xml/' + configFile + '.xml';
               var promise = new Promise(function (resolve, reject){
                 that.loadXML(lPath, configFile, {
                   onSuccess: function (configFileTMP, attributesModal) {
                     that._attributesModal.set(configFileTMP, attributesModal);
                     attrModal.set(configFileTMP, attributesModal);
                     resolve();
                   }
                 });
               });
               promiseTab.push(promise);
              }

              UWA.Promise.all(promiseTab).then(function() {
                if (callback != undefined)
                  callback.onSuccess(attrModal);//that._attributesModal);
              });
           }
           else {

             var configFileTab = [];
             var configurationProperties = that._configurationProperties;
             var configurationPropertiesLength = configurationProperties.length;
             for (var i=0;i<configurationPropertiesLength;i++)
             {
                var domainIdTMP = configurationProperties[i].domainid;
                 if (domainIdTMP === domainId)
                   configFileTab = configurationProperties[i].argid;
             }

             var attrModal = new Map();

             var configFileTabLength = configFileTab.length;
             for (var i=0;i<configFileTabLength;i++)
               attrModal.set(configFileTab[i], that._attributesModal.get(configFileTab[i]));

           if (callback != undefined)
               callback.onSuccess(attrModal);

             //if (callback != undefined)
            //     callback.onSuccess(that._attributesModal);
           }
         }
       });
 		 }
     else
     {
          var configFileTab = [];
          var configurationProperties = that._configurationProperties;
          var configurationPropertiesLength = configurationProperties.length;
          for (var i=0;i<configurationPropertiesLength;i++)
          {
             var domainIdTMP = configurationProperties[i].domainid;
              if (domainIdTMP === domainId)
                configFileTab = configurationProperties[i].argid;
          }

          var attrModal = new Map();

          var configFileTabLength = configFileTab.length;
          for (var i=0;i<configFileTabLength;i++)
            attrModal.set(configFileTab[i], that._attributesModal.get(configFileTab[i]));

        if (callback != undefined)
            callback.onSuccess(attrModal);
      }
   },

   /**
   * initDELConfigurationProperties.
   */
   initDELConfigurationProperties : function initDELConfigurationProperties(callback){
     var that = this;

     if (that._configurationProperties == null){
      var url = URLHandler.getURL();
      if (url === undefined)
        url = '/ParameterizationSkeleton/assets/xml/DELConfigurationProperties.json';
      else
        url = url + '/webapps/ParameterizationSkeleton/assets/xml/DELConfigurationProperties.json';

      var lPath = url;// + '/webapps/ParameterizationSkeleton/assets/xml/DELConfigurationProperties.json';
        that.loadJSON(lPath, {
          onSuccess: function (configurationProperties) {
            that._configurationProperties = configurationProperties;
             if (callback != undefined)
               callback.onSuccess(that._configurationProperties);
          }
        });
     }
    else
    {
       if (callback != undefined)
           callback.onSuccess(that._configurationProperties);
     }
  },

   /**
   * loadJSON.
   */
   loadJSON : function loadJSON(filePath, callback)
   {
      //code for IE7+, Firefox, Chrome, Opera, Safari
      //else code for IE6, IE5
      var  	that = this , attributesArray;
      attributesArray = [];
       var lXMLhttp = window.XMLHttpRequest ?   new XMLHttpRequest() : new ActiveXObject("Microsoft.XMLHTTP");

      lXMLhttp["callback"] = callback;
      lXMLhttp.onload = function()     {
      if (this.callback != null && this.callback.onSuccess)
        this.callback.onSuccess (JSON.parse(lXMLhttp.responseText));
      }

      lXMLhttp.open("GET", filePath, true);
      lXMLhttp.setRequestHeader("Content-Type", "application/json");
      lXMLhttp.send();
   },

    /**
    * loadXML.
    */
    loadXML : function loadXML(filePath, configFile, callback)
    {
	      //code for IE7+, Firefox, Chrome, Opera, Safari
	      //else code for IE6, IE5
	      var  	that = this , attributesArray;
	      attributesArray = [];
        var lXMLhttp = window.XMLHttpRequest ?   new XMLHttpRequest() : new ActiveXObject("Microsoft.XMLHTTP");

	      lXMLhttp["callback"] = callback;
	      lXMLhttp.onload = function()     {

    	  var xmlDoc = new DOMParser().parseFromString(lXMLhttp.responseText,'text/xml');
    	  if (this.callback != null && this.callback.onSuccess)
    		  this.callback.onSuccess (configFile, xmlDoc);
	      }

	      lXMLhttp.open("GET", filePath, true);
	      lXMLhttp.setRequestHeader("Content-Type", "text/xml");
	      lXMLhttp.send();
    },

    /**
    * _getAttributes.
    */
    _getAttributes : function _getAttributes(xmlDoc, parenttagName, childNode)
    {
      	var  output = [];
        var parentNode;
        var childNodes;
        if (childNode === undefined)
        {
          parentNode = xmlDoc.getElementsByTagName (parenttagName);
          childNodes = parentNode[0].childNodes;
        }
        else
         {
           parentNode = childNode;
           childNodes = parentNode.childNodes;
         }


  		if (parentNode === null || parentNode.length === 0)
  			return output;


  		for (var i=0; i < childNodes.length; i++)
      {
  			if (childNodes[i].nodeType != 1)
  				continue;

          if (childNodes[i].children.length === 0)
          {
            if (childNode)
              output.push ({'attribute': parenttagName + "_" + childNodes[i].tagName,	'value': childNodes[i].textContent});
            else
  			     output.push ({'attribute': childNodes[i].tagName,	'value': childNodes[i].textContent});
          }
          else
              output = output.concat(this._getAttributes(xmlDoc, childNodes[i].tagName, childNodes[i]));
  	  }
  		return output;
    }

  });

  return DELConfigurationParameterizationResourceServices;
});

/**
* @quickreview  KB9 21:10:25 creation
* @quickreview  ROW 22:10:13 FUN129061 - removed OnPremise specific checks
*/


define('DS/ParameterizationSkeleton/Collection/ParameterizationDELCollectionList', [
    'UWA/Core',
    'UWA/Class/Collection',
    'DS/ParameterizationSkeleton/Model/ParameterizationDomainsListModel',
    'WebappsUtils/WebappsUtils',
    'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler',
    'DS/ParameterizationSkeleton/Utils/DELConfigurationParameterization/DELConfigurationParameterizationWebServices',
    'DS/ParameterizationSkeleton/Utils/DELConfigurationParameterization/DELConfigurationParameterizationResourceServices',
    //'i18n!DS/ParameterizationSkeleton/assets/nls/ParamSkeletonNLS',
    'i18n!DS/ParameterizationSkeleton/assets/nls/DELConfigurationProperties'
], function (
  UWA,
  Collection,
  ParameterizationDomainsModel,
  WebappsUtils,
  URLHandler,
  DELConfigurationParameterizationWebServices,
  DELConfigurationParameterizationResourceServices,
  Nls
  )
  {
    'use strict';

    return Collection.extend({
        model : ParameterizationDomainsModel,


        fetch : function (options) {
          UWA.log("ParameterizationDELCollectionList::setup");
          var that = this;

          // if (widget.getValue('x3dPlatformId') === 'OnPremise')
          // {
          var promiseTab = [];
          var promiseEnvVar = new Promise(function (resolve, reject){
          DELConfigurationParameterizationWebServices.getEnvVar({
            onSuccess : function(mapvarEnv)
            {
              that._mapvarEnv = mapvarEnv;
                resolve();
            },
            onFailure : function(error)
            {
                reject("DELConfigurationParameterizationWebServices.getEnvVar");
              console.error("DELConfigurationParameterizationWebServices.getEnvVar");
            }
          });
          });

          promiseTab.push(promiseEnvVar);

          /*var promiseConfiguration = new Promise(function (resolve, reject){
            DELConfigurationParameterizationResourceServices.initDELConfigurationProperties({
              onSuccess : function(configData)
              {
                resolve(configData);
        },
              onFailure : function(error)
              {
                reject("DELConfigurationParameterizationResourceServices.initDELConfigurationProperties");
                console.error("DELConfigurationParameterizationResourceServices.initDELConfigurationProperties");
              }
            });
          });

          promiseTab.push(promiseConfiguration);*/

          UWA.Promise.all(promiseTab).then(function(data) {
            Collection.prototype.fetch.call(that);
          });
        // }
        // else {
        //   Collection.prototype.fetch.call(that);
        // }
        },

        setup: function () {
          UWA.log("ParameterizationDELCollectionList::setup");
          var that = this;
          this.url = WebappsUtils.getWebappsAssetUrl('ParameterizationSkeleton', 'xml/DELConfigurationProperties.json');
        },

        /*sync : function(method, model, options) {
            UWA.log("ParameterizationDELCollectionList::sync");
            var that = this;

            //options.contentType = 'application/json';
            options.proxy = 'passport';
            options.headers = {
                'Accept-Language' : widget.lang
            };

            //'Accept-Language' : widget.lang
            //options.acceptLanguage = widget.lang;
            this._parent.apply(this, [method, model, options]);
        },*/

        parse: function (data) {
            UWA.log("ParameterizationDELCollectionList::parse");
            var that = this;
            var paramEntries = [];

            // if (widget.getValue('x3dPlatformId') === 'OnPremise')
            // {
              if (Array.isArray(data)) {
             var appData = data;
              appData.forEach(function (iElement) {

                  if (iElement.envVar === undefined || iElement.envVar === null ||
                  (that._mapvarEnv != undefined && that._mapvarEnv["DELMIAParameterizationEnvVariable"] === iElement.envVar))
                      {
                    var titleText = Nls[iElement.domainid + "Text"];
                    var titleTooltip = Nls[iElement.domainid + "Tooltip"];

                        paramEntries.push({
                            title          : titleText,
                            subtitle       : titleTooltip,
                            introduction   : titleTooltip,
                            image          : URLHandler.getURL() + "/webapps/ParameterizationSkeleton/assets/img/" + iElement.image,
                            domainid       : iElement.domainid,
                        //familyid       : iElement.familyid,
                        id             : iElement.domainid
                        });
                      }
                  });
              }
            // }
            // else {
            //   if (Array.isArray(data)) {
            //      var appData = data;
            //       appData.forEach(function (iElement) {
            //
            //         if (iElement.domainid != "DigitalManufacturing" && (iElement.envVar === undefined || iElement.envVar === null))
            //         {
            //             var titleText = Nls[iElement.domainid + "Text"];
            //             var titleTooltip = Nls[iElement.domainid + "Tooltip"];
            //
            //                 paramEntries.push({
            //                     title          : titleText,
            //                     subtitle       : titleTooltip,
            //                     introduction   : titleTooltip,
            //                     image          : URLHandler.getURL() + "/webapps/ParameterizationSkeleton/assets/img/" + iElement.image,
            //                     domainid       : iElement.domainid,
            //                     //familyid       : iElement.familyid,
            //                     id             : iElement.domainid
            //                 });
            //               }
            //           });
            //       }
            // }

            return paramEntries;
        }
      });
});

//@fullReview  ZUR 16/04/05 2017x, enhancing code organization for Jasmine/KarmaReplay Tests
/*global define, document, clearTimeout, setTimeout*/
/*jslint plusplus: true*/

define('DS/ParameterizationSkeleton/Views/ParameterizationLifecycle/LifecycleEgraphUtilities',
    [
        'UWA/Core',
        'egraph/core',
        'egraph/views',
        'DS/ParameterizationSkeleton/Views/ParameterizationLifecycle/ParamStepGeometry',
        'DS/UIKIT/Input/Button',
        'DS/UIKIT/Input/Text',
        'DS/ParameterizationSkeleton/Views/ParameterizationLifecycle/LifecycleViewUtilities',
		'i18n!DS/ParameterizationSkeleton/assets/nls/ParamSkeletonNLS'
    ],
    function(UWA, core, views,
            StepGx,
            Button, Text,
            LifecycleViewUtilities, ParamSkeletonNLS) {

        'use strict';
        //'UWA/Controls/Abstract',
        var lcview = {

            addeGraphDivs: function() {
                var content, canvas, placeholder,
                    divArrays = new Array(2);
                //
                content = UWA.createElement("div", {
                    'id': 'main_Content_Div'
                });
                canvas = UWA.createElement("div", {
                    'id': 'graph_canvas'
                });
                canvas.addClassName("canvas");
                canvas.setStyle("height", "100%");
                canvas.setStyle("width", "100%");
                //
                placeholder = UWA.createElement("div");
                placeholder.addClassName("graphPlaceholder");
                //
                content.addContent(placeholder);
                content.addContent(canvas);
                divArrays[0] = content;
                divArrays[1] = canvas;

                return divArrays;
            },
             /**
             * Procedure addEdgeArrowDesign
             * This method creates the design of the arrow and injects it (hidden) into the body
             * @author TEE1
             */
            addEdgeArrowDesign : function (widget) {
                //The elements are all created with an NLS so they can't
                //be created with a UWA function but they need to inherit
                var svg = UWA.extendElement(document.createElementNS('http://www.w3.org/2000/svg', 'svg')),
                    defs = UWA.extendElement(document.createElementNS('http://www.w3.org/2000/svg', 'defs')),
                    marker = UWA.extendElement(document.createElementNS('http://www.w3.org/2000/svg', 'marker')),
                    path = UWA.extendElement(document.createElementNS('http://www.w3.org/2000/svg', 'path'));
                svg.set({
                    "width" : 0,
                    "height" : 0
                });
                svg.set("style", "position", "absolute");
                marker.set({
                    "id": "arrow-edge-end-marker",
                    "markerWidth": "10",
                    "markerHeight": "8",
                    "refX": "8",
                    "refY" : "4",
                    "orient": "auto"
                });
                path.set({
                    "d": "M 0 0 L 10 4 L 0 8",
                    "fill": "#777",
                    "stroke": "none"
                });
                path.inject(marker);
                marker.inject(defs);
                defs.inject(svg);
                svg.inject(widget.body);
            },
            /**
             * Connector factory
             * @param {number} side the attachement side
             * @param {number} row the row index of the connector
             * @return {module:egraph/core.Connector} new connector instance
             */
            createConnector: function (side, row) {
                var connector, offset;

                offset = row;//20 + 30 * row;
                connector = new core.Connector();
                // instantiate default connector view
                connector.views.main = new views.SVGConnView();
                // use multiset to force the dispatch of properties change
                // notifications to group all modifications of connectors
                // properties (again, not really useful in that specific case)
                connector.multiset(['cstr', 'attach'], side,
                                   ['cstr', 'offset'], offset);

                //console.log(connector);
                return connector;
            },

            /**
            * Add an edge between two connectors.
            * @param {module:egraph/core.Connector} c1
            * @param {module:egraph/core.Connector} c2
            * @returns {module:egraph/core.Edge} the new edge
            */
            builTransitiondEdge : function (stub) {
                var edge = new core.Edge(),
                    currstepGeometry = new StepGx.ParamStepGeometry(stub);
                //increment minTangentLength in order to avoir overlapping
                //autoBezierGeometry.minTangentLength = autoBezierGeometry.minTangentLength+20;             
                //stepGeometry.stubScenario = stub;    
                UWA.log("Setting stepGeometry.stubScenario = " + currstepGeometry.stubScenario);
                edge.set('geometry', currstepGeometry); //edge.set('geometry', autoBezierGeometry);            
                edge.views.main = new views.SVGEdgeView('arrow-edge'); //edge.views.main = new views.SVGEdgeView();
                return edge;
            },

            buildpropsNode: function (elt, fctChange) {

                var selectedObjpropsDiv, insertDiv, timerconn, closeButton,
                    iXCoordinate, iYCoordinate, pathArray, nbofPoints,
                    newRow, newCell, newCell2, titleTable, currentCheck,
                    elementName, iV,
                    worldCoord = [];
                    //headerTable, tbody, testX, removeStateButton

                lcview.removePropsNode();

                if (elt) {
                    if (elt.type === core.Type.EDGE) {
                        //elementType = "Transition";
                        elementName = elt.signatureNLS;
                    }
                }

                pathArray = elt.path;
                nbofPoints = pathArray.length / 3;
                iYCoordinate = pathArray[5] - LifecycleViewUtilities.sign(pathArray[5]) * 40;//50
                iXCoordinate = (pathArray[1] + pathArray[(nbofPoints - 1) * 3 + 1]) / 2;

                if (nbofPoints === 2) {
                    iYCoordinate = pathArray[5] - LifecycleViewUtilities.sign(pathArray[5]) * 15;//20
                }

                worldCoord.push(iXCoordinate);
                worldCoord.push(iYCoordinate);
                iV = LifecycleViewUtilities.transformCoordinates(worldCoord, elt.gr.views.main.vpt);

                //testX = (elt.cl1.c.aleft + elt.cl2.c.aleft) / 2;

                selectedObjpropsDiv =  UWA.createElement('div', {'id': 'propsTransitionDiv'});
                selectedObjpropsDiv.setStyle("visibility", "visible");//hidden
                selectedObjpropsDiv.setStyle("left", iV[0]);// iXCoordinate "40em" elt.cl1.c.aleft
                selectedObjpropsDiv.setStyle("top", iV[1]);//iYCoordinate 2em     elt.cl1.c.atop

                titleTable =  UWA.createElement('table', {
                    'width': '100%'
                }).inject(selectedObjpropsDiv);

                newRow = UWA.createElement('tr', {title: ''}).inject(titleTable);
                newCell2 = UWA.createElement('td',
                        {'width': '90%', 'title': ''}).inject(newRow);

                /*UWA.createElement('h4', {
                    text: 'properties',// font-3dsbold ParamWdgNLS
                    'class': 'font-3dslight'
                }).inject(newCell);*/

                newCell = UWA.createElement('td',
                        {'width': '10%', 'title': ''}).inject(newRow);

                //fonticon-2x

                closeButton = new Button({
                    className: 'close',
                    id : 'togglepropsBox',//  html: '&times;',
                    icon : ' cancel',//value: 'Button',

                    attributes: {
                        disabled: false,
                        'aria-hidden' : 'true',
                        title : ParamSkeletonNLS.Close //NZV:IR-629593-3DEXPERIENCER2019x
                    //  text : ParamWdgNLS.Apply
                    }
                }).inject(newCell);

                /*headerTable =  UWA.createElement('table', {
                    'id': 'propBoxheader',
                    'class': 'table table-condensed table-hover',
                    'width': '100%'
                }).inject(selectedObjpropsDiv);

                tbody = UWA.createElement('tbody').inject(headerTable);
                newRow = UWA.createElement('tr', {title: ''}).inject(tbody);
                newCell = UWA.createElement('td', {'width': '40%', 'title': ''}).inject(newRow);
                UWA.createElement('strong', {text: 'Name'}).inject(newCell);

                newCell = UWA.createElement('td',
                        {'width': '60%', 'title': ''}).inject(newRow);*/

                currentCheck = new Text({
                    placeholder: "...",
                    attributes: {
                        value: elementName,
                        multiline: true,
                        disabled: false
                    },
                    events: {
                        onChange: function () {//IR-695253-3DEXPERIENCER2019x FD06, 20x FD01: remove currentCheck.getValue()
                            fctChange(elt, currentCheck, true);
                            UWA.log("onchange");
                        },
                        onKeyDown: function () {

                            if (timerconn) { clearTimeout(timerconn); }
                            timerconn = setTimeout(function() {
                                 fctChange(elt, currentCheck, false);
                            }, 20);
                        }
                    }
                }).inject(newCell2);

                closeButton.addEvent("onClick", function () {
                    lcview.removePropsNode();
                    fctChange(elt, currentCheck, true);
                });

                /*onKeyDown: function () {
                    console.log("onKeyDown");
                //UIUtilities.beingModified(imgCell, ParamWdgNLS.Being_Modified);
                 }*/

                insertDiv = document.getElementsByClassName("egraph_views_domroot")[0];
                insertDiv.appendChild(selectedObjpropsDiv);
            },

            removePropsNode : function () {
                var child = document.getElementById("propsTransitionDiv");
                if (child) {
                    if (child.parentNode) {
                        child.parentNode.removeChild(child);
                    }
                }
            }


        };

        return lcview;

    });

/*! Copyright 2017, Dassault Systemes. All rights reserved. */

/*@quickReview NZV 17/05/09 Add getDimensions function & fixed IR-519160-3DEXPERIENCER2018x*/
/*@quickReview NZV 18/04/27 Function FUN076055 19x Beta2 : Added getPredicatesObject, getPredicatesReturn */
/*global define*/
define(
    'DS/ParameterizationSkeleton/Utils/ParameterizationGenericServices',
    [
        'UWA/Core',
        'UWA/Promise',
        'DS/WAFData/WAFData',
        'DS/FedDictionaryAccess/FedDictionaryAccessAPI',
        'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler'
    ],
    function(UWA, Promise, WAFData, Dico, URLHandler) {

        'use strict';

        var genericWSUtils = {

            compareDimensionObject : function(dimObj1, dimObj2) {
                if (dimObj1.NLS !== undefined && dimObj2.NLS !== undefined) {
                    return dimObj1.NLS.localeCompare(dimObj2.NLS);
                } else {
                    var nameDim1 = dimObj1.Name.toUpperCase(),
                        nameDim2 = dimObj2.Name.toUpperCase(); // ignore upper and lowercase
                    if (nameDim1 < nameDim2) {
                        return -1;
                    }
                    if (nameDim1 > nameDim2) {
                        return 1;
                    }

                    // names must be equal
                    return 0;
                }

            },

            dimensionOnSuccess : [],

            dimensionOnFail : [],

            getDimensions : function (onSuccess, OnDimServiceFail) {

                var url = URLHandler.getURL() + '/resources/dictionary/dimensions';

                if (genericWSUtils.dimensionOnSuccess.length > 0) {
                    genericWSUtils.dimensionOnSuccess.push(onSuccess);
                    genericWSUtils.dimensionOnFail.push(OnDimServiceFail);
                } else {

                    genericWSUtils.dimensionOnSuccess.push(onSuccess);
                    genericWSUtils.dimensionOnFail.push(OnDimServiceFail);
                    WAFData.authenticatedRequest(url, {
                        headers: {
                            'Accept' : 'application/json',
                            //'Content-Type' : 'application/json',
                            'Accept-Language' : widget.lang
                        },
                        method: 'get',
                        type: 'json',

                        onComplete: function (json) {
                            if (json !== 'undefined') {
                                if (json.results !== 'undefined') {
                                    json.results.sort(genericWSUtils.compareDimensionObject);
                                    genericWSUtils.dimensionOnSuccess.forEach(function (item) {
                                        item(json.results);
                                    });
                                }
                            }
                            while (genericWSUtils.dimensionOnSuccess.length > 0) {
                                genericWSUtils.dimensionOnSuccess.shift();
                            }
                            while (genericWSUtils.dimensionOnFail.length > 0) {
                                genericWSUtils.dimensionOnFail.shift();
                            }
                            genericWSUtils.dimensionOnFail = [];
                            genericWSUtils.dimensionOnSuccess = [];
                        },
                        onFailure: function(json) {
                            UWA.log("onFailure : getDimensions funciton failed.Not able to call " + url);
                            UWA.log(json);
                            genericWSUtils.dimensionOnFail.forEach(function (item) {
                                item.call();
                            });
                            while (genericWSUtils.dimensionOnFail.length > 0) {
                                genericWSUtils.dimensionOnFail.shift();
                            }
                            while (genericWSUtils.dimensionOnSuccess.length > 0) {
                                genericWSUtils.dimensionOnSuccess.shift();
                            }
                            genericWSUtils.dimensionOnFail = [];
                            genericWSUtils.dimensionOnSuccess = [];
                        }
                    });
                }
            },

            getSessionInfo : function () {
                var sessionObj = new Promise(function (resolve, reject) {
                    var url = URLHandler.getURL() + '/resources/enocsmrest/session?tenant=' + URLHandler.getTenant();
                    WAFData.authenticatedRequest(url, {
                        headers: {
                            'Accept' : 'application/json',
                            //'Content-Type' : 'application/json',
                            'Accept-Language' : widget.lang
                        },
                        method: 'get',
                        type: 'json',

                        onComplete: function (json) {
                            if (json !== 'undefined') {
                                resolve(json);
                            }
                        },
                        onFailure: function(json) {
                            UWA.log("Paramaterization::Services falied! :" + url);
                            UWA.log(json);
                            reject(json);

                        }
                    });
                });
                return sessionObj;
            }, //end of getSessionInfo
           //Remomve before delivry
            // loginStep : function () {
            //     var loginObj1 = new Promise(function (resolve, reject) {
            //         var url = "https://vdevpril464dsy.ux.dsone.3ds.com:453/iam/login?action=get_auth_params";
            //         WAFData.authenticatedRequest(url, {
            //             headers: {
            //                // 'Accept' : 'text/html',
            //                // 'Content-Type' : 'text/html',
            //                 'Accept-Language' : widget.lang
            //             },
            //             method: 'get',
            //            // type: 'html',

            //             onComplete: function (result) {
            //                 resolve(result);
            //             },
            //             onFailure: function(error, responseAsString) {
            //                 UWA.log("Paramaterization::loginStep1 falied! :" + url);
            //                 UWA.log(error);
            //                 reject(responseAsString);

            //             }
            //         });
            //     });
            //     return loginObj1;
            // },//Remomve before delivry
            // loginToRDFServer : function(userTicket) {
            //     var respJson = JSON.parse(userTicket);
            //     var LT = respJson.lt;
            //     var loginObj = new Promise(function (resolve, reject) {
            //         //var url ='https://vdevpril464dsy.ux.dsone.3ds.com:453/iam/login?service=https%3A%2F%2Fvdevpril510dsy.ux.dsone.3ds.com%2F3DRDFPersist%2Fv0%2Finvoke%2Fdsbase%3AgetFedProperties';
            //         var url = 'https://vdevpril464dsy.ux.dsone.3ds.com:453/iam/login?service=https%3A%2F%2Fvdevpril510dsy.ux.dsone.3ds.com%2F3DRDFPersist%2Fservice%2FrdfQL%3Fquery%3Dshow%2520context';
            //          WAFData.authenticatedRequest(url, {
            //             headers: {
            //                 //'Accept' : 'text/html',
            //                 'Content-Type' : 'application/x-www-form-urlencoded;charset=UTF-8',
            //                 'Accept-Language' : widget.lang
            //             },
            //             //application/x-www-form-urlencoded;charset=UTF-8
            //             method: 'post',
            //            // data : 'lt=LT-10617-RMtdUSexQQ0j7CSyR4fYqgVdXc5PIA&fp=f15adf37375019a0d3b8f5f42d57bfe228fe2da050ef97a7e3f5be92dbc4aaacea07d4b1cd90ef29d22ab22a79a83f2b7413b8834f773b33ab270b4285cc0896&username=VPLMAdminUser&password=Passport1',
            //            data : "lt="+ LT+ "&username=VPLMAdminUser&password=Passport1",
            //             onComplete: function (json) {
            //                 if (json !== 'undefined') {
            //                    resolve(json);
            //                 } 
            //             },
            //             onFailure: function(error, responseAsString) {
            //                 UWA.log("Paramaterization::loginToRDFServer falied! :" + url);
            //                 UWA.log(error);
            //                 reject(error);

            //             } 
            //          });
            //     });
            //     return loginObj;
            // },
            isThisNotARootPredicates : function  (item) {
                // var rootPredicates = ["ds6w:what", "ds6w:why", "ds6w:when", "ds6w:where", "ds6w:how", "ds6w:who"], i;
                // for (i = 0; i < rootPredicates.length; i++) {
                //     if (rootPredicates[i] === item.curi.toLowerCase()) { return false; }
                // }
                // return true;
                return ((item.subPropertyOf === "") ? false : true);
            },

            filter6WRootPredicates : function (listofsixWTags) {
                var predicatesList, propt = "ds6w";
                //for (propt in listofsixWTags) {
                if (listofsixWTags[propt].properties.length > 0) {
                    predicatesList = listofsixWTags[propt].properties;
                    if (predicatesList !== undefined && predicatesList.length > 0) {
                        listofsixWTags[propt].properties = predicatesList.filter(genericWSUtils.isThisNotARootPredicates);
                    }
                }
                //}
                return listofsixWTags;
            },

            getPredicatesObject : function () {
                var rdfPredicateServiceObj = new Promise(function (resolve, reject) {
                        var ontologyServiceObj =  {
                            onComplete: function(result) {
                                UWA.log("Got a predicates result!" + result);
                                resolve(result);
                            },
                            onFailure: function(errorMessage) {
                                UWA.log("predicates service request Fail!" + errorMessage);
                                reject(errorMessage);
                            },
                            tenantId: URLHandler.getTenant(),
                            lang: widget.lang,
                            apiVersion: "R2019x",
							onlyMappable: true //IR-619053-3DEXPERIENCER2019x 							
                        };
                        Dico.getFedProperties(ontologyServiceObj);             
                    });
                return rdfPredicateServiceObj;
            }, //end of getPredicatesObject

            onSuccessPredicateActionList : [],

            OnFailedPredicateActionList : [],

            getPredicatesReturn : function (onSuccess, onFailed) {
                if (genericWSUtils.onSuccessPredicateActionList.length > 0) {
                    genericWSUtils.onSuccessPredicateActionList.push(onSuccess);
                    genericWSUtils.OnFailedPredicateActionList.push(onFailed);
                } else {
                    genericWSUtils.onSuccessPredicateActionList.push(onSuccess);
                    genericWSUtils.OnFailedPredicateActionList.push(onFailed);
                    genericWSUtils.getPredicatesObject()
                        .then(function (result) {
                            result = genericWSUtils.filter6WRootPredicates(result);
                            genericWSUtils.onSuccessPredicateActionList.forEach(function (item) {
                                item(result);
                            });
                            genericWSUtils.OnFailedPredicateActionList = [];
                            genericWSUtils.onSuccessPredicateActionList = [];
                        })['catch'](function (errorMessage) {
                            genericWSUtils.OnFailedPredicateActionList.forEach(function (item) {
                                item(errorMessage);
                            });
                            genericWSUtils.OnFailedPredicateActionList = [];
                            genericWSUtils.onSuccessPredicateActionList = [];
                        });
                }

            },//end of getPredicatesReturn
			//FUN124183
            getListOfDomains : function () {
              var objListDomains = new Promise(function (resolve, reject) {
                  var url =  URLHandler.getURL() + "/resources/ParamWS/access/listofDomains?tenant=" + URLHandler.getTenant();
                  WAFData.authenticatedRequest(url, {
                    headers: {
                        'Accept' : 'application/json',
                        //'Content-Type' : 'application/json',
                        'Accept-Language' : widget.lang
                    },
                    proxy :'passport',
                    method: 'get',
                    type: 'json',

                      onComplete: function (json) {
                          if (json !== 'undefined') {
                              resolve(json);
                          }
                      },
                      onFailure: function(json) {
                          UWA.log("Paramaterization::Services falied! :" + url);
                          UWA.log(json);
                          reject(json);

                      }
                  });
              });
              return objListDomains;
            }
        };
        return genericWSUtils;
    }
);



define(
    'DS/ParameterizationSkeleton/Utils/ParameterizationApriso3DExperience/ParameterizationApriso3DExpWebServices',
    [
        'UWA/Core',
        'UWA/Class',
        'DS/WAFData/WAFData',
        'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler'
    ],
    function(UWA, Class, WAFData, URLHandler) {

        'use strict';

        var ParameterizationApriso3DExpWebServices = Class.singleton({
            getlistofDELMIATypes : function (types, callback) {

                var url = URLHandler.getURL() + "/resources/exchange/param/apriso/configuration/getlistofDELMIATypes";
                var datatoSend = {
                    types : types
                };

                WAFData.authenticatedRequest(url, {
                    timeout: 100000,
                    method: 'POST',
                    data: JSON.stringify(datatoSend),
                    type: 'json',
                    headers: {
                        'Content-Type' : 'application/json',
                        'Accept' : 'application/json'
                    },

                    onFailure : function (json) {
                        callback.onFailure(json);
                    },

                    onComplete: function(json) {
                      callback.onSuccess(json);
                    }
                });
            }/*,

            getParameters : function (domainid, familyid, callback) {

                //var url = URLHandler.getURL() + "/resources/exchange/param/apriso/configuration/getParameters?familyID=";
                var url = URLHandler.getURL() + "/resources/delmia/param/configuration/getParameters?familyID=";
                if ((familyid != null || familyid != undefined) && (domainid != null || domainid != undefined))
                  url += familyid + "&domainID=" + domainid;

                WAFData.authenticatedRequest(url, {
                    timeout: 100000,
                    method: 'GET',
                    type: 'json',
                    headers: {
                        'Content-Type' : 'application/json',
                        'Accept' : 'application/json'
                    },

                    onFailure : function (json) {
                        callback.onFailure(json);
                    },

                    onComplete: function(json) {
                      callback.onSuccess(json);
                    }
                });
            },

            setParameters : function (domainid, familyid, params, callback) {

                //var url = URLHandler.getURL() + "/resources/exchange/param/apriso/configuration/setParameter";
                var url = URLHandler.getURL() + "/resources/delmia/param/configuration/setParameter";
                /*var datatoSend = {
                    params : params
                };*/

                /*var datatoSend = {
                  domain : domainid,
                  family : familyid,
                  params : params
                }

                WAFData.authenticatedRequest(url, {
                    timeout: 100000,
                    method: 'POST',
                    data: JSON.stringify(datatoSend),
                    type: 'json',
                    headers: {
                        'Content-Type' : 'application/json',
                        'Accept' : 'application/json'
                    },

                    onFailure : function (json) {
                        callback.onFailure(json);
                    },

                    onComplete: function(json) {
                      callback.onSuccess(json);
                    }
                });
            },

            isDeployed : function (domainid, familyid, params, callback) {

                //var url = URLHandler.getURL() + "/resources/exchange/param/apriso/configuration/isDeployed";
                var url = URLHandler.getURL() + "/resources/delmia/param/configuration/isDeployed";
                /*var datatoSend = {
                    params : params
                };*/

              /*  var datatoSend = {
                  domain : domainid,
                  family : familyid,
                  params : params
                }

                WAFData.authenticatedRequest(url, {
                    timeout: 100000,
                    method: 'POST',
                    data: JSON.stringify(datatoSend),
                    type: 'json',
                    headers: {
                        'Content-Type' : 'application/json',
                        'Accept' : 'application/json'
                    },

                    onFailure : function (json) {
                        callback.onFailure(json);
                    },

                    onComplete: function(json) {
                      callback.onSuccess(json);
                    }
                });
            },

            deleteParameter : function (domainid, familyid, params, callback) {

                //var url = URLHandler.getURL() + "/resources/exchange/param/apriso/configuration/deleteParameter";
                var url = URLHandler.getURL() + "/resources/delmia/param/configuration/deleteParameter";
                /*var datatoSend = {
                    params : params
                };*/

            /*    var datatoSend = {
                  domain : domainid,
                  family : familyid,
                  params : params
                }

                WAFData.authenticatedRequest(url, {
                    timeout: 100000,
                    method: 'POST',
                    data: JSON.stringify(datatoSend),
                    type: 'json',
                    headers: {
                        'Content-Type' : 'application/json',
                        'Accept' : 'application/json'
                    },

                    onFailure : function (json) {
                        callback.onFailure(json);
                    },

                    onComplete: function(json) {
                      callback.onSuccess(json);
                    }
                });
            },


            deleteAllParameters : function (callback) {

                var url = URLHandler.getURL() + "/resources/exchange/param/apriso/configuration/deleteAllParameters";

                WAFData.authenticatedRequest(url, {
                    timeout: 100000,
                    method: 'DELETE',
                    type: 'json',
                    headers: {
                        'Content-Type' : 'application/json',
                        'Accept' : 'application/json'
                    },

                    onFailure : function (json) {
                        callback.onFailure(json);
                    },

                    onComplete: function(json) {
                      callback.onSuccess(json);
                    }
                });
            }*/

        });
        return ParameterizationApriso3DExpWebServices;
    }
);

define('DS/ParameterizationSkeleton/Views/ParameterizationLifecycle/LabelEdgeView', 
[
     'UWA/Core',   
     'egraph/core', 
     'egraph/views', 
     'egraph/utils',    
     'DS/ParameterizationSkeleton/Views/ParameterizationLifecycle/ParamStepGeometry',
],function(UWA, 
           core, views, utils,
           StepGeo)
{  /**
         * Add an edge between two connectors.
         * @param {module:egraph/core.Connector} c1
         * @param {module:egraph/core.Connector} c2
         * @returns {module:egraph/core.Edge} the new edge
         */ 

        var svgNS ='http://www.w3.org/2000/svg',xlinkNS = 'http://www.w3.org/1999/xlink';
        var nextUID_x = 0;

        var exports = {};  
        var currSign = "";//removeit ne sert à rien

        exports.LabelEdgeView = function (signature) {
            
            currSign = signature; //removeit ne sert à rien
            views.SVGEdgeView.call(this);
        },

        utils.inherit(exports.LabelEdgeView, views.SVGEdgeView);

        exports.LabelEdgeView.prototype.className = 'arrow-edge';

        exports.LabelEdgeView.prototype.oncreateDisplay = function (e) {
        var textPath;

        views.SVGEdgeView.prototype.oncreateDisplay.apply(this, arguments);

        // assign a unique ID to the path that can be later referenced
        // by the <textPath>
        this.display.elt.id = makeUniqueID2();

        // create a <textPath> following the edge's path
        textPath = document.createElementNS(svgNS, 'textPath');
        // set the reference to edge's path
        textPath.setAttributeNS(xlinkNS, 'href', '#' + this.display.elt.id);
        // set the offset so that the text anchor is centered --> 20%
        textPath.setAttribute('startOffset', '20%');
        // insert the text content
        textPath.appendChild(document.createTextNode(e.signature));

        // create a <text> for the <textPath>
        this.display.text = document.createElementNS(svgNS, 'text');
        // offset the text of 5 above the path (can't be assigned in CSS)
        this.display.text.setAttribute('dy', '-5');
        // assign the CSS class to the text
        utils.classListAdd(this.display.text, 'edge-text');
        // append the <textPath>
        this.display.text.appendChild(textPath);
        // append the <text> to the structure of the edge's view
        this.structure.root.appendChild(this.display.text);
        };


        function makeUniqueID ()
        {
        
            function next() {
                return '--path' + nextUID++;
            }

            var nextUID = 0;
            UWA.log("next = "+next);
            return next;
        }

        function makeUniqueID2 ()
        {
        
            var yx =  '--path' + nextUID_x++;        
            UWA.log("yx = "+yx);
            return yx;
        }
  


        return exports;

});    

/*global define*/
define('DS/ParameterizationSkeleton/Views/ParameterizationLifecycle/ParamEdgeView',
     [
        'UWA/Core',
        'egraph/core',
        'egraph/views',
        'egraph/utils',
        'DS/ParameterizationSkeleton/Views/ParameterizationLifecycle/LabelEdgeView',
        'DS/ParameterizationSkeleton/Views/ParameterizationLifecycle/ParamStepGeometry'
    ], function(UWA,
           core, views, utils,
           LabelEdgeView, StepGeo) {
        'use strict';

        var edgebuild = {

            buildEdge : function (stub, signature) {
                var edge = new core.Edge(),
                    currstepGeometry = new StepGeo.ParamStepGeometry(stub);

                edge.set('geometry', currstepGeometry);
                edge.views.main = new views.SVGEdgeView('arrow-edge');
                //    edge.views.main = new LabelEdgeView.LabelEdgeView(signature);
                return edge;
            },
        };

        return edgebuild;
    });

/**
* @quickreview  KB9 21:10:25 creation
*/

define('DS/ParameterizationSkeleton/Views/DELConfigurationParameterization/DELConfigurationToastMessage',
[
  'UWA/Class',
  'DS/Controls/Button',
  'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler'
],
function (
  Class,
  WUXButton,
  URLHandler
)
{
    'use strict';


var DELConfigurationToastMessage = Class.extend({
        contentToastView : null,
        contentView : null,

        /*
        * init
        */
        init : function init(div)
        {
          var that = this;
          that.contentToastView = UWA.createElement('div',
          {
            'id': 'toastMessage'
          }).inject(div);

          /*that.contentToastView.setStyles({
            'border': '1px solid black',
            'position': 'absolute'
          });*/
        },

        /*
        * onClose
        */
        onClose : function onClose()
        {
          var that = this;
          if (that.contentToastView)
            that.contentToastView.className = that.contentToastView.className.replace("show", "");
        },

        /*
        * buildToastMessage
        */
        buildToastMessage : function buildToastMessage(messageType, message)
        {
          var that = this;
          if (that.contentToastView.getChildren().length)
            that.contentToastView.removeChild(that.contentToastView.getChildren()[0]);

          that.contentView = UWA.createElement('div');

          var imgelem = document.createElement("img");
          var iconName = '';
          var backgroundcolor = '';
          if (messageType === 0)//Info
          {
            iconName = 'I_Info';
            backgroundcolor = '#f1f3f4';
          }
          else if (messageType === 1)//Warning
          {
            iconName = 'I_Warning';
            backgroundcolor = '#ffe893';
          }
          else if (messageType === 2)//Error
          {
            iconName = 'I_Error';
            backgroundcolor = '#fff0ee';
          }
          else if (messageType === 3)//Success
          {
            iconName = 'I_Success';
            backgroundcolor = '#edf6eb';
          }

          imgelem.setAttribute("src", URLHandler.getURL() +  '/webapps/ParameterizationSkeleton/assets/icons/'+ iconName +'.png');

          that.contentView.setStyles({
            'background-color': backgroundcolor
          });
          that.contentView.setHTML(message);
          that.contentView.prepend(imgelem);

          var closeToastMessageButton = new WUXButton(
          {
            displayStyle: 'icon',
            icon:
            {
              iconName: 'close',
              fontIconFamily: WUXManagedFontIcons.Font3DS
            },
            iconSize : '0.5',
            onClick: function()
            {
              that.onClose.call(that);
            }
          });
          closeToastMessageButton.elements.container.setStyles({
            'border-style': 'none'
          });
          that.contentView.appendChild(closeToastMessageButton.elements.container);

          that.contentView.inject(that.contentToastView);
          return that.contentToastView;
        },

        /*
        * showToastMessage
        */
        showToastMessage : function showToastMessage(messsageType, message)
        {
          var that = this;
          that.buildToastMessage(messsageType, message);
          if (that.contentToastView.className === "")
          {
            that.contentToastView.className = "show";
            setTimeout(function()
            {
              that.contentToastView.className = that.contentToastView.className.replace("show", "");
            }, 4000);
          }
        }
    });
    return DELConfigurationToastMessage;
});

define('DS/ParameterizationSkeleton/Views/ParameterizationSystemsSafety/SystemsSafetyViewStructureTreePatternUtilities', [
    'UWA/Core',
    'DS/ParameterizationSkeleton/Views/ParametersLayoutViewUtilities',
    'DS/ParameterizationSkeleton/Views/ParameterizationSystemsSafety/ParameterizationSystemsSafetyConstants',
    'DS/ParameterizationSkeleton/Views/ParameterizationSystemsSafety/SystemsSafetyModalStructureTreePattern',
    'DS/ParameterizationSkeleton/Views/ParameterizationSystemsSafety/SystemsSafetyViewUtilities',

    'i18n!DS/ParameterizationSkeleton/assets/nls/SystemsSafetyNLS'
], function(
    UWA,
    ParametersLayoutViewUtilities,
    ParameterizationSystemsSafetyConstants,
    SystemsSafetyModal,
    SystemsSafetyViewCommonUtilities,

    SystemsSafetyNLS
) {

    'use strict';

    var LEFT_ALIGNMENT = SystemsSafetyViewCommonUtilities.LEFT_ALIGNMENT;
    var RIGHT_ALIGNMENT = SystemsSafetyViewCommonUtilities.RIGHT_ALIGNMENT;
    var HTML_BOLD_FORMAT = SystemsSafetyViewCommonUtilities.HTML_BOLD_FORMAT;
    var HTML_PARAG_FORMAT = SystemsSafetyViewCommonUtilities.HTML_PARAG_FORMAT;
    var COLUMNS_WIDTH = ['30%', '50%', '10%', '10%'];
    var CELLS_INDEX = {
        type: 0,
        pattern: 1,
        action: 2,
        deployFlag: 3
    };


    var SystemsSafetyViewUtilities = {
        buildTable: function() {
            var partNumberTable = UWA.createElement('table', {
                'class': 'partNumberTableMapping table table-condensed'
            });
            var pNFieldbody = UWA.createElement('tbody', {
                'class': 'structureTreePatternFieldbody'
            }).inject(partNumberTable);

            var fieldInfo;
            fieldInfo = SystemsSafetyViewUtilities.buildStatusRow();
            fieldInfo.inject(pNFieldbody);

            fieldInfo = UWA.createElement('tr', {
                'class': 'success'
            });
            SystemsSafetyViewCommonUtilities.buildTextTableCell(LEFT_ALIGNMENT, COLUMNS_WIDTH[CELLS_INDEX.type], fieldInfo, HTML_BOLD_FORMAT, SystemsSafetyNLS.type);
            SystemsSafetyViewCommonUtilities.buildTextTableCell(LEFT_ALIGNMENT, COLUMNS_WIDTH[CELLS_INDEX.pattern], fieldInfo, HTML_BOLD_FORMAT, SystemsSafetyNLS.pattern);
            SystemsSafetyViewCommonUtilities.buildTextTableCell(LEFT_ALIGNMENT, COLUMNS_WIDTH[CELLS_INDEX.action], fieldInfo, HTML_BOLD_FORMAT, SystemsSafetyNLS.actions);
            SystemsSafetyViewCommonUtilities.buildTextTableCell(RIGHT_ALIGNMENT, COLUMNS_WIDTH[CELLS_INDEX.deployFlag], fieldInfo, HTML_BOLD_FORMAT, SystemsSafetyNLS.deployStatus);
            fieldInfo.inject(pNFieldbody);

            return partNumberTable;
        },

        buildStatusRow: function() {
            var fieldInfo = UWA.createElement('tr', {
                'id': 'structureTreePatternsStatusRow'
            });
            SystemsSafetyViewCommonUtilities.buildTextTableCell(LEFT_ALIGNMENT, COLUMNS_WIDTH[CELLS_INDEX.type], fieldInfo, HTML_PARAG_FORMAT, SystemsSafetyNLS.patterns);
            var iCell = UWA.createElement('td', {
                'colspan': '3',
                'align': RIGHT_ALIGNMENT,
                'title': SystemsSafetyNLS.deployStatus,
                'class': 'architectureNumberingField font-3dslight'
            });

            var imgSpan = SystemsSafetyViewCommonUtilities.buildImgSpan('check', '2.5', 'green', SystemsSafetyNLS.deployed);
            imgSpan.inject(iCell);
            iCell.value = "success";
            iCell.inject(fieldInfo);
            return fieldInfo;
        },

        addEditButtonToCellRow: function(iCell) {
            var editElts = ParametersLayoutViewUtilities.createActionElements(SystemsSafetyNLS.editPattern, false);
            var editSpan = editElts[0];
            editSpan.setStyle("float", LEFT_ALIGNMENT);
            editSpan.setStyle("padding", "0px 8px");
            editSpan.inject(iCell);
            var editAttributeButton = editElts[1];

            editAttributeButton.addEvent("onClick", function(event) {
                var fieldToEdit = event.currentTarget.getParent().getParent().getParent();
                SystemsSafetyViewUtilities.editDialog(fieldToEdit);
            });

            return editAttributeButton;
        },

        addRemoveButtonToCellRow: function(iCell, fieldInfo) {
            var removelts = ParametersLayoutViewUtilities.createActionElements(SystemsSafetyNLS.removePattern, true);
            var deleteSpan = removelts[0];
            deleteSpan.setStyle("float", LEFT_ALIGNMENT);
            deleteSpan.setStyle("padding", "0px 8px");
            deleteSpan.inject(iCell);
            var removeAttributeButton = removelts[1];

            removeAttributeButton.addEvent("onClick", function() {
                SystemsSafetyViewUtilities.removefieldLineCallBack(fieldInfo);
            });

            return removeAttributeButton;
        },

        buildField: function(fieldInfo, typeLabel, plmType, pattern, isDeployed) {
            fieldInfo.value = isDeployed;
            var typeCell = SystemsSafetyViewCommonUtilities.buildTextTableCell(LEFT_ALIGNMENT, COLUMNS_WIDTH[CELLS_INDEX.type], fieldInfo, HTML_PARAG_FORMAT, typeLabel);
            typeCell._plmType = plmType;
            SystemsSafetyViewCommonUtilities.buildTextTableCell(LEFT_ALIGNMENT, COLUMNS_WIDTH[CELLS_INDEX.pattern], fieldInfo, HTML_PARAG_FORMAT, pattern);

            var iCell = UWA.createElement('td', {
                'Align': LEFT_ALIGNMENT,
                'width': COLUMNS_WIDTH[CELLS_INDEX.action],
                'class': 'architectureNumberingField font-3dslight'
            }).inject(fieldInfo);

            SystemsSafetyViewUtilities.addEditButtonToCellRow(iCell, fieldInfo);
            SystemsSafetyViewUtilities.addRemoveButtonToCellRow(iCell, fieldInfo);

            iCell = UWA.createElement('td', {
                'Align': RIGHT_ALIGNMENT,
                'width': COLUMNS_WIDTH[CELLS_INDEX.deployFlag],
                'class': 'architectureNumberingField font-3dslight'
            }).inject(fieldInfo);

            if (isDeployed === ParameterizationSystemsSafetyConstants.DEPLOYED) {
                SystemsSafetyViewCommonUtilities.buildImgSpan('check', '2.5', 'green', SystemsSafetyNLS.deployed).inject(iCell);
            } else if (isDeployed === ParameterizationSystemsSafetyConstants.NEW_NOT_DEPLOYED) {
                SystemsSafetyViewCommonUtilities.buildImgSpan('cog', '2.5', 'orange', SystemsSafetyNLS.modified).inject(iCell);
            }
            iCell.inject(fieldInfo);
            return fieldInfo;
        },

        buildsFieldJsonObject: function(fieldInfo) {
            return {
                typeLabel: fieldInfo.cells[CELLS_INDEX.type].getText(),
                type: fieldInfo.cells[CELLS_INDEX.type]._plmType,
                pattern: fieldInfo.cells[CELLS_INDEX.pattern].getText(),
                action: fieldInfo.cells[CELLS_INDEX.deployFlag].value
            };
        },

        buildNewField: function(objParam, isDeployedStatus) {
            var fieldInfo;
            fieldInfo = UWA.createElement('tr', {
                'class': 'structureTreePatternFieldMapping'
            });
            SystemsSafetyViewUtilities.buildField(fieldInfo, objParam.typeLabel, objParam.type, objParam.pattern, isDeployedStatus);
            fieldInfo.cells[CELLS_INDEX.deployFlag].value = ParameterizationSystemsSafetyConstants.ADD;
            return fieldInfo;
        },

        modifyField: function(fieldInfo, objParam, isDeployedStatus) {
            fieldInfo.value = isDeployedStatus;
            // type must not be modified
            fieldInfo.cells[CELLS_INDEX.pattern].setText(objParam.pattern);
            var deploycell = fieldInfo.cells[CELLS_INDEX.deployFlag];
            deploycell.empty();

            SystemsSafetyViewCommonUtilities.buildImgSpan('cog', '2.5', 'orange', SystemsSafetyNLS.modified).inject(deploycell);
            deploycell.value = ParameterizationSystemsSafetyConstants.MODIFY;
            return fieldInfo;
        },

        removefieldLineCallBack: function(fieldInfo) {
            if (typeof fieldInfo !== undefined) {
                if (fieldInfo.value === ParameterizationSystemsSafetyConstants.NEW_NOT_DEPLOYED) {
                    fieldInfo.remove();
                } else {
                    SystemsSafetyViewUtilities.setForRemoveFieldLine(fieldInfo);
                }
            }
        },

        resetForRemove: function(fieldInfo) {
            var imgSpan = SystemsSafetyViewCommonUtilities.buildImgSpan('check', '2.5', 'green', SystemsSafetyNLS.deployed);
            var actionCell = fieldInfo.cells[CELLS_INDEX.action];
            var deploycell = fieldInfo.cells[CELLS_INDEX.deployFlag];

            SystemsSafetyViewUtilities.addEditButtonToCellRow(actionCell, fieldInfo);
            SystemsSafetyViewUtilities.addRemoveButtonToCellRow(actionCell, fieldInfo);
            deploycell.empty();
            imgSpan.inject(deploycell);
        },

        resetForModify: function(fieldInfo, savedInfo) {
            var imgSpan = SystemsSafetyViewCommonUtilities.buildImgSpan('check', '2.5', 'green', SystemsSafetyNLS.deployed);
            var deploycell = fieldInfo.cells[CELLS_INDEX.deployFlag];

            if (savedInfo) {
                fieldInfo.cells[CELLS_INDEX.type].setText(savedInfo.type);
                fieldInfo.cells[CELLS_INDEX.pattern].setText(savedInfo.pattern);
            }
            deploycell.empty();
            imgSpan.inject(deploycell);
        },

        resetForFieldLineChanges: function(fieldInfo, savedInfo) {
            if (fieldInfo.value === ParameterizationSystemsSafetyConstants.NEW_NOT_DEPLOYED) {
                var cellValue = fieldInfo.cells[CELLS_INDEX.deployFlag].value;
                if (cellValue === ParameterizationSystemsSafetyConstants.ADD) {
                    return fieldInfo;
                } else if (cellValue === ParameterizationSystemsSafetyConstants.REMOVE) {
                    SystemsSafetyViewUtilities.resetForRemove(fieldInfo);

                } else if (cellValue === ParameterizationSystemsSafetyConstants.MODIFY) {
                    SystemsSafetyViewUtilities.resetForModify(fieldInfo, savedInfo);
                }

                fieldInfo.value = ParameterizationSystemsSafetyConstants.DEPLOYED;
                fieldInfo.cells[CELLS_INDEX.deployFlag].value = null;
            }
        },

        setForRemoveFieldLine: function(fieldInfo) {
            fieldInfo.value = ParameterizationSystemsSafetyConstants.NEW_NOT_DEPLOYED;
            var arrayAction = fieldInfo.cells[CELLS_INDEX.action].getElements('span');
            arrayAction.forEach(function(action) {
                action.hide();
            });

            var deploycell = fieldInfo.cells[CELLS_INDEX.deployFlag];
            var imgSpan = SystemsSafetyViewCommonUtilities.buildImgSpan('trash', '1.5', 'red', SystemsSafetyNLS.removed);

            deploycell.empty();
            deploycell.value = ParameterizationSystemsSafetyConstants.REMOVE;
            imgSpan.inject(deploycell);
        },

        editDialog: function(fieldToEdit) {
            var options = {
                className: "part-number-edit-modal",
                title: SystemsSafetyNLS.editPattern
            };

            var that = this;
            this.modal = new SystemsSafetyModal(options);

            this.modal.modal.setFooter("<button type='button'  name='addButton' id='add-button' class='btn btn-primary'>" + SystemsSafetyNLS.apply + "</button> " + "</button>" + "<button type='button' name='cancelButton' id='cancel-button' class='btn btn-default'>" + SystemsSafetyNLS.cancel + "</button>");
            this.modal.getModalBody();
            this.modal._bindFooterEvent();

            var fetchedData = this.buildsFieldJsonObject(fieldToEdit);

            this.modal.typeTextBox.setValue(fetchedData.typeLabel);
            this.modal.typeTextBox._plmType = fetchedData.type;
            this.modal.typeTextBox.setDisabled(true);
            this.modal.patternTextBox.setValue(fetchedData.pattern);

            this.modal.getContent().getElements('.btn').forEach(function(element) {
                if (element.name === 'addButton') {
                    element.addEvent('click', function() {
                        var userEditedFormat = that.modal.getUserEnteredValues();
                        var checkStatus = {};
                        checkStatus.isSuccess = true;

                        var toDisplayOver = that.modal.getContent().getElement('.enox-arch-number-content');

                        if (userEditedFormat.type === '') {
                            that.modal.displayAlertMessage(SystemsSafetyNLS.typeNullMessage, toDisplayOver);
                        } else if (userEditedFormat.pattern === '') {
                            that.modal.displayAlertMessage(SystemsSafetyNLS.patternNullMessage, toDisplayOver);
                        } else {
                            userEditedFormat.action = ParameterizationSystemsSafetyConstants.MODIFY;
                            SystemsSafetyViewUtilities.modifyField(fieldToEdit, userEditedFormat, ParameterizationSystemsSafetyConstants.NEW_NOT_DEPLOYED);
                            that.modal.destroy();
                        }
                    });
                }
            });

            this.modal.show();
        }
    };

    return SystemsSafetyViewUtilities;
});

define(
    'DS/ParameterizationSkeleton/Utils/ParameterizationFSX/ParameterizationFSXWebServices',
    [
        'UWA/Promise',
        'DS/WAFData/WAFData',
        'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler',
        'DS/i3DXCompassPlatformServices/i3DXCompassPlatformServices'
    ],
    function (Promise, WAFData, URLHandler, i3DXCompassPlatformServices) {

        'use strict';
        let searchPromise = undefined;
        let securityContextPromise = undefined;

        const getSecurityContext = function () {
            if (!securityContextPromise) {
                let deferred = Promise.deferred();
                const url = URLHandler.getURL() + "/resources/pno/person/getsecuritycontext?tenant=" + URLHandler.getTenant();
                WAFData.authenticatedRequest(url, {
                    timeout: 5000,
                    method: 'GET',
                    type: 'json',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },

                    onComplete: function (results) {
                        let response = results.SecurityContext;
                        if (!response) {
                            UWA.log("Error: Unable to get security context");
                        }
                        let securityContext = response;
                        deferred.resolve(securityContext);
                    },
                    onFailure: function (results) {
                        securityContextPromise = undefined;
                        deferred.reject('Failed to get security context');
                    }
                });
                securityContextPromise = deferred.promise;
            }
            return securityContextPromise;
        };

        const getFederatedSearchUrl = function () {
            if (!searchPromise) {
                let deferred = Promise.deferred();
                i3DXCompassPlatformServices.getServiceUrl({
                    serviceName: '3DSearch',
                    platformId: URLHandler.getTenant(),
                    onComplete: function (url) {
                        let parts = UWA.Utils.parseUrl(url);
                        let originalPort = parts.port;
                        parts.port = '0';
                        let platformUrl = UWA.Utils.composeUrl(parts).replace(':0', ':' + originalPort);
                        platformUrl += '/search?tenant=' + URLHandler.getTenant();
                        deferred.resolve(platformUrl);
                    },
                    onFailure: function () {
                        // sometimes it happens for whatever reasons that this call fails; make sure
                        // that this error is not 'cached' using the promises.
                        searchPromise = undefined;
                        deferred.reject('Failed to retrieve Search URI');
                    }
                });
                searchPromise = deferred.promise;
            }
            return searchPromise;
        };

        const ParameterizationFSXWebServices = {
            getAllProjAndOrg: function () {

                return new Promise(function (resolve, reject) {
                    const url = URLHandler.getURL() + "/resources/v1/fsxparam/getAllProjAndOrg?tenant=" + URLHandler.getTenant();

                    WAFData.authenticatedRequest(url, {
                        timeout: 10000,
                        method: 'GET',
                        type: 'json',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        },

                        onFailure: reject,
                        onComplete: resolve
                    });
                });
            },

            setStandardFsxOwnership: function (jsonArr) {

                const url = URLHandler.getURL() + "/resources/v1/fsxparam/setStandardFsxOwnership?tenant=" + URLHandler.getTenant();
                const datatoSend = {
                    parameter: jsonArr
                };

                return new Promise(function (resolve, reject) {
                    WAFData.authenticatedRequest(url, {
                        timeout: 10000,
                        method: 'POST',
                        data: JSON.stringify(datatoSend),
                        type: 'json',
                        //proxy: 'passport',

                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        },

                        onFailure: reject,
                        onComplete: resolve
                    });
                });
            },

            searchUser: function (input) {
                return getSecurityContext().then(securityContext => {
                    return getFederatedSearchUrl().then(url => {
                        let text = input.user;
                        let org = typeof input.organization === 'function' ? input.organization.call() : input.organization;
                        let queryOrg = typeof org === 'string' && org !== '' ? 'AND [ds6w:member]:(' + org.trim() + ')' : '';
                        let datatoSend = {
                            label: '3DSearch-FSXParam-' + (new Date()).getTime(), //identifier for tracking                 
                            query: '[ds6w:type]:Person AND ([ds6w:label]:"' + text.trim() + '" OR [ds6w:label]:(*' + text.trim() + '*) OR [name]:(' + text.trim() + '*)) AND ([current]:Active) ' + queryOrg,
                            order_by: 'desc',
                            order_field: 'relevance',
                            nresults: 10,
                            with_nls: false,
                            with_synthesis: false,
                            with_synthesis_attribute: false,
                            with_synthesis_hierarchical: false,
                            with_indexing_date: false,
                            select_file: [],
                            source: ['3dspace'],
                            select_predicate: [
                                'name',
                                'current',
                                'ds6w:type',
                                'ds6w:label',
                            ],
                            tenant: URLHandler.getTenant(),
                            refine: {},
                            specific_source_parameter: {},
                            login: {
                                '3dspace': {
                                    SecurityContext: securityContext
                                }
                            }
                        };
                        return new Promise(function (resolve, reject) {
                            if (text === '') {
                                resolve({ results: [] });
                            } else {
                                WAFData.authenticatedRequest(url, {
                                    timeout: 10000,
                                    method: 'POST',
                                    data: JSON.stringify(datatoSend),
                                    type: 'json',
                                    //proxy: 'passport',

                                    headers: {
                                        'Content-Type': 'application/json',
                                        'Accept': 'application/json'
                                    },

                                    onFailure: reject,
                                    onComplete: resolve
                                });
                            }
                        });
                    })
                })
            }
        };

        return ParameterizationFSXWebServices;
    }
);

/**
 * @author AMN14
 */
define('DS/ParameterizationSkeleton/Views/ParamCollaboration/TypesNotSyncMapping/TypesNotSyncMappingLayoutUtilities',
    [
     'UWA/Core',
     'DS/UIKIT/Input/Button',
     'DS/UIKIT/Input/Select',
     'DS/UIKIT/Modal',
     'DS/UIKIT/Alert',
     'DS/UIKIT/Tooltip',
     'DS/ParameterizationSkeleton/Views/ParametersLayoutViewUtilities',
     'i18n!DS/ParameterizationSkeleton/assets/nls/TypesNotSyncMappingManagementNLS'
    ],
    function(
        UWA,
        Button,
        Select,
        Modal,
        Alert,
        Tooltip,
        ParametersLayoutViewUtilities,
        TNSMappingNLS
    ){
        'use strict';

        var TNSMappingUICSSClasses = {
          mappingLineClass : "TNSMappingLine",
          mappingLineTypeClass : "TNSTypeName",
          TNSBadgeRootContainerClass : "TNSBadgeRootContainer",
          TNSBadgeContainerClass : "TNSBadgeContainer",
          TNSBadgeContainerMsgClass : "TNSBadgeContainerMsg",
          TNSSpecTypeSelectorContainerClass : "TNSSpecTypeSelectorContainer",
          TNSSpecTypeAddButtonClass : "TNSSpecTypeAddButton",

          TNSBadgeClass : "TNSBadge",
          TNSBadgeLabelClass : "TNSBadgeLabel",
          TNSBadgeActionClass : "TNSBadgeAction",
          TNSBadgeStatusClass : "TNSBadgeStatus",
          TNSBadgeDefaultClass : "TNSBadgeDefault",
          TNSBadgeStoredClass : "TNSBadgeStored",
          TNSBadgeAddedClass : "TNSBadgeAdded",
          TNSBadgeDeployedClass : "TNSBadgeDeployed",
          TNSBadgeDeletedClass : "TNSBadgeDeleted",
          TNSBadgeDeletedErrorClass : "TNSBadgeDeletedError",
          TNSBadgeStoredDeletedClass : "TNSBadgeStoredDeleted",
          TNSBadgeStoredDeletedErrorClass : "TNSBadgeStoredDeletedError",

          mappingLineStatusClass : "TNSStatus",
          mappingLineDeployedStatusClass : "TNSDeployedStatus",
          mappingLineModifiedStatusClass : "TNSModifiedStatus",
        };

        var MappingLineIDSuffix = "_TNSMappingID";

        var UIview = UWA.Class.extend({

            /**
             * Initialize util variables to manage operations on the view easily.
             * @param TNSMappingLayoutView The instance of the TNS mapping widget view.
             */
            init : function () {
                UWA.log('TypesNotSyncMappingLayoutUtilities::init');

                this.mappingLinesViews = {};
                this.SpecializationTypes = null;

                // building messager to display information for the user...
                this.userMessager = new Alert({
                    className : 'param-alert',
                    closable: true,
                    visible: true,
                    renderTo : document.body,
                    autoHide : true,
                    hideDelay : 2000,
                    messageClassName : 'warning'
                });
            },

            /**
             * Initialize the SpecializationTypes field.
             * @param specializationTypes The tree view of specialization types which are mappable.
             */
            initializeSpecializationTypes : function(specializationTypes){
                UWA.log('TypesNotSyncMappingLayoutUtilities::initializeSpecializationTypes');
                this.SpecializationTypes = specializationTypes;
            },

            /**
             * Build the view corresponding to a TNS mapping line.
             * @param typeName The name of the type for which some specialization types won't be collaborated.
             * @param typeDisplayName The display name of the type for which some specialization types won't be collaborated.
             * @param isMutable A flag saying if the current TNS mapping line is mutable. If false, the mapping line won't have a "Add" button to add specialization types.
             * By default, a TNS mapping line is mutable.
             * @return The mapping line view which has been created OR, if typeName has already a mapping line view associated, NULL.
             */
            buildTNSLineView : function(typeName, typeDisplayName, isMutable /*= true*/){
                UWA.log('TypesNotSyncMappingLayoutUtilities::buildTNSLineView');
                if(isMutable === undefined) isMutable=true;
                // if there is already a mapping line view associated to the typeName, do nothing...
                if(typeof this.mappingLinesViews[typeName] !== "undefined") return null;

                var self = this;

                var mappingLineView = UWA.createElement('div', {'id' : typeName + MappingLineIDSuffix, 'class' : TNSMappingUICSSClasses.mappingLineClass});
                this.mappingLinesViews[typeName] = mappingLineView;
                mappingLineView.rootTypeInfo = {
                    typeName : typeName,
                    typeDisplayName : typeDisplayName
                };
                mappingLineView.displayNameContainer = UWA.createElement('div', {'class' : TNSMappingUICSSClasses.mappingLineTypeClass});
                mappingLineView.statusContainer = UWA.createElement('div', {'class' : TNSMappingUICSSClasses.mappingLineStatusClass + ' ' + TNSMappingUICSSClasses.mappingLineDeployedStatusClass});
                mappingLineView.specializationTypesContainer = UWA.createElement('div', {'class' : TNSMappingUICSSClasses.TNSBadgeRootContainerClass});

                // defining type display name
                UWA.createElement('span', {
                    'class' : 'font-3dsregular',
                    html : typeDisplayName
                }).inject(mappingLineView.displayNameContainer);

                // defining status
                UWA.createElement('i', {
                    'class' : 'fonticon fonticon-check',
                    title : TNSMappingNLS.Tooltip.DeployedStatus
                }).inject(mappingLineView.statusContainer);
                mappingLineView.statusContainer.isModififed = false;

                // creating specialization types container
                // displaying message into the badge container in case there is no spe. types...
                mappingLineView.specializationTypesContainer.emptyMessage = UWA.createElement('span', {
                    'class' : 'font-3dsregular ' + TNSMappingUICSSClasses.TNSBadgeContainerMsgClass,
                    html : TNSMappingNLS.EmptySpecializationTypeListBegin + typeDisplayName + TNSMappingNLS.EmptySpecializationTypeListEnd
                });
                mappingLineView.specializationTypesContainer.emptyMessage.inject(mappingLineView.specializationTypesContainer);

                mappingLineView.specializationTypesContainer.badgeContainer = UWA.createElement('div', {'class' : TNSMappingUICSSClasses.TNSBadgeContainerClass});
                mappingLineView.specializationTypesContainer.badgeContainer.inject(mappingLineView.specializationTypesContainer);
                mappingLineView.specializationTypesContainer.specializationTypeSelectorContainer = UWA.createElement('div', {'class' : TNSMappingUICSSClasses.TNSSpecTypeSelectorContainerClass});
                mappingLineView.specializationTypesContainer.specializationTypeSelectorContainer.inject(mappingLineView.specializationTypesContainer);
                mappingLineView.specializationTypesContainer.badges = [];

                if(isMutable){
                    // creating specialization types selector
                    mappingLineView.specializationTypesContainer.specializationTypeSelectorContainer.selector = new Select({
                        custom : false,
                        className : 'font-3dsregular ',
                        placeholder : TNSMappingNLS.SpeTypeSelectorPlaceholder + typeDisplayName
                    });

                    mappingLineView.specializationTypesContainer.specializationTypeSelectorContainer.selector.placeholder = mappingLineView.specializationTypesContainer.specializationTypeSelectorContainer.selector.getSelection()[0];

                    mappingLineView.specializationTypesContainer.specializationTypeSelectorContainer.addButton = new Button({
                        className : 'primary font-3dsregular ' + TNSMappingUICSSClasses.TNSSpecTypeAddButtonClass,
                        value : TNSMappingNLS.SpeTypeAddButton
                    });
                    mappingLineView.specializationTypesContainer.specializationTypeSelectorContainer.selector.inject(mappingLineView.specializationTypesContainer.specializationTypeSelectorContainer);
                    mappingLineView.specializationTypesContainer.specializationTypeSelectorContainer.addButton.inject(mappingLineView.specializationTypesContainer.specializationTypeSelectorContainer);
                } else {
                    // A message should be display to explain why it's not possible to add a new specialization type for this TNS mapping line.
                    mappingLineView.specializationTypesContainer.immutableTNSMappingLineMsg = UWA.createElement('div', {
                        'class' : 'font-3dsregular ' + TNSMappingUICSSClasses.TNSBadgeContainerMsgClass
                    });
                    UWA.createElement('i', {
                        'class' : 'fonticon fonticon-info'
                    }).inject(mappingLineView.specializationTypesContainer.immutableTNSMappingLineMsg);
                    UWA.createElement('span', {
                        html : TNSMappingNLS.ImmutableTNSMappingLine
                    }).inject(mappingLineView.specializationTypesContainer.immutableTNSMappingLineMsg);
                    mappingLineView.specializationTypesContainer.immutableTNSMappingLineMsg.inject(mappingLineView.specializationTypesContainer);
                }

                mappingLineView.displayNameContainer.inject(mappingLineView);
                mappingLineView.specializationTypesContainer.inject(mappingLineView);
                mappingLineView.statusContainer.inject(mappingLineView);

                return mappingLineView;
            },

            /**
             * Retrieve a created TNS mapping line view.
             * @param typeName The name of the type which is associated to the TNS mapping line view.
             * @return The mapping line view previously created OR, if there is no corresponding TNS mapping line view, NULL.
             */
            getTNSLineView : function(typeName){
                UWA.log('TypesNotSyncMappingLayoutUtilities::getTNSLineView');
                return this.mappingLinesViews[typeName];
            },

            /**
             * Display a message using an alert pop-up.
             * @param kind The types of message which is expected to be displayed (info, warning or error).
             * @param message The message to display.
             */
            displayAlertMessage : function(kind, message){
                UWA.log('TypesNotSyncMappingLayoutUtilities::displayAlertMessage');

                this.userMessager.add({
                    className : kind,
                    message : message
                });
            },

            /**
             * Build a TNS badge which is the view associated to a not collaborated specialization type.
             * @param typeNotSync The object containing all necessary information to build the view.
             * @return The TNS badge which has been created.
             */
            buildTNSBadge : function(typeNotSync){
                UWA.log('TypesNotSyncMappingLayoutUtilities::buildTNSBadge');

                var self = this;

                // defining TNS badge style according to data...
                var statusClass, statusIcon = 'fonticon-check', actionIcon = 'fonticon-trash', tooltip = TNSMappingNLS.Tooltip.DeleteAction, status;
                if(typeNotSync.isDeployed && !typeNotSync.isToBeDeleted){   // deployed
                    if(typeNotSync.isDefaultMapping) {  // default
                        statusClass = TNSMappingUICSSClasses.TNSBadgeDefaultClass;
                        actionIcon = 'fonticon-lock';
                        tooltip = TNSMappingNLS.Tooltip.NotAllowed;
                    } else {
                        statusClass = TNSMappingUICSSClasses.TNSBadgeDeployedClass;
                    }
                } else {
                    if(typeNotSync.isToBeDeleted) {
                        statusIcon = 'fonticon-trash';
                        if(typeNotSync.errorCode && typeNotSync.errorCode !== 0){
                          if(typeNotSync.isDeployed) statusClass = TNSMappingUICSSClasses.TNSBadgeDeletedErrorClass;
                          else statusClass = TNSMappingUICSSClasses.TNSBadgeStoredDeletedErrorClass;
                          actionIcon = 'fonticon-attention';
                          tooltip = TNSMappingNLS.Tooltip.TNSMappingError;
                        } else {
                          statusClass = TNSMappingUICSSClasses.TNSBadgeDeletedClass;
                          actionIcon = 'fonticon-undo';
                          tooltip = TNSMappingNLS.Tooltip.UndeleteAction;
                        }
                    } else {
                        statusIcon = 'fonticon-cog';
                        if(typeNotSync.isStored){
                            statusClass = TNSMappingUICSSClasses.TNSBadgeStoredClass;
                        } else {
                            statusClass = TNSMappingUICSSClasses.TNSBadgeAddedClass;
                        }
                    }
                }

                // creating HTML components composing the TNS badge...
                var TNSBadge = UWA.createElement('div', {'class' : TNSMappingUICSSClasses.TNSBadgeClass + ' ' + statusClass});
                TNSBadge.statusIcon = UWA.createElement ('i', {
                    'class' : 'fonticon ' + statusIcon + ' ' + TNSMappingUICSSClasses.TNSBadgeStatusClass
                });
                TNSBadge.typeLabel = UWA.createElement('span', {
                    'class' : 'font-3dsregular ' + TNSMappingUICSSClasses.TNSBadgeLabelClass,
                    content : typeNotSync.specializationTypeDisplayName
                });
                TNSBadge.actionButton = UWA.createElement('i', {
                    'class' : 'fonticon ' + actionIcon + ' ' + TNSMappingUICSSClasses.TNSBadgeActionClass
                });

                TNSBadge.actionButton.tooltip = new Tooltip({
                    target : TNSBadge.actionButton,
                    position : 'top',
                    body : tooltip
                });

                // inserting badge sub-elements...
                TNSBadge.statusIcon.inject(TNSBadge);
                TNSBadge.typeLabel.inject(TNSBadge);
                TNSBadge.actionButton.inject(TNSBadge);
                TNSBadge.associatedTNSMapping = typeNotSync;

                return TNSBadge;
            },

            /**
             * Insert a TNS badge into the dedicated container.
             * @param tnsBadge The object to add to the badge container created using the TypesNotSyncMappingLayoutUtilities.buildTNSBadge() method.
             */
            insertTNSBadge : function(tnsBadge){
                UWA.log('TypesNotSyncMappingLayoutUtilities::insertTNSBadge');
                if(typeof this.mappingLinesViews[tnsBadge.associatedTNSMapping.typeName] !== 'undefined'){
                    var TNSBadgeContainer = this.mappingLinesViews[tnsBadge.associatedTNSMapping.typeName].specializationTypesContainer;
                    if(TNSBadgeContainer.badgeContainer.getChildren().length === 0) TNSBadgeContainer.emptyMessage.hide();
                    TNSBadgeContainer.badges.push(tnsBadge);
                    tnsBadge.inject(TNSBadgeContainer.badgeContainer);

                    this.updateTNSMappingLineStatus(tnsBadge.associatedTNSMapping.typeName);
                    // if((tnsBadge.associatedTNSMapping.isStored && !tnsBadge.associatedTNSMapping.isDeployed) || tnsBadge.associatedTNSMapping.isToBeDeleted || (!tnsBadge.associatedTNSMapping.isStored)){
                    //     var TNSMappingLineStatus = this.mappingLinesViews[tnsBadge.associatedTNSMapping.typeName].statusContainer;
                    //     TNSMappingLineStatus.isModified = true;
                    //     TNSMappingLineStatus.removeClassName(TNSMappingUICSSClasses.mappingLineDeployedStatusClass);
                    //     TNSMappingLineStatus.getChildren()[0].removeClassName('fonticon-check');
                    //     TNSMappingLineStatus.addClassName(TNSMappingUICSSClasses.mappingLineModifiedStatusClass);
                    //     TNSMappingLineStatus.getChildren()[0].addClassName('fonticon-cog');
                    // }
                }
            },

            /**
             * Insert a new option into a specialization type selector.
             * @param typeName The name of the type for which the selector's option will be created.
             * @param specializationTypeInfo The information about the specialization type.
             */
            addSelectorOptions : function(typeTreeNode){
                UWA.log('TypesNotSyncMappingLayoutUtilities::addSelectorOptions');

                if(typeof this.mappingLinesViews[typeTreeNode.typeInfo.id].specializationTypesContainer.specializationTypeSelectorContainer.selector !== 'undefined'){
                    var selector = this.mappingLinesViews[typeTreeNode.typeInfo.id].specializationTypesContainer.specializationTypeSelectorContainer.selector;
                    var options = [];
                    this.auxAddSelectorOptions(options, typeTreeNode, this.mappingLinesViews[typeTreeNode.typeInfo.id].specializationTypesContainer.badges);
                    // Sort the options of the selectors
                    options.sort(function(opt1, opt2){
                        if(!opt1.specializationTypeInfo || !opt2.specializationTypeInfo || !opt1.specializationTypeInfo.typeInfo || !opt2.specializationTypeInfo.typeInfo) return 0;
                        if(opt1.specializationTypeInfo.typeInfo.name > opt2.specializationTypeInfo.typeInfo.name) return 1;
                        return -1;
                    });
                    // Add options to the selector
                    for(var i = 0 ; i < options.length ; i++){
                        selector.add(options[i]);
                        selector.getOption(options[i].specializationTypeInfo.typeInfo.id).specializationTypeInfo = options[i].specializationTypeInfo;
                    }
                }
            },

            /**
             * Recursive method iterating over sub-types tree to inject new options into the type selector.
             * @param options The options of the selector which will be added.
             * @param treeNode The object containing information about su-types and current type.
             * @param badgeList The list of badges currently in the associated TNS mapping line.
             * @param nodeTobeAdded A flag saying if the current node should be added or not. "false" by default.
             * @param path A string corresponding to the inheritance path of the sub-type. Empty by default.
             */
            auxAddSelectorOptions : function(options, treeNode, badgeList, nodeTobeAdded /*= false*/, path /*= ''*/){
                UWA.log('TypesNotSyncMappingLayoutUtilities::auxAddSelectorOptions');
                if(nodeTobeAdded===undefined) nodeTobeAdded=false;
                if(path===undefined) path='';
                var self = this;

                if(nodeTobeAdded && treeNode.typeInfo !== null){
                    options.push({
                        'label' : treeNode.typeInfo.name,
                        'value' : treeNode.typeInfo.id,
                        'group' : path
                    });

                    var option = options[options.length - 1];
                    option.specializationTypeInfo = treeNode;

                    // if there is a badge mentioning the current specialization type, the select option pointing to the type should be deactivated
                    for(var i = 0 ; i < badgeList.length ; i++) {
                        if(badgeList[i].associatedTNSMapping.specializationTypeName === treeNode.typeInfo.id || option.specializationTypeInfo.typeInfo.derivationPath.split('/').indexOf(badgeList[i].associatedTNSMapping.specializationTypeName)!==-1){
                            option.disabled = true;
                            break;
                        }
                    }
                }

                for(var subTypeName in treeNode.specializationTypes){
                    self.auxAddSelectorOptions(
                        options,
                        treeNode.specializationTypes[subTypeName],
                        badgeList, true,
                        (treeNode.typeInfo !== null) ? ( (path !== '') ? path + '/' + treeNode.typeInfo.name : treeNode.typeInfo.name) : path
                    );
                }
            },

            /**
             * Gather all sub-types into a flat list.
             * @param treeNode The starting node below which we are going to search.
             * @param isRoot Flag saying if we are dealing with the contextual root node (if yes, we don't gather information).
             * @return A flat list containing sub-types information.
             */
            getSubTypesList : function(treeNode, isRoot){
                UWA.log('TypesNotSyncMappingLayoutUtilities::getSubTypesList');

                var subTypes = [];
                if(!isRoot && treeNode.typeInfo !== null){
                    subTypes.push(treeNode.typeInfo);
                }

                for(var subTypeName in treeNode.specializationTypes){
                    subTypes = subTypes.concat(this.getSubTypesList(treeNode.specializationTypes[subTypeName], false));
                }

                return subTypes;
            },

            /**
             * Update the status of the specialization types selectors according to current TNS mapping (represented by the list of badges).
             */
            updateSelectorsOptionsStatus : function(){
                UWA.log('TypesNotSyncMappingLayoutUtilities::updateSelectorOptionsStatus');

                var self = this;

                for(var mappingLineName in this.mappingLinesViews){
                    if(this.mappingLinesViews[mappingLineName].specializationTypesContainer.specializationTypeSelectorContainer.selector){
                        this.mappingLinesViews[mappingLineName].specializationTypesContainer.specializationTypeSelectorContainer.selector.getOptions().forEach(function(option){
                            var badgeList = self.mappingLinesViews[mappingLineName].specializationTypesContainer.badges;
                            option.disabled = false;
                            for(var i = 0 ; i < badgeList.length ; i++) {
                                if(
                                    typeof option.specializationTypeInfo !== 'undefined' &&
                                    (badgeList[i].associatedTNSMapping.specializationTypeName === option.specializationTypeInfo.typeInfo.id ||
                                        (option.specializationTypeInfo.typeInfo.derivationPath.split('/').includes(badgeList[i].associatedTNSMapping.specializationTypeName) &&
                                        !badgeList[i].associatedTNSMapping.isToBeDeleted)
                                    )
                                ){
                                    option.disabled = true;
                                    break;
                                }
                            }
                        });
                    }
                }
            },

            /**
             * Remove a TNS badge from the dedicated container.
             * This method should be used after successful apply (for TNS badges associated to parameters which had been deleted) or for TNS badges associated
             * to new parameters which are not stored (no action needed on server side).
             * @param tnsBadge The object to remove from the badge container created using the TypesNotSyncMappingLayoutUtilities.buildTNSBadge() method.
             */
            removeTNSBadge : function(tnsBadge){
                UWA.log('TypesNotSyncMappingLayoutUtilities::removeTNSBadge');

                var TNSBadgeContainer = this.mappingLinesViews[tnsBadge.associatedTNSMapping.typeName].specializationTypesContainer;
                var badgeIndex = TNSBadgeContainer.badges.indexOf(tnsBadge);
                if(badgeIndex >= 0) TNSBadgeContainer.badges.splice(badgeIndex, 1);
                tnsBadge.destroy();
                if(TNSBadgeContainer.badgeContainer.getChildren().length === 0) TNSBadgeContainer.emptyMessage.show();
                this.updateTNSMappingLineStatus(tnsBadge.associatedTNSMapping.typeName);
            },

            /**
             * Change the status of a TNS badge.
             * This method should be used when the TNS badge action button is clicked and the TNS badge isn't a newly added one (so when actions on server side are required).
             * Multiple operations should be performed here :
             *                - update classes according to new status of the TNS badge
             *                - update status icon of the TNS mapping related to the TNS badge
             *                - update action icon and tooltip to fit with the new status of the TNS badge
             * @param tnsBadge The TNS badge which has been clicked and which should have its status changed.
             */
            updateTNSBadgeStatus : function(tnsBadge){
                UWA.log('TypesNotSyncMappingLayoutUtilities::changeTNSBadgeStatus');

                var isDeployed=false;
                tnsBadge.actionButton.tooltip.destroy();
                if(!tnsBadge.hasClassName(TNSMappingUICSSClasses.TNSBadgeDeletedClass) && !tnsBadge.hasClassName(TNSMappingUICSSClasses.TNSBadgeStoredDeletedClass)){
                    // delete action has been performed
                    if(tnsBadge.hasClassName(TNSMappingUICSSClasses.TNSBadgeDeployedClass)) {
                        tnsBadge.statusIcon.removeClassName('fonticon-check');
                        tnsBadge.removeClassName(TNSMappingUICSSClasses.TNSBadgeDeployedClass);
                        isDeployed=true;
                    } else if(tnsBadge.hasClassName(TNSMappingUICSSClasses.TNSBadgeStoredClass)) {
                        tnsBadge.statusIcon.removeClassName('fonticon-cog');
                        tnsBadge.removeClassName(TNSMappingUICSSClasses.TNSBadgeStoredClass);
                    }
                    tnsBadge.actionButton.removeClassName('fonticon-trash');
                    tnsBadge.actionButton.addClassName('fonticon-undo');
                    tnsBadge.statusIcon.addClassName('fonticon-trash');
                    if(isDeployed)
                    	tnsBadge.addClassName(TNSMappingUICSSClasses.TNSBadgeDeletedClass);
                    else
                    	tnsBadge.addClassName(TNSMappingUICSSClasses.TNSBadgeStoredDeletedClass);

                    tnsBadge.actionButton.tooltip = new Tooltip({
                    	target : tnsBadge.actionButton,
                    	position : 'top',
                        body : TNSMappingNLS.Tooltip.UndeleteAction
                    });
                } else {
                    // undelete action has been performed
                    if(tnsBadge.associatedTNSMapping.isDeployed) {
                        tnsBadge.statusIcon.addClassName('fonticon-check');
                        tnsBadge.addClassName(TNSMappingUICSSClasses.TNSBadgeDeployedClass);
                    } else if(tnsBadge.associatedTNSMapping.isStored) {
                        tnsBadge.statusIcon.addClassName('fonticon-cog');
                        tnsBadge.addClassName(TNSMappingUICSSClasses.TNSBadgeStoredClass);
                    }
                    tnsBadge.statusIcon.removeClassName('fonticon-trash');
                    tnsBadge.actionButton.addClassName('fonticon-trash');
                    tnsBadge.actionButton.removeClassName('fonticon-undo');
                    tnsBadge.removeClassName(TNSMappingUICSSClasses.TNSBadgeDeletedClass);
                    tnsBadge.removeClassName(TNSMappingUICSSClasses.TNSBadgeStoredDeletedClass);
                    tnsBadge.actionButton.tooltip = new Tooltip({
                        target : tnsBadge.actionButton,
                        position : 'top',
                        body : TNSMappingNLS.Tooltip.DeleteAction
                    });

                    this.manageRedundancies(tnsBadge);
                }
                tnsBadge.associatedTNSMapping.isToBeDeleted = !tnsBadge.associatedTNSMapping.isToBeDeleted;
            },

            /**
             * Check if there is redundancies due to revival of the TNS badge given as parameter. If yes, reviving TNS badge is kept
             * and redundant TNS badges are removed.
             */
            manageRedundancies : function(revivingTNSBadge){
                UWA.log('TypesNotSyncMappingLayoutUtilities::manageRedundancies');

                var self = this;
                var hasRedundancies = false;
                // check if there is redundancies with revived TNS mapping and ADDED TNS mapping (mapped super type OR mapped sub type)
                var badges = this.mappingLinesViews[revivingTNSBadge.associatedTNSMapping.typeName].specializationTypesContainer.badges;
                var subTypesList = this.getSubTypesList(this.SpecializationTypes[revivingTNSBadge.associatedTNSMapping.typeName]);
                var revivingTNSMappingParents = null;
                for(var i = 0 ; i < subTypesList.length ; i++){
                    if(subTypesList[i].id === revivingTNSBadge.associatedTNSMapping.specializationTypeName){
                        revivingTNSMappingParents = subTypesList[i].derivationPath.split('/');
                        break;
                    }
                }

                var badgesToRemove = [];
                badges.forEach(function(badge){
                    if(badge !== revivingTNSBadge){
                        var currentTNSMappingParents = null;
                        for(var i = 0 ; i < subTypesList.length ; i++){
                            if(subTypesList[i].id === badge.associatedTNSMapping.specializationTypeName){
                            currentTNSMappingParents = subTypesList[i].derivationPath.split('/');
                            break;
                            }
                        }
                        // both derivation path have been retrieved. Checks can be performed
                        if((revivingTNSMappingParents !== null && revivingTNSMappingParents.includes(badge.associatedTNSMapping.specializationTypeName)) ||
                            (currentTNSMappingParents !== null && currentTNSMappingParents.includes(revivingTNSBadge.associatedTNSMapping.specializationTypeName))
                        ){
                            if(badge.associatedTNSMapping.isStored) self.setTNSBadgeStatusAsToBeDeleted(badge);
                            else badgesToRemove.push(badge);
                            if(!hasRedundancies) hasRedundancies = true;
                        }
                    }
                });
                badgesToRemove.forEach(function(badge){
                self.removeTNSBadge(badge);
                });

                // display information message
                if(hasRedundancies) this.displayAlertMessage('primary', TNSMappingNLS.UserMessage.TNSMappingHasBeenRemovedUndelete);
            },

            /**
             * Update the status of the given TNS badge to DEPLOYED. The given TNS badge should be STORED or NEW.
             * @param tnsBadge The TNS badge which should have its status set to DEPLOYED.
             */
            setTNSBadgeStatusToDeployed : function(tnsBadge){
                UWA.log('TypesNotSyncMappingLayoutUtilities::setTNSBadgeStatusToDeployed');

                if(tnsBadge.hasClassName(TNSMappingUICSSClasses.TNSBadgeStoredClass)) tnsBadge.removeClassName(TNSMappingUICSSClasses.TNSBadgeStoredClass);
                else if(tnsBadge.hasClassName(TNSMappingUICSSClasses.TNSBadgeAddedClass)){
                    tnsBadge.removeClassName(TNSMappingUICSSClasses.TNSBadgeAddedClass);
                    tnsBadge.associatedTNSMapping.isStored = true;
                    if(this.mappingLinesViews[tnsBadge.associatedTNSMapping.typeName].specializationTypesContainer.badgeContainer.getChildren().length === 0)
                        this.mappingLinesViews[tnsBadge.associatedTNSMapping.typeName].specializationTypesContainer.emptyMessage.hide();
                }

                tnsBadge.statusIcon.removeClassName('fonticon-cog');
                tnsBadge.statusIcon.addClassName('fonticon-check');
                tnsBadge.addClassName(TNSMappingUICSSClasses.TNSBadgeDeployedClass);
                tnsBadge.associatedTNSMapping.isDeployed = true;
            },

            /**
             * Update the status of the given TNS badge to "TO BE DELETED".
             * @param tnsBadge The TNS badge which should have its status set to DEPLOYED.
             */
            setTNSBadgeStatusAsToBeDeleted : function(tnsBadge){
                UWA.log('TypesNotSyncMappingLayoutUtilities::setTNSBadgeStatusToDeployed');

                var isDeployed=false;
                tnsBadge.actionButton.tooltip.destroy();
                if(tnsBadge.hasClassName(TNSMappingUICSSClasses.TNSBadgeStoredClass)){
                    tnsBadge.removeClassName(TNSMappingUICSSClasses.TNSBadgeStoredClass);
                    tnsBadge.statusIcon.removeClassName('fonticon-cog');
                }
                else if(tnsBadge.hasClassName(TNSMappingUICSSClasses.TNSBadgeDeployedClass)){
                    tnsBadge.removeClassName(TNSMappingUICSSClasses.TNSBadgeDeployedClass);
                    tnsBadge.statusIcon.removeClassName('fonticon-check');
                    isDeployed=true;
                }

                tnsBadge.actionButton.removeClassName('fonticon-trash');
                tnsBadge.actionButton.addClassName('fonticon-undo');
                tnsBadge.statusIcon.addClassName('fonticon-trash');
                if(isDeployed)
                tnsBadge.addClassName(TNSMappingUICSSClasses.TNSBadgeDeletedClass);
                else
                	 tnsBadge.addClassName(TNSMappingUICSSClasses.TNSBadgeStoredDeletedClass);
                tnsBadge.actionButton.tooltip = new Tooltip({
                    target : tnsBadge.actionButton,
                    position : 'top',
                    body : TNSMappingNLS.Tooltip.UndeleteAction
                });
                tnsBadge.associatedTNSMapping.isToBeDeleted = true;
            },

            /**
             * Remove the "TO BE DELETED" status of the given TNS badge to make it appears as it was before (STORED or DEPLOYED). The given TNS badge should be STORED or DEPLOYED.
             * @param tnsBadge The TNS badge which should be revived.
             */
            reviveTNSBadge : function(tnsBadge){
                UWA.log('TypesNotSyncMappingLayoutUtilities::reviveTNSBadge');

                tnsBadge.actionButton.tooltip.destroy();
                if(tnsBadge.associatedTNSMapping.isDeployed) {
                    tnsBadge.statusIcon.addClassName('fonticon-check');
                    tnsBadge.addClassName(TNSMappingUICSSClasses.TNSBadgeDeployedClass);
                } else if(tnsBadge.associatedTNSMapping.isStored) {
                    tnsBadge.statusIcon.addClassName('fonticon-cog');
                    tnsBadge.addClassName(TNSMappingUICSSClasses.TNSBadgeStoredClass);
                }
                tnsBadge.statusIcon.removeClassName('fonticon-trash');
                tnsBadge.actionButton.addClassName('fonticon-trash');
                tnsBadge.actionButton.removeClassName('fonticon-undo');
                tnsBadge.removeClassName(TNSMappingUICSSClasses.TNSBadgeDeletedClass);
                tnsBadge.removeClassName(TNSMappingUICSSClasses.TNSBadgeStoredDeletedClass);
                tnsBadge.actionButton.tooltip = new Tooltip({
                    target : tnsBadge.actionButton,
                    position : 'top',
                    body : TNSMappingNLS.Tooltip.DeleteAction
                });
                tnsBadge.associatedTNSMapping.isToBeDeleted = false;
            },

            /**
             * Update the status of TNS mapping line according to the status of badges.
             * @param tnsMappingTypeName  The name of the type which is associated to the TNS mapping line view.
             */
            updateTNSMappingLineStatus : function(tnsMappingTypeName){
                UWA.log('TypesNotSyncMappingLayoutUtilities::updateTNSmappingLineStatus');

                var TNSMappingLineStatus = this.mappingLinesViews[tnsMappingTypeName].statusContainer;
                var isModified = false;
                var badges = this.mappingLinesViews[tnsMappingTypeName].specializationTypesContainer.badges;
                for(var i = 0 ; i < badges.length ; i++){
                    if((badges[i].associatedTNSMapping.isStored && !badges[i].associatedTNSMapping.isDeployed) ||
                        badges[i].associatedTNSMapping.isToBeDeleted ||
                        (!badges[i].associatedTNSMapping.isStored)
                    ){
                        isModified = true;
                        break;
                    }
                }

                if(TNSMappingLineStatus.isModified !== isModified){
                    if(isModified){
                        TNSMappingLineStatus.isModified = true;
                        TNSMappingLineStatus.removeClassName(TNSMappingUICSSClasses.mappingLineDeployedStatusClass);
                        TNSMappingLineStatus.getChildren()[0].removeClassName('fonticon-check');
                        TNSMappingLineStatus.addClassName(TNSMappingUICSSClasses.mappingLineModifiedStatusClass);
                        TNSMappingLineStatus.getChildren()[0].addClassName('fonticon-cog');
                        TNSMappingLineStatus.getChildren()[0].title = TNSMappingNLS.Tooltip.ModifiedStatus;
                    } else {
                        TNSMappingLineStatus.isModified = false;
                        TNSMappingLineStatus.removeClassName(TNSMappingUICSSClasses.mappingLineModifiedStatusClass);
                        TNSMappingLineStatus.getChildren()[0].removeClassName('fonticon-cog');
                        TNSMappingLineStatus.addClassName(TNSMappingUICSSClasses.mappingLineDeployedStatusClass);
                        TNSMappingLineStatus.getChildren()[0].addClassName('fonticon-check');
                        TNSMappingLineStatus.getChildren()[0].title = TNSMappingNLS.Tooltip.DeployedStatus;
                    }
                }
            },

            /**
             * Update the status of all TNS mapping lines.
             */
            updateAllTNSMappingLinesStatus : function(){
                UWA.log('TypesNotSyncMappingLayoutUtilities::updateAllTNSMappingLinesStatus');

                for(var mappingLineName in this.mappingLinesViews) this.updateTNSMappingLineStatus(mappingLineName);
            },

            /**
             * The listener handling events on TNS badges according to their status.
             * @param tnsMappingContainer As the number of badges can be important, only one listener should be deploy to handle TNS badges
             * events. Thus, a "global" container is given to this method to beneficiate from the propagation phase.
             */
            addTNSBadgeActionListener : function(tnsMappingContainer){
                UWA.log('TypesNotSyncMappingLayoutUtilities::addTNSBadgeActionListener');
                var self = this;
                tnsMappingContainer.addEvent('click', function(event){
                    var origin = event.target;
                    if(origin.hasClassName(TNSMappingUICSSClasses.TNSBadgeActionClass)){
                        var tnsMappingValue = origin.getParent().associatedTNSMapping;
                        if(!tnsMappingValue.isStored) self.removeTNSBadge(origin.getParent());
                        else if(tnsMappingValue.isStored && !tnsMappingValue.isDefaultMapping && !(tnsMappingValue.errorCode && tnsMappingValue.errorCode !== 0)){
                            self.updateTNSBadgeStatus(origin.getParent());
                        }

                        self.updateTNSMappingLineStatus(tnsMappingValue.typeName);
                        self.updateSelectorsOptionsStatus();
                    }
                });
            },

            /**
             * The listener handling "add" events.
             * This method is called when the user click on the "Add" button to add a specialization type. It manages redundancies during the addition.
             * @param tnsMappingContainer As the number of mapping lines can differ, only one listener should be deploy to handle "Add"
             * events. Thus, a "global" container is given to this method to beneficiate from the propagation phase.
             */
            addSpecTypeAddOperationListener : function(tnsMappingContainer){
                UWA.log('TypesNotSyncMappingLayoutUtilities::addSpecTypeAddOperationListener');
                var self = this;
                tnsMappingContainer.addEvent('click', function(event){
                    var origin = event.target;
                    if(origin.hasClassName(TNSMappingUICSSClasses.TNSSpecTypeAddButtonClass)){
                        var mappingLineView = event.target.getParent().getParent().getParent();
                        var selector = mappingLineView.specializationTypesContainer.specializationTypeSelectorContainer.selector;
                        // get the selected option. As multiselection isn't allowed, returned array will always contain one element
                        var option = selector.getSelection()[0];

                        // check if a valid option has been chosen using the type selector
                        if(typeof option.specializationTypeInfo !== 'undefined' && !option.disabled){
                            // check if there is at least one badge containing a sub-type of the selected type and remove / set as "TO BE DELETED" them
                            var uselessTNSBadges = [];
                            var subTypesList = self.getSubTypesList(option.specializationTypeInfo, true);

                            // finding badges to remove / set as "TO BE DELETED"
                            mappingLineView.specializationTypesContainer.badges.forEach(function(badge){
                                for(var i = 0 ; i < subTypesList.length ; i++){
                                    if(!badge.associatedTNSMapping.isDefaultMapping && badge.associatedTNSMapping.specializationTypeName === subTypesList[i].id){
                                        uselessTNSBadges.push(badge);
                                        break;
                                    }
                                }
                            });

                            uselessTNSBadges.forEach(function(badge){
                                if(badge.associatedTNSMapping.isStored) self.setTNSBadgeStatusAsToBeDeleted(badge);
                                else self.removeTNSBadge(badge);
                            });

                            // display information message
                            if(uselessTNSBadges.length > 0) {
                                self.displayAlertMessage('primary', TNSMappingNLS.UserMessage.TNSMappingHasBeenRemovedAdd);
                            }

                            // reseting selector
                            selector.setValue('');

                            var tnsMapping = {
                                typeName : mappingLineView.rootTypeInfo.typeName,
                                typeDisplayName : mappingLineView.rootTypeInfo.typeDisplayName,
                                specializationTypeName : option.specializationTypeInfo.typeInfo.id,
                                specializationTypeDisplayName : option.specializationTypeInfo.typeInfo.name,
                                isDefaultMapping : false,
                                isStored : false,
                                isDeployed : false,
                                isToBeDeleted : false
                            };

                            var tnsBadge = self.buildTNSBadge(tnsMapping);
                            self.insertTNSBadge(tnsBadge);

                            self.updateSelectorsOptionsStatus();
                        }
                    }
                });
            },

            /**
             * Update the view after a successful APPLY. During this method, the following updates will be done :
             *            - NEW and STORED parameters will have their view modified to appear as DEPLOYED
             *            - TO BE DELETED parameters will be removed from the view
             */
            refreshViewAfterApply : function(){
                UWA.log('TypesNotSyncMappingLayoutUtilities::refreshViewAfterApply');

                var self = this;
                for(var mappingLineViewIndex in this.mappingLinesViews){
                    var badges = this.mappingLinesViews[mappingLineViewIndex].specializationTypesContainer.badges;
                    for(var i = badges.length - 1 ; i >= 0 ; i--){
                        if(badges[i].associatedTNSMapping.isToBeDeleted) self.removeTNSBadge(badges[i]);
                        else if(!badges[i].associatedTNSMapping.isDeployed) self.setTNSBadgeStatusToDeployed(badges[i]);
                    }
                }
            },

            /**
             * Update the view after a successful RESET. During this method, the following updates will be done :
             *            - NEW and STORED parameters will be removed from the view
             *            - TO BE DELETED DEPLOYED parameters will be "revived" (removing TO BE DELETED flag)
             */
            refreshViewAfterReset : function(){
                UWA.log('TypesNotSyncMappingLayoutUtilities::refreshViewAfterReset');

                var self = this;
                for(var mappingLineViewIndex in this.mappingLinesViews){
                    var badges = this.mappingLinesViews[mappingLineViewIndex].specializationTypesContainer.badges;
                    for(var i = badges.length - 1 ; i >= 0 ; i--){
                        if(badges[i].associatedTNSMapping.isToBeDeleted && badges[i].associatedTNSMapping.isDeployed) self.reviveTNSBadge(badges[i]);
                        else if(!badges[i].associatedTNSMapping.isDeployed) self.removeTNSBadge(badges[i]);
                    }
                }
            },

            /**
             * Check if the mapping has been modified or not.
             * @return A boolean which, if true, means that some actions are required. If false, no operation on server side is needed.
             */
            requireServerActions : function(){
                UWA.log('TypesNotSyncMappingLayoutUtilities::requireServerActions');

                for(var mappingLineViewIndex in this.mappingLinesViews){
                    var badges = this.mappingLinesViews[mappingLineViewIndex].specializationTypesContainer.badges;
                    for(var i = badges.length - 1 ; i >= 0 ; i--){
                        if(badges[i].associatedTNSMapping.isDeployed && !badges[i].associatedTNSMapping.isToBeDeleted ) continue;
                        return true;
                    }
                }
                return false;
            },

            /**
             * Retrieve the current view of the global TNS mapping by iterating over TNS badges.
             */
            getCurrentTNSMapping : function(){
                var TNSMapping = [];

                for(var typeName in this.mappingLinesViews){
                    this.mappingLinesViews[typeName].specializationTypesContainer.badges.forEach(function(badge){
                        TNSMapping.push(badge.associatedTNSMapping);
                    });
                }

                return TNSMapping;
            }

        });

        return UIview;
    }
);

/**
 * @author AMN14
 */

define('DS/ParameterizationSkeleton/Views/ParamCollaboration/TypesNotSyncMapping/TypesNotSyncMappingLayoutView',
    [
         'UWA/Core',
         'UWA/Class/View',
         'DS/UIKIT/Modal',
         'DS/UIKIT/Popover',
         'DS/UIKIT/Mask',
         'DS/UIKIT/Scroller',
         'DS/ParameterizationSkeleton/Views/ParametersLayoutViewUtilities',
         'DS/ParameterizationSkeleton/Views/ParamCollaboration/TypesNotSyncMapping/TypesNotSyncMappingLayoutUtilities',
         'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler',
         'DS/UIKIT/Input/Button',
         'DS/UIKIT/Input/Select',
         'DS/UIKIT/Input/Toggle',
         'DS/UIKIT/Alert',
         'i18n!DS/ParameterizationSkeleton/assets/nls/TypesNotSyncMappingManagementNLS',
         'DS/WAFData/WAFData'
    ],
    function (
         UWA,
         View,
         Modal,
         Popover,
         Mask,
         Scroller,
         ParametersLayoutViewUtilities,
         TNSMappingLayoutUtilities,
         URLHandler,
         Button,
         Select,
         Toggle,
         Alert,
         TNSMappingNLS,
         WAFData
    ) {

        'use strict';

        var _TNS_SupportedTypes = {
            VPMReference : 'VPMReference',
            Part : 'Part',
            Products : 'Products'
        };

        var extendedView = View.extend({
            tagName : 'div',
            className : 'generic-detail',

            init : function(options) {
                UWA.log('TypesNotSyncMappingLayoutView::init');

                var initDate = new Date();
                this.lastAlertDate = initDate.getTime();
                this.lastAlertDate = initDate.getTime();

                options = UWA.clone(options || {}, false);

                this._parent(options);

                this.contentDiv = null;
                this.mappingContainer = null;
                this.controlContainer = null;
                this.descriptionContainer = null;
                this.paramScroller = null;

                this.utils = new TNSMappingLayoutUtilities();
            },

            setup: function(options) {
                UWA.log('TypesNotSyncMappingLayoutView::setup');
                UWA.log(options);
            },

            render: function() {
                UWA.log("TypesNotSyncMappingLayoutView::render");

                var self = this;

                // create document components for UI display
                this.contentDiv = UWA.createElement('div', {'id' : 'typeMainDiv'});
                Mask.mask(this.contentDiv);

                // description of the widget
                this.descriptionContainer = UWA.createElement('div', {'class' : 'information'});
                UWA.createElement('p', {
                        text : TNSMappingNLS.intro,
                        'class': 'font-3dslight'
                    }
                ).inject(this.descriptionContainer);

                this.descriptionContainer.inject(this.contentDiv);

                // mapping data section
                this.mappingContainer = UWA.createElement('div', {'id' : 'TNSDataDiv'});
                this.mappingContainer.inject(this.contentDiv);

                // building mapping lines container header
                var mappingLineHeader = UWA.createElement('div', {'class' : 'TNSMappingLine TNSMappingLineHeader'});
                UWA.createElement('div', {
                    'class' : 'typeHeader font-3dslight',
                    html : TNSMappingNLS.TNSMappingHeader.Type
                }).inject(mappingLineHeader);
                UWA.createElement('div', {
                    'class' : 'specTypeHeader font-3dslight',
                    html : TNSMappingNLS.TNSMappingHeader.SpecTypes
                }).inject(mappingLineHeader);
                UWA.createElement('div', {
                    'class' : 'statusHeader font-3dslight',
                    html : TNSMappingNLS.TNSMappingHeader.Status
                }).inject(mappingLineHeader);

                mappingLineHeader.inject(this.mappingContainer);

                // building VPMReference and Part TNS mapping sections
                var productTNSMappingLine = this.utils.buildTNSLineView(_TNS_SupportedTypes.VPMReference, TNSMappingNLS.ProductDisplayName);
                var partTNSMappingLine = this.utils.buildTNSLineView(_TNS_SupportedTypes.Part, TNSMappingNLS.PartDisplayName);
                var productsTNSMappingLine = this.utils.buildTNSLineView(_TNS_SupportedTypes.Products, TNSMappingNLS.ProductsDisplayName, false);
                productTNSMappingLine.inject(this.mappingContainer);
                partTNSMappingLine.inject(this.mappingContainer);
                productsTNSMappingLine.inject(this.mappingContainer);

                // adding listener for events handling on TNS badges
                this.utils.addTNSBadgeActionListener(this.mappingContainer);
                this.utils.addSpecTypeAddOperationListener(this.mappingContainer);

                this.controlContainer = ParametersLayoutViewUtilities.createApplyResetToolbar.call(this, this.contentDiv, true, this.applyParameters.bind(this), this.resetParameters.bind(this));

                this.paramScroller = new Scroller({
                    element : this.mappingContainer,
                }).inject(this.contentDiv);

                // Insert built view into the document
                this.container.setContent(this.contentDiv);

                this.listenTo(this.collection, {
                        onSync: self.onCompletedTNSMappingRequest
                });

                return this;
            },

            destroy : function() {
                UWA.log('TypesNotSyncMappingLayoutView::destroy');
                this.stopListening();
                this._parent.apply(this, arguments);
            },

            /**
             * To call when the request to retrieve the TNS mapping is ended to fill UI components with retrieved data.
             */
            onCompletedTNSMappingRequest : function(){
                UWA.log('TypesNotSyncMappingLayoutView::onCompletedTNSMappingRequest');

                var self = this;

                // retrieving TNS mapping and building view...
                this.TNSMapping = this.collection._models[0]._attributes.TNSMapping;
                this.TNSMapping.forEach(function(tnsMappingValue){
                    // creating TNS badges
                    var TNSBadge = self.utils.buildTNSBadge(tnsMappingValue);
                    self.utils.insertTNSBadge(TNSBadge);
                });

                // setting variables containing specialization types for Part and VPMReference
                this.SpecializationTypes = this.collection._models[0]._attributes.SpecializationTypes;

                // add options to selectors...
                for(var typeName in this.utils.mappingLinesViews){
                    if(typeof this.SpecializationTypes[typeName] !== 'undefined'){
                        this.utils.addSelectorOptions(this.SpecializationTypes[typeName]);
                    }
                }

                this.utils.initializeSpecializationTypes(this.SpecializationTypes);

                // view has been completly initialized, unmasking content...
                Mask.unmask(this.contentDiv);
            },

            /**
             * To call when clicking on "Apply" button created using ParametersLayoutViewUtilities.createApplyResetToolbar
             */
            applyParameters : function() {
                UWA.log('TypesNotSyncMappingLayoutView::applyParameters');

                // check if mapping has been modified, if not, there is no need to call web-services as no action on server side will be performed
                if(this.utils.requireServerActions()){
                    // UI waiting for a response...
                    Mask.mask(this.mappingContainer);

                    var self = this;

                    // call web service to apply new/modified TNS mapping
                    var url = URLHandler.getURL() + "/resources/MappingWS/mapping/applytnsmapping?tenant=" + URLHandler.getTenant();

                    WAFData.authenticatedRequest(url, {
                        timeout : 250000,
                        method : 'POST',
                        data : JSON.stringify({tnsMapping : this.utils.getCurrentTNSMapping()}),
                        type : 'json',

                        headers : {
                            'Content-Type' : 'application/json',
                            'Accept' : 'application/json'
                        },

                        onFailure : function (json) {
                            UWA.log('TypesNotSyncMappingLayoutView::applyParameters - Failure');
                            UWA.log(json);

                            // request has failed, display error message
                            self.utils.displayAlertMessage('error', TNSMappingNLS.UserMessage.DeployFail);
                            Mask.unmask(self.mappingContainer);
                        },

                        onComplete: function(json) {
                            UWA.log('TypesNotSyncMappingLayoutView::applyParameters - Success');
                            UWA.log(json);

                            // update the view according to HTTP request response
                            self.utils.refreshViewAfterApply();
                            for(var i = self.TNSMapping.length - 1 ; i >= 0 ; i--){
                                if(self.TNSMapping[i].isToBeDeleted) self.TNSMapping.splice(i, 1);
                            }

                            // update TNS mapping lines status
                            self.utils.updateAllTNSMappingLinesStatus();

                            // update the selectors options according to current TNS mapping
                            self.utils.updateSelectorsOptionsStatus();

                            // request has succeed, display success message
                            self.utils.displayAlertMessage('success', TNSMappingNLS.UserMessage.DeploySuccess);

                            Mask.unmask(self.mappingContainer);
                        }

                    });
                } else {
                    this.utils.displayAlertMessage('primary', TNSMappingNLS.UserMessage.NoActionApply);
                }

            },

            /**
             * To call when clicking on "Reset" button created using ParametersLayoutViewUtilities.createApplyResetToolbar
             */
            resetParameters : function() {
                UWA.log('TypesNotSyncMappingLayoutView::resetParameters');

                // check if mapping has been modified, if not, there is no need to call web-services as no action on server side will be performed
                if(this.utils.requireServerActions()){
                    // UI waiting for a response...
                    Mask.mask(this.mappingContainer);

                    var self = this;

                    // call web service to apply new/modified TNS mapping
                    var url = URLHandler.getURL() + "/resources/MappingWS/mapping/resettnsmapping?tenant=" + URLHandler.getTenant();

                    WAFData.authenticatedRequest(url, {
                        timeout: 250000,
                        method: 'POST',
                        data: JSON.stringify({}),
                        type: 'json',

                        headers: {
                            'Content-Type' : 'application/json',
                            'Accept' : 'application/json'
                        },

                        onFailure : function (json) {
                            UWA.log('TypesNotSyncMappingLayoutView::resetParameters - Failure');
                            UWA.log(json);

                            // request has failed, display error message
                            self.utils.displayAlertMessage('error', TNSMappingNLS.UserMessage.ResetFail);

                            Mask.unmask(self.mappingContainer);
                        },

                        onComplete: function(json) {
                            UWA.log('TypesNotSyncMappingLayoutView::resetParameters - Success');
                            UWA.log(json);

                            // update the view according to HTTP request response
                            self.utils.refreshViewAfterReset();
                            for(var i = self.TNSMapping.length - 1 ; i >= 0 ; i--){
                                if(!self.TNSMapping[i].isDeployed) self.TNSMapping.splice(i, 1);
                            }

                            // update TNS mapping lines status
                            self.utils.updateAllTNSMappingLinesStatus();

                            // update the selectors options according to current TNS mapping
                            self.utils.updateSelectorsOptionsStatus();

                            // request has succeed, display success message
                            self.utils.displayAlertMessage('success', TNSMappingNLS.UserMessage.ResetSuccess);

                            Mask.unmask(self.mappingContainer);
                        }

                    });
                } else {
                    this.utils.displayAlertMessage('primary', TNSMappingNLS.UserMessage.NoActionReset);
                }

            }

        });

        return extendedView;
    }
);

/*! Copyright 2017, Dassault Systemes. All rights reserved. */
/*global define, widget, document, setTimeout, console, alert, clearTimeout*/
/*jslint plusplus: true*/
/*jslint nomen: true*/ // 
/*@quickReview NZV 22/12/15 IR-1024188-3DEXPERIENCER2023x : remove hardcoded time instead setting current time. */
/*@quickReview FRH 22/09/05 FUN127527  (multiline) */
/*@quickReview AJY3 21/02/26 FUN106676 delivery */
/*@quickReview NZV 19/10/18 FUN092576 delivery*/
/*@quickReview NZV 19/01/31 FUN085423 delivery*/
/*@quickReview NZV 18/04/27 FUN076055 delivery*/
/*@quickReview NZV 18/02/07 FUN076053 delivery*/
/*@quickReview ZUR 17/10/11 IR-558248-3DEXPERIENCER2018x*/
/*@quickReview NZV 17/08/27 IR-540216-3DEXPERIENCER2018x*/
/*@quickReview NZV 17/07/06 Minor change related to Units NLS value*/
/*@quickReview NZV 17/06/15 Minor change clear dimension dropdown list before populate*/
/*@quickReview NZV 17/06/15 IR-529296-3DEXPERIENCER2018x*/
/*@quickReview NZV 17/05/22 IR-518037-3DEXPERIENCER2018x*/
/*@quickReview ZUR 17/05/10 IR-518037-3DEXPERIENCER2018x*/
/*@quickReview NZV 17/05/09 IR-519160-3DEXPERIENCER2018x minor changes*/
/*@quickReview NZV 17/05/04 IR-519148-3DEXPERIENCER2018x,IR-512104-3DEXPERIENCER2018x,IR-509281-3DEXPERIENCER2018x */
/*@quickReview NZV 17/05/02 Minor change */
/*@quickReview ZUR 17/04/19 IR-514503-3DEXPERIENCER2017x/18x */
/*@quickReview NZV 17/03/06 IR-506136-3DEXPERIENCER2018x fixed -minor change */
/*@quickReview NZV 17/03/02 IR-504465-3DEXPERIENCER2018x fixed -minor change */
/*@fullReview  NZV 17/04/21 Delivery of HL FUN070867  -major change */
/*@fullReview  NZV 17/03/06 IR-506136-3DEXPERIENCER2018x fixed -minor change */
/*@fullReview  NZV 17/03/02 IR-504465-3DEXPERIENCER2018x fixed -minor change */
/*@fullReview  ZUR 15/07/29 2016xFD01 Param Widgetization NG*/
define('DS/ParameterizationSkeleton/Views/ParameterizationDataModeling/AttributesLayoutUtilities',
    [
        'UWA/Core',
        'DS/UIKIT/Input/Button',
        'DS/UIKIT/Modal',
        'DS/UIKIT/Input/Select',
        'DS/UIKIT/Input/Text',
        'DS/UIKIT/Input/Toggle',
        'DS/UIKIT/Input/Date',
        'DS/UIKIT/Alert',
        'DS/UIKIT/Popover',
        'DS/UIKIT/Autocomplete',
        'UWA/Controls/Tag',
        'DS/ParameterizationSkeleton/Views/ParameterizationDataModeling/AttributesTypesDefine',
        'DS/ParameterizationSkeleton/Utils/ParameterizationGenericServices',
        'DS/ParameterizationSkeleton/Views/ParametersLayoutViewUtilities',
        'DS/ParameterizationSkeleton/Utils/ParameterizationWebServices',
        'i18n!DS/ParameterizationSkeleton/assets/nls/ParamSkeletonNLS'
    ],
    function (UWA,
              Button, Modal, Select, Text, Toggle, InputDate,
              Alert, Popover, Autocomplete, Tag,
              AttributesTypesDefine, GenericServices,
              ParametersLayoutViewUtilities,ParmWebServices,
              ParamSkeletonNLS) {

        'use strict';

        var AttrUtilsView = {

                init : function () {
                    this.attrDefValueInput = null;
                    this.cellsIndex = [];
                    this.dimensionsList = null;
                    this.dimensionServiceFailed = false;
                    this.dimensionToolTipCell = null;
                    this.userMessaging = null;
                    /*"DeletedNotDeployed"
                    "NewNotDeployed"
                    "StoredButNotDeployed"
                    "Deployed"
                    "Modified"*/
                },

                initCells : function () {
                    this.cellsIndex = {
                        "TypeName" : 0,
                        "AttributeName" : 1,
                        "AttributeUserName" : 2,
                        "DefaultValue" : 3,
                        "Mandatory" : 4,
                        "Export3DXML" : 5,
                        "MultiValuated" : 6, //FUN092576
                        "Multiline" : 7, // FRH, adding multiline FUN127527
                        "resetWhenDuplicate" : 8,
                        "resetWhenRevision" : 9,
                        "ReadOnly" : 10,
                        "Indexed" : 11,
                        "AuthValue" : 12,
                        "SixWTag" : 13,
                        "Dimension" : 14,
                        "Action" : 15,
                        "DeployStatus" : 16

                    };

                    this.dimensionServiceFailed = false;
                    this.dimensionToolTipCell = null;
                    this.dimensionsSelector = null;
                    this.dimensionTitleCell = null;

                },

                dimensionsList : null,
                listOf6Wpredicates : null,

                getDefaultValueInput : function () {
                    return this.attrDefValueInput;
                },

                buildNLSText : function(title1, width1, tooltiptext) {
                    var iCell, iCell1, iCell2, imgInfoSpan, popoverAuth;


                    iCell = UWA.createElement('td', {
                        'Align' : 'left',
                        'width' : width1
                    });

                    iCell1 = UWA.createElement('td', {
                        'Align' : 'left',
                        'width' : '92%'
                    }).inject(iCell);

                    UWA.createElement('p', {
                        text   : title1,
                        'class': 'font-3dslight'// font-3dsbold
                    }).inject(iCell1);

                    if (tooltiptext !== '') {
                        iCell2 = UWA.createElement('td', {
                            'Align' : 'left',
                            'width' : '5%'
                        }).inject(iCell);

                        imgInfoSpan = UWA.createElement('span', {
                            'class' : 'fonticon fonticon-info'
                        }).inject(iCell2);

                        imgInfoSpan.setStyle("color", "black");

                        popoverAuth = new Popover({
                            target   : imgInfoSpan,
                            trigger  : "hover",
                            animate  : "true",
                            position : 'top',
                            body     : tooltiptext,
                            title    : ''
                        });
                    }
                    return iCell;
                },

                fetchAndPopulate6WPredicates : function (sixWTagControl, attributeType) {
                    if (AttrUtilsView.listOf6Wpredicates === null) {
                        GenericServices.getPredicatesReturn(function (result) {
                            AttrUtilsView.listOf6Wpredicates = result;
                            AttrUtilsView.FilterPredicatesListbyType(attributeType, AttrUtilsView.listOf6Wpredicates, sixWTagControl);
                        }, function () {
                            UWA.log("getFedProperties failed! call while updating dropdown list of sixWPredicate");
                        });
                    } else {
                        if (sixWTagControl !== undefined && sixWTagControl !== null) {
                            AttrUtilsView.FilterPredicatesListbyType(attributeType, AttrUtilsView.listOf6Wpredicates, sixWTagControl);
                        }
                    }

                },

                addUserMessaging : function (renderToTarget, ihideDelay) {
                    var userMessaging = new Alert({
                        className : 'param-alert',
                        closable: true,
                        visible: true,
                        renderTo : renderToTarget,
                        autoHide : true,
                        hideDelay : ihideDelay,
                        messageClassName : 'warning'
                    });
                    return userMessaging;
                },

                buildTypeSelect : function () {
                    var i, typeID, isOptionSelected,
                        listofTypes = AttributesTypesDefine.getListOfHandledTypes(),
                        typesSelect =  new Select({
                            nativeSelect: true,
                            placeholder: false,
                            multiple: false
                        });

                    for (i = 0; i < listofTypes.length; i++) {
                        typeID = listofTypes[i].type + listofTypes[i].length;
                        isOptionSelected = false;
                        if (typeID  === 'String') {
                            isOptionSelected = true;
                        }

                        typesSelect.add([{
                            label: ParamSkeletonNLS[typeID],
                            value: typeID,
                            selected: isOptionSelected
                        }], false);
                    }
                    return typesSelect;
                },

                buildToolTipForDimension : function(iCell, message, toolTipcolor) {
                    var imgInfoSpan, popoverAuth;

                    if (iCell !== null && AttrUtilsView.dimensionServiceFailed === true) {

                        if (iCell.childNodes[1].childNodes[0].destroy !== undefined) {
                            iCell.childNodes[1].childNodes[0].destroy();
                        }

                        imgInfoSpan = UWA.createElement('span', {
                            'class' : 'fonticon fonticon-info'
                        }).inject(iCell.childNodes[1]);

                        imgInfoSpan.setStyle("color", toolTipcolor);

                        popoverAuth = new Popover({
                            target   : imgInfoSpan,
                            trigger  : "hover",
                            animate  : "true",
                            position : 'top',
                            body     : message,
                            title    : ''
                        });
                    }
                },

                buildDimensionError : function () {
                    var timerconn, userMessaging;
                    AttrUtilsView.dimensionServiceFailed = true;

                    userMessaging = AttrUtilsView.addUserMessaging(document.body, 1500);

                    AttrUtilsView.buildToolTipForDimension(AttrUtilsView.dimensionToolTipCell, ParamSkeletonNLS.DimensionServiceFailed, "orange");

                    if (timerconn) { clearTimeout(timerconn); }
                    timerconn = setTimeout(function() {
                        userMessaging.add({ className: "warning", message: ParamSkeletonNLS.DimensionServiceFailed});
                    }, 40);
                },

                fetchAndSetNLSDimensions : function (dimension, perferredUnit, dimPara) {
                    var i, j, dimName, dimNLSName = "", unitNLSName = "", units = [], nlsStr = "";

                    if (AttrUtilsView.dimensionsList !== null && dimension !== undefined && dimension !== "") {

                        for (i = 0; i < AttrUtilsView.dimensionsList.length; i++) {
                            dimName = AttrUtilsView.dimensionsList[i].Name;
                            if (dimName === dimension) {
                                dimNLSName = AttrUtilsView.dimensionsList[i].NLS;
                                units = AttrUtilsView.dimensionsList[i].Units;

                                if (perferredUnit !== undefined && perferredUnit !== "") {
                                    for (j = 0; j < units.length; j++) {
                                        if (perferredUnit === units[j].Name) {
                                            unitNLSName = units[j].NLSName;
                                            break;
                                        }
                                    }
                                }
                                break;
                            }
                        }
                        if (dimNLSName !== undefined && dimNLSName !== "") {
                            if (unitNLSName !== undefined && unitNLSName !== "") {
                                nlsStr = dimNLSName + "\n(" + unitNLSName + ")";
                            } else if (perferredUnit !== undefined && perferredUnit !== "") {
                                nlsStr = dimNLSName + "\n(" + perferredUnit + ")";
                            } else {
                                nlsStr = dimNLSName;
                            }
                        } else if (dimension !== undefined && dimension !== "") {
                            if (perferredUnit !== undefined && perferredUnit !== "") {
                                nlsStr = dimension + "\n(" + perferredUnit + ")";
                            } else {
                                nlsStr = dimension;
                            }
                        }
                    } else {
                        nlsStr = "";
                    }
                    if (dimPara.setText !== undefined) {
                        dimPara.setText(nlsStr);
                    }
                },

                getNLSDimensionStr : function (dimension, perferredUnit, dimPara) {
                    if (AttrUtilsView.dimensionsList === null) {
                        AttrUtilsView.dimensionServiceFailed = false;
                        GenericServices.getDimensions(function (jsonResult) {
                            if (jsonResult !== 'undefined') {
                                AttrUtilsView.dimensionsList = jsonResult;
                                AttrUtilsView.getNLSDimensionStr(dimension, perferredUnit, dimPara);
                            }
                        },
                            function () {
                                if (AttrUtilsView.dimensionTitleCell !== null) {
                                    if (AttrUtilsView.dimensionTitleCell.childNodes.length === 1) {
                                        UWA.createElement('h5', {
                                            text: ParamSkeletonNLS.DimensionInternalName
                                        }).inject(AttrUtilsView.dimensionTitleCell);
                                    }
                                }
                                AttrUtilsView.dimensionServiceFailed = true;
                                AttrUtilsView.fetchAndSetNLSDimensions(dimension, perferredUnit, dimPara);

                            });
                    } else {
                        AttrUtilsView.fetchAndSetNLSDimensions(dimension, perferredUnit, dimPara);
                    }
                },

                onSuccessOfGetDimensions : function (jsonResult) {
                    if (jsonResult !== 'undefined') {
                        AttrUtilsView.dimensionsList = jsonResult;
                        AttrUtilsView.populateDimenstionSelect();
                    }
                },

                populateDimenstionSelect : function (dimensionsSelect) {
                    var i, dimNLSName, dimName,
                        listofDimension = AttrUtilsView.dimensionsList;

                    dimensionsSelect = AttrUtilsView.dimensionsSelector;
                    dimensionsSelect.remove();

                    if ((dimensionsSelect !== undefined) && (dimensionsSelect !== null)) {
                        if (listofDimension.length > 0) {
                            dimensionsSelect.enable();
                        }
                        for (i = 0; i < listofDimension.length; i++) {
                            dimNLSName = listofDimension[i].NLS;
                            dimName = listofDimension[i].Name;
                            dimensionsSelect.add([{
                                label: dimNLSName,
                                value: dimName
                            }], false);
                        }
                    }
                },

                buildDimensionsSelect : function (dimensionsSelect) {
                    if (AttrUtilsView.dimensionsList === null) {
                        AttrUtilsView.dimensionServiceFailed = false;
                        GenericServices.getDimensions(AttrUtilsView.onSuccessOfGetDimensions, AttrUtilsView.buildDimensionError);
                    } else {
                        AttrUtilsView.populateDimenstionSelect(dimensionsSelect);
                    }
                },

                buildPreUnitsSelect : function (inputElement, unitsSelect) {
                    var i, j, dimNLSName, dimName, unitsName, defaultUnitName,
                        unitsNLS, isOptionSelected, dimensionName, listofDimension,
                        units = null,
                        dimensions = inputElement.getValue();

                    dimensionName = dimensions[0];
                    unitsSelect.clear();
                    unitsSelect.remove();//IR-529296-3DEXPERIENCER2018x

                    if (dimensionName === '') {
                        unitsSelect.disable();
                        return unitsSelect;
                    }

                    listofDimension = AttrUtilsView.dimensionsList;

                    for (i = 0; i < listofDimension.length; i++) {
                        dimNLSName = listofDimension[i].NLS;
                        dimName =  listofDimension[i].Name;

                        if (dimName  === dimensionName) {
                            defaultUnitName = listofDimension[i].MKSUnit;
                            units = listofDimension[i].Units;
                            break;
                        }
                    }
                    if (units !== null) {
                        if (units.length > 0) {
                            unitsSelect.enable();
                        } else {
                            unitsSelect.disable();
                        }

                        for (j = 0; j < units.length; j++) {
                            unitsName = units[j].Name;
                            if (units[j].NLSName !== "") {
                                unitsNLS = units[j].NLSName;
                            } else {
                                unitsNLS = unitsName;
                            }
                            isOptionSelected = false;
                            if (unitsName === defaultUnitName) {
                                isOptionSelected = true;
                            }

                            unitsSelect.add([{
                                label: unitsNLS,
                                value: unitsName,
                                selected: isOptionSelected
                            }], false);
                        }
                    } else {
                        unitsSelect.disable();
                    }

                    return unitsSelect;
                },

                buildBooleanDefault : function () {
                    var boolSelect =  new Select({
                            nativeSelect: true,
                            placeholder: false,
                            multiple: false,
                            options: [ { value: 'TRUE', label: ParamSkeletonNLS.TrueLabel, selected: true},
                                       { value: 'FALSE', label: ParamSkeletonNLS.FalseLabel}]
                        });
                    return boolSelect;
                },

                buildTextDefault : function (userMessaging) {
                    var timerconn, diffDate,
                        currTime = new Date().getTime(),
                        lastMessageDate = currTime,
                        iDefaulInputText = new Text({
                            id : 'attrDefValueInput',
                            attributes: {
                                value: '',
                                multiline: false,
                                disabled: false
                            },
                            events: {
                                onKeyDown: function () {
                                    if (timerconn) { clearTimeout(timerconn); }
                                    timerconn = setTimeout(function() {
                                        currTime = new Date().getTime();

                                        if (AttrUtilsView.testStrictSpecialCharacters(iDefaulInputText.getValue())) {
                                            diffDate = currTime - lastMessageDate;
                                            if (diffDate > 1500) {
                                                userMessaging.add({ className: "error", message: ParamSkeletonNLS.SpecialCharactersMsg});
                                                lastMessageDate = new Date().getTime();
                                            }
                                            iDefaulInputText.elements.input.setStyle('color', 'red');
                                            iDefaulInputText.focus();
                                        } else if (ParametersLayoutViewUtilities.containsAccents(iDefaulInputText.getValue())) {
                                            diffDate = currTime - lastMessageDate;
                                            if (diffDate > 1500) {
                                                userMessaging.add({ className: "error", message: ParamSkeletonNLS.AccentsnotAllowedMsg});
                                                lastMessageDate = new Date().getTime();
                                            }
                                            iDefaulInputText.elements.input.setStyle('color', 'red');
                                            iDefaulInputText.focus();
                                        } else {
                                            iDefaulInputText.elements.input.setStyle('color', '#555555');
                                        }
                                    }, 20);
                                }//onKeyDown
                            }//events
                        });
                    return iDefaulInputText;
                },

                buildDateDefault : function () {
                    var dateSpan, dateInput, dateCheckbox;
                    dateSpan = UWA.createElement('span');

                    dateInput = new InputDate({
                        value: new Date()
                    }).inject(dateSpan);

                    dateSpan.dateInput = dateInput;

                    dateCheckbox = new Toggle({
                        type: 'checkbox',
                        label: ParamSkeletonNLS.NoDefaultValue
                    }).uncheck().inject(dateSpan);
                    dateSpan.dateCheckbox = dateCheckbox;
                    dateCheckbox.addEvent('onChange', function() {
                        if (this.isChecked()) {
                            dateInput.setDate(null);
                            dateInput.setValue(null);
                            dateInput.disable();
                        } else {
                            dateInput.setDate(new Date());
                            dateInput.enable();
                        }
                    });
                    return dateSpan;
                },

                buildTitlesLine : function (wdthArray) {
                    var iCell, cellsIndex,
                        lineTitle = UWA.createElement('tr', {
                            'class' : 'success'
                        });
                    //initilize variable & constent
                    this.initCells();
                    cellsIndex = this.cellsIndex;
                    iCell = UWA.createElement('td', {
                        'Align' : 'left',
                        'width' : wdthArray[cellsIndex.TypeName].toString() + '%'
                    }).inject(lineTitle);

                    UWA.createElement('h5', {
                        text   : ParamSkeletonNLS.AttributeTypeNLenth
                        //'class': 'font-3dslight'// font-3dsbold
                    }).inject(iCell);

                    iCell = UWA.createElement('td', {
                        'Align' : 'left',
                        'width' : wdthArray[cellsIndex.AttributeName].toString() + '%'
                    }).inject(lineTitle);

                    UWA.createElement('h5', {
                        text   : ParamSkeletonNLS.AttributeInternalName
                        //'class': 'font-3dslight'
                    }).inject(iCell);

                    iCell = UWA.createElement('td', {
                        'Align' : 'left',
                        'width' : wdthArray[cellsIndex.AttributeName].toString() + '%'
                    }).inject(lineTitle);

                    UWA.createElement('h5', {
                        text   : ParamSkeletonNLS.AttributeUserName
                        //'class': 'font-3dslight'
                    }).inject(iCell);

                    iCell = UWA.createElement('td', {
                        'Align' : 'left',
                        'width' : wdthArray[cellsIndex.DefaultValue].toString() + '%'
                    }).inject(lineTitle);

                    UWA.createElement('h5', {
                        text   : ParamSkeletonNLS.AttributeDefaultValue
                        //'class': 'font-3dslight'
                    }).inject(iCell);

                    iCell = UWA.createElement('td', {
                        'Align' : 'left',
                        'width' : wdthArray[cellsIndex.Mandatory].toString() + '%'
                    }).inject(lineTitle);

                    UWA.createElement('h5', {
                        text   : ParamSkeletonNLS.MandatoryAttributeTitle
                        //'class': 'font-3dslight'
                    }).inject(iCell);

                    iCell = UWA.createElement('td', {
                        'Align' : 'left',
                        'width' : wdthArray[cellsIndex.Export3DXML].toString() + '%'
                    }).inject(lineTitle);
                    UWA.createElement('h5', {
                        text   : ParamSkeletonNLS.ExportIn3DXML
                        //'class': 'font-3dslight'
                    }).inject(iCell);

                    iCell = UWA.createElement('td', {
                        'Align' : 'left',
                        'width' : wdthArray[cellsIndex.MultiValuated].toString() + '%'
                    }).inject(lineTitle);

                    UWA.createElement('h5', {
                        text   : ParamSkeletonNLS.MultiValuated
                        //'class': 'font-3dslight'
                    }).inject(iCell);

                    // support of multiline information FUN127527
                    iCell = UWA.createElement('td', {
                        'Align' : 'left',
                        'width' : wdthArray[cellsIndex.Multiline].toString() + '%'
                    }).inject(lineTitle);

                    UWA.createElement('h5', {
                        text   : ParamSkeletonNLS.Multiline
                        //'class': 'font-3dslight'
                    }).inject(iCell);

                    iCell = UWA.createElement('td', {
                        'Align' : 'left',
                        'width' : wdthArray[cellsIndex.resetWhenDuplicate].toString() + '%'
                    }).inject(lineTitle);

                    UWA.createElement('h5', {
                        text   : ParamSkeletonNLS.ResetOnDuplicate
                        //'class': 'font-3dslight'
                    }).inject(iCell);

                    iCell = UWA.createElement('td', {
                        'Align' : 'left',
                        'width' : wdthArray[cellsIndex.resetWhenRevision].toString() + '%'
                    }).inject(lineTitle);

                    UWA.createElement('h5', {
                        text   : ParamSkeletonNLS.ResetOnRevision
                        //'class': 'font-3dslight'
                    }).inject(iCell);


                    iCell = UWA.createElement('td', {
                        'Align' : 'left',
                        'width' : wdthArray[cellsIndex.ReadOnly].toString() + '%'
                    }).inject(lineTitle);

                    UWA.createElement('h5', {
                        text   : ParamSkeletonNLS.ReadOnlyAttributeTitle
                        //'class': 'font-3dslight'
                    }).inject(iCell);

                    iCell = UWA.createElement('td', {
                        'Align' : 'left',
                        'width' : wdthArray[cellsIndex.Indexed].toString() + '%'
                    }).inject(lineTitle);

                    UWA.createElement('h5', {
                        text   : ParamSkeletonNLS.IndexedAttributeTitle
                        //'class': 'font-3dslight'
                    }).inject(iCell);

                    iCell = UWA.createElement('td', {
                        'Align' : 'left',
                        'width' : wdthArray[cellsIndex.AuthValue].toString() + '%'
                    }).inject(lineTitle);

                    UWA.createElement('h5', {
                        text   : ParamSkeletonNLS.AuthorizedValsTitle
                        //'class': 'font-3dslight'
                    }).inject(iCell);

                    iCell = UWA.createElement('td', {
                        'Align' : 'left',
                        'width' : wdthArray[cellsIndex.SixWTag].toString() + '%'
                    }).inject(lineTitle);

                    UWA.createElement('h5', {
                        text   : ParamSkeletonNLS.SixWTagAttributeTitle
                        //'class': 'font-3dslight'
                    }).inject(iCell);

                    iCell = UWA.createElement('td', {
                        'Align' : 'left',
                        'width' : wdthArray[cellsIndex.Dimension].toString() + '%'
                    }).inject(lineTitle);

                    AttrUtilsView.dimensionTitleCell =  UWA.createElement('h5', {
                        text   : ParamSkeletonNLS.Dimensions
                        //'class': 'font-3dslight'
                    }).inject(iCell);

                    //actionWidth = wdthArray[10] + wdthArray[11];

                    iCell = UWA.createElement('td', {
                        'Align'  : 'left',
                        'colspan': '2',
                        'width'  : wdthArray[cellsIndex.Action].toString() + '%'
                    }).inject(lineTitle);

                    UWA.createElement('h5', {
                        text   : ParamSkeletonNLS.ActionsText
                    }).inject(iCell);

                    iCell = UWA.createElement('td', {
                        'Align' : 'left',
                        'width' : wdthArray[cellsIndex.DeployStatus].toString() + '%'
                    }).inject(lineTitle);

                    UWA.createElement('h5', {
                        text   : ParamSkeletonNLS.DeployStatus
                        //'class': 'font-3dslight'
                    }).inject(iCell);

                    return lineTitle;
                },
                update6WTagCellWithNLS : function (cell, sixWTagValue, isixwTagNLS) {
                    if (isixwTagNLS !== "") {
                        AttrUtilsView.update6WTagCell(cell, isixwTagNLS);
                    } else {

                        if (AttrUtilsView.listOf6Wpredicates !== null) {
                            isixwTagNLS = AttrUtilsView.getMatching6wtagNLS(sixWTagValue, AttrUtilsView.listOf6Wpredicates);
                            AttrUtilsView.update6WTagCell(cell, isixwTagNLS);
                        } else {
                            GenericServices.getPredicatesReturn(function (result) {
                                AttrUtilsView.listOf6Wpredicates = result;
                                isixwTagNLS = AttrUtilsView.getMatching6wtagNLS(sixWTagValue, AttrUtilsView.listOf6Wpredicates);
                                AttrUtilsView.update6WTagCell(cell, isixwTagNLS);
                            }, function (eMessage) {
                                AttrUtilsView.update6WTagCell(cell, sixWTagValue);
                                UWA.log("getFedProperties failed! call while get label value of " + sixWTagValue + eMessage);
                            });
                        }
                    }
                },

                update6WTagCell : function (cell, isixwTag) {
                    if ((isixwTag !== undefined) &&
                            (isixwTag !== '')) {
                        new Tag({
                            value: isixwTag,
                            className: 'border-only',
                            closable: true
                        }).inject(cell);
                    }
                },
				////IR-820267-3DEXPERIENCER2021x
                buildAttributeLine : function (itypeNLen, iName, iInternalName, iDefaultValue, isMand, isReadOnly,
                    isExposedTo3DXML, isMultiValuated/*FUN092576*/, isMultiline,/*FUN127527*/ iDimension, iPerferredUnit, isIndexed, iAuthValues, isixwTag,
                    isixwTagValue, isUsedInOtherSettings, isDeployed, wdthArray, userMessaging,
                    revisionToggle, duplicateToggle,that) {
                    var iCell, removeAttributeButton, deleteSpan, removePop, defaultValuetoShow, iATpos,//editPop, editSpan, editAttributeButton,
                        iconChoice, iconColor,
                        dimPara,
                        defaultDateObj,//sixWTagContainer,
                        defCellTitle = "",
                        removelts = [], dimensionText = "",
                        lineAttr = UWA.createElement('tr'),
                        cellsIndex = this.cellsIndex, sixWTagCell;

                    iCell = UWA.createElement('td', {
                        'Align' : 'left',
                        'width' : wdthArray[cellsIndex.TypeName].toString() + '%',
                        'value'  : itypeNLen
                    }).inject(lineAttr);

                    UWA.createElement('p', {
                        text   : ParamSkeletonNLS[itypeNLen],
                        'class': 'font-3dslight'// font-3dsbold
                    }).inject(iCell);

                    iCell = UWA.createElement('td', {
                        'Align'  : 'left',
                        'width'  : wdthArray[cellsIndex.AttributeName].toString() + '%',
                        'value'  : iInternalName
                    }).inject(lineAttr);

                    UWA.createElement('p', {
                        text   : iInternalName,
                        value  : iInternalName,
                        'class': 'font-3dslight'
                    }).inject(iCell);

					//IR-820267-3DEXPERIENCER2021x
                    iCell = UWA.createElement('td', {
                        'Align'  : 'left',
                        'width'  : wdthArray[cellsIndex.AttributeName].toString() + '%',
                        'value'  : iName,
						'internalName' : iInternalName
                    }).inject(lineAttr);

                    UWA.createElement('p', {
                        text   : iName,
                        value  : iName,
                        'class': 'font-3dslight'
                    }).inject(iCell);

                    defaultValuetoShow = iDefaultValue;
                    //ZUR IR-494192-3DEXPERIENCER2017x
                    //default 2017/01/24@11:00:00:GMT (generated 2017-01-24T18:32:22.382Z)
                    //3/23/2017

                    if (itypeNLen === "Date") {
                        defaultDateObj = new Date(iDefaultValue);
                        defCellTitle = defaultDateObj.toDateString();
                        iATpos = iDefaultValue.indexOf("@");
                        if (iATpos > 0) {
                            defaultValuetoShow  = iDefaultValue.substring(0, iATpos);
                        }
                    }

                    iCell = UWA.createElement('td', {
                        'Align' : 'left',
                        'width' : wdthArray[cellsIndex.DefaultValue].toString() + '%',
                        'value' : iDefaultValue,
                        'title' : defCellTitle
                    }).inject(lineAttr);

                    UWA.createElement('p', {
                        text   : defaultValuetoShow,
                        'class': 'font-3dslight'
                    }).inject(iCell);

                    /*if (!isMand) {
                        iconChoice = 'cancel-squared';
                        iconColor = 'orange';
                    }*/

                    if (isMand === true) {
                        iconChoice = 'check';
                        iconColor = 'green';
                        iCell = ParametersLayoutViewUtilities.buildImgCell(iconChoice, '1', iconColor, isMand, wdthArray[cellsIndex.Mandatory].toString() + '%', 'center');
                    } else {
                        iCell = UWA.createElement('td', {'width'  : wdthArray[cellsIndex.Mandatory].toString() + '%'}).inject(lineAttr);
                    }
                    iCell.value = isMand;
                    iCell.inject(lineAttr);

                    //expose to 3dXML
                    if (isExposedTo3DXML === true) {
                        iconChoice = 'check';
                        iconColor = 'green';
                        iCell = ParametersLayoutViewUtilities.buildImgCell(iconChoice, '1', iconColor, isExposedTo3DXML, wdthArray[cellsIndex.Export3DXML].toString() + '%', 'center');
                    } else {
                        iCell = UWA.createElement('td', {'width'  : wdthArray[cellsIndex.Export3DXML].toString() + '%'}).inject(lineAttr);
                    }
                    iCell.value = isExposedTo3DXML;
                    iCell.inject(lineAttr);
                   // end expose to 3dxml
                    //expose to MultiValuated - FUN092576
                    if (isMultiValuated === true) {
                        iconChoice = 'check';
                        iconColor = 'green';
                        iCell = ParametersLayoutViewUtilities.buildImgCell(iconChoice, '1', iconColor, isMultiValuated, wdthArray[cellsIndex.MultiValuated].toString() + '%', 'center');
                    } else {
                        iCell = UWA.createElement('td', {'width'  : wdthArray[cellsIndex.MultiValuated].toString() + '%'}).inject(lineAttr);
                    }
                    iCell.value = isMultiValuated;
                    iCell.inject(lineAttr);
                   // end expose to MultiValuated
                    //expose to Multiline - FUN127527
                    if (isMultiline === true) {
                        iconChoice = 'check';
                        iconColor = 'green';
                        iCell = ParametersLayoutViewUtilities.buildImgCell(iconChoice, '1', iconColor, isMultiline, wdthArray[cellsIndex.Multiline].toString() + '%', 'center');
                    } else {
                        iCell = UWA.createElement('td', {'width'  : wdthArray[cellsIndex.Multiline].toString() + '%'}).inject(lineAttr);
                    }
                    iCell.value = isMultiline;
                    iCell.inject(lineAttr);

                   // end expose to Multiline

                    if (duplicateToggle === undefined || duplicateToggle === "") {
                        duplicateToggle = false; //set defual value
                    }
                    //expose to duplicateToggle
                    if (duplicateToggle === true) {
                        iconChoice = 'check';
                        iconColor = 'green';
                        iCell = ParametersLayoutViewUtilities.buildImgCell(iconChoice, '1', iconColor, duplicateToggle, wdthArray[cellsIndex.resetWhenDuplicate].toString() + '%', 'center');
                    } else {
                        iCell = UWA.createElement('td', {'width'  : wdthArray[cellsIndex.resetWhenDuplicate].toString() + '%'}).inject(lineAttr);
                    }
                    iCell.value = duplicateToggle;
                    iCell.inject(lineAttr);
                    //end expose to duplicateToggle
                    //expose to revisionToggle,
                    if (revisionToggle === undefined || revisionToggle === "") {
                        revisionToggle = false; //set defual value
                    }
                    if (revisionToggle === true) {
                        iconChoice = 'check';
                        iconColor = 'green';
                        iCell = ParametersLayoutViewUtilities.buildImgCell(iconChoice, '1', iconColor, revisionToggle, wdthArray[cellsIndex.resetWhenRevision].toString() + '%', 'center');
                    } else {
                        iCell = UWA.createElement('td', {'width'  : wdthArray[cellsIndex.resetWhenRevision].toString() + '%'}).inject(lineAttr);
                    }
                    iCell.value = revisionToggle;
                    iCell.inject(lineAttr);
                    //end expose to revisionToggle
                    if (isReadOnly === true) {
                        iconChoice = 'check';
                        iconColor = 'green';
                        iCell = ParametersLayoutViewUtilities.buildImgCell(iconChoice, '1', iconColor, isReadOnly, wdthArray[cellsIndex.ReadOnly].toString() + '%', 'center');
                    } else {
                        iCell = UWA.createElement('td', {'width'  : wdthArray[cellsIndex.ReadOnly].toString() + '%'}).inject(lineAttr);
                    }
                    iCell.value = isReadOnly;
                    iCell.inject(lineAttr);
                    //NZV : Remove Index toggle button with Function FUN085423
                    if (isIndexed === true) {
                        iconChoice = 'check';
                        iconColor = 'green';
                        iCell = ParametersLayoutViewUtilities.buildImgCell(iconChoice, '1', iconColor, isIndexed, wdthArray[cellsIndex.Indexed].toString() + '%', 'center');
                    } else {
                        iCell = UWA.createElement('td', {'width'  : wdthArray[cellsIndex.Indexed].toString() + '%'}).inject(lineAttr);
                    }
                    iCell.value = isIndexed;
                    iCell.inject(lineAttr);

                    iCell = UWA.createElement('td', {
                        'Align' : 'left',
                        'width' : wdthArray[cellsIndex.AuthValue].toString() + '%',
                        'value' : iAuthValues
                    }).inject(lineAttr);

                    UWA.createElement('p', {
                        text   : iAuthValues,
                        'class': 'font-3dslight'
                    }).inject(iCell);

                    sixWTagCell = UWA.createElement('td', {
                        'Align' : 'left',
                        'width' : wdthArray[cellsIndex.SixWTag].toString() + '%',
                        'value' : isixwTagValue
                    }).inject(lineAttr);

                    if ((isixwTagValue !== undefined) && (isixwTagValue !== '')) {
                        AttrUtilsView.update6WTagCellWithNLS(sixWTagCell, isixwTagValue, isixwTag);
                    }

                    iCell = UWA.createElement('td', {
                        'Align' : 'left',
                        'width' : wdthArray[cellsIndex.Dimension].toString() + '%',
                        'value' : iDimension + "," + iPerferredUnit
                    }).inject(lineAttr);

                    dimPara = UWA.createElement('p', {
                        text   : dimensionText,
                        'class': 'font-3dslight'
                    }).inject(iCell);

                    if ((iDimension !== undefined) && (iDimension !== "")) {
                        dimensionText = AttrUtilsView.getNLSDimensionStr(iDimension, iPerferredUnit, dimPara);

                    }

                    //fonticon fonticon-pencil
                    //fonticon fonticon-fonticon fonticon-cancel fonticon-1.5x

                    /*editElts = AttrUtilsView.createEditActionElements();
                    editSpan = editElts[0];
                    editSpan.inject(iCell);
                    editAttributeButton = editElts[1];
                    editPop = editElts[2];

                    editAttributeButton.addEvent("onClick", function () {
                        UWA.log("editAttributeButton::onClick");
                    });*/
                    //Cell - 10, Action element
                   // var  actionWidth = wdthArray[cellsIndex.Action] + wdthArray[cellsIndex.DeployStatus];
                    /*iCell = UWA.createElement('td', {
                        'Align' : 'left',
                        'width' : actionWidth.toString() + '%'
                    }).inject(lineAttr);*/

                    iCell = UWA.createElement('td', {
                        'Align' : 'center',
                        'colspan': '2',
                        'width' : wdthArray[cellsIndex.Action].toString() + '%'
                    }).inject(lineAttr);
                    //NZV - FUN085423
                    var editElts = ParametersLayoutViewUtilities.createActionElements(ParamSkeletonNLS.EditAttribute, false);
                    var editSpan = editElts[0];
                     //actionSpan.setStyle("padding-right", "20px");
                    editSpan.setStyle("float", "left");
                    editSpan.inject(iCell);
                    var editAttributeButton = editElts[1];
                    var editPop = editElts[2];

                    removelts = ParametersLayoutViewUtilities.createActionElements(ParamSkeletonNLS.DeleteAttributetxt, true);
                    deleteSpan = removelts[0];
                    deleteSpan.setStyle("float", "right");
                    deleteSpan.inject(iCell);
                    removeAttributeButton = removelts[1];
                    removePop = removelts[2];

                    iCell = ParametersLayoutViewUtilities.buildDeployStsCell(isDeployed.toString(), wdthArray[cellsIndex.DeployStatus].toString() + '%', '1.5', 'center');

                    if (isDeployed === true) {
                        iCell.value  = "Deployed";
                    } else if (isDeployed === "NewNotDeployed") {
                        iCell.value  = "NewNotDeployed";
                    } else {
                        iCell.value  = "StoredButNotDeployed";//"false"
                    }

                    //iCell.value = isDeployed;
                    iCell.inject(lineAttr);

                    editAttributeButton.addEvent("onClick", function () {
                        AttrUtilsView.showEditAttributeModel(userMessaging,that,lineAttr)
                    });
                    //R-964136-3DEXPERIENCER2022x\23x:get latest info that attribute referenced on other app's parameter
                    removeAttributeButton.addEvent("onClick", function () {
                      var lineDeployStatusValue = iCell.value, objToBeRemoved;//IR-518037-3DEXPERIENCER2018x
                      if (lineDeployStatusValue === "NewNotDeployed") {
                          removePop.destroy();//editPop.remove();
                          AttrUtilsView.attributeLinetobeDeleted(lineAttr);//attrIndexToggle*/
                        } else {
                          ParmWebServices.getAttributeUsedInOther(that.handledTypeID,iInternalName,iName).then(function (result) {
                          isUsedInOtherSettings = result.attributeDescription[0].isUsedInOther;
                          if (isUsedInOtherSettings === true) {//IR-516226-3DEXPERIENCER2017x/18x
							//IR-964136-3DEXPERIENCER2023x/22x
                            that.userMessaging.add({ className: "warning", message: ParamSkeletonNLS.AttributeUsedInOtherMsg });
                          } else {
                                //AttrUtilsView.showContextualDeleteModal(widget.body, lineAttr, removePop);
                                //FUN102019 21x FD03
                                objToBeRemoved = {popOver : removePop, attrLine : lineAttr};//IR-689657-3DEXPERIENCER2019x/20x : function signature changed
                                ParametersLayoutViewUtilities.showContextualDeleteModal(widget.body, "delAttrModal", ParamSkeletonNLS.removeAttributesWarning + "\n"+ParamSkeletonNLS.removeAttributesWarningSec,
                                    ParamSkeletonNLS.YesText,  ParamSkeletonNLS.NoText, ParamSkeletonNLS.Warning+"!", AttrUtilsView.removeAttribueLine, objToBeRemoved);

                                  }
                                }).catch(function (error) { console.log("request isattributereferencedinother failed"+error)})
                              }
                            });

                    return lineAttr;
                },
                //NZV - FUN085423
                showEditAttributeModel : function (userMessaging, that,lineAttr) {
                    var headertitle, modalbodyTable, tbodyreflist, attrLine, listofAddedAttrs,
                        AuthValsInput, typeNLen,
                        OKBtn, CancelBtn, checkResult, hasAuthVals,
                        sixwTagSelector, typesSelect, attrNameInput, attrUserNameInput, attrDefValueInput,
                        currSelectedOpt, iDefaultValue,
                        mandToggle, readonlyToggle, indexedToggle,
                        dateInput, dateSpan, iShortDate,
                        selected6wTag = '',
                        selected6wTagValue = '',
                        inputsArray = [],
                        dimensionsSelector, unitSelect,
                        export3DXMLToggle = false, revisionToggle = null, duplicateToggle = null,
                        trdimValues, trLine, trDim = "", trPreUnits = "", trhasAuthValues=false, trTypeNLen,
                        cellsIndex = this.cellsIndex, isLineModified = -1, i, j, authValuesStr = "", multiValuatedToggle,multilineToggle; // FUN127527 FRH Support multiline

                    UWA.log("showEditAttributeModel::");

                    if (that.editAttributesModal !== null) {
                        that.editAttributesModal.destroy();//Modal already exists
                    }

                    headertitle = UWA.createElement('h4', {
                        text   : ParamSkeletonNLS.EditAttribute,
                        'class': 'font-3dslight' // font-3dsbold
                    });

                    inputsArray        = AttrUtilsView.buildModalSkeleton(that);
                    modalbodyTable     = AttrUtilsView.getInputFromSkeleton(inputsArray, "modalbodyTable");
                    typesSelect        = AttrUtilsView.getInputFromSkeleton(inputsArray, "typesSelect");
                    attrNameInput      = AttrUtilsView.getInputFromSkeleton(inputsArray, "attrNameInput");
                    attrUserNameInput  = AttrUtilsView.getInputFromSkeleton(inputsArray, "attrUserNameInput");
                    mandToggle         = AttrUtilsView.getInputFromSkeleton(inputsArray, "mandToggle");
                    readonlyToggle     = AttrUtilsView.getInputFromSkeleton(inputsArray, "readonlyToggle");
                    indexedToggle      = AttrUtilsView.getInputFromSkeleton(inputsArray, "indexedToggle");
                    sixwTagSelector    = AttrUtilsView.getInputFromSkeleton(inputsArray, "sixwTagAutoSelect");
                    AuthValsInput      = AttrUtilsView.getInputFromSkeleton(inputsArray, "AuthValsInput");
                    OKBtn              = AttrUtilsView.getInputFromSkeleton(inputsArray, "OKBtn");
                    CancelBtn          = AttrUtilsView.getInputFromSkeleton(inputsArray, "CancelBtn");
                    dimensionsSelector = AttrUtilsView.getInputFromSkeleton(inputsArray, "dimensionsSelect");
                    unitSelect         = AttrUtilsView.getInputFromSkeleton(inputsArray, "unitSelect");
                    export3DXMLToggle  = AttrUtilsView.getInputFromSkeleton(inputsArray, "export3DXMLToggle");
                    revisionToggle     = AttrUtilsView.getInputFromSkeleton(inputsArray, "revisionToggle");
                    duplicateToggle    = AttrUtilsView.getInputFromSkeleton(inputsArray, "duplicateToggle");
                    attrDefValueInput  = AttrUtilsView.getInputFromSkeleton(inputsArray, "attrDefValueInput");
                    multiValuatedToggle = AttrUtilsView.getInputFromSkeleton(inputsArray, "multiValuatedToggle");
					// FUN127527 FRH Support multiline
                    multilineToggle    = AttrUtilsView.getInputFromSkeleton(inputsArray, "multilineToggle");
                    //build line object from reading value from tr
                    trdimValues = lineAttr.cells[cellsIndex.Dimension].value.split(",");

                    if (trdimValues.length > 1) {
                        trDim = trdimValues[0];
                        trPreUnits = trdimValues[1];
                    } else {
                        trDim = trdimValues[0];
                    }
                    //IR-744403-3DEXPERIENCER2021x
                    if(lineAttr.cells[cellsIndex.AuthValue].value != undefined ) {
                        if(lineAttr.cells[cellsIndex.AuthValue].value.indexOf(",") == -1) {
                            lineAttr.cells[cellsIndex.AuthValue].value = lineAttr.cells[cellsIndex.AuthValue].value.trim();
                        } else {
                            //lineAtt.cells[cellsIndex.AuthValue].value = lineAttr.cells[cellsIndex.AuthValue].value.trim();
                        }
                        if (lineAttr.cells[cellsIndex.AuthValue].value !== "")
                            trhasAuthValues = true;
                    }
                    trTypeNLen = AttrUtilsView.getSelectedTypeAndLength(lineAttr.cells[cellsIndex.TypeName].value);
                    trLine = {
                            nlsName          : lineAttr.cells[cellsIndex.AttributeUserName].value,
							internalName	 : lineAttr.cells[cellsIndex.AttributeName].value,//IR-820267-3DEXPERIENCER2021x
                            type             : trTypeNLen[0],
                            maxLength        : trTypeNLen[1],
                            defaultValue     : lineAttr.cells[cellsIndex.DefaultValue].value,
                            isMandatory      : lineAttr.cells[cellsIndex.Mandatory].value,
                            isExposedTo3DXML : lineAttr.cells[cellsIndex.Export3DXML].value, //FUN092576
                            multiValuated    : lineAttr.cells[cellsIndex.MultiValuated].value,
                            multiline        : lineAttr.cells[cellsIndex.Multiline].value, // FUN127527
                            resetWhenDuplicate : lineAttr.cells[cellsIndex.resetWhenDuplicate].value,
                            resetWhenRevision : lineAttr.cells[cellsIndex.resetWhenRevision].value,
                            isReadOnly       : lineAttr.cells[cellsIndex.ReadOnly].value,
                            isIndexed        : lineAttr.cells[cellsIndex.Indexed].value,//lineAttr.cells[cellsIndex.Indexed].childNodes[0].childNodes[0].checked,
                            hasAuthValues    : trhasAuthValues,
                            listofAuthValues : lineAttr.cells[cellsIndex.AuthValue].value,
                            SixWTag          : lineAttr.cells[cellsIndex.SixWTag].value,
                            dimension        : trDim,
                            preferredunit    : trPreUnits

                        }

                    //initilization from existing values
                    typesSelect.select(String, true, false, false);
                    typesSelect.select(trLine.type, true, false, false);


                    attrNameInput.setValue(trLine.internalName);
                    attrUserNameInput.setValue(trLine.nlsName);
                    attrNameInput.disable();

                    if (trLine.isMandatory === true) {
                        mandToggle.check();
                    } else {
                        mandToggle.uncheck();
                    }
					//FUN119390
					if (that.isObjectExistWithConfiguredAttribue === true) {
						mandToggle.disable();
					}
                    if(trLine.isReadOnly === true) {
                        readonlyToggle.check();
                    } else {
                        readonlyToggle.uncheck();
                    }

                    if(trLine.isIndexed === true) {
                        indexedToggle.check();
                    } else {
                        indexedToggle.uncheck();
                        sixwTagSelector.disable();
                    }

                    if(trLine.listofAuthValues !== "") {
                        AuthValsInput.setValue(trLine.listofAuthValues);
                    } else {
                        if (lineAttr.cells[cellsIndex.DeployStatus].value !== "NewNotDeployed") {
                            AuthValsInput.disable();
                        }
                    }

                    if (trLine.type === 'Real') {
                        AttrUtilsView.buildDimensionsSelect(dimensionsSelector);
                        dimensionsSelector.select(trLine.dimension,true, false, false);
                        unitSelect.select(trLine.preferredunit,true, false, false);

                    } else {
                        unitSelect.disable();
                    }
                    dimensionsSelector.disable();

                    if(trLine.isExposedTo3DXML === true) {
                        export3DXMLToggle.check();
                    } else {
                        export3DXMLToggle.uncheck();
                    }
                    //FUN092576
                    if(trLine.multiValuated === true) {
                        multiValuatedToggle.check();
                    } else {
                        multiValuatedToggle.uncheck();
                    }
					multiValuatedToggle.disable();//IR-750288-3DEXPERIENCER2021x
					// FUN127527 FRH Support multiline
                    if(trLine.multiline === true) {
                        multilineToggle.check();
                    } else {
                        multilineToggle.uncheck();
                    }

                    if(trLine.resetWhenRevision === true) {
                        revisionToggle.check();
                    } else {
                        revisionToggle.uncheck();
                    }

                    if(trLine.resetWhenDuplicate === true) {
                        duplicateToggle.check();
                    } else {
                        duplicateToggle.uncheck();
                    }
					//FUN119390
                    if(trLine.type !== 'Date') {
                        this.attrDefValueInput.setValue(trLine.defaultValue);
						if (that.isObjectExistWithConfiguredAttribue === true) {
							if (trLine.defaultValue === "") {
								this.attrDefValueInput.disable();
							} else {
								this.attrDefValueInput.enable();
							}
						}
                        if (trLine.multiValuated === true) {//IR-750288-3DEXPERIENCER2021x
                            this.attrDefValueInput.disable();
                        }

                    } else {
                       if(trLine.defaultValue !== "") {
                            this.attrDefValueInput.dateInput.setDate(trLine.defaultValue);
							//IR-995980-3DEXPERIENCER2023x
							if (that.isObjectExistWithConfiguredAttribue === true) {
								//IR-951344-3DEXPERIENCER2022x\23x
								this.attrDefValueInput.dateInput.enable();
								this.attrDefValueInput.dateCheckbox.enable();
							}
                        } else {

                            this.attrDefValueInput.dateCheckbox.setCheck(true);
                            this.attrDefValueInput.dateInput.setDate(null);
                            this.attrDefValueInput.dateInput.setValue(null);
							this.attrDefValueInput.dateInput.disable();
							if (that.isObjectExistWithConfiguredAttribue === true) {
								//this.attrDefValueInput.dateInput.disable();
								this.attrDefValueInput.dateCheckbox.disable();
							}
                        }//IR-750288-3DEXPERIENCER2021x
                        if (trLine.multiValuated === true) {
                            this.attrDefValueInput.dateInput.disable();
                            this.attrDefValueInput.dateCheckbox.disable();
                        }

                    }
                    if(trLine.SixWTag !== "") {
                        var ds6wLabel = ""
                        if (AttrUtilsView.listOf6Wpredicates !== null) {
                            ds6wLabel = AttrUtilsView.getMatching6wtagNLS(trLine.SixWTag, AttrUtilsView.listOf6Wpredicates);
                        }
                        sixwTagSelector.onSelect({value:trLine.SixWTag, label:ds6wLabel});
                    }

                    typesSelect.disable();

                    OKBtn.addEvent("onClick", function () {

                        var userSelectDimention = "", perferredUnit = "", attriLineAuthValues = trLine.listofAuthValues,
                        msg ="";

                        typeNLen = AttrUtilsView.getSelectedTypeAndLength(typesSelect.getSelection()[0].value);
                       // userSelectDimention = {};
                        if (typeNLen[0] === 'Boolean') {
                            attrDefValueInput = AttrUtilsView.getDefaultValueInput();
                            currSelectedOpt = attrDefValueInput.getSelection();
                            iDefaultValue = currSelectedOpt[0].value;
                        } else if (typeNLen[0] === 'Date') {
                            //ZUR IR-494192-3DEXPERIENCER2017x
                            dateSpan = AttrUtilsView.getDefaultValueInput();
                            dateInput = dateSpan.dateInput;
                            iShortDate = dateInput.getDate();
                            if (iShortDate !== null) {
                                iShortDate.setHours(11);//ZUR IR-502127-3DEXPERIENCER2018x
                                //toLocaleDateString
                                iDefaultValue = AttrUtilsView.getCATIACompatibleDateFromISOString(iShortDate.toISOString());
                            } else {
                                iDefaultValue = "";
                            }

                        } else if (typeNLen[0] === 'Real') {

                            if (dimensionsSelector.getSelection()[0].value !== '') {

                                userSelectDimention = dimensionsSelector.getSelection()[0].value;

                                if (unitSelect.getSelection()[0].value !== '') {
                                    perferredUnit = unitSelect.getSelection()[0].value;
                                }
                            }
                            iDefaultValue = AttrUtilsView.getDefaultValueInput().getValue();
                        } else {
                            iDefaultValue = AttrUtilsView.getDefaultValueInput().getValue();
                        }
                        listofAddedAttrs = AttrUtilsView.getNamesListofAlreadyAddedAttributes(that.contentDiv);

                        hasAuthVals = false;

                       //IR-744403-3DEXPERIENCER2021x
                        if ((AuthValsInput.getValue() !== undefined) &&
                                (AuthValsInput.getValue() !== '')) {
                            hasAuthVals = true;
                            //Remove spaces between values.
                            authValuesStr = AuthValsInput.getValue();
                            if(authValuesStr.indexOf(",") > -1) {
                                //IR-904152-3DEXPERIENCER2022x,IR-953664-3DEXPERIENCER2022x\23x: Convert space "  " to "" to be aline with TXO
                                const authValues = authValuesStr.split(",");
                                const trimedAuthValues  = authValues.map((item) => item.trim());
                                authValuesStr = trimedAuthValues.join();
                            } //else {}
                            authValuesStr = authValuesStr.trim();
                            AuthValsInput.setValue(authValuesStr);

                        } else {
                            authValuesStr = "";
                        }


                        checkResult = AttrUtilsView.checkOptionsBeforeAddAttrs(typeNLen[0], typeNLen[1],
                            attrNameInput.getValue(), attrUserNameInput.getValue(), iDefaultValue,
                            readonlyToggle.isChecked(), mandToggle.isChecked(), multiValuatedToggle.isChecked(), hasAuthVals,
                            authValuesStr,
                            listofAddedAttrs, that.systemAttributes, true, trLine.nlsName, that.isObjectExistWithConfiguredAttribue);
                            ////Extra validation for Authorzied Values not allow to remove any old value.
                            if (lineAttr.cells[cellsIndex.DeployStatus].value !== "NewNotDeployed") {
                                if(attriLineAuthValues !== "") {

                                    if(authValuesStr !== "") {
                                        var valueListTab = authValuesStr.split(',');
                                        var attriLineValuesLst = attriLineAuthValues.split(',');
                                        for(i = 0; i < valueListTab.length; i++ ) {
                                            for(j = 0; j < attriLineValuesLst.length; j++ ) {
                                                //IR-749706-3DEXPERIENCER2021x/20x/19x
                                                if(valueListTab[i] === "" || valueListTab[i] === " ") {
                                                    if(attriLineValuesLst[j] === "" || attriLineValuesLst[j] === " ")
                                                    {
                                                        attriLineValuesLst.splice(j, 1);
                                                    }
                                                } else {
                                                    if(valueListTab[i] === attriLineValuesLst[j]) {
                                                        attriLineValuesLst.splice(j, 1);
                                                    }
                                                }
                                            }
                                        }
                                        if(attriLineValuesLst.length > 0 ) {
                                           //that.userMessaging.add({ className: "error", message: "Removal of existing Authorized value not allow, Only addition of new value allow!"});
                                           checkResult = "RemovalOfExistingValNotAllow";
                                        }
                                    }
                                }
                            }
                        //IR-759885-3DEXPERIENCER2021x
                        if (!(checkResult === "S_OK" ||
                            (checkResult === "AttributeNameNotAllowed" && lineAttr.cells[cellsIndex.DeployStatus].value == "NewNotDeployed"))) {
                             if (checkResult === "AttributeNameNotAllowed") {
                                 msg = ParamSkeletonNLS[checkResult].format(attrNameInput.getValue());
                                 UWA.log("checkResult = " + msg);
                                 that.userMessaging.add({ className: "error", message: msg});
                             } else {
                                UWA.log("checkResult = " + ParamSkeletonNLS[checkResult]);
                                if (checkResult == "DefaultNotInAuthValsMsg") {
                                  //IR-904152-3DEXPERIENCER2022x,IR-953664-3DEXPERIENCER2022x\23x: add more proper message.
                                  that.userMessaging.add({ className: "error", message: ParamSkeletonNLS[checkResult].format(iDefaultValue)});

                                  } else {
                                    that.userMessaging.add({ className: "error", message: ParamSkeletonNLS[checkResult]});
                                  }
                            }

                            if ((checkResult === 'DefaultValueSizeInadequate') ||
                                    (checkResult === 'AccentsnotAllowedMsg') ||
                                      (checkResult === 'DefaultValueSizeInadequate')) {
                                AttrUtilsView.getDefaultValueInput().focus();
                            }

                        } else {

                            selected6wTag = '';
                            selected6wTagValue = '';

                            if (sixwTagSelector.selectedItems[0] != undefined) {
                                selected6wTag = sixwTagSelector.selectedItems[0].label;
                                selected6wTagValue = sixwTagSelector.selectedItems[0].value;
                            }

                            isLineModified =  AttrUtilsView.checkAndUpdateAttributeLine(lineAttr,typesSelect.getSelection()[0].value,
                                attrUserNameInput.getValue(), iDefaultValue,
								// FUN127527 FRH Support multiline
                                mandToggle.isChecked(), readonlyToggle.isChecked(), export3DXMLToggle.isChecked(), multiValuatedToggle.isChecked(),multilineToggle.isChecked(),
                                userSelectDimention, perferredUnit,
                                indexedToggle.isChecked(),
                                AuthValsInput.getValue(),
                                selected6wTagValue,
                                revisionToggle.isChecked(), duplicateToggle.isChecked(),that.wdthArray);
                            if(isLineModified !== -1) {
                               if (lineAttr.cells[cellsIndex.DeployStatus].value !== "NewNotDeployed") {
                                    lineAttr.cells[cellsIndex.DeployStatus].empty();
                                    lineAttr.cells[cellsIndex.DeployStatus].value = "ModifiedNotDeployed";
                                    var imgSpan = ParametersLayoutViewUtilities.buildImgSpan('fonticon fonticon-pencil fonticon-1.5x', '1.5', 'orange');
                                    lineAttr.cells[cellsIndex.DeployStatus].title = ParamSkeletonNLS.ModifiedNotYetDeployed;
                                    imgSpan.inject(lineAttr.cells[cellsIndex.DeployStatus]);
                                }
                            }
                            that.editAttributesModal.hide();
                            that.editAttributesModal.destroy();
                            lineAttr.focus();
                        }

                    });

                    CancelBtn.addEvent("onClick", function (e) {
                        UWA.log(e);//that.onCancelCalled();
                        that.editAttributesModal.hide();
                        that.editAttributesModal.destroy();
                    });

                    that.editAttributesModal = new Modal({
                        className: 'add-attr-modal',
                        closable: true,
                        header  : headertitle,
                        body    : modalbodyTable,
                        footer  : [ OKBtn, CancelBtn ]
                    }).inject(that.contentDiv);

                    that.editAttributesModal.getContent().setStyle("padding-top", 10);
                    that.editAttributesModal.elements.wrapper.setStyle("width", 800);
                    that.editAttributesModal.show();

                },
                //NZV - FUN085423
				// FUN127527 FRH Support multiline
                checkAndUpdateAttributeLine : function (lineAttr, type, attributeUserName, defaultValue, isMand, isReadOnly, is3DXMLExproted,
                                        MultiValuated, Multiline,dimension, preferredUnit, isIndexed, authValues, selected6wTagValue,
                                        isRevision, isDup, wdthArray) {
                    var changeFound = -1,  cellsIndex = this.cellsIndex, defaultValuetoShow, defaultDateObj, defCellTitle="", iATpos;
                    if(lineAttr.cells[cellsIndex.AttributeUserName].value !== attributeUserName) {
                        changeFound = 1;
                        lineAttr.cells[cellsIndex.AttributeUserName].value = attributeUserName;
                        lineAttr.cells[cellsIndex.AttributeUserName].empty();
                        UWA.createElement('p', {
                            text   : attributeUserName,
                            'class': 'font-3dslight'
                        }).inject(lineAttr.cells[cellsIndex.AttributeUserName]);
                    }

                    if(lineAttr.cells[cellsIndex.DefaultValue].value !== defaultValue) {
                        defaultValuetoShow = defaultValue;
                        if (type === "Date") {
                            defaultDateObj = new Date(defaultValue);
                            defCellTitle = defaultDateObj.toDateString();
                            iATpos = defaultValue.indexOf("@");
                            if (iATpos > 0) {
                                defaultValuetoShow  = defaultValue.substring(0, iATpos);
                            }
                        }

                        changeFound = 2;
                        lineAttr.cells[cellsIndex.DefaultValue].value = defaultValue;
                        lineAttr.cells[cellsIndex.DefaultValue].empty();
                        UWA.createElement('p', {
                            text   : defaultValuetoShow,
                            'class': 'font-3dslight'
                        }).inject(lineAttr.cells[cellsIndex.DefaultValue]);
                         //lineAttr.cells[cellsIndex.DefaultValue].title = defaultValue;
                    }

                    if(lineAttr.cells[cellsIndex.Mandatory].value !== isMand) {
                        changeFound = 3;
                        AttrUtilsView.checkAndModifiedToggle(lineAttr.cells[cellsIndex.Mandatory], isMand,  wdthArray[cellsIndex.Mandatory]);
                    }
                    if(lineAttr.cells[cellsIndex.Export3DXML].value !== is3DXMLExproted) {
                        changeFound = 4;
                        AttrUtilsView.checkAndModifiedToggle(lineAttr.cells[cellsIndex.Export3DXML], is3DXMLExproted,  wdthArray[cellsIndex.Export3DXML]);

                    }
                    //FUN092576
                    if(lineAttr.cells[cellsIndex.MultiValuated].value !== MultiValuated) {
                        changeFound = 4;
                        AttrUtilsView.checkAndModifiedToggle(lineAttr.cells[cellsIndex.MultiValuated], MultiValuated,  wdthArray[cellsIndex.MultiValuated]);

                    }
					// FUN127527 FRH Support multiline
                    if(lineAttr.cells[cellsIndex.Multiline].value !== Multiline) {
                        changeFound = 4;
                        AttrUtilsView.checkAndModifiedToggle(lineAttr.cells[cellsIndex.Multiline], Multiline,  wdthArray[cellsIndex.Multiline]);

                    }
                    if(lineAttr.cells[cellsIndex.resetWhenDuplicate].value !== isDup) {
                        changeFound = 5;
                        AttrUtilsView.checkAndModifiedToggle(lineAttr.cells[cellsIndex.resetWhenDuplicate], isDup,  wdthArray[cellsIndex.resetWhenDuplicate]);

                    }

                    if(lineAttr.cells[cellsIndex.resetWhenRevision].value !== isRevision) {
                        changeFound = 6;
                        AttrUtilsView.checkAndModifiedToggle(lineAttr.cells[cellsIndex.resetWhenRevision], isRevision,  wdthArray[cellsIndex.resetWhenRevision]);
                    }

                    if(lineAttr.cells[cellsIndex.ReadOnly].value !== isReadOnly) {
                        changeFound = 7;
                        AttrUtilsView.checkAndModifiedToggle(lineAttr.cells[cellsIndex.ReadOnly], isReadOnly,  wdthArray[cellsIndex.ReadOnly]);
                    }
                    if(lineAttr.cells[cellsIndex.Indexed].value !== isIndexed) {
                        changeFound = 8;
                        AttrUtilsView.checkAndModifiedToggle(lineAttr.cells[cellsIndex.Indexed], isIndexed,  wdthArray[cellsIndex.Indexed]);
                    }

                    if(dimension !== "") {
                        if(lineAttr.cells[cellsIndex.Dimension].value !== undefined  &&  lineAttr.cells[cellsIndex.Dimension].value !== "")
                        {
                            var dimValues = lineAttr.cells[cellsIndex.Dimension].value.split(",");
                            var dimId, unitId, dimensionText ="";
                            if (dimValues.length > 1) {
                                dimId = dimValues[0];
                                unitId = dimValues[1];
                            } else {
                                dimId = dimValues[0];
                            }
                            if(unitId !== preferredUnit && dimId === dimension) {
                                changeFound = 9;
                                lineAttr.cells[cellsIndex.Dimension].empty();
                                lineAttr.cells[cellsIndex.Dimension].value = dimension+","+preferredUnit;

                                var dimPara = UWA.createElement('p', {
                                    text   : dimensionText,
                                    'class': 'font-3dslight'
                                }).inject(lineAttr.cells[cellsIndex.Dimension]);

                                /* dimensionText = */AttrUtilsView.getNLSDimensionStr(dimId, preferredUnit, dimPara);



                            }

                        }
                    }
                    // ilistofAuthValues = iLines[i].cells[cellsIndex.AuthValue].value;
                    if(lineAttr.cells[cellsIndex.AuthValue].value !== authValues && authValues !== undefined) {
                        changeFound = 10;
                        lineAttr.cells[cellsIndex.AuthValue].value = authValues;
                        lineAttr.cells[cellsIndex.AuthValue].empty();
                        UWA.createElement('p', {
                            text   : authValues,
                            'class': 'font-3dslight'
                        }).inject(lineAttr.cells[cellsIndex.AuthValue]);
                    }
                    if(lineAttr.cells[cellsIndex.SixWTag].value !== selected6wTagValue) {
                        changeFound = 11;
                        lineAttr.cells[cellsIndex.SixWTag].empty();
                        lineAttr.cells[cellsIndex.SixWTag].value = selected6wTagValue;
                        AttrUtilsView.update6WTagCellWithNLS(lineAttr.cells[cellsIndex.SixWTag], selected6wTagValue, "");
                    }

                    // if(changeFound !== -1) {
                    //     lineAttr.cells[cellsIndex.DeployStatus].empty();
                    //     lineAttr.cells[cellsIndex.DeployStatus].value = "ModifiedNotDeployed";
                    //     var imgSpan = ParametersLayoutViewUtilities.buildImgSpan('fonticon fonticon-pencil fonticon-1.5x', '1.5', 'orange');
                    //     lineAttr.cells[cellsIndex.DeployStatus].title = ParamSkeletonNLS.ModifiedNotYetDeployed;
                    //     imgSpan.inject(lineAttr.cells[cellsIndex.DeployStatus]);
                    // }

                    return changeFound;
                },

                checkAndModifiedToggle : function (cellElement, changedValue, width) {
                        cellElement.value = changedValue;
                        cellElement.empty();
                        if(changedValue === true) {
                            ParametersLayoutViewUtilities.buildImgCell('check', '1', 'green', changedValue, width + '%', 'center').inject(cellElement);
                        }
                },

                attributeLinetobeDeleted : function (iLine) {
                    var i, imgSpan,
                        cellsIndex = this.cellsIndex;

                    if (iLine.cells[cellsIndex.DeployStatus].value === "NewNotDeployed") {
                        iLine.remove();
                    } else {
                        for (i = 0; i < 3; i++) {
                            AttrUtilsView.setDeletedCellStyle(iLine.cells[i]);
                        }

                        AttrUtilsView.setDeletedCellStyle(iLine.cells[cellsIndex.AuthValue]);

                        iLine.cells[cellsIndex.SixWTag].empty();
                        iLine.cells[cellsIndex.Dimension].empty();
                        iLine.cells[cellsIndex.Action].empty();
                        //iLine.cells[9].setStyle("visibility", "hidden");//pas terrible

                        //iLine.cells[cellsIndex.DeployStatus].empty();
                       // iLine.cells[10].value = "DeletedNotDeployed";
                        iLine.cells[cellsIndex.DeployStatus].empty();
                        iLine.cells[cellsIndex.DeployStatus].value = "DeletedNotDeployed";
                        imgSpan = ParametersLayoutViewUtilities.buildImgSpan('trash', '1.5', 'red');
                        iLine.cells[cellsIndex.DeployStatus].title = ParamSkeletonNLS.DeletedButNotYetApplied; //NZV:IR-629593-3DEXPERIENCER2019x
                        imgSpan.inject(iLine.cells[cellsIndex.DeployStatus]);
                    }
                },

                removeAttribueLine : function (objToBeRemoved) {
                    objToBeRemoved.popOver.destroy();
                    AttrUtilsView.attributeLinetobeDeleted(objToBeRemoved.attrLine);
                },

                undeleteAttribute : function (iLine,that) {
                    var i, imgSpan,//editSpan, editPop, editAttributeButton,
                        deleteSpan, removeAttributeButton, removePop,
                        removelts = [],
                        cellsIndex = this.cellsIndex,attriList, deployedAttri, isLineModified = -1 ;

                    for (i = 0; i < 3; i++) {
                        AttrUtilsView.setNormalCellStyle(iLine.cells[i]);
                    }
                     AttrUtilsView.setNormalCellStyle(iLine.cells[cellsIndex.AuthValue]);
                    //that
                    attriList = that.collection._models[0]._attributes.listofAttributes;
                    deployedAttri = "";
                    for(i = 0; i < attriList.length; i++) {
                        if (attriList[i].internalName === iLine.cells[cellsIndex.AttributeName].value) {
                            deployedAttri = attriList[i];
                            break;
                        }
                    }
                    //FUN092576
					// FUN127527 FRH Support multiline
                    isLineModified =  AttrUtilsView.checkAndUpdateAttributeLine(iLine, deployedAttri.type,
                                deployedAttri.nlsName, deployedAttri.defaultValue, deployedAttri.isMandatory,
                                deployedAttri.isReadOnly, deployedAttri.isExposedTo3DXML, deployedAttri.multiValuated,deployedAttri.multiline, deployedAttri.dimension,
                                deployedAttri.preferredunit, deployedAttri.isIndexed, deployedAttri.listofAuthValues,
                                deployedAttri.sixWTag, deployedAttri.resetWhenRevision, deployedAttri.resetWhenDuplicate,
                                that.wdthArray);

                    //iLine.cells[9].setStyle("visibility", "block");

                    /*editElts = AttrUtilsView.createEditActionElements();
                    editSpan = editElts[0];
                    editSpan.inject(iLine.cells[8]);
                    editAttributeButton  = editElts[1];
                    editPop = editElts[2];*/

                    //NZV - FUN085423
                    if (iLine.cells[cellsIndex.DeployStatus].value !== "ModifiedNotDeployed") {
                        var editElts = ParametersLayoutViewUtilities.createActionElements(ParamSkeletonNLS.EditAttribute, false);
                        var editSpan = editElts[0];
                        editSpan.setStyle("float", "left");
                        editSpan.inject(iLine.cells[cellsIndex.Action]);
                        var editAttributeButton = editElts[1];
                        var editPop = editElts[2];

                        removelts = ParametersLayoutViewUtilities.createActionElements(ParamSkeletonNLS.DeleteAttributetxt, true);
                        deleteSpan = removelts[0];
                        deleteSpan.setStyle("float", "right");
                        deleteSpan.inject(iLine.cells[cellsIndex.Action]);
                        removeAttributeButton = removelts[1];
                        removePop = removelts[2];
                        // if(deployedAttri.isDeployed == true) {
                        //     iLine[i].cells[cellsIndex.DeployStatus].empty();
                        //     iLine[i].cells[cellsIndex.DeployStatus].value = "Deployed";
                        //     imgSpan = ParametersLayoutViewUtilities.buildImgSpan('check', '1.5', 'green');
                        //     iLine[i].cells[cellsIndex.DeployStatus].title = ParamSkeletonNLS.deployedParamtxt;
                        //  } else {
                        //     iLine.cells[cellsIndex.DeployStatus].empty();
                        //     iLine.cells[cellsIndex.DeployStatus].value = "StoredButNotDeployed";
                        //     imgSpan = ParametersLayoutViewUtilities.buildImgSpan('cog', '1.5', 'black');
                        // }

                       // imgSpan.inject(iLine.cells[cellsIndex.DeployStatus]);

                        removeAttributeButton.addEvent("onClick", function () {
                            /*removePop.destroy(); //removePop.remove();  //editPop.destroy();
                            AttrUtilsView.attributeLinetobeDeleted(iLine);*/
                            //AttrUtilsView.showContextualDeleteModal(widget.body, iLine, removePop);
                            var objToBeRemoved = {popOver : removePop, attrLine : iLine}; //IR-689657-3DEXPERIENCER2019x/20x : function signature changed
                            //FUN102019 21x FD03 : change message & add line break
                            ParametersLayoutViewUtilities.showContextualDeleteModal(widget.body, "delAttrModal", ParamSkeletonNLS.removeAttributesWarning + "\n"+ParamSkeletonNLS.removeAttributesWarningSec,
                                ParamSkeletonNLS.YesText,  ParamSkeletonNLS.NoText, ParamSkeletonNLS.Warning+"!", AttrUtilsView.removeAttribueLine, objToBeRemoved);
                        });

                        editAttributeButton.addEvent("onClick", function () {

                           AttrUtilsView.showEditAttributeModel(that.userMessaging,that,iLine);

                        });
                    }
                    iLine.cells[cellsIndex.DeployStatus].empty();
                    iLine.cells[cellsIndex.DeployStatus].value = "Deployed";
                    imgSpan = ParametersLayoutViewUtilities.buildImgSpan('check', '1.5', 'green');
                    iLine.cells[cellsIndex.DeployStatus].title = ParamSkeletonNLS.deployedParamtxt;
                    imgSpan.inject(iLine.cells[cellsIndex.DeployStatus]);
                },

                setDeletedCellStyle : function (iCell) {
                    var previousVal = iCell.value, showValue = previousVal,iATpos;
                    iCell.empty();
                    iATpos = previousVal.indexOf("@");
                    if (iATpos > 0) {
                        showValue  = previousVal.substring(0, iATpos);
                    }
                    UWA.createElement('del', {
                        text   : showValue,
                        value  : previousVal,//ZUR - IR-497281-3DEXPERIENCER2017x
                        'class': 'font-3dslight'
                    }).inject(iCell);
                },

                setNormalCellStyle : function (iCell) {
                    var previousVal = iCell.value, showValue = previousVal,iATpos;
                    iCell.empty();
                    iATpos = previousVal.indexOf("@");
                    if (iATpos > 0) {
                        showValue  = previousVal.substring(0, iATpos);
                    }
                    UWA.createElement('p', {
                        text   : showValue,
                        value  : previousVal,//ZUR - IR-497281-3DEXPERIENCER2017x
                        'class': 'font-3dslight'
                    }).inject(iCell);
                },

                /*createEditActionElements : function () {
                    var editPop,
                        editElts = [],
                        editSpan = UWA.createElement('span'),
                        editAttributeButton = new Button({
                            className: 'close',
                            icon: 'fonticon fonticon-pencil fonticon-1.5x',//value: 'Button', //fonticon-cancel  fonticon-minus-circled
                            attributes: {
                                disabled: false,
                                'aria-hidden' : 'true'
                                //title : 'delete attribute'
                            }
                        }).inject(editSpan);

                    editPop = new Popover({
                        //class: 'parampopover',
                        target: editSpan,//iCell,
                        trigger : "hover",
                        animate: "true",
                        position: "top",
                        body: 'Edit attribute',
                        title: ''//iParamObj.nlsKey
                    });

                    editElts.push(editSpan);
                    editElts.push(editAttributeButton);
                    editElts.push(editPop);

                    return editElts;
                },*/

                checkIfAttrNameAlreadyUsed : function (attrName, attrUserName, listofAddedAttrs, isEditMode, existingNLSName) {
                    var i;
                    for (i = 0; i < listofAddedAttrs.internalNames.length; i++) {
                        //AJY3 FUN106676 Check internalName only at creation, because it cannot be modified at edition.
                        if (!isEditMode && (attrName.replace(/ /g, "_") ===  listofAddedAttrs.internalNames[i].replace(/ /g, "_"))) {
                            return true;
                        }
                        //AJY3 FUN106676 User names can be empty but cannot be the same if valuated.
                        if (attrUserName && (attrUserName !== existingNLSName) && (attrUserName === listofAddedAttrs.userNames[i])) {
                            return true;
                        }
                        //AJY3 FUN106676 User name can be the same as the attribute internal name, but not the same as
                        //another attribute internal name.
                        if (attrUserName !== attrName && (attrUserName === listofAddedAttrs.internalNames[i]) ){
                            return true;
                        }
                    }
                    return false;
                },

                checkOptionsBeforeAddAttrs : function (attrType, attrLength, attrName, attrUserName, attrValue,
                    isReadOnly, isMandatory, isMultivalue, hasAuthValues, authValuesStr, listofAddedAttrs, allMatrixAttributesnames, isEditMode, existingNLSName, isConfigObjExist) {

                    var i,
                        valueListTab = [],
                        AdditionalSpecialChars = "-.",
                        defaultInAuthorized = false;

                    if (attrName === "") {
                        UWA.log(ParamSkeletonNLS.NoAttributeName);
                        return "NoAttributeName";
                    }
                    if (!isNaN(attrName.charAt(0))) {
                        UWA.log(ParamSkeletonNLS.AttributeNameFirstCharNumber);
                        return "AttributeNameFirstCharNumber";
                    }
                    //AJY3 FUN106676 Reactivate spaces check, because internal name is now distinct from user name.
                    if (ParametersLayoutViewUtilities.containsBlanks(attrName)) {
                        return "AttributeNameContainsSpace";
                    }

                    if (ParametersLayoutViewUtilities.containsAccents(attrName)) {
                        return "AccentsnotAllowedInNameMsg";
                    }
                    //IR-759885-3DEXPERIENCER2021x
                    if (AttributesTypesDefine.isAttributeForbidden(attrName) === true) {
                        return "AttributeNameNotAllowed";
                    }
					//IR-877431-3DEXPERIENCER2021x\22x
                    if ((isMandatory && attrValue === "") && (isMultivalue === false)) {
                        UWA.log(ParamSkeletonNLS.AttrMandMustHaveDefVal);
                        return "AttrMandMustHaveDefVal";
                    }

                    /* NZV : REACTIVATE for IR-540216-3DEXPERIENCER2018x */
                    if (allMatrixAttributesnames !== undefined) {
                        for (i = 0; i < allMatrixAttributesnames.length; i++) {
                            if (attrName === allMatrixAttributesnames[i]) {
                                UWA.log(ParamSkeletonNLS.DefaultPartNameMsg);
                                return "DefaultPartNameMsg";
                            }
                        }
                    }

                    if (AttrUtilsView.testStrictSpecialCharacters(attrName) || AttrUtilsView.userNameContainsSpecChars(attrUserName)) {
                        UWA.log(ParamSkeletonNLS.SpecialCharactersMsg);
                        return "SpecialCharactersMsg";
                    }

                    if (attrType !== 'Date') {
                        if (AttrUtilsView.testStrictSpecialCharacters(attrValue)) {
                            UWA.log(ParamSkeletonNLS.SpecialCharactersMsg);
                            return "SpecialCharactersMsg";
                        }
                    }

                    if (AttrUtilsView.testStrictSpecialCharacters(attrName, AdditionalSpecialChars)) {
                        UWA.log(ParamSkeletonNLS.SpecialCharactersMsg);
                        return "SpecialCharactersMsg";
                    }

                    if (attrType !== 'Real' && attrType !== 'Integer' && attrType !== 'Date') {
                        if (AttrUtilsView.testStrictSpecialCharacters(attrValue, AdditionalSpecialChars)) {
                            UWA.log(ParamSkeletonNLS.SpecialCharactersMsg);
                            return "SpecialCharactersMsg";
                        }
                    }
                    //IR-744403-3DEXPERIENCER2021x
                    if ((authValuesStr !== "") && (attrType !== 'Boolean')) {
                        valueListTab = authValuesStr.split(',');
                        var duplicateValueArray = valueListTab.filter((item, index) => valueListTab.indexOf(item) !== index);
                        if(duplicateValueArray.length > 0) {
                            return "DuplicateValuesInArray";
                        }
                        for (i = 0; i < valueListTab.length; i++) {
                            if (AttrUtilsView.testStrictSpecialCharacters(valueListTab[i])) {
                                UWA.log(ParamSkeletonNLS.SpecialCharactersMsgAuthVals);
                                return "SpecialCharactersMsgAuthVals";
                            }
                        }
                    }

                    if (ParametersLayoutViewUtilities.containsAccents(attrValue)) {
                        UWA.log(ParamSkeletonNLS.AccentsnotAllowedMsg);
                        return "AccentsnotAllowedMsg";
                    }

                    if ((authValuesStr !== "") && (attrType !== 'Boolean')) {
                        for (i = 0; i < valueListTab.length; i++) {
                            if (ParametersLayoutViewUtilities.containsAccents(valueListTab[i])) {
                                UWA.log(ParamSkeletonNLS.AccentsnotAllowedMsgAuthVals);
                                return "AccentsnotAllowedMsgAuthVals";
                            }
                        }
                    }

                    if ((attrType === 'String') && (attrLength !== 0)) {
                        if (attrValue.length > attrLength) {
                            UWA.log(ParamSkeletonNLS.DefaultValueSizeInadequate);
                            return "DefaultValueSizeInadequate";
                        }

                        if (authValuesStr !== "") {
                            for (i = 0; i < valueListTab.length; i++) {
                                if (valueListTab[i].length > attrLength) {
                                    UWA.log(ParamSkeletonNLS.ProposedValueSizeInadequate);
                                    return "ProposedValueSizeInadequate";
                                }
                            }
                        }
                    }

                    if (attrType === 'Real') {
                        if (!ParametersLayoutViewUtilities.isReal(attrValue)) {
                            UWA.log(ParamSkeletonNLS.DefaultValueNumeric);
                            return "DefaultValueNumeric";
                        }

                        if (authValuesStr !== "") {
                            for (i = 0; i < valueListTab.length; i++) {
                                if (!ParametersLayoutViewUtilities.isReal(valueListTab[i])) {
                                    UWA.log(ParamSkeletonNLS.AuthValsNonNumericMessage);
                                    return "AuthValsNonNumericMessage";
                                }
                            }
                        }
                    } else if (attrType === 'Integer' && attrValue.trim() !== "") {
                        if (!ParametersLayoutViewUtilities.isInteger(attrValue)) {
                            UWA.log(ParamSkeletonNLS.DefaultValueNumericForInt);
                            return "DefaultValueNumericForInt";
                        }
                        if (authValuesStr !== "") {
                            for (i = 0; i < valueListTab.length; i++) {
                                if (!ParametersLayoutViewUtilities.isInteger(valueListTab[i])) {
                                    UWA.log(ParamSkeletonNLS.AuthValsNonNumericForIntMsg);
                                    return "AuthValsNonNumericForIntMsg";
                                }
                            }
                        }
                    }

                    if (hasAuthValues && (isMultivalue !== true) && (attrType !== 'Boolean') && (isConfigObjExist === false) ) {
                        if (authValuesStr !== "") {
                                for (i = 0; i < valueListTab.length; i++) {
                                /*if (attrValue === " " || attrValue === "") {
                                        //IR-749706-3DEXPERIENCER2019x/20x/21x : treating “ “ & “” equal
                                        if (valueListTab[i] === " " || valueListTab[i] === "") {
                                            defaultInAuthorized = true;
                                            break;
                                        }
                                    } else {*/
                                    //IR-904152-3DEXPERIENCER2022x,IR-953664-3DEXPERIENCER2022x\23x: Convert space "  " to "" to be aline with TXO
                                        if (valueListTab[i] === attrValue) {
                                            defaultInAuthorized = true;
                                            break;
                                        }
                                    //}
                                }
                        }
                        if (!defaultInAuthorized) {
                            UWA.log(ParamSkeletonNLS.DefaultNotInAuthValsMsg.format(attrValue));
                            return "DefaultNotInAuthValsMsg";
                        }
                    }
                    //IR-749706-3DEXPERIENCER2021x/20x/19x
                    if(hasAuthValues && isMandatory) {
                        var isAuthValContainEmpty = false;
                        if (authValuesStr !== "") {
                                for (i = 0; i < valueListTab.length; i++) {
                                    if (valueListTab[i] === " " || valueListTab[i] === "") {
                                        isAuthValContainEmpty = true;
                                        break;
                                    }

                                }
                        }
                        if (isAuthValContainEmpty) {
                            UWA.log(ParamSkeletonNLS.DefaultNotInAuthValsMsg);
                            return "MandCannotHaveEmptyAuthVal";
                        }
                    }
                    //NZV - FUN085423
                    if (AttrUtilsView.checkIfAttrNameAlreadyUsed(attrName, attrUserName, listofAddedAttrs, isEditMode, existingNLSName)) {
                        UWA.log(ParamSkeletonNLS.AttibutesSameName);
                        return "AttibutesSameName";
                    }
                    return "S_OK";

                    /*addAttributeRow(type, ..., sixWTagNLS, 0, false, false);
                    manageHelpAuthValues();
                    setCurrentReadOnlyStatus(defaultReadOnly);
                    setCurrentMandatoryStatus(defaultMandatory);
                    setCurrentIndexedStatus(defaultIndexed);
                    clearSixWTag();*/
                },

                buildAutoComplete : function () {
                    var sixwTagAutoSelect = new Autocomplete({
                            multiSelect: false,
                            showSuggestsOnFocus: true,
                            filterEngine: function (suggestions) {
                                return suggestions;
                            },
                            events: {//IR-673291-3DEXPERIENCER2019x\20x
                                onKeyDown: function(e) {
                                    if (e.keyCode === 13) {
                                        e.preventDefault();
                                    }
                                },
                                onKeyUp: function(e) {
                                    if (e.keyCode === 13) {
                                        sixwTagAutoSelect.showAll();
                                    }
                                },
                                onUnselect : function (item) {
                                    sixwTagAutoSelect.showAll();
                                    return item;
                                }
                            }
                        });
                    return sixwTagAutoSelect;
                },

                buildModalSkeleton : function (parentElm) {
                    var modalbodyTable, modaltbody, lineModal, errorMsg,
                        iCell, AuthValsInput, timerconn, diffDate,
                        typesSelect, attrNameInput, attrUserNameInput, iDefaultControlCell,
                        mandToggle, readonlyToggle, indexedToggle, export3DXMLToggle,// AuthValsToggle,
                        //imgInfoSpan, popoverAuth,
                        OKBtn, CancelBtn, unitsSelector, /*dimensionsSelector*/
                        currTime = new Date().getTime(),
                        lastMessageDate = currTime,
                        activateError = false,
                        col1Wdth = '50%', col2Wdth = '50%',
                        typeNLen = [], modalSkeleton = [], typeNLenDim = [],
                        that = this, duplicateToggle, revisionToggle, sixwTagAutoSelect,
                        multiValuatedToggle,multilineToggle,/* FUN127527 */ userMessaging = parentElm.userMessaging,MsgShownSpaceInAuthValue=false;

                    that.initCells();
                    modalbodyTable =  UWA.createElement('table', {
                        'id': '',
                        'class': 'table table-condensed table-hover'
                    });
                    modaltbody = UWA.createElement('tbody', {
                        'class': ''
                    }).inject(modalbodyTable);

                    lineModal = UWA.createElement('tr').inject(modaltbody);
                    iCell = AttrUtilsView.buildNLSText(ParamSkeletonNLS.AttributeTypeNLenth, col1Wdth, '');
                    iCell.inject(lineModal);

                    iCell = UWA.createElement('td', {
                        'Align' : 'left',
                        'width' : col2Wdth
                    }).inject(lineModal);

                    typesSelect = AttrUtilsView.buildTypeSelect();
                    typesSelect.inject(iCell);

                    lineModal = UWA.createElement('tr').inject(modaltbody);
                    iCell = AttrUtilsView.buildNLSText(ParamSkeletonNLS.AttributeInternalName, col1Wdth, '');
                    iCell.inject(lineModal);

                    iCell = UWA.createElement('td', {
                        'Align' : 'left',
                        'width' : col2Wdth
                    }).inject(lineModal);

                    attrNameInput = new Text({
                        //className: "form-control",
                        placeholder: "...",
                        id : 'attrNameInput',
                        attributes: {
                            value: '',
                            multiline: false,
                            disabled: false
                        }
                    }).inject(iCell);

                    lineModal = UWA.createElement('tr').inject(modaltbody);
                    iCell = AttrUtilsView.buildNLSText(ParamSkeletonNLS.AttributeUserName, col1Wdth, '');
                    iCell.inject(lineModal);

                    iCell = UWA.createElement('td', {
                        'Align' : 'left',
                        'width' : col2Wdth
                    }).inject(lineModal);

                    attrUserNameInput = new Text({
                        //className: "form-control",
                        placeholder: "...",
                        id : 'attrUserNameInput',
                        attributes: {
                            value: '',
                            multiline: false,
                            disabled: false
                        }
                    }).inject(iCell);

                    lineModal = UWA.createElement('tr').inject(modaltbody);
                    iCell = AttrUtilsView.buildNLSText(ParamSkeletonNLS.AttributeDefaultValue, col1Wdth, '');
                    iCell.inject(lineModal);


                    iDefaultControlCell = UWA.createElement('td', {
                        'id'    : 'iDefaultControlCell',
                        'Align' : 'left',
                        'width' : col2Wdth
                    }).inject(lineModal);

                    this.attrDefValueInput = AttrUtilsView.buildTextDefault(userMessaging);
                    this.attrDefValueInput.inject(iDefaultControlCell);
					//conver to integer
					//FUN119390
					if (parentElm.isObjectExistWithConfiguredAttribue === true) {
						this.attrDefValueInput.disable();
					}

                     // Dimensions
                    lineModal = UWA.createElement('tr').inject(modaltbody);
                    this.dimensionToolTipCell = AttrUtilsView.buildNLSText(ParamSkeletonNLS.Dimensions, col1Wdth, ParamSkeletonNLS.DimensionsToolTip);

                    this.dimensionToolTipCell.inject(lineModal);

                    iCell = UWA.createElement('td', {
                        'Align' : 'left',
                        'width' : col2Wdth
                    }).inject(lineModal);
                    this.dimensionsSelector = new Select({
                        nativeSelect: true,
                        placeholder: ParamSkeletonNLS.DimensionsSelect,
                        multiple: false
                    });
                    this.dimensionsSelector.disable();
                    this.dimensionsSelector.inject(iCell);
                     //End Dimensions
                    //Add unit combo..
                    lineModal = UWA.createElement('tr').inject(modaltbody);
                    iCell = AttrUtilsView.buildNLSText(ParamSkeletonNLS.PreUnits, col1Wdth, ParamSkeletonNLS.PreferredUnitToolTip);
                    iCell.inject(lineModal);

                    iCell = UWA.createElement('td', {
                        'Align' : 'left',
                        'width' : col2Wdth
                    }).inject(lineModal);
                    unitsSelector = new Select({
                        nativeSelect: true,
                        placeholder: ParamSkeletonNLS.PreUnitsSelect,
                        multiple: false
                    });

                    unitsSelector.disable();
                    unitsSelector.inject(iCell);
                     //End Unit combo

                     // 3DXML Export
                    lineModal = UWA.createElement('tr').inject(modaltbody);
                    iCell = AttrUtilsView.buildNLSText(ParamSkeletonNLS.ExportIn3DXML, col1Wdth, ParamSkeletonNLS.ExportIn3DXMLToolTip);
                    iCell.inject(lineModal);

                    iCell = UWA.createElement('td', {
                        'Align' : 'left',
                        'width' : col2Wdth
                    }).inject(lineModal);

                    export3DXMLToggle = new Toggle({
                        type: 'switch',//value: 'option1',
                        label: ''
                    }).uncheck().inject(iCell);
                     //3DXML Export
                     // Multi-valued - FUN092576
                    lineModal = UWA.createElement('tr').inject(modaltbody);
                    iCell = AttrUtilsView.buildNLSText(ParamSkeletonNLS.MultiValuated, col1Wdth, ParamSkeletonNLS.MultiValuatedToolTip);
                    iCell.inject(lineModal);

                    iCell = UWA.createElement('td', {
                        'Align' : 'left',
                        'width' : col2Wdth
                    }).inject(lineModal);

                    multiValuatedToggle = new Toggle({
                        type: 'switch',//value: 'option1',
                        label: ''
                    }).uncheck().inject(iCell);

                    //FUN099488
                    multiValuatedToggle.enable();
                    //End Multi-valued
                     // Multi-line - FUN127527
                     lineModal = UWA.createElement('tr').inject(modaltbody);
                     iCell = AttrUtilsView.buildNLSText(ParamSkeletonNLS.Multiline, col1Wdth, ParamSkeletonNLS.MultilineToolTip);
                     iCell.inject(lineModal);
 
                     iCell = UWA.createElement('td', {
                         'Align' : 'left',
                         'width' : col2Wdth
                     }).inject(lineModal);
 
                     multilineToggle = new Toggle({
                         type: 'switch',//value: 'option1',
                         label: ''
                     }).uncheck().inject(iCell);
 
                     multilineToggle.enable();
                     //End Multi-valued
 
                    //Duplicate/Clone
                    lineModal = UWA.createElement('tr').inject(modaltbody);
                    iCell = AttrUtilsView.buildNLSText(ParamSkeletonNLS.ResetOnDuplicate, col1Wdth, ParamSkeletonNLS.ResetOnDuplicateToolTip);
                    iCell.inject(lineModal);

                    iCell = UWA.createElement('td', {
                        'Align' : 'left',
                        'width' : col2Wdth
                    }).inject(lineModal);

                    duplicateToggle = new Toggle({
                        type: 'switch',//value: 'option1',
                        label: ''
                    }).uncheck().inject(iCell);
                    //End duplicate
                     //Revision
                    lineModal = UWA.createElement('tr').inject(modaltbody);
                    iCell = AttrUtilsView.buildNLSText(ParamSkeletonNLS.ResetOnRevision, col1Wdth, ParamSkeletonNLS.ResetOnRevisionToolTip);
                    iCell.inject(lineModal);

                    iCell = UWA.createElement('td', {
                        'Align' : 'left',
                        'width' : col2Wdth
                    }).inject(lineModal);

                    revisionToggle = new Toggle({
                        type: 'switch',//value: 'option1',
                        label: ''
                    }).uncheck().inject(iCell);
                    //End - Revision
                    lineModal = UWA.createElement('tr').inject(modaltbody);
                    iCell = AttrUtilsView.buildNLSText(ParamSkeletonNLS.MandatoryAttributeTitle, col1Wdth, '');
                    iCell.inject(lineModal);

                    iCell = UWA.createElement('td', {
                        'Align' : 'left',
                        'width' : col2Wdth
                    }).inject(lineModal);

                    mandToggle = new Toggle({
                        type: 'switch',//value: 'option1',
                        label: ''
                    }).uncheck().inject(iCell);

					//FUN119390
					if (parentElm.isObjectExistWithConfiguredAttribue === true) {
						mandToggle.disable();
					}

                    lineModal = UWA.createElement('tr').inject(modaltbody);
                    iCell = AttrUtilsView.buildNLSText(ParamSkeletonNLS.ReadOnlyAttributeTitle, col1Wdth, ParamSkeletonNLS.ReadOnlyAttrTooltip);
                    iCell.inject(lineModal);

                    iCell = UWA.createElement('td', {
                        'Align' : 'left',
                        'width' : col2Wdth
                    }).inject(lineModal);

                    readonlyToggle = new Toggle({
                        type: 'switch',
                        label: ''
                    }).uncheck().inject(iCell);

                    lineModal = UWA.createElement('tr').inject(modaltbody);
                    iCell = AttrUtilsView.buildNLSText(ParamSkeletonNLS.IndexedAttributeTitle, col1Wdth, ParamSkeletonNLS.AttributeIndexedTooltip);
                    iCell.inject(lineModal);

                    iCell = UWA.createElement('td', {
                        'Align' : 'left',
                        'width' : col2Wdth
                    }).inject(lineModal);

                    indexedToggle = new Toggle({
                        type: 'switch',
                        label: ''
                    }).check().inject(iCell);

                    lineModal = UWA.createElement('tr').inject(modaltbody);
                    lineModal.inject(modaltbody);
                    iCell = AttrUtilsView.buildNLSText(ParamSkeletonNLS.AuthorizedValsTitle, col1Wdth, ParamSkeletonNLS.AuthorizedValuesTooltip+ParamSkeletonNLS.SpaceNotSupportedInNative);
                    iCell.inject(lineModal);

                    iCell = UWA.createElement('td', {
                        'Align' : 'left',
                        'width' : col2Wdth
                    }).inject(lineModal);

                    AuthValsInput = new Text({
                        //className: "form-control",
                        placeholder: "...",
                        id : 'AuthValsInput',
                        disabled: false,
                        attributes: {
                            value: '',
                            multiline: false
                        }
                    }).inject(iCell);

                    lineModal = UWA.createElement('tr').inject(modaltbody);
                    iCell = AttrUtilsView.buildNLSText(ParamSkeletonNLS.Select6WPredicateTxt, col1Wdth, '');
                    iCell.inject(lineModal);

                    iCell = UWA.createElement('td', {
                        'Align' : 'left',
                        'width' : col2Wdth
                    }).inject(lineModal);

                    sixwTagAutoSelect = this.buildAutoComplete().inject(iCell);

                    this.fetchAndPopulate6WPredicates(sixwTagAutoSelect, 'String');

                    OKBtn = new Button({
                        value : ParamSkeletonNLS.OKButton,
                        id    : "modalOKButton",
                        className : 'btn primary'
                    });

                    CancelBtn = new Button({
                        value : ParamSkeletonNLS.CancelButton,
                        id    : 'modalCancelButton',
                        className : 'btn default'
                    });
					//IR-831003-3DEXPERIENCER2021x/22x
                    AuthValsInput.addEvent("onKeyDown", function () {
                        if (timerconn) { clearTimeout(timerconn); }
                        timerconn = setTimeout(function() {
							var authValuesStr = AuthValsInput.getValue(), i;
							activateError = false;
							var valueListTab = authValuesStr.split(',');
							for (i = 0; i < valueListTab.length; i++) {
								var tempStr = valueListTab[i];
								tempStr = tempStr.trim();
								if(tempStr.length > 0 && tempStr.includes(" ")) {
									 activateError = true;
									break;
								}
							}
							if (activateError === true) {
									currTime = new Date().getTime();
									diffDate = currTime - lastMessageDate;
									if (diffDate > 1500) {
										if(MsgShownSpaceInAuthValue === false) {
										userMessaging.add({ className: "info", message: ParamSkeletonNLS.SpaceNotSupportedInNative});
										lastMessageDate = new Date().getTime();}
										MsgShownSpaceInAuthValue = true;
									}
									AuthValsInput.focus();
								} else {
									MsgShownSpaceInAuthValue=false;
								}

                        }, 20);
                    });
                    attrNameInput.addEvent("onKeyDown", function () {
                        if (timerconn) { clearTimeout(timerconn); }
                        timerconn = setTimeout(function() {
                            activateError = false;
                            if (AttrUtilsView.testStrictSpecialCharacters(attrNameInput.getValue())) {
                                activateError = true;
                                errorMsg = ParamSkeletonNLS.SpecialCharactersMsg;
                            } else if (ParametersLayoutViewUtilities.containsAccents(attrNameInput.getValue())) {
                                activateError = true;
                                errorMsg = ParamSkeletonNLS.AccentsnotAllowedInNameMsg;
                            }
                            //AJY3 FUN106676 Reactivate spaces check, because internal name is now distinct from user name.
                            else if (ParametersLayoutViewUtilities.containsBlanks(attrNameInput.getValue())) {
                                activateError = true;
                                errorMsg = ParamSkeletonNLS.AttributeNameContainsSpace;
                            }

                            if (activateError === true) {
                                currTime = new Date().getTime();
                                diffDate = currTime - lastMessageDate;
                                if (diffDate > 1500) {
                                    userMessaging.add({ className: "error", message: errorMsg});
                                    lastMessageDate = new Date().getTime();
                                }
                                attrNameInput.elements.input.setStyle('color', 'red');
                                attrNameInput.focus();
                            } else {
                                attrNameInput.elements.input.setStyle('color', '#555555');
                            }
                        }, 20);
                    });

                    attrUserNameInput.addEvent("onKeyDown", function () {
                        if (timerconn) { clearTimeout(timerconn); }
                        timerconn = setTimeout(function() {
                            activateError = false;
                            if (AttrUtilsView.userNameContainsSpecChars(attrUserNameInput.getValue())) {
                                activateError = true;
                                errorMsg = ParamSkeletonNLS.SpecialCharactersMsg;
                            }
                            if (activateError === true) {
                                currTime = new Date().getTime();
                                diffDate = currTime - lastMessageDate;
                                if (diffDate > 1500) {
                                    userMessaging.add({ className: "error", message: errorMsg});
                                    lastMessageDate = new Date().getTime();
                                }
                                attrUserNameInput.elements.input.setStyle('color', 'red');
                                attrUserNameInput.focus();
                            } else {
                                attrUserNameInput.elements.input.setStyle('color', '#555555');
                            }
                        }, 20);
                    });

                    this.dimensionsSelector.addEvent("onChange", function () {
                        typeNLenDim = AttrUtilsView.getSelectedTypeAndLength(typesSelect.getSelection()[0].value);
                        if (typeNLenDim[0] === 'Real' && this.getValue()[0] !== "") {
                            AuthValsInput.disable();//ZUR - IR-558248-3DEXPERIENCER2018x
                            AuthValsInput.setValue('');
                        } else if (typeNLenDim[0] === 'Real' && this.getValue()[0] === "") {
                            AuthValsInput.enable();//ZUR - IR-558248-3DEXPERIENCER2018x
                            AuthValsInput.setValue('');
                        }
                        AttrUtilsView.buildPreUnitsSelect(this, unitsSelector);
                    });
                    //FUN092576
                    //IR-750288-3DEXPERIENCER2021x
                    multiValuatedToggle.addEvent("onChange", function () {
                              typeNLen = AttrUtilsView.getSelectedTypeAndLength(typesSelect.getSelection()[0].value);
							  if( this.isChecked() === true) {

									if (typeNLen[0] === 'Boolean') {
										that.attrDefValueInput.setValue("");
										that.attrDefValueInput.disable();

									} else if ((typeNLen[0] === 'String') || (typeNLen[0] === 'Integer')) {
                                        that.attrDefValueInput.setValue("");
										 that.attrDefValueInput.disable();

									} else if (typeNLen[0] === 'Date') {
										//that.attrDefValueInput = AttrUtilsView.buildDateDefault();
                                       // that.attrDefValueInput.setValue("");
                                        that.attrDefValueInput.dateInput.setValue("");
                                        that.attrDefValueInput.dateInput.disable()
                                        that.attrDefValueInput.dateCheckbox.disable();

									} else if (typeNLen[0] === 'Real') {
                                        that.attrDefValueInput.setValue("");
										that.attrDefValueInput.disable();
									  }
							  }
							 else {//FUN119390
									if (parentElm.isObjectExistWithConfiguredAttribue === false) {
										if (typeNLen[0] === 'Date') {
											that.attrDefValueInput.dateInput.enable();
											that.attrDefValueInput.dateInput.setDate(new Date());
											that.attrDefValueInput.dateCheckbox.enable();
											//that.attrDefValueInput.dateInput.isDisabled()
										} else {
											that.attrDefValueInput.enable();
										}
									}

								}
							}
                        );
                    typesSelect.addEvent("onChange", function () {
                        typeNLen = AttrUtilsView.getSelectedTypeAndLength(this.getSelection()[0].value);
                        //AttrUtilsView.FilterPredicatesListbyType(typeNLen[0], AttrUtilsView.processed6WList, sixwTagSelector);//IR-514503-3DEXPERIENCER2017x/18x
                        AttrUtilsView.fetchAndPopulate6WPredicates(sixwTagAutoSelect, typeNLen[0]);
                        iDefaultControlCell.childNodes[0].destroy();

                        // FUN127527 multiline should be activated only for strings
                        var deactivateMultiline = true;

						//IR-750288-3DEXPERIENCER2021x
                        if (multiValuatedToggle.isDisabled() === false) {
                            if(multiValuatedToggle.isChecked() === true) {
                                multiValuatedToggle.setCheck(false);
                            }
                        }
                        if (typeNLen[0] === 'Boolean') {
                            that.attrDefValueInput = AttrUtilsView.buildBooleanDefault();
							//FUN119390
							if (parentElm.isObjectExistWithConfiguredAttribue === true){
								that.attrDefValueInput.setValue("");
								that.attrDefValueInput.disable();
							}
                            AuthValsInput.disable();
                            AuthValsInput.setValue(ParamSkeletonNLS.TrueLabel + ',' + ParamSkeletonNLS.FalseLabel);
                            that.dimensionsSelector.clear();
                            that.dimensionsSelector.disable();
                            AttrUtilsView.buildToolTipForDimension(AttrUtilsView.dimensionToolTipCell, ParamSkeletonNLS.DimensionsToolTip, "black");
                            unitsSelector.clear();
                            unitsSelector.disable();
                        } else if ((typeNLen[0] === 'String') || (typeNLen[0] === 'Integer')) {
                            that.attrDefValueInput = AttrUtilsView.buildTextDefault(userMessaging);
							//FUN119390
							if (parentElm.isObjectExistWithConfiguredAttribue === true){
								that.attrDefValueInput.setValue("");
								that.attrDefValueInput.disable();
							}
                            AuthValsInput.enable();
                            AuthValsInput.setValue('');
                            that.dimensionsSelector.clear();
                            that.dimensionsSelector.disable();
                            AttrUtilsView.buildToolTipForDimension(AttrUtilsView.dimensionToolTipCell, ParamSkeletonNLS.DimensionsToolTip, "black");
                            unitsSelector.clear();
                            unitsSelector.disable();
                            // FUN127527 multiline should be activated only for strings
                            if (typeNLen[0] === 'String') {
                                deactivateMultiline = false;
                            }

                        } else if (typeNLen[0] === 'Date') {
                            that.attrDefValueInput = AttrUtilsView.buildDateDefault();
							//FUN119390
							if (parentElm.isObjectExistWithConfiguredAttribue === true){
								
								that.attrDefValueInput.dateInput.setValue("");
								//IR-995980-3DEXPERIENCER2023x: to make same behaviour
								that.attrDefValueInput.dateCheckbox.setCheck(true);
								that.attrDefValueInput.dateInput.disable()
								that.attrDefValueInput.dateCheckbox.disable();
							}
                            AuthValsInput.disable();
                            AuthValsInput.setValue('');
                            that.dimensionsSelector.clear();
                            that.dimensionsSelector.disable();
                            AttrUtilsView.buildToolTipForDimension(AttrUtilsView.dimensionToolTipCell, ParamSkeletonNLS.DimensionsToolTip, "black");
                            unitsSelector.clear();
                            unitsSelector.disable();
                        } else if (typeNLen[0] === 'Real') {
                            that.attrDefValueInput = AttrUtilsView.buildTextDefault(userMessaging);
							//FUN119390
							if (parentElm.isObjectExistWithConfiguredAttribue === true){
								that.attrDefValueInput.setValue("");
								that.attrDefValueInput.disable();
							}
                            AuthValsInput.enable();
                            AuthValsInput.setValue('');
                            AttrUtilsView.buildDimensionsSelect(that.dimensionsSelector);
                        }
                        that.attrDefValueInput.inject(iDefaultControlCell);

                        // FUN127527 multiline should be activated only for strings
                        if (deactivateMultiline) {
                            if (multilineToggle.isDisabled() === false) {
                                multilineToggle.disable();
                                multilineToggle.setCheck(false);
                            }
                        } else if (multilineToggle.isDisabled() === true) {
                            multilineToggle.enable();
                            multilineToggle.setCheck(false);
                        }
                    });

                    indexedToggle.addEvent("onChange", function () {
                        if (this.isChecked()) {
                            sixwTagAutoSelect.enable();
                        } else {
                            if (sixwTagAutoSelect.selectedItems[0] !== undefined) {
                                sixwTagAutoSelect.onUnselect(sixwTagAutoSelect.selectedItems[0]);
                            }
                            //sixwTagAutoSelect.clear();
                            sixwTagAutoSelect.disable();
                        }
                    });
                    //AttrUtilsView.FilterPredicatesListbyType('String', this.processed6WList, sixwTagSelector);//IR-514503-3DEXPERIENCER2017x/18x


                    modalSkeleton.push({id: 'typesSelect', obj: typesSelect });
                    modalSkeleton.push({id: 'attrNameInput', obj: attrNameInput });
                    modalSkeleton.push({id: 'attrUserNameInput', obj: attrUserNameInput });
                    modalSkeleton.push({id: 'dimensionsSelect', obj: AttrUtilsView.dimensionsSelector });
                    modalSkeleton.push({id: 'unitSelect', obj: unitsSelector });
                    modalSkeleton.push({id: 'export3DXMLToggle', obj: export3DXMLToggle });
                    modalSkeleton.push({id: 'multiValuatedToggle', obj: multiValuatedToggle }); //FUN092576
                    modalSkeleton.push({id: 'multilineToggle', obj: multilineToggle }); //FUN127527
                    modalSkeleton.push({id: 'mandToggle', obj: mandToggle });
                    modalSkeleton.push({id: 'revisionToggle', obj: revisionToggle });
                    modalSkeleton.push({id: 'duplicateToggle', obj: duplicateToggle });
                    modalSkeleton.push({id: 'readonlyToggle', obj: readonlyToggle });
                    modalSkeleton.push({id: 'indexedToggle', obj: indexedToggle });
                    modalSkeleton.push({id: 'AuthValsInput', obj: AuthValsInput });
                    modalSkeleton.push({id: 'sixwTagAutoSelect', obj: sixwTagAutoSelect });
                    modalSkeleton.push({id: 'modalbodyTable', obj: modalbodyTable });
                    modalSkeleton.push({id: 'OKBtn', obj: OKBtn });
                    modalSkeleton.push({id: 'CancelBtn', obj: CancelBtn });
                    modalSkeleton.push({id: 'attrDefValueInput', obj: this.attrDefValueInput });

                    return modalSkeleton;
                },

                getInputFromSkeleton : function (modalSkeleton, inputID) {
                    var i;
                    for (i = 0; i < modalSkeleton.length; i++) {
                        if (modalSkeleton[i].id === inputID) {
                            return modalSkeleton[i].obj;
                        }
                    }
                },

                getSelectedTypeAndLength : function (selectedVal) {
                    var outArray = [],
                        iStringIndex = selectedVal.indexOf('String');
                        //selectedVal = currentSelectedOption[0].value,

                    if (iStringIndex >= 0) {
                        outArray.push('String');

                        if (selectedVal === 'String') {
                            outArray.push(0);
                        } else {
                            outArray.push(parseInt(selectedVal.substring(6), 10));//10 : radix parameter
                        }
                    } else {
                        outArray.push(selectedVal);
                        outArray.push(0);
                    }
                    return outArray;
                },

                getCurrentAttributesList : function(iContentDiv) {
                    var typeNLenArr, i, ilistofAuthValues,
                        tbodyreflist = iContentDiv.getElements('.attrstbody'),
                        iLines = tbodyreflist[0].childNodes,
                        nbofLines = iLines.length,
                        ilistofAttributes = [], dimValues = [], dimId = "", unitId = "",
                        ihasAuthValues = false,
                        cellsIndex = this.cellsIndex;

                    for (i = 1; i < nbofLines; i++) {

                        if (iLines[i].cells[cellsIndex.DeployStatus].value !== "DeletedNotDeployed") {

                            typeNLenArr = AttrUtilsView.getSelectedTypeAndLength(iLines[i].cells[cellsIndex.TypeName].value);

                            ihasAuthValues = false;
                            ilistofAuthValues = '';
                            if ((iLines[i].cells[cellsIndex.AuthValue].value !== '') &&
                                    (iLines[i].cells[cellsIndex.AuthValue].value !== undefined)) {
                                ihasAuthValues = true;
                                ilistofAuthValues = iLines[i].cells[cellsIndex.AuthValue].value;
                            }
                            if ((iLines[i].cells[cellsIndex.Dimension].value !== '') &&
                                    (iLines[i].cells[cellsIndex.Dimension].value !== undefined)) {
                                dimValues = iLines[i].cells[cellsIndex.Dimension].value.split(",");
                                if (dimValues.length > 1) {
                                    dimId = dimValues[0];
                                    unitId = dimValues[1];
                                } else {
                                    dimId = dimValues[0];
                                }
                            }
                            ilistofAttributes.push({
                                //id Not Needed
                                nlsName          : iLines[i].cells[cellsIndex.AttributeUserName].value,
								internalName	 : iLines[i].cells[cellsIndex.AttributeName].value, //IR-820267-3DEXPERIENCER2021x
                                type             : typeNLenArr[0],
                                maxLength        : typeNLenArr[1],
                                defaultValue     : iLines[i].cells[cellsIndex.DefaultValue].value,
                                isMandatory      : iLines[i].cells[cellsIndex.Mandatory].value,
                                isExposedTo3DXML : iLines[i].cells[cellsIndex.Export3DXML].value,
                                multiValuated    : iLines[i].cells[cellsIndex.MultiValuated].value, //FUN092576
                                resetWhenDuplicate : iLines[i].cells[cellsIndex.resetWhenDuplicate].value,
                                resetWhenRevision : iLines[i].cells[cellsIndex.resetWhenRevision].value,
                                isReadOnly       : iLines[i].cells[cellsIndex.ReadOnly].value,
                                isIndexed        : iLines[i].cells[cellsIndex.Indexed].value,
                                hasAuthValues    : ihasAuthValues,
                                listofAuthValues : ilistofAuthValues,
                                SixWTag          : iLines[i].cells[cellsIndex.SixWTag].value,
                                dimension        : dimId,
                                preferredunit    : unitId,
                                multiline        : iLines[i].cells[cellsIndex.Multiline].value, //FUN127527

                            });
                        }
                    }
                    return ilistofAttributes;
                },

                getNamesListofAlreadyAddedAttributes : function (contentDiv) {
                    var i,
                        tbodyreflist = contentDiv.getElements('.attrstbody'),
                        iLines = tbodyreflist[0].childNodes,
                        listofInternalNames = [], listofUserNames = [];

                    for (i = 1; i < iLines.length; i++) {
                        listofInternalNames.push(iLines[i].cells[this.cellsIndex.AttributeName].childNodes[0].value);
                        listofUserNames.push(iLines[i].cells[this.cellsIndex.AttributeUserName].childNodes[0].value);
                    }

                    return {internalNames : listofInternalNames, userNames : listofUserNames};
                },

                getMatching6wtagNLS : function (isixWID, itagslist) {
                    var i, predicatesList, propt;
                    for (propt in itagslist) {
                        if (itagslist[propt].properties.length > 0) {
                            predicatesList = itagslist[propt].properties;
                            if (predicatesList !== undefined && predicatesList.length > 0) {
                                for (i = 0; i < predicatesList.length; i++) {
                                    if (predicatesList[i].curi ===  isixWID) {
                                        return predicatesList[i].label;
                                    }
                                }
                            }
                        }
                    }
                    UWA.log("getMatching6wtagNLS::Warning, no matching has been found, returning the ID");
                    return isixWID;
                },

                getCATIACompatibleDateFromISOString : function(iISOString) {
                    //2017-01-16T18:32:22.382Z to 2017/01/24@11:00:00:GMT
                    var CATIADate, tPlace = 0;

                    iISOString = iISOString.replace('-', '/');
                    iISOString = iISOString.replace('-', '/');

                    tPlace = iISOString.indexOf('T');
					//IR-1024188-3DEXPERIENCER2023x : remove hardcoded time instead setting current time.
					let d = new Date();
					let currentTime = "@"+ d.getUTCHours()+":"+d.getUTCMinutes()+":"+d.getUTCSeconds()+ ":GMT";
                    CATIADate = iISOString.substring(0, tPlace) + currentTime;//"@11:00:00:GMT";
                    return CATIADate;
                },
                //IR-514503-3DEXPERIENCER2017x/18x
                FilterPredicatesListbyType : function (attrType, listofsixWTags, sixwTagSelector) {
                    var dataItems, newObject, predicatesList, propt;
                    dataItems = {name : "Avaliable_ds6w_tag", items: []};
                    sixwTagSelector.removeDataset(dataItems.name);
                    for (propt in listofsixWTags) {

                        if (listofsixWTags[propt].properties.length > 0) {
                            newObject = {'label' : listofsixWTags[propt].label, 'items': []};
                            predicatesList = listofsixWTags[propt].properties;

                            if (predicatesList !== undefined && predicatesList.length > 0) {
                                predicatesList.forEach(function (item) {
                                    if (AttrUtilsView.PredicateDataTypeAttributeMatch(item.dataType, attrType) === true) {
                                        newObject.items.push({
                                            value : item.curi,
                                            label : item.label
                                        });
                                    }
                                });

                                if (newObject.items.length > 0) {
                                    //sorting
                                    newObject.items.sort(function (tagOne, tagTwo) {
                                        if (tagOne.label !== undefined && tagTwo.label !== undefined) {
                                            return tagOne.label.localeCompare(tagTwo.label);
                                        }
                                        return false;
                                    });
                                    dataItems.items.push(newObject);
                                }
                            }
                        }
                    }
                    sixwTagSelector.addDataset(dataItems);
                },
                //IR-514503-3DEXPERIENCER2017x/18x
                PredicateDataTypeAttributeMatch : function (iDataType, iAttributeType) {
                    if (iDataType.toUpperCase().indexOf(iAttributeType.toUpperCase()) >= 0) {
                        return true;//string/String(s), integer/Interger, boolean/Boolean, dateTime/Date
                    }
                   // if ((iDataType === "double") && (iAttributeType === "Real"))
                    if ((iDataType.toUpperCase().indexOf("DOUBLE") >= 0) && (iAttributeType === "Real")) {
                        return true;
                    }
                    return false;
                },

                /*testStrictSpecialCharacters : function (attrName) {
                    var regS = /^[0-9a-zA-Z\s_]+$/; //A to Z , 0 to 9, underscores and spaces
                    //var regM = "[A-Za-z0-9_][A-Za-z0-9_\\ -:/]+";
                    if (!regS.test(attrName)) {
                        return true;
                    }
                    return false;
                },

                testStrictSpecialCharacters : function(strtoTest) {
                    return (/^[\w\-\.\s]+$/).test(strtoTest);
                },*/

                userNameContainsSpecChars : function(strtoTest){
                    return strtoTest.indexOf('=') > -1;
                },

                testStrictSpecialCharacters : function(strtoTest, iAdditionalSpecialChars) {
                    var i, firsttest;

                    if (strtoTest === "") {
                        return false;
                    }

                    firsttest = (/^[\w\-\.\s]+$/).test(strtoTest);

                    if (typeof iAdditionalSpecialChars === 'undefined') {
                        return !firsttest;
                    }

                    if (firsttest === true) {
                        for (i = 0; i < strtoTest.length; i++) {
                            if (iAdditionalSpecialChars.indexOf(strtoTest.charAt(i)) !== -1) {
                                return true;
                            }
                        }
                    }
                    return !firsttest;
                },

                UpdateAttributesStsInTable : function(iContentDiv) {
                    var imgSpan,
                        tbodyreflist = iContentDiv.getElements('.attrstbody'),
                        iLines = tbodyreflist[0].childNodes,
                        nbofLines = iLines.length,
                        i = nbofLines - 1,
                        cellsIndex = this.cellsIndex;
                    while (i >= 1) {
                        if (iLines[i].cells[cellsIndex.DeployStatus].value === "DeletedNotDeployed") {
                            iLines[i].remove();
                        } else if (iLines[i].cells[cellsIndex.DeployStatus].value === "NewNotDeployed" || iLines[i].cells[cellsIndex.DeployStatus].value === "ModifiedNotDeployed"
                                || iLines[i].cells[cellsIndex.DeployStatus].value === "StoredButNotDeployed") { //IR-666051-3DEXPERIENCER2018x/19x/20x
                            iLines[i].cells[cellsIndex.DeployStatus].empty();
                            iLines[i].cells[cellsIndex.DeployStatus].value = "Deployed";
                            imgSpan = ParametersLayoutViewUtilities.buildImgSpan('check', '1.5', 'green');
                            iLines[i].cells[cellsIndex.DeployStatus].title = ParamSkeletonNLS.deployedParamtxt;
                            imgSpan.inject(iLines[i].cells[cellsIndex.DeployStatus]);
                        }
                        i--;
                    }
                }

            };

        return AttrUtilsView;
    });


/*global define, UWA*/
/*jslint plusplus: true*/
/*@quickReview ZUR - 2020/05/07 - IR-759264-3DEXPERIENCER2021x*/
define('DS/ParameterizationSkeleton/Views/ParameterizationLifecycle/ParamTransitionsDrag',
    [
        'egraph/core',
        'egraph/views',
        'egraph/utils',
        'egraph/iact',
        'DS/ParameterizationSkeleton/Views/ParameterizationLifecycle/LifecycleEgraphUtilities',
        'DS/ParameterizationSkeleton/Views/ParameterizationLifecycle/ParamEdgeView',
        'DS/ParameterizationSkeleton/Views/ParametersLayoutViewUtilities',
        'i18n!DS/ParameterizationSkeleton/assets/nls/ParamSkeletonNLS'
    ],
    function(core, views, utils, iact, LifecycleEgraphUtilities, ParamEdgeView, ParametersLayoutViewUtilities, ParamSkeletonNLS) {

        'use strict';

        var exports = {},
            grphcopy,
            userSMS,
            errorMsgTime = 0,
            listFbdTransitions = [],
            defaultTransitions = [];

        exports.ParamTransitionsDrag = function (grph, c, userMessaging, listofdefaulttransitions, forbiddenTransitions) {
            UWA.log("ParamTransitionsDrag");
            grphcopy = grph;
            userSMS = userMessaging;
            listFbdTransitions = forbiddenTransitions;
            defaultTransitions = listofdefaulttransitions;
            iact.ConnConnectDrag.call(this, grph, c);
        };

        utils.inherit(exports.ParamTransitionsDrag, iact.ConnConnectDrag);

        exports.ParamTransitionsDrag.prototype.onconnect = function () {
            UWA.log("ParamTransitionsDrag::onconnect");
        };

        exports.ParamTransitionsDrag.prototype.newEdge = function () {
            UWA.log("ParamTransitionsDrag::newEdge");
            //.log(this)//this.edge;//this.edge.cl2;//this.otherConnector.aleft
            return LifecycleEgraphUtilities.builTransitiondEdge(2); //null;//LifecycleView.buildEdge(2);
        };

        exports.ParamTransitionsDrag.prototype.onend = function () {
            UWA.log("ParamTransitionsDrag::onend");
            var edgecopy,
                iSign = [];

            iact.ConnConnectDrag.prototype.onend.apply(this, arguments);
            //.log(this)//this.c.node//this.c.otherConnector;
            //this.updateInputs();

            if (this.edge != null) {
                //iSign = "to" + this.edge.cl2.c.node.name;
                //iSign = ParametersLayoutViewUtilities.removeBlancks(this.edge.cl1.c.node.name + "to" + this.edge.cl2.c.node.name);
                iSign = computeSignatureName(this.edge.cl1.c.node, this.edge.cl2.c.node);

                this.edge.signature = iSign[0];
                this.edge.signatureNLS = iSign[1];
                this.edge.isCritical = false;
                edgecopy =  this.edge;

                if ("CBP" === grphcopy.appCategory) {
                    if (testifaSignatureisNeeded(edgecopy.cl1.c.node, edgecopy.cl2.c.node)) {
                        UWA.log("A signature is needed");
                    }
                }

                redrawTransition(edgecopy.cl1.c.node, edgecopy.cl2.c.node, iSign);
                this.edge.remove();

            }
        };

        exports.ParamTransitionsDrag.prototype.onaccept = function (c1, c2) {
            UWA.log("ParamTransitionsDrag::onaccept");
            var currDate = new Date(),
                currTime = currDate.getTime(),
                diffDate = currTime - errorMsgTime;

            if (checkifNodesAreAlreadyConnected(c1.node.gr.edges, c1, c2)) {

                if (diffDate >= 1400) {
                    errorMsgTime = currTime;
                    userSMS.add({className: "warning", message: ParamSkeletonNLS.DoubleTransitionText});
                }
                return false;
            }
            if (c2.node.stateid === c1.node.stateid) {

                if (diffDate >= 1400) {
                    errorMsgTime = currTime;
                    userSMS.add({className: "warning", message: ParamSkeletonNLS.CyclicTransitionText});
                }
                return false;
            }
            if (checkifForbiddenTransition(c1, c2)) {

                if (diffDate >= 1400) {
                    errorMsgTime = currTime;
                    userSMS.add({className: "warning", message: ParamSkeletonNLS.ForbiddenTransitionText});
                }
                return false;
            }

            return true;
        };

        exports.ParamTransitionsDrag.prototype.onconnect = function (edge, otherConnector, temporaryEdge) {
            UWA.log("onconnect::three");
            //.log(edge);
            this.updateTests();//update the input connectors of the node
        };

        exports.ParamTransitionsDrag.prototype.updateTests = function () {
            UWA.log("updateTests");
        };

        function checkifNodesAreAlreadyConnected(listofEdges, c1, c2) {
            var e;
            for (e = listofEdges.first; e; e = e.next) {
                if ((e.cl1.c.node.stateid == c1.node.stateid) &&
                        (e.cl2.c.node.stateid == c2.node.stateid)) {
                    UWA.log("Check::Nodes Already Connected");
                    return true;
                }
            }

            UWA.log("Check::Nodes can be Connected");
            return false;
        }

        function checkifForbiddenTransition(c1, c2) {
            var i, nbofForbiddenTR =  listFbdTransitions.length;

            for (i = 0; i < nbofForbiddenTR; i++) {
                if ((c1.node.stateid == listFbdTransitions[i].sourceState) &&
                        (c2.node.stateid == listFbdTransitions[i].targetState)) {
                    return true;
                }
            }
            return false;
        }

        function buildNewEdge(stub, iSignature, c1, c2) {
            var edge = ParamEdgeView.buildEdge(stub, iSignature);
            edge.signature = iSignature[0];
            edge.signatureNLS = iSignature[1];
            edge.isCritical = false;
            grphcopy.addEdge(c1, c2, edge);//add the edge to the graph
            return edge;
        }

        function redrawTransition(fromNode, toNode, iTransition) {
            var xdiff = toNode.left - fromNode.left,
                iPositions = Math.round(xdiff / grphcopy.nodeSpacing);

            if (iPositions === 1) {
                buildNewEdge(iPositions, iTransition, fromNode.data.right, toNode.data.left);
            } else if (iPositions < 0) {
                buildNewEdge(iPositions, iTransition, fromNode.data.bottom, toNode.data.bottom);
            } else {
                buildNewEdge(iPositions, iTransition, fromNode.data.top, toNode.data.top);
            }
        }

        function testifaSignatureisNeeded(fromNode, toNode) {
            var e, listofEdges, genSign,
                xdiff = toNode.left - fromNode.left,
                iPositions = Math.round(xdiff / grphcopy.nodeSpacing);

            if (iPositions != 1) {
                //IR-759264-3DEXPERIENCER2021x - ZUR replaced > by !=
                //return true;
                //UWA.log(grphcopy);
                listofEdges = grphcopy.edges;
                
                for (e = listofEdges.first; e; e = e.next) {

                    if (e.cl1.c.node.stateid === fromNode.stateid) {
                        xdiff = e.cl2.c.node.left - e.cl1.c.node.left;
                        iPositions = Math.round(xdiff / grphcopy.nodeSpacing);
                        UWA.log("from : " + e.cl1.c.node.stateid + " to : " + e.cl2.c.node.stateid + " :: " + iPositions);

                        if (iPositions === 1) {
                            if (e.signature === "") {
                                //genSign = ParametersLayoutViewUtilities.removeBlancks(e.cl1.c.node.name + "to" + e.cl2.c.node.name);
                                genSign = ParametersLayoutViewUtilities.removeBlancks(e.cl1.c.node.stateid + "to" + e.cl2.c.node.stateid);
                                e.signature = genSign;
                                e.signatureNLS = genSign;
                            }
                        }
                    }
                }
            }

            return false;
        }

        function computeSignatureName(fromNode, toNode) {

            var i,
                oIDandName = [];

            oIDandName[0] = ParametersLayoutViewUtilities.removeBlancks(fromNode.stateid + "to" + toNode.stateid);
            oIDandName[1] = ParametersLayoutViewUtilities.removeBlancks(fromNode.name + "to" + toNode.name);

            for (i = 0; i < defaultTransitions.length; i++) {
                if ((defaultTransitions[i].sourceState === fromNode.stateid) &&
                        (defaultTransitions[i].targetState === toNode.stateid)) {
                    oIDandName[0] = defaultTransitions[i].name;
                    oIDandName[1] = defaultTransitions[i].name;
                    break;
                }
            }
            return oIDandName;
        }

        return exports;

    });

/**
* @quickreview  KB9 21:11:05 creation
*/
// XSS_CHECKED
define('DS/ParameterizationSkeleton/Views/DELConfigurationParameterization/DELConfigurationModalView',
[
  'UWA/Class',
  'DS/UIKIT/Modal',
  'DS/Controls/Button',
  'DS/ParameterizationSkeleton/Views/DELConfigurationParameterization/DELConfigurationToastMessage',
  'i18n!DS/ParameterizationSkeleton/assets/nls/DELConfigurationModalView',
  'css!UIKIT/UIKIT.css',
  'css!DS/ParameterizationSkeleton/assets/css/DELConfigurationModalView.css',
  'css!DS/ParameterizationSkeleton/assets/css/DELConfigurationToastMessage.css'
],
function (
  Class,
  Modal,
  WUXButton,
  DELConfigurationToastMessage,
  Nls
) {
  'use strict';

  const modalViewOptions = Object.freeze(
      {
        "OK": 1,
        "OKCANCEL":2,
        "OKCLOSE":3,
        "CLOSE":4
      }
  );

  var DELConfigurationModalView = Class.extend({

    /**
    * init
    */
    init : function init(options)
    {
      var that = this;
      that.options = options;
    },

    /*
    * destroyModal
    */
    destroyModal : function destroyModal()
    {
      var that = this;
      that.modal.destroy();
    },

    /*
    * showToastMessage
    */
    showToastMessage : function showToastMessage(messageType, message)
    {
      var that = this;
      that.ToastMessage.showToastMessage(messageType, message);
    },

    /*
    * buildModal
    */
    buildModal : function buildModal()
    {
      var that = this;

      var contentModalView = UWA.createElement('div');
      contentModalView.class = "contentModalView";
      that.options.content.inject(contentModalView);

      that.ToastMessage = new DELConfigurationToastMessage(contentModalView);
      that.ToastMessage.contentToastView.setStyles({
        'border': '1px solid black',
        'position': 'absolute',
        'z-index': '1',
        'bottom' : '50px',
        'width': '80%',
        'margin-left': '10%'
      });

      var footerDiv = UWA.createElement('div');
      footerDiv.class = "footView";
      footerDiv.setStyles({
        display: 'flex',
        'align-items': 'baseline',
        'flex-flow': 'row',
        'width': '100%',
        'margin-left': '35%'
      });

        that.buildButtonsFooter(footerDiv);

        this.modal = new Modal({
          className: 'NotifModal',
          closable: true,
          visible: true,
          header: that.options.title,
          body: contentModalView,
          footer: footerDiv,
          events: {
            onHide: function() {
              that.options.CancelButtonClick();
              that.destroyModal();
            }
          }
        }).inject(document.body);

        var HelpDiv = new UWA.Element('div');
        HelpDiv.inject(footerDiv);

        var HelpButton = new WUXButton(
        {
          displayStyle: 'icon',
          icon:
          {
            iconName: 'help',
            fontIconFamily: WUXManagedFontIcons.Font3DS
          },
          iconSize : '0.5',
          onClick: function (){
              that.ToastMessage.showToastMessage(0, that.options.info);
          }
        }).inject(HelpDiv);

        HelpButton.elements.container.setAttribute("title", Nls.Help);
        return this;
      },

      buildButtonsFooter : function buildButtonsFooter(divButtonsFooter)
      {
        var that = this;
        if (that.options.modalView === modalViewOptions.OK ||
           that.options.modalView === modalViewOptions.OKCLOSE ||
           that.options.modalView === modalViewOptions.OKCANCEL)
        {
          var okButton = new WUXButton({
            type : 'standard',
            label : Nls.OK,
            displayStyle : 'normal',
            onClick: function (e) {
                var destroy = that.options.OKButtonClick();
                if (destroy === undefined)
                  that.modal.destroy();
              }
            });

            okButton.elements.container.setAttribute("title",Nls.OK);
            okButton.elements.container.setStyles({
              //display: 'inline-block',
              //flex: '30%',
              //'padding-right': '50px',
              'text-align': 'center'
            });

            okButton.elements.container.style["background-color"] = "#368EC4";
            okButton.elements.text.style["color"] = "white";

            okButton.inject(divButtonsFooter);
        }

        if (that.options.modalView === modalViewOptions.OKCLOSE)
        {
          var closeButton = new WUXButton({
            type : 'standard',
            label : Nls.Close,
            displayStyle : 'normal',
            onClick: function (e) {
              that.options.CancelButtonClick();
              that.modal.destroy();
            }
          });

          closeButton.elements.container.setAttribute("title",Nls.Close);
          closeButton.elements.container.setStyles({
            display: 'inline-block',
            'margin-left': '5px' ,
            //'padding-left': '50px',
            'text-align': 'center'
          })

          closeButton.inject(divButtonsFooter);
        }

        if (that.options.modalView === modalViewOptions.OKCANCEL)
        {
          var cancelButton = new WUXButton({
            type : 'standard',
            label : Nls.Cancel,
            displayStyle : 'normal',
            onClick: function (e) {
              that.options.CancelButtonClick();
              that.modal.destroy();
            }
          });

          cancelButton.elements.container.setAttribute("title",Nls.Cancel);
          cancelButton.elements.container.setStyles({
            display: 'inline-block',
            'margin-left': '5px' ,
            //'padding-left': '50px',
            'text-align': 'center'
          })

          cancelButton.inject(divButtonsFooter);
        }
      }

    });

    return DELConfigurationModalView;
  });

/*! Copyright 2017, Dassault Systemes. All rights reserved. */
/*global define, widget, document, setTimeout, console, clearTimeout, FileReader*/
/*jslint plusplus: true*/
/*jslint nomen: true*/
/*! Copyright 2017, Dassault Systemes. All rights reserved. */
/*@quickReview FRH 22/09/05 FUN127527  (multiline) */
/*@quickReview AJY3 21/02/26 FUN106676 delivery */
/*@quickReview NZV 19/10/18 FUN092576 delivery*/
/*@quickReview NZV 19/01/31 FUN085423 delivery*/
/*@quickReview ZUR 18/04/24 FUN079262 2019x : EBOM-PS Collaboration Mapping Object Widget*/
/*@quickReview NZV 18/02/07 FUN076053 delivery*/
/*@quickReview NZV 17/08/27 IR-540216-3DEXPERIENCER2018x*/
/*@quickReview ZUR 17/08/04 IR-540566-3DEXPERIENCER2018x */
/*@quickReview NZV 17/05/09 Minor change */
/*@quickReview NZV 17/05/04 IR-512104-3DEXPERIENCER2018x */
/*@fullReview  NZV 17/04/21 Delivery of HL FUN070867  -major change */
/*@quickReview ZUR 17/04/19 IR-514503-3DEXPERIENCER2017x/18x, IR-516226-3DEXPERIENCER2017x/18x */
/*@fullReview  ZUR 15/07/29 2016xFD01 Param Widgetization NG*/

define('DS/ParameterizationSkeleton/Views/ParameterizationDataModeling/AttributesLayoutView',
    [
        'UWA/Core',
        'UWA/Class/View',
        'DS/UIKIT/Modal',
        'DS/UIKIT/Popover',
        'DS/UIKIT/Mask',
        'DS/UIKIT/Scroller',
        'DS/ParameterizationSkeleton/Views/ParametersLayoutViewUtilities',
        'DS/ParameterizationSkeleton/Views/ParameterizationDataModeling/AttributesLayoutUtilities',
        'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler',
        'DS/ParameterizationSkeleton/Utils/ParameterizationWebServices',
        'i18n!DS/ParameterizationSkeleton/assets/nls/ParamSkeletonNLS'
    ],
    function (UWA, View,
              Modal,
              Popover, Mask, Scroller,
              ParametersLayoutViewUtilities, AttributesLayoutUtilities,
              URLHandler, ParameterizationWebServices,
              ParamDataModelingNLS) {

        'use strict';

        var extendedView;

        extendedView = View.extend({
            tagName: 'div',
            className: 'generic-detail',

            init: function (options) {
                var initDate =  new Date();

                options = UWA.clone(options || {}, false);
                this._parent(options);

                this.contentDiv = null;
                this.inputControls = [];
                this.paramScroller = null;
                this.userMessaging = null;
                this.userMessagingLong = null;
                this.lastAlertDate = initDate.getTime();
                this.resetModal = null;
                this.controlDiv = null;
                this.addAttributesModal = null;
                this.editAttributesModal = null;
                this.handledTypeID = null;
                // FUN127527: adding a 5
                this.wdthArray = [10, 13, 13, 10, 5, 5, 5, 5, 5, 5, 5, 5, 15, 16, 16, 3, 7];
                //this.attSynchroCombos = [];
                this.systemAttributes = [];
            },

            setup: function(options) {
                UWA.log('AttributesLayoutView::setup!');
                UWA.log(options);
                //var listoftagsSetup = this.model.get('sixwTagDescription');
            },

            render: function () {
                UWA.log("AttributesLayoutView::render");
                var introDiv,
                    that = this,
                    introText = ParamDataModelingNLS.IntroDivText.format(this.model.get('title'));

                this.contentDiv =  UWA.createElement('div', {'id': 'typeMainDiv'});
                Mask.mask(this.contentDiv);
                this.userMessaging = AttributesLayoutUtilities.addUserMessaging(document.body, 1500);
                this.userMessagingLong = AttributesLayoutUtilities.addUserMessaging(document.body, 5000);//IR-516226-3DEXPERIENCER2017x/18x

                introDiv = UWA.createElement('div', {'class': 'information'}).inject(this.contentDiv);

                /*if ((this.model.get("id") === "AttributeSynchronization")) {
                    introText = ParamDataModelingNLS.IntroSynchroText;
                }*/

                UWA.createElement('p', {
                    text   : introText,
                    'class': 'font-3dslight'//'font-3dsbold'
                }).inject(introDiv);
                // IR-733455-3DEXPERIENCER2021x : sending tool tip for Reset button
                this.controlDiv = ParametersLayoutViewUtilities.createApplyResetToolbar.call(this, this.contentDiv, true,
                                                                  this.applyParams.bind(this), this.resetDMParamsInSession.bind(this), ParamDataModelingNLS.ResetTooltipAttributeMng);

                this.container.setContent(this.contentDiv);
                this.listenTo(this.collection, {
                    onSync: that.onCompleteRequestParameters
                });

                return this;
            },

            onCompleteRequestParameters : function() {
                UWA.log("AttributesLayoutView::onCompleteRequestParameters");
                var i, attributesTable, attrtbody, titlesLine, paramLine, typeNLen,
                    isixWNLS = '', listofAuthValues, //listofSynchros,
                    paramsDIV = ParametersLayoutViewUtilities.createParamsContainerDiv(),
                    listofAttr = this.collection._models[0]._attributes.listofAttributes;
                this.handledTypeID = this.collection._models[0]._attributes.id;
                this.systemAttributes = this.collection._models[0]._attributes.listofSystemAttribues;
				let numberOfObjs = parseInt(this.collection._models[0]._attributes.existingConfiguredObjects);
				//FUN119390
				this.isObjectExistWithConfiguredAttribue = (numberOfObjs == 0) ? false : true;

                attributesTable = UWA.createElement('table', {
                    'class': 'table table-hover'
                }).inject(paramsDIV);//table-bordered

                attrtbody =  UWA.createElement('tbody', {
                    'class': 'attrstbody'
                }).inject(attributesTable);

                if (this.handledTypeID !== "AttributeSynchronization") {

                    titlesLine =  AttributesLayoutUtilities.buildTitlesLine(this.wdthArray);
                    //titlesLine.addClassName("active");
                    titlesLine.inject(attrtbody);

                    for (i = 0; i < listofAttr.length; i++) {

                        typeNLen = listofAttr[i].type;
                        if ((listofAttr[i].type === 'String') && (listofAttr[i].maxLength != 0)) {
                            typeNLen = listofAttr[i].type + listofAttr[i].maxLength;
                        }

                        listofAuthValues = '';
                        if (listofAttr[i].hasAuthValues === true) {
                          //IR-904152-3DEXPERIENCER2022x,IR-953664-3DEXPERIENCER2022x: Convert space "  " to "" to be aline with TXO
                            //Need to remove space..
                            const authValues = listofAttr[i].listofAuthValues.split(",");
                            const trimedAuthValues  = authValues.map((item) => item.trim());
                            listofAuthValues = trimedAuthValues.join();
                        }
                        //FUN092576
						// FUN127527 FRH Support multiline
                        paramLine = AttributesLayoutUtilities.buildAttributeLine(typeNLen,
                            listofAttr[i].nlsName,
							listofAttr[i].internalName,
                            listofAttr[i].defaultValue,
                            listofAttr[i].isMandatory, listofAttr[i].isReadOnly, listofAttr[i].isExposedTo3DXML,
                            listofAttr[i].multiValuated,listofAttr[i].multiline,listofAttr[i].dimension, listofAttr[i].preferredunit, listofAttr[i].isIndexed,
                            listofAuthValues,
                            isixWNLS,
                            listofAttr[i].sixWTag,
                            listofAttr[i].isUsedInOther,
                            listofAttr[i].isDeployed,
                            this.wdthArray,
                            this.userMessagingLong, listofAttr[i].resetWhenRevision, listofAttr[i].resetWhenDuplicate,this);
                        paramLine.inject(attrtbody);
                    }
                }

                /*else {
                    attributesTable.setStyle("width", "70%");
                    //attributesTable.setStyle("margin", "0 auto");//this works correctly
                    //VpmCbpMapping
                    AttributesSynchroView.init(attrtbody);
                    titlesLine = AttributesSynchroView.buildSynchroTitlesLine();
                    titlesLine.inject(attrtbody);
                    UWA.log(this.collection._models[0]);
                    listofSynchros = this.collection._models[0]._attributes.listofSynchros;
                    AttributesSynchroView.buildSynchroView(listofAttr, listofSynchros);
                }*/

                paramsDIV.inject(this.contentDiv);

                this.paramScroller = new Scroller({
                    element: paramsDIV
                }).inject(this.contentDiv);

                Mask.unmask(this.contentDiv);
            },

            showAddElementsModal : function() {
                var headertitle, modalbodyTable, tbodyreflist, attrLine, listofAddedAttrs,
                    AuthValsInput, typeNLen,
                    OKBtn, CancelBtn, checkResult, hasAuthVals,
                    sixwTagSelector, typesSelect, attrNameInput, attrUserNameInput, attrDefValueInput,
                    currSelectedOpt, iDefaultValue,
                    mandToggle, readonlyToggle, indexedToggle,
                    dateInput, dateSpan, iShortDate,
                    selected6wTag = '',
                    selected6wTagValue = '',
                    inputsArray = [],
                    dimensionsSelector, unitSelect,
                    export3DXMLToggle = false, revisionToggle = null, duplicateToggle = null,
                    that = this, multiValuatedToggle, multilineToggle, authValuesStr = "";


                UWA.log("showAddAttributesModal::");

                if (that.addAttributesModal !== null) {
                    //that.addAttributesModal.show();//Modal already exists
                    //NZV : Need to comfirm this change.
                    that.addAttributesModal.destroy();
                }  {
                    headertitle = UWA.createElement('h4', {
                        text   : ParamDataModelingNLS.AddAttributeTxt,
                        'class': 'font-3dslight' // font-3dsbold
                    });

                    //sortedTypes = LifecycleViewUtilities.sortArrayByKey(that.collection._models[0]._attributes.types, "typeNLS");

                    inputsArray        = AttributesLayoutUtilities.buildModalSkeleton(that);
                    modalbodyTable     = AttributesLayoutUtilities.getInputFromSkeleton(inputsArray, "modalbodyTable");
                    typesSelect        = AttributesLayoutUtilities.getInputFromSkeleton(inputsArray, "typesSelect");
                    attrNameInput      = AttributesLayoutUtilities.getInputFromSkeleton(inputsArray, "attrNameInput");
                    attrUserNameInput  = AttributesLayoutUtilities.getInputFromSkeleton(inputsArray, "attrUserNameInput");
                    mandToggle         = AttributesLayoutUtilities.getInputFromSkeleton(inputsArray, "mandToggle");
                    readonlyToggle     = AttributesLayoutUtilities.getInputFromSkeleton(inputsArray, "readonlyToggle");
                    indexedToggle      = AttributesLayoutUtilities.getInputFromSkeleton(inputsArray, "indexedToggle");
                    sixwTagSelector    = AttributesLayoutUtilities.getInputFromSkeleton(inputsArray, "sixwTagAutoSelect");
                    AuthValsInput      = AttributesLayoutUtilities.getInputFromSkeleton(inputsArray, "AuthValsInput");
                    OKBtn              = AttributesLayoutUtilities.getInputFromSkeleton(inputsArray, "OKBtn");
                    CancelBtn          = AttributesLayoutUtilities.getInputFromSkeleton(inputsArray, "CancelBtn");
                    dimensionsSelector = AttributesLayoutUtilities.getInputFromSkeleton(inputsArray, "dimensionsSelect");
                    unitSelect         = AttributesLayoutUtilities.getInputFromSkeleton(inputsArray, "unitSelect");
                    export3DXMLToggle  = AttributesLayoutUtilities.getInputFromSkeleton(inputsArray, "export3DXMLToggle");
                    revisionToggle     = AttributesLayoutUtilities.getInputFromSkeleton(inputsArray, "revisionToggle");
                    duplicateToggle    = AttributesLayoutUtilities.getInputFromSkeleton(inputsArray, "duplicateToggle");
                    multiValuatedToggle = AttributesLayoutUtilities.getInputFromSkeleton(inputsArray, "multiValuatedToggle");
					// FUN127527 FRH Support multiline
                    multilineToggle = AttributesLayoutUtilities.getInputFromSkeleton(inputsArray, "multilineToggle");

                    OKBtn.addEvent("onClick", function () {

                        var userSelectDimention = "", perferredUnit = "", msg = "";
						//IR-750288-3DEXPERIENCER2021x : Handle default value in case of it is disable
                        typeNLen = AttributesLayoutUtilities.getSelectedTypeAndLength(typesSelect.getSelection()[0].value);
                       // userSelectDimention = {};
                        if (typeNLen[0] === 'Boolean') {
                             if(AttributesLayoutUtilities.getDefaultValueInput().isDisabled()  === false) {
                                attrDefValueInput = AttributesLayoutUtilities.getDefaultValueInput();
                                currSelectedOpt = attrDefValueInput.getSelection();
                                iDefaultValue = currSelectedOpt[0].value;

                            } else { iDefaultValue = "";}
                        } else if (typeNLen[0] === 'Date') {
                            //ZUR IR-494192-3DEXPERIENCER2017x
							if(AttributesLayoutUtilities.getDefaultValueInput().dateInput.isDisabled()  === false) {
								dateSpan = AttributesLayoutUtilities.getDefaultValueInput();
								dateInput = dateSpan.dateInput;
								iShortDate = dateInput.getDate();
								if (iShortDate !== null) {
									iShortDate.setHours(11);//ZUR IR-502127-3DEXPERIENCER2018x
									//toLocaleDateString
									iDefaultValue = AttributesLayoutUtilities.getCATIACompatibleDateFromISOString(iShortDate.toISOString());
								} else {
									iDefaultValue = "";
								}
                            } else {
                                iDefaultValue = "";
                            }

                        } else if (typeNLen[0] === 'Real') {

                            if (dimensionsSelector.getSelection()[0].value !== '') {

                                userSelectDimention = dimensionsSelector.getSelection()[0].value;

                                if (unitSelect.getSelection()[0].value !== '') {
                                    perferredUnit = unitSelect.getSelection()[0].value;
                                }
                            }
                            if(AttributesLayoutUtilities.getDefaultValueInput().isDisabled()  === false) {
                                iDefaultValue = AttributesLayoutUtilities.getDefaultValueInput().getValue();
                            } else {
                                iDefaultValue = "";
                            }
                        } else {
                            if(AttributesLayoutUtilities.getDefaultValueInput().isDisabled()  === false) {
                                iDefaultValue = AttributesLayoutUtilities.getDefaultValueInput().getValue();
                            } else {
                                iDefaultValue = "";
                            }
                        }
                        listofAddedAttrs = AttributesLayoutUtilities.getNamesListofAlreadyAddedAttributes(that.contentDiv);

                        hasAuthVals = false;

                        //IR-744403-3DEXPERIENCER2021x
                        if ((AuthValsInput.getValue() !== undefined) && (AuthValsInput.getValue() !== '') ) {
                            hasAuthVals = true;
                            //Remove spaces between values.
                            authValuesStr = AuthValsInput.getValue();
                            if(authValuesStr.indexOf(",") > -1) {
                              //IR-904152-3DEXPERIENCER2022x,IR-953664-3DEXPERIENCER2022x: Convert space "  " to "" to be aline with TXO
                              const authValues = authValuesStr.split(",");
                              const trimedAuthValues  = authValues.map((item) => item.trim());
                              authValuesStr = trimedAuthValues.join();
                            }
                            authValuesStr = authValuesStr.trim();
                            AuthValsInput.setValue(authValuesStr);

                        }
						//FUN119390
                        checkResult = AttributesLayoutUtilities.checkOptionsBeforeAddAttrs(typeNLen[0], typeNLen[1],
                            attrNameInput.getValue(), attrUserNameInput.getValue(), iDefaultValue,
                            readonlyToggle.isChecked(), mandToggle.isChecked(), multiValuatedToggle.isChecked(), hasAuthVals,
                            authValuesStr,
                            listofAddedAttrs, that.systemAttributes, false, "DUMMYUNDEFINEDVALUE", that.isObjectExistWithConfiguredAttribue);
                            //IR-953664-3DEXPERIENCER2023x\22x :There is no value to pass as existing NLS attribute name here so we are passing DUMMYUNDEFINEDVALUE.

                        if (checkResult !== "S_OK") {
                            UWA.log("checkResult = " + ParamDataModelingNLS[checkResult]);
                            //IR-759885-3DEXPERIENCER2021x
                            if (checkResult === "AttributeNameNotAllowed") {
                                msg = ParamDataModelingNLS[checkResult].format(attrNameInput.getValue());
                                that.userMessaging.add({ className: "error", message: msg});
                            } else {
                                if (checkResult == "DefaultNotInAuthValsMsg") {
                                  //IR-904152-3DEXPERIENCER2022x,IR-953664-3DEXPERIENCER2022x\23x: Message improvement
                                    that.userMessaging.add({ className: "error", message: ParamDataModelingNLS[checkResult].format(iDefaultValue)});
                                  } else {
                                    that.userMessaging.add({ className: "error", message: ParamDataModelingNLS[checkResult]});

                                  }
                            }
                            if ((checkResult === 'DefaultValueSizeInadequate') ||
                                    (checkResult === 'AccentsnotAllowedMsg') ||
                                      (checkResult === 'DefaultValueSizeInadequate')) {
                                AttributesLayoutUtilities.getDefaultValueInput().focus();
                            }

                        } else {

                            selected6wTag = '';
                            selected6wTagValue = '';

                            if (sixwTagSelector.selectedItems[0] != undefined) {
                                selected6wTag = sixwTagSelector.selectedItems[0].label;
                                selected6wTagValue = sixwTagSelector.selectedItems[0].value;
                            }
                            //FUN092576, IR-820267-3DEXPERIENCER2021x
							// FUN127527 FRH Support multiline
                            attrLine = AttributesLayoutUtilities.buildAttributeLine(typesSelect.getSelection()[0].value,
                                attrUserNameInput.getValue(), attrNameInput.getValue(), iDefaultValue,
                                mandToggle.isChecked(), readonlyToggle.isChecked(), export3DXMLToggle.isChecked(),
                                multiValuatedToggle.isChecked(),multilineToggle.isChecked(),userSelectDimention, perferredUnit,
                                indexedToggle.isChecked(),
                                authValuesStr,
                                selected6wTag,
                                selected6wTagValue,
                                false,
                                "NewNotDeployed",//'false',//isDeployed
                                that.wdthArray,
                                this.userMessagingLong, revisionToggle.isChecked(), duplicateToggle.isChecked(),that);

                            tbodyreflist = that.contentDiv.getElements('.attrstbody');
                            attrLine.inject(tbodyreflist[0]);
                            attrLine.focus();
                            that.addAttributesModal.hide();
                            that.addAttributesModal.destroy();
                        }

                    });

                    CancelBtn.addEvent("onClick", function (e) {
                        UWA.log(e);//that.onCancelCalled();
                        that.addAttributesModal.hide();
                        that.addAttributesModal.destroy();
                    });

                    that.addAttributesModal = new Modal({
                        className: 'add-attr-modal',
                        closable: true,
                        header  : headertitle,
                        body    : modalbodyTable,
                        footer  : [ OKBtn, CancelBtn ]
                    }).inject(that.contentDiv);

                    that.addAttributesModal.getContent().setStyle("padding-top", 10);
                    that.addAttributesModal.elements.wrapper.setStyle("width", 800);
                    that.addAttributesModal.show();
                }
            },

            resetDMParamsInSession : function () {
                /*if (this.model.get("id") === "AttributeSynchronization") {
                    this.resetSynchroParams();
                } else {*/
                this.confirmationModalShow();
                //}
            },

            confirmationModalShow : function () {
                UWA.log("confirmationModalShow");
                var tbodyreflist = this.contentDiv.getElements('.attrstbody'),
                    iLines = tbodyreflist[0].childNodes,
                    nbofLines = iLines.length,
                    i = nbofLines - 1, deployStatusValue, attriList, deployedAttri, j;

                while (i >= 1) {
                    deployStatusValue = iLines[i].cells[AttributesLayoutUtilities.cellsIndex.DeployStatus].value;
                    if (deployStatusValue === "Deployed") {
                        i--;
                        continue;
                    }
                    attriList = this.collection._models[0]._attributes.listofAttributes;
                    deployedAttri = "";
                    for(j = 0; j < attriList.length; j++) {
                        if (attriList[j].internalName === iLines[i].cells[AttributesLayoutUtilities.cellsIndex.AttributeName].value) {
                            deployedAttri = attriList[j];
                            break;
                        }
                    }
                    if ( deployStatusValue === "NewNotDeployed" || deployedAttri === "") {
                        iLines[i].remove();
                    } else if (deployStatusValue === "DeletedNotDeployed" || deployStatusValue === "ModifiedNotDeployed") {
                        AttributesLayoutUtilities.undeleteAttribute(iLines[i],this);
                    }
                    i--;
                }
                /*
                   "DeletedNotDeployed"
                    "NewNotDeployed"
                    "StoredButNotDeployed"
                    "Deployed"
                */
            },

            /*resetSynchroParams : function () {
                AttributesSynchroView.resetSynchroParams();
            },*/

            applyParams : function () {
                UWA.log("applyParams");

                /*if (this.model.get("id") === "AttributeSynchronization") {
                    this.UpdateSynchroParams();

                } else {*/
                //IR-689657-3DEXPERIENCER2019x/20x : Popup a warning msg when new attribute being added.
                var tbodyreflist = this.contentDiv.getElements('.attrstbody'),
                iLines = tbodyreflist[0].childNodes;
                var newAttributeAdded = false, i;
                for(i = 1 ; i < iLines.length; i++) {
                   if("NewNotDeployed" === iLines[i].cells[AttributesLayoutUtilities.cellsIndex.DeployStatus].value) {
                     newAttributeAdded = true;
                   }
                }
                if(newAttributeAdded === true) {
                    //FUN102019 21x FD03 : change message and add line break
                    ParametersLayoutViewUtilities.showContextualDeleteModal(widget.body, "longAttrModal", ParamDataModelingNLS.NewAttrAddWarningMsg + "\n"+ParamDataModelingNLS.NewAttrAddWarningMsgSec,
                        ParamDataModelingNLS.YesText,  ParamDataModelingNLS.NoText, ParamDataModelingNLS.Warning+"!", this.UpdateDataModelingParams, this);
                } else {
                    this.UpdateDataModelingParams(this);
                }
                //}
            },
            //IR-689657-3DEXPERIENCER2019x/20x
            UpdateDataModelingParams : function (that) {
                var datatoSend,
                    attributeList = [];

                //if this.handledTypeID === AttributeSynchronization

                Mask.mask(that.contentDiv);
                attributeList = AttributesLayoutUtilities.getCurrentAttributesList(that.contentDiv);

                UWA.log(attributeList);


                datatoSend = {
                    id                      : that.handledTypeID,
                    attributeDescription    : attributeList
                };
                UWA.log(datatoSend);

                ParameterizationWebServices.postAttributesOnServer.call(that, datatoSend, "postattrparams",
                    that.onApplyFailure.bind(that), that.onApplySuccess.bind(that));
            },//of function UpdateCommonParamsOnServer

            /*UpdateSynchroParams : function () {
                var synchroList, datatoSend;
                Mask.mask(this.contentDiv);

                synchroList = AttributesSynchroView.getCurrentSynchroList(this.contentDiv);

                datatoSend = {
                    AttributesSynchronization : synchroList
                };

                UWA.log(datatoSend);

                ParameterizationWebServices.postAttributesOnServer.call(this, datatoSend, "postsynchros",
                    this.onApplyFailure.bind(this), this.onApplySuccess.bind(this));
            },*/

            onApplyFailure : function (json) {
                UWA.log(json);
                Mask.unmask(this.contentDiv);//Rb0afx
                this.userMessaging.add({ className: "error", message: ParamDataModelingNLS.deployFailureMsg });
                //ParamLayoutUtilities.updateIcon(false, theImageCell);
            },

            onApplySuccess : function (json) { //Rb0afx
                var currDate, currTime, diffDate,
                    successmsg = ParamDataModelingNLS.deploySuccessMsg +" " +ParamDataModelingNLS.UpdateIndexAndReloadCache/*IR-733455-3DEXPERIENCER2021x */, attributeList = [], attriList,
                    i = 0, existingAttribute = false, j = 0, modelAttriList, uiAttriList;// + ' - ' + new Date();
                Mask.unmask(this.contentDiv);
                UWA.log(json);

                currDate = new Date();
                currTime = currDate.getTime();
                diffDate = currTime - this.lastAlertDate;
                this.lastAlertDate = currTime;

                if (diffDate >= 2000) {
                    this.userMessagingLong.add({ className: "success", message: successmsg });
                }
                //UPDATE MODEL WITH LATEST CHANGES
                uiAttriList = AttributesLayoutUtilities.getCurrentAttributesList(this.contentDiv);
                modelAttriList = this.collection._models[0]._attributes.listofAttributes;
                for(i =0 ; i < modelAttriList.length; i++) {
                    modelAttriList[i].tempStatus = "ToBeDeleted";
                }

                for(i =0; i < uiAttriList.length; i++) {
                    existingAttribute = false;
                    for(j = 0; j < modelAttriList.length; j++) {
                        if (modelAttriList[j].nlsName && (modelAttriList[j].nlsName === uiAttriList[i].nlsName)) {
                                modelAttriList[j].type             = uiAttriList[i].type;
								modelAttriList[j].internalName 	   = uiAttriList[i].internalName;//IR-820267-3DEXPERIENCER2021x
                                modelAttriList[j].maxLength        = uiAttriList[i].maxLength;
                                modelAttriList[j].defaultValue     = uiAttriList[i].defaultValue;
                                modelAttriList[j].isMandatory      = uiAttriList[i].isMandatory;
                                modelAttriList[j].isExposedTo3DXML = uiAttriList[i].isExposedTo3DXML;
                                modelAttriList[j].multiValuated    = uiAttriList[i].multiValuated; //FUN092576
                                modelAttriList[j].multiline        = uiAttriList[i].multiline; //FUN127527
                                modelAttriList[j].resetWhenDuplicate = uiAttriList[i].resetWhenDuplicate;
                                modelAttriList[j].resetWhenRevision = uiAttriList[i].resetWhenRevision;
                                modelAttriList[j].isReadOnly       = uiAttriList[i].isReadOnly;
                                modelAttriList[j].isIndexed        = uiAttriList[i].isIndexed;
                                modelAttriList[j].hasAuthValues    = uiAttriList[i].hasAuthValues;
                                modelAttriList[j].listofAuthValues = uiAttriList[i].listofAuthValues;
                                modelAttriList[j].SixWTag          = uiAttriList[i].SixWTag;
                                modelAttriList[j].dimension        = uiAttriList[i].dimension;
                                modelAttriList[j].preferredunit    = uiAttriList[i].preferredunit;
                                delete modelAttriList[i].tempStatus;
                                existingAttribute = true;
                            break;
                       }
                    }
                    if (existingAttribute === false) {
                        //add new entry
                        modelAttriList.push({
                                    "id"                : "NotYetCalulated",
                                    "internalName"      : "NotYetCalulated",
                                    "isDeployed"        : true,
                                    "isUsedInOther"     : false,
                                    "parentType"        : "NotYetCalulated",
                                    "nlsName"           : uiAttriList[i].nlsName,
                                    "type"              : uiAttriList[i].type,
                                    "maxLength"         : uiAttriList[i].maxLength,
                                    "defaultValue"      : uiAttriList[i].defaultValue,
                                    "isMandatory"       : uiAttriList[i].isMandatory,
                                    "isExposedTo3DXML"  : uiAttriList[i].isExposedTo3DXML,
                                    "resetWhenDuplicate": uiAttriList[i].resetWhenDuplicate,
                                    "resetWhenRevision" : uiAttriList[i].resetWhenRevision,
                                    "isReadOnly"        : uiAttriList[i].isReadOnly,
                                    "isIndexed"         : uiAttriList[i].isIndexed,
                                    "hasAuthValues"     : uiAttriList[i].hasAuthValues,
                                    "listofAuthValues"  : uiAttriList[i].listofAuthValues,
                                    "SixWTag"           : uiAttriList[i].SixWTag,
                                    "dimension"         : uiAttriList[i].dimension,
                                    "preferredunit"     : uiAttriList[i].preferredunit,
                                    "multiValuated"     : uiAttriList[i].multiValuated, //FUN092576
                                    "multiline"         : uiAttriList[i].multiline //FUN127527
                        });
                    }
                }
                //Remove old attributes if have
               modelAttriList = modelAttriList.filter(function (value, index, arr) {
                        return  (value.tempStatus !== undefined) ? false : true;});
                //var tbodyreflist = this.contentDiv.getElements('.attrstbody');
                /*if (this.model.get("id") === "AttributeSynchronization") {
                    AttributesSynchroView.UpdateSynchrosStsInTable(this.contentDiv);
                } else {*/
                AttributesLayoutUtilities.UpdateAttributesStsInTable(this.contentDiv);

                //}

                //ParamLayoutUtilities.updateIcon(true, theImageCell);
            },

            //show: function () {},
            destroy : function() {
                this.stopListening();
                this._parent.apply(this, arguments);
            }

        });

        return extendedView;
    });

/*global define, widget, document, setTimeout, console*/
/*jslint plusplus: true*/
/*jslint nomen: true*/
define('DS/ParameterizationSkeleton/Views/ParameterizationLifecycle/LifecycleView',
    [
        'UWA/Core',
        'UWA/Class/View',
        'egraph/core',
        'egraph/views',
        'egraph/iact',
        'egraph/utils',
        'DS/UIKIT/Input/Button',
        'DS/UIKIT/Input/ButtonGroup',
        'DS/UIKIT/Input/Select',
        'DS/UIKIT/Input/Toggle',
        'DS/UIKIT/Modal',
        'DS/UIKIT/Alert',
        'DS/UIKIT/Popover',
        'DS/UIKIT/Mask',
        'DS/UIKIT/Scroller',
        'DS/ParameterizationSkeleton/Utils/ParameterizationDataUtils',
        'DS/ParameterizationSkeleton/Views/ParametersLayoutViewUtilities',
        'DS/ParameterizationSkeleton/Views/ParameterizationLifecycle/LifecycleViewUtilities',
        'DS/ParameterizationSkeleton/Views/ParameterizationLifecycle/LifecycleEgraphUtilities',
        'DS/ParameterizationSkeleton/Views/ParameterizationLifecycle/ParamStepGeometry',
        'DS/ParameterizationSkeleton/Views/ParameterizationLifecycle/ParamNodeView',
        'DS/ParameterizationSkeleton/Views/ParameterizationLifecycle/ParamTransitionsDrag',
        'DS/ParameterizationSkeleton/Views/ParameterizationLifecycle/ParamEdgeView',
        'DS/ParameterizationSkeleton/Utils/ParameterizationWebServices',
        'i18n!DS/ParameterizationSkeleton/assets/nls/ParamSkeletonNLS'
    ],
    function (UWA, View,
              core, views, iact, utils,
              Button, ButtonGroup,Select, Toggle,
              Modal,
              Alert, Popover, Mask, Scroller,
              ParameterizationDataUtils,
              ParametersLayoutViewUtilities,
              LifecycleViewUtilities, LifecycleEgraphUtilities, StepGx, ParamNodeView, ParamTransitionsDrag,
              ParamEdgeView,
              ParameterizationWebServices,
              ParamSkeletonNLS) {

        'use strict';

        var extendedView;

        extendedView =  View.extend({
            tagName: 'div',
            className: 'generic-detail',

            init: function (options) {
                options = UWA.clone(options || {}, false);
                var GraphSettings   = ParameterizationDataUtils.paramStructBuilder("nodewidth,nodeheight,nodeSpacing");
                this.transitionElt  = ParameterizationDataUtils.paramStructBuilder("sourceState,targetState,name,nlsname,isCritical,isDeployed");
                this.stateElt       = ParameterizationDataUtils.paramStructBuilder("stateid,name,isCritical,isEnabled,isDeployed");

                this._parent(options);
                this.stepGeometry = new StepGx.ParamStepGeometry(10);//StepGeometry(10);
                this.grProps = new GraphSettings(180, 110, 320); //(150,100,200);   (180,110,250) 
                this.grph = null;
                this.nodes = [];
                this.contentDiv = null;
                this.userMessaging = null;
                this.userMessagingDrag = null;
                this.policyID = null;
                this.RulesModal = null;
                this.defaulttransitions = [];
                this.forbiddentransitions = [];
                this.defaultstates = [];
                this.rulesTableWdthArr = [15, 10, 10, 35, 20, 5, 5];
                this.errorMsgTime = 0;
                this.renameStates = true;
                this.modifyTopology = true;
                //IR-695253-3DEXPERIENCER2019x FD06, 20x FD01 
                this.lastDeployedStates = [];
                this.lastDeployedTransitions = [];
                this.lastDeployedChecks = [];
                LifecycleEgraphUtilities.addEdgeArrowDesign(widget);
            },

            setup: function(options) {
                UWA.log('LifecycleView::setup!');
                //this.listenTo(this.collection, "onSync", this.render);
                //var statesArray = this.collection._models[0]._attributes.states;

                /* //the good one
                this.listenTo(this.collection, {          
                    onSync: this.render,
                });*/
                UWA.log(options);
            },
            // in:render console.log(this.collection._models.keys());
            /*  var content = [];
            models.keys().forEach(function (key) {
                var value = this.collection._models.get(key);
                console.log("logggggggggggggggg::key = "+key+" and value = "+value);
            }, this);

            this.model.keys().forEach(function (key) {
                var value = this.model.get(key);
                console.log("key = "+key+" and value = "+value);          
            }, this);*/

            render: function () {
                UWA.log("LifecycleView::render");
                var LCChecksDiv, paramScroller, iDivs, contentDiv,
                    that = this;

                iDivs = that.rendereGraphElements();
                contentDiv = iDivs[0];

                Mask.mask(contentDiv);

                this.userMessaging = new Alert({
                    className : 'param-alert',
                    closable: true,
                    visible: true,
                    renderTo : document.body,
                    autoHide : true,
                    hideDelay : 1200,
                    messageClassName : 'warning'
                });

                this.userMessagingDrag = new Alert({
                    className : 'param-alert',
                    closable: true,
                    visible: true,
                    renderTo : document.body,
                    autoHide : true,
                    hideDelay : 1200,
                    messageClassName : 'warning'
                });

                this.renameStates = this.model.get("renameStates");
                this.modifyTopology = this.model.get("modifyTopology");


                //.inject(contentDiv);

                // create the graph

                //LifecycleViewUtilities.addApplyResetToolbar(contentDiv, this.applyParams, this.resetParamsinSession) ;  
                //à tester innerHeight: 516 innerWidth: 1875  outerHeight: 1032 outerWidth: 1920 */
                //UWA.log("policyID=" + that.model.get('id'));
                //UWA.log("width = " + wdth);

                //this.addApplyResetToolbar2(contentDiv);
                this.container.setContent(contentDiv);
                this.contentDiv = contentDiv;
                //FUN087047 : NZV : move LCChecksDiv initilization part of code to function onCompleteRequestTopology
                //LCChecksDiv = LifecycleViewUtilities.buildLifecycleChecksView(this.rulesTableWdthArr);

                //var insertDiv = document.getElementsByClassName("egraph_views_domroot")[0];//OK
                //var insertDiv = document.getElementById("egraph_views_domroot");
                //insertDiv.appendChild(LCChecksDiv);

                /*LCChecksDiv.inject(this.contentDiv);

                paramScroller = new Scroller({
                    element: LCChecksDiv
                }).inject(this.contentDiv);*/

                //this.listenTo(this.model.get('resultsColl'), "onSync", this.onModelLoaded);
                //that.listenTo(that.collection, "onSync", that.onCompleteRequestTopology());

                //the good one 
                this.listenTo(this.collection, {
                    onSync: that.onCompleteRequestTopology
                });

               // this.onCompleteRequestTopology();
                return this;
            },

            rendereGraphElements : function () {

                var sm, that, wdth, hgth, newWdth, newhgth, vpt, transitionDragHandler,
                    canvas,
                    currDate, currTime, diffDate,
                    iDivs =  LifecycleEgraphUtilities.addeGraphDivs();

                canvas = iDivs[1];

                this.grph = new core.EGraph();
                this.grph.nodeSpacing = this.grProps.nodeSpacing;//200

                // add the main view of the graph in 'graph_canvas' div using a
                // HTMLGraphView view to have default display                               
                this.grph.addView('main', new views.HTMLGraphView(canvas));//('main', new views.HTMLGraphView(document.querySelector('#graph_canvas')));

                that = this;
                // instantiate a default state machine to handle mouse & touch interactions
                sm = new iact.StateMachine(this.grph, null, null, this.grph.views.main);

                // override onmousedown to prevent any stopPropagation & preventDefault 
                // to happen and to make sure we don't manipulate the graph when dragging
                // the selection of an input element
                sm.rootState.onmousedown = (function (old_onmousedown) {
                    return function onmousedown(sm, data) {
                        var old_ret, ret;

                        if (data.button === iact.Buttons.LEFT &&
                                data.modifiers === 0 &&
                                data.dom && data.dom.tagName === 'INPUT') {
                            if (data.grElt !== undefined) {
                                if (!sm.graph.isSelected(data.grElt)) {
                                    sm.graph.updateLock();
                                    try {
                                        sm.graph.replaceSelectionWith(data.grElt);
                                        if (data.grElt.bringToFront) {
                                            data.grElt.bringToFront();
                                        }
                                    } finally {
                                        sm.graph.updateUnlock();
                                    }
                                    // after reparenting the focus is not given back to the input
                                    setTimeout(data.dom.focus.bind(data.dom), 0);
                                }
                            }
                            return { state: {
                                onmouseup: function (sm, data) {
                                    if (data.button === iact.Buttons.LEFT) {
                                        return {
                                            state: null
                                        };
                                    }
                              // FIXME: if undefined it should be considered empty
                                    return {};
                                }
                            }};
                        }

                        // by default disable the consumption
                        old_ret = old_onmousedown.apply(this, arguments);
                        if (old_ret) {
                            ret = {};
                            Object.keys(old_ret).forEach(function (k) {
                                if (k !== 'consume') {
                                    ret[k] = old_ret[k];
                                }
                            });
                            return ret;
                        } else {
                            return old_ret;
                        }
                    }
                }(sm.rootState.onmousedown));

                sm.rootState.newDragForElement = function(grph, elt, subElt) {
                    //var drag;
                    /*
                    EGRAPH      number  0   Object is a module:egraph/core.EGraph
                    NODE        number  1   Object is a module:egraph/core.Node
                    GROUP       number  2   Object is a module:egraph/core.Group
                    CONNECTOR   number  3   Object is a module:egraph/core.Connector
                    EDGE        number  4   Object is an module:egraph/core.Edge
                    */
                    if (elt.type === core.Type.CONNECTOR) {
                        UWA.log("CONNECTOR");
                        if (that.modifyTopology) {
                            transitionDragHandler = new ParamTransitionsDrag.ParamTransitionsDrag(grph, elt, that.userMessagingDrag, that.defaulttransitions, that.forbiddentransitions);
                            that.handledeployIndicator();
                            return transitionDragHandler;
                        }
                        currDate = new Date();
                        currTime = currDate.getTime();
                        diffDate = currTime - that.errorMsgTime;
                        if (diffDate >= 1400) {
                            that.errorMsgTime = currTime;
                            that.userMessagingDrag.add({className: "warning", message: ParamSkeletonNLS.TopologyNotModifiable});
                        }
                        return null;//non modifiyable topology
                    }
                    if (elt.type === core.Type.NODE) {
                       /* if (elt.stateid == "controlBox")
                            return iact.DefaultRootState.prototype.newDragForElement.apply(this, arguments);
                        else*/
                        LifecycleEgraphUtilities.removePropsNode();
                        return null;
                    }

                    if (elt.type === core.Type.EDGE) {
                        UWA.log("edge");
                        that.highlightMatchingChecksInTable(elt.cl1.c.node.stateid, elt.cl2.c.node.stateid);
                        LifecycleEgraphUtilities.buildpropsNode.call(that, elt, that.RenameTransition.bind(that));
                        return iact.DefaultRootState.prototype.newDragForElement.apply(this, arguments);
                    } else {
                        // by default we reuse the DefaultRootState's implementation
                        UWA.log("drag::else");
                        //UWA.log(this);
                        return iact.DefaultRootState.prototype.newDragForElement.apply(this, arguments);
                    }
                };

                //utils.inherit(PropsView, views.HTMLNodeView); //ZUR Desactivate
                /*utils.inherit(ChecksListView, views.HTMLNodeView);*/
                /* edge.prototype.onselect = function(e, selected){
                    if (selected) 
                        return (selectNode(e));  
                    };*/
                wdth = this.grph.views.main.domRoot.clientWidth;
                hgth = this.grph.views.main.domRoot.clientHeight;
                newWdth = 600 + (wdth / 2);
                newhgth = 300 + (hgth / 2);
                vpt = utils.changeViewpointScale(this.grph.views.main.vpt, 0.81, [ newWdth, newhgth ], false);//0.75
                //Handling view point 
                this.grph.views.main.setViewpoint(vpt, true);

                return iDivs;

            },

            onCompleteRequestTopology : function () {
                var deployStsDiv,
                    that = this,
                    statesArray = LifecycleViewUtilities.sortArrayByKey(this.collection._models[0]._attributes.states, "visuOrder"),
                    transitionsArray = this.collection._models[0]._attributes.transitions,
                    areAllChecksDeployed = true,
                    deployIndicatorSts = true, LCChecksDiv, paramScroller;

                UWA.log("onCompleteRequestTopology");
                //var statesArray = this.collection._models[0]._attributes.states;
                //FUN087047 
                that.grph.appCategory = this.collection._models[0]._attributes.appCategory;
                if (that.grph.appCategory === "CBP") {
                    this.rulesTableWdthArr = [15, 10, 10, 30, 10, 15, 5, 5];
                } else {
                    this.rulesTableWdthArr = [15, 10, 10, 35, 20, 5, 5];
                }
                LCChecksDiv = LifecycleViewUtilities.buildLifecycleChecksView(this.rulesTableWdthArr, this.grph.appCategory);
                LCChecksDiv.inject(this.contentDiv);
                
                paramScroller = new Scroller({
                    element: LCChecksDiv
                }).inject(this.contentDiv);
				//IR-905184-3DEXPERIENCER2022x                
                this.addApplyResetToolbar2(this.contentDiv);
                if ((this.nodes !== null) && (this.nodes.length === 0)) {

                    that.policyID = that.collection._models[0]._attributes.id;

                    deployIndicatorSts = that.buildLifecycleGraph(statesArray, transitionsArray);

                    areAllChecksDeployed = that.showCurrentLifecycleChecksList(that.collection._models[0]._attributes.checks,
                                                        that.collection._models[0]._attributes.types);

                    if (!areAllChecksDeployed) { deployIndicatorSts = false; }

                    deployStsDiv = LifecycleViewUtilities.addDeployIndicator(deployIndicatorSts);
                    deployStsDiv.inject(that.contentDiv);
                    //IR-729629-3DEXPERIENCER2020x   
                    this.lastDeployedChecks = LifecycleViewUtilities.getCurrentChecks(this.contentDiv, this.grph.appCategory);

                    Mask.unmask(that.contentDiv);
                }
            },

            buildLifecycleGraph : function (statesArray, transitionsArray) {

                var i, defTRcounter, forbiddenTRcount, deployIndicatorSts,
                    defstateCount = 0,
                    stateCount = 0,
                    xStart = 5,
                    xIncr = this.grph.nodeSpacing,
                    that = this;

                for (i = 0; i < statesArray.length; i++) {
                    if (statesArray[i].isDefault.toString() === "false") {
                        that.nodes[stateCount++] = that.lifecycleStateNode(statesArray[i].id, statesArray[i].stateUserName,
                                                                    statesArray[i].isCritical, statesArray[i].isEnabled,
                                                                    xStart, 40, this.grProps);
                        if (statesArray[i].isDeployed !== true) {
                            deployIndicatorSts = false;
                        } else { //IR-695253-3DEXPERIENCER2019x FD06, 20x FD01
                            that.lastDeployedStates.push(statesArray[i]);
                        }
                        //this.nodes[stateCount++] = LifecycleViewUtilities.newMixNode(statesArray[i].id, statesArray[i].stateUserName, xStart, 40, this.grProps);                                       
                        xStart = xStart + xIncr;
                    } else {
                        /*this.defaultnodes[defstateCount] =  this.tempMixNode(statesArray[i].id, statesArray[i].stateUserName, 
                                                                    statesArray[i].isCritical, statesArray[i].isEnabled,
                                                                    xdefStart, 40, this.grProps); 
                        xdefStart = xdefStart + xIncr;*/
                        this.defaultstates[defstateCount++] = new this.stateElt(statesArray[i].id, statesArray[i].stateUserName,
                                                                             statesArray[i].isCritical, statesArray[i].isEnabled,
                                                                             false);
                    }
                }
                //this.nodes[stateCount++] = propertiesNode("controlBox",-70, 220);              
                //this.nodes[stateCount++] = ChecksNode("controlBox",550, 220);   
                // add the nodes and an edge; we lock the graph update to only do
                // one update when all nodes will have been added          
                this.grph.updateLock();
                try {
                        // adding the nodes
                    this.nodes.forEach(function (n) {
                        if (n.isEnabled == "true") {
                            that.grph.addNode(n);
                        } else {
                            UWA.log(n);
                        }
                    });
                    // We could have used 'children' property on nodes but this would have been 
                    // less readable than using names in that configuration. This is the added
                    // value of having custom data on nodes depending on the type of graph. 

                    defTRcounter = 0;
                    forbiddenTRcount = 0;
                    //<Transition name="ToRelease" sourceState="IN_WORK" targetState="RELEASED" isDefault="false" isForbidden="false" isCritical="false"/>
                    for (i = 0; i < transitionsArray.length; i++) {
                        if ((transitionsArray[i].isDefault.toString() === "false") && (transitionsArray[i].isForbidden.toString() === "false")) {
                            //this line replaced a lot
                            that.drawtransition(transitionsArray[i], that.grph.nodes);

                            if (transitionsArray[i].isDeployed !== true) {
                                deployIndicatorSts = false;
                            } else {//IR-695253-3DEXPERIENCER2019x FD06, 20x FD01
                                that.lastDeployedTransitions.push(transitionsArray[i]);
                            }

                        } else if (transitionsArray[i].isDefault.toString() === "true") {
                            this.defaulttransitions[defTRcounter++] = new that.transitionElt(transitionsArray[i].sourceState, transitionsArray[i].targetState,
                                                                                                transitionsArray[i].name, transitionsArray[i].nlsname,
                                                                                                transitionsArray[i].isCritical, false);
                        } else if (transitionsArray[i].isForbidden == "true") {
                            this.forbiddentransitions[forbiddenTRcount++] = new that.transitionElt(transitionsArray[i].sourceState, transitionsArray[i].targetState,
                                                                                                transitionsArray[i].name, transitionsArray[i].name,
                                                                                                false, false);
                        }
                    }
                } finally {
                    this.grph.updateUnlock();
                }

                return deployIndicatorSts;
            },

            //show: function () {},
            addNewEdge : function (stub, iSignature, iSignatureNLS, isCritical, c1, c2) {
                 //var edge = this.buildEdge(stub);    
                var edge = ParamEdgeView.buildEdge(stub, iSignature);
                edge.signature = iSignature;
                edge.signatureNLS = iSignatureNLS;
                edge.DeployedSig = iSignatureNLS; //IR-695253-3DEXPERIENCER2019x FD06, 20x FD01
                edge.isCritical = isCritical;
                this.grph.addEdge(c1, c2, edge);// add the edge to the graph
                return edge;
            },

            handleRenamingIssues : function(iNode, that, iEnteredName) {
                //UWA.log(iNode);
                var errorMsg, currDate, currTime, diffDate,
                    checkNameResult;
                    //IR-695253-3DEXPERIENCER2019x FD06, 20 FD01
                if ((iEnteredName != null) /*&&  (iEnteredName != "")*/) {// && (enteredname!=previousName)
                    checkNameResult = that.testStateNamingRules(iNode, iEnteredName, that);
                    if (checkNameResult === "ok") {
                        that.renameSelectedState(that, iNode.stateid, iEnteredName);
                        iNode.views.main.display.elt.removeClassName("my-error-node");
                        that.handledeployIndicator();
                        LifecycleViewUtilities.enableApplyButton(that.contentDiv);
                    } else { //IR-695253-3DEXPERIENCER2019x FD06, 20x FD01
                        errorMsg = ParamSkeletonNLS.SpecialCharactersMessage;
                        if (checkNameResult === "alreadyUsedName") { errorMsg = ParamSkeletonNLS.StateNameAlreadyUsed.format(iEnteredName); }
                        if (checkNameResult === "emptyString") { errorMsg = ParamSkeletonNLS.EmptyValueNotAllowed; }
                        currDate = new Date();
                        currTime = currDate.getTime();
                        diffDate = currTime - that.errorMsgTime;
                        if (diffDate >= 1400) {
                            that.errorMsgTime = currTime;
                            that.userMessaging.add({className: "error", message: errorMsg});
                        }
                        iNode.views.main.display.elt.addClassName("my-error-node");
                        LifecycleViewUtilities.disableApplyButton(that.contentDiv);
                    }
                }
            },

            testStateNamingRules : function (iNode, enteredname, that) {
                var e;
                //IR-695253-3DEXPERIENCER2019x FD06, 20x FD01 : added test for empty state name
                enteredname = enteredname.trim();
                if(enteredname.length === 0) {
                    return "emptyString";
                }
                for (e = that.grph.nodes.first; e; e = e.next) {
                    if ((e.name === enteredname) && (e.stateid != iNode.stateid)) {
                        return "alreadyUsedName";
                    }
                }
                if (ParametersLayoutViewUtilities.testSpecialCharacters(enteredname)) { return "specialCharacterName"; }
                return "ok";
            },

            renameSelectedState : function(that, stateid, newStateName) {
                var e, i,
                    tbodyref = that.contentDiv.getElements('.paramtbody')[0],
                    listofLines = tbodyref.children,
                    nbofLines = listofLines.length;

                for (e = that.grph.nodes.first; e; e = e.next) {
                    if (e.stateid == stateid) {
                        e.name = newStateName;
                        break;
                    }
                }

                for (i = 2; i < nbofLines; i++) {
                    if (listofLines[i].cells[1].value === stateid) {
                        listofLines[i].cells[1].children[0].innerText = newStateName;
                    }

                    if (listofLines[i].cells[2].value === stateid) {
                        listofLines[i].cells[2].children[0].innerText = newStateName;
                    }
                }
            },

            testTransitionRenamingRules : function (newName) {

                if (this.grph.appCategory === "VPM") { //IR-695253-3DEXPERIENCER2019x FD06, 20x FD01
                    newName = newName.trim();
                    if(newName.length === 0) {
                        return "emptyString";
                    }
                }
                if (ParametersLayoutViewUtilities.testSpecialCharacters(newName)) { return "specialCharacterName"; }
                return "S_OK";
            },
            //IR-695253-3DEXPERIENCER2019x FD06, 20x FD01 : function signature change
            RenameTransition : function (elt, iElm, isOnFinalChange) {
                var currDate, currTime, diffDate, errorMsg, testResult, iValue = iElm.getValue();
                testResult = this.testTransitionRenamingRules(iValue);
                if (testResult === "S_OK") {
                    elt.signatureNLS = iValue; //elt.signature = iValue;
                    this.handledeployIndicator();
                    LifecycleViewUtilities.enableApplyButton(this.contentDiv);
                } else {
                    if (testResult === "specialCharacterName") {
                        errorMsg = ParamSkeletonNLS.SpecialCharactersMessage;
                    } else {
                        errorMsg = ParamSkeletonNLS.EmptyValueNotAllowed;
                         elt.signatureNLS = elt.DeployedSig;//IR-695253-3DEXPERIENCER2019x FD06, 20x FD01
                    }
                    LifecycleViewUtilities.disableApplyButton(this.contentDiv);

                    currDate = new Date();
                    currTime = currDate.getTime();
                    diffDate = currTime - this.errorMsgTime;
                    if (diffDate >= 1400) {
                        this.errorMsgTime = currTime;
                        this.userMessaging.add({className: "error", message: errorMsg});
                    }

                    if (isOnFinalChange) {
                        LifecycleViewUtilities.enableApplyButton(this.contentDiv);
                        LifecycleEgraphUtilities.removePropsNode();
                    }
                }
            },


            /*handleSignatureOnRename : function (elt, iValue) {
                var currLabel, 
                    that = this;

            if (that.model.get("modifyTopology")) {
                currLabel = elt.signature;         
                 
                if (iValue !== null) {                                       
                    if (testNameForSpecialChar(enteredname)==true)
                    {   
                        alert("<SpecialCharactersMessage>");
                        return;
                    }
                    
                    var policyType = currPolicyDescriptor.appType;                  
                    
                    if ( (policyType == "VPM") && (testNameForBlankChar(enteredname)==true)) {
                        UWA.log("<blankCharactersMessage>");           
                        return;
                    }
                    
                    if (enteredname !== "") {                                   
                       elt.signature = iValue;
                    }
                }                       
            },*/

            /*
            function testNameForBlankChar(iString) {   
                var iChars =" ";
                for (var i = 0; i < iString.length; i++)                        
                    if (iChars.indexOf(iString.charAt(i)) != -1)    
                        return true;
                
                return false;       
            }
            
            function trimGeneratedName(iString) {
                return(iString.replace(/ /g,''));
            }               
            }*/


             /**
             * Factory of node with two inputs and one output (a 'mix' node)
             * @param {number} x
             * @param {number} y
             * @returns {module:egraph/core.Node} the new node
             */
            lifecycleStateNode : function (nodeid, nlsName, isCritical, isEnabled, x, y, graphProps) {
                var stateNodeView,
                    node = new core.Node(),  // create the node
                    offset;
                //  node.views.main = new fctNodeView();//new views.HTMLNodeView();//default      
                // ParamNodeView.ParamNodeView.bind(this);
                // var myView = new ParamNodeView.ParamNodeView(that.handleRenamingIssues).bind(this);
                // utils.inherit(myView, views.HTMLNodeView);

                stateNodeView  = new ParamNodeView.ParamNodeView(this, this.renameStates, this.modifyTopology);
                //stateNodeView  = ParamNodeView.ParamNodeView.call(this, this, this.model.get("renameStates"), this.model.get("modifyTopology"));

                node.views.main = stateNodeView;//new views.HTMLNodeView();//default           
                node.data = {};//object will be used to store references to connectors
                node.stateid = nodeid;
                node.name = nlsName;
                node.isCritical = isCritical;
                node.isEnabled  = isEnabled;
                // use multiset to force the dispatch of properties change notifications
                // to group all modifications of nodes properties (useless here since
                // nobody listen to the node yet; but good to keep in mind)
                node.multiset('left', x,
                              'top', y,
                              'width', graphProps.nodewidth,
                              'height', graphProps.nodeheight);

                // create connectors and store their eferences in the data object of the node
                offset = Math.round(graphProps.nodeheight / 2);
                node.data.left = LifecycleEgraphUtilities.createConnector(core.BorderCstr.LEFT, offset);
                node.appendConnector(node.data.left);
                node.data.right = LifecycleEgraphUtilities.createConnector(core.BorderCstr.RIGHT, offset);
                node.appendConnector(node.data.right);

                offset = Math.round(graphProps.nodewidth / 2);
                node.data.top = LifecycleEgraphUtilities.createConnector(core.BorderCstr.TOP, offset);
                node.appendConnector(node.data.top);
                node.data.bottom = LifecycleEgraphUtilities.createConnector(core.BorderCstr.BOTTOM, offset);
                node.appendConnector(node.data.bottom);
                return node;
            },

            buildEdge : function (stub) {
                var edge = new core.Edge(),
                    currstepGeometry = new StepGx.ParamStepGeometry(stub);//   StepGeometry(stub);  
                // autoBezierGeometry.minTangentLength = autoBezierGeometry.minTangentLength+20;             
                // edge.set('geometry', autoBezierGeometry);

                UWA.log("Setting stepGeometry.stubScenario = " + currstepGeometry.stubScenario);
                edge.set('geometry', currstepGeometry);
                 //edge.views.main = new views.SVGEdgeView();
                edge.views.main = new views.SVGEdgeView('arrow-edge');

                //edge.views.main = new LabelEdgeView.LabelEdgeView();
                return edge;
            },

            showCurrentLifecycleChecksList : function(iListofChecks, iListofTypes) {
                var i, iTypeNLS, additionalinfoNLS,
                    tbodyref = this.contentDiv.getElements('.paramtbody'),//tbodytest = this.contentDiv.getElements('tbody');
                    nbofChecks = iListofChecks.length,
                    allChecksDeployed = true;

                for (i = 0; i < nbofChecks; i++) {
                    iTypeNLS = this.getTypeNLS(iListofChecks[i].objType, iListofTypes);
                    //additionalInfoNLS = ParamSkeletonNLS.ConsiderChildType + ":" + complementarySelect.getSelection()[0].label;
                    additionalinfoNLS = iListofChecks[i].additionalProps;

                    if ((iListofChecks[i].ruleID === "RejectIfAnyOfTheCommonlyGovernedChildNotOnTargetState") ||
                            (iListofChecks[i].ruleID === "RejectIfAttributeNotValuated")) {
                        if (iListofChecks[i].additionalProps === "ALL") {//NZV:IR-541898 
                            additionalinfoNLS = ParamSkeletonNLS.ConsiderKey.format(ParamSkeletonNLS.AllChildrenTypes);
                        } else {
                            additionalinfoNLS = ParamSkeletonNLS.ConsiderKey.format(this.getTypeNLS(iListofChecks[i].additionalProps, iListofTypes));
                        }
                    }
                    //FUN087047 : added promote
                    this.addChecktoTable(tbodyref[0],
                        iListofChecks[i].objType, iTypeNLS,
                        iListofChecks[i].sourceState, this.getUserStateNameforNode(this.grph.nodes, iListofChecks[i].sourceState),
                        iListofChecks[i].targetState, this.getUserStateNameforNode(this.grph.nodes, iListofChecks[i].targetState),
                        iListofChecks[i].ruleID,
                        iListofChecks[i].additionalProps, additionalinfoNLS,
                        iListofChecks[i].isDeployed, iListofChecks[i].promote);

                    if (!iListofChecks[i].isDeployed) { allChecksDeployed = false; }
                }
                //BuildInitialTable
                return allChecksDeployed;
            },

            getTypeNLS : function (iType, iTypesList) {
                var i;
                for (i = 0; i < iTypesList.length; i++) {
                    if (iTypesList[i].typeID === iType) {
                        return iTypesList[i].typeNLS;
                    }
                }
                return iType;//nothin found, returning original
            },

            addChecktoTable : function(tableID, iTypeID, iTypeNLS, ifromStateID, ifromStateNLS, itoStateID, itoStateNLS, iRuleID, iAdditionalInfo, iAdditionalInfoNLS, isDeployed, iPromote) {
                var ruleTextID, ruleTooltipID, rulePop,
                    iRuleNLS, iRuleTooltip,
                    iCell, lineCheck,
                    iAdditionalInfoUI,
                    deleteSpan, removeLCCheckButton, deletePop,
                    iconChoice = 'cog',
                    k = 0,
                    that = this,
                    iconColor = "orange",//to isDeployed
                    ititle = ParamSkeletonNLS.NotYetDeployed, //NZV:IR-613083-3DEXPERIENCER2019x
                    removelts = [];

                lineCheck = UWA.createElement('tr').inject(tableID); //Adding the line (type)                
                iCell = UWA.createElement('td', {
                    'width' : that.rulesTableWdthArr[k++].toString() + '%',
                    'Align' : 'left'
                }).inject(lineCheck);//object type

                iCell.value = iTypeID;
                UWA.createElement('p', {text: iTypeNLS, 'class': ''}).inject(iCell);

                iCell = UWA.createElement('td', {
                    'width' : that.rulesTableWdthArr[k++].toString() + '%',
                    'Align' : 'left'
                }).inject(lineCheck);//sourceState   

                iCell.value = ifromStateID;
                UWA.createElement('p', {text: ifromStateNLS, 'class': ''}).inject(iCell);

                iCell = UWA.createElement('td', {
                    'width' : that.rulesTableWdthArr[k++].toString() + '%',
                    'Align' : 'left'
                }).inject(lineCheck);//target state   

                iCell.value = itoStateID;
                UWA.createElement('p', {text: itoStateNLS, 'class': ''}).inject(iCell);

                ruleTextID = iRuleID + "Text";
                ruleTooltipID = iRuleID + "Tooltip";
                iRuleNLS = ParamSkeletonNLS[ruleTextID];
                iRuleTooltip = ParamSkeletonNLS[ruleTooltipID];

                iCell = UWA.createElement('td', {
                    'width' : that.rulesTableWdthArr[k++].toString() + '%',
                    'Align' : 'left'
                }).inject(lineCheck);//Rule

                iCell.value = iRuleID;
                UWA.createElement('p', {text: iRuleNLS, 'class': ''}).inject(iCell);
                /*
                var ruleSpan = UWA.createElement('span', {
                                'class' : 'fonticon fonticon-info'        
                            }).inject(iCell);       
                ruleSpan.setStyle("color", "black") ;  */
                rulePop = new Popover({
                    target: iCell,
                    trigger : "hover",
                    animate: "true",
                    position: "top",
                    body: iRuleTooltip,
                    title: ''//iParamObj.nlsKey
                });
                //FUN087047 : Promote option only for ER policies
                if (that.grph.appCategory === "CBP") {
                    if (iPromote !== undefined) {
                        iCell = UWA.createElement('td', {
                            'width' : that.rulesTableWdthArr[k++].toString() + '%',
                            'Align' : 'left'
                        }).inject(lineCheck);//Rule

                        iCell.value = iPromote;
                        
                        if(iPromote === false) {
                            UWA.createElement('p', {text: ParamSkeletonNLS.Demote, 'class': ''}).inject(iCell);
                        } else {
                            UWA.createElement('p', {text: ParamSkeletonNLS.Promote, 'class': ''}).inject(iCell);
                        }
                    }
                }
                //iAdditionalInfo
                iCell = UWA.createElement('td', {
                    'width' : that.rulesTableWdthArr[k++].toString() + '%',
                    'Align' : 'left'
                }).inject(lineCheck);

                iCell.value = iAdditionalInfo;
                iAdditionalInfoUI = iAdditionalInfoNLS;

                if (iAdditionalInfo === "NOINFO") { iAdditionalInfoUI = ""; }

                UWA.createElement('p', {text: iAdditionalInfoUI, 'class': ''}).inject(iCell);

                iCell = UWA.createElement('td', {
                    'width' : that.rulesTableWdthArr[k++].toString() + '%',
                    'Align' : 'left'
                }).inject(lineCheck);
                //NZV - IR-666515-3DEXPERIENCER2019x
                removelts = ParametersLayoutViewUtilities.createActionElements(ParamSkeletonNLS.removePromotionRuleTxt, true);
                deleteSpan = removelts[0];
                deleteSpan.inject(iCell);
                removeLCCheckButton = removelts[1];
                deletePop = removelts[2];

                if (isDeployed === true) {
                    iconColor = "green";
                    ititle = ParamSkeletonNLS.Deployed; //NZV-IR-628927-3DEXPERIENCER2019x
                    iconChoice = 'check';
                } else if (isDeployed === false) {
                    iconColor = "orange";
                } else {//"newcheck"
                    lineCheck.addClassName("info");
                /* lineCheck.scrollIntoView(true);////lineCheck.focus();
                    iCell0.scrollIntoView(); iCell0.scrollIntoView(true);*/ //IE pas terrible du tout
                    //lineCheck.scrollTop = tableID.scrollHeight;
                    //lineCheck.parentNode.scrollTop = lineCheck.offsetTop; // marche pas
                }

                iCell = ParametersLayoutViewUtilities.buildImgCell(iconChoice, '1.5', iconColor, ititle, that.rulesTableWdthArr[k++].toString() + '%', 'center');
                iCell.inject(lineCheck);
                iCell.value = isDeployed;

                /* iCell = UWA.createElement('td', {
                    'Align' : 'center'
                    // 'title' : ititle,
                }).inject(lineCheck);
                
                removePop = new Popover({
                    class: 'parampopover',
                    target: iCell,
                    trigger : "hover",
                    animate: "true",
                    position: "top",
                    body: ititle,
                    title: ''//iParamObj.nlsKey
                });

                removeCheckButton = new Button({
                    className: 'close',
                    id  : 'togglepropsBox',
                    icon: 'fonticon fonticon-cancel fonticon-1.5x',//value: 'Button', //fonticon-cancel  fonticon-minus-circled    
                    attributes: {
                        disabled: false,
                        'aria-hidden' : 'true'
                    //  text : ParamWdgNLS.Apply 
                    },
                    events: {
                        onClick: function () {
                               //selectedObjpropsDiv.setStyle("visibility", "hidden");
                            removePop.destroy();
                            lineCheck.remove();
                            that.handledeployIndicator();
                        }
                    }
                }).inject(iCell);*/

                removeLCCheckButton.addEvent("onClick", function () {
                    deletePop.destroy();
                    lineCheck.remove();
                    that.handledeployIndicator();
                });

                //removeCheckButton.getContent().setStyle("color", iconColor);//"#1D7294"
            },

            highlightMatchingChecksInTable : function (iSourceState, iTargetState) {
                var i,
                    tbodyref = this.contentDiv.getElements('.paramtbody')[0],
                    listofLines = tbodyref.children,
                    nbofLines = listofLines.length;

                LifecycleViewUtilities.clearPreviousChecksHighlighting(listofLines);

                for (i = 2; i < nbofLines; i++) {
                    if ((listofLines[i].cells[1].value === iSourceState)
                            && (listofLines[i].cells[2].value === iTargetState)) {
                        listofLines[i].addClassName("info");//info
                    }
                }
            },

            /*getNodeIndex : function (iNodes, iNodeID) {
                var i,
                    nodesLength = iNodes.length;
                for (i = 0; i < nodesLength; i++) {
                    if (iNodes[i].stateid == iNodeID) {
                        return i;
                    }
                }
                return -1;
            },*/

            getUserStateNameforNode: function(iNodeList, iNodeID) {
                var userStateName = iNodeID,
                    matchingNode = LifecycleViewUtilities.getMatchingNode(iNodeList, iNodeID);

                if (matchingNode !== null) { userStateName = matchingNode.name; }
                return userStateName;
            },

            applyParams : function () {
                var e, i, itr,
                    stateslist, transitionList,
                    iRemStates, nbofRemovedStates,
                    datatoSend,
                    that = this,
                    state = [],
                    transition = [], isSomethingChanged = false, isAnyChangedInTransition = false,
                    isAnyChangeInStates = false, isAnyChangeInChecks = false, countSameTranistion = 0,
                    j = 0, sameCheckCount = 0, tbodyreflist, imgCell;

                if (this.checksBeforeDeploy()) {
                    stateslist = that.grph.nodes;
                    //
                    for (e = stateslist.first; e; e = e.next) {
                        state.push({
                            id: e.stateid,
                            stateUserName :  e.name,
                            isCritical : e.isCritical == "false" ? false : true,
                            isEnabled : true
                        });
                    }
                    //Check For Deleted States
                    iRemStates = this.getRemovedStatesList();
                    nbofRemovedStates = iRemStates.length;

                    for (i = 0; i < nbofRemovedStates; i++) {
                        state.push({
                            id : iRemStates[i].stateid,
                            stateUserName:  iRemStates[i].name,
                            isCritical : iRemStates[i].isCritical === "false" ? false : true,
                            isEnabled : false
                        });
                    }

                    transitionList = that.grph.edges;
                    for (itr = transitionList.first; itr; itr = itr.next) {
                        transition.push({
                            name : itr.signature,
                            nlsname : itr.signatureNLS,
                            sourceState : itr.cl1.c.node.stateid,
                            targetState : itr.cl2.c.node.stateid,
                            isCritical  : itr.isCritical.toString() == "false" ? false : true
                        });
                    }
                    //ZUR IR-712839-3DEXPERIENCER2020x : .toString()
                    //NZV IR-695253-3DEXPERIENCER2019x FD06  20x FD01: Checkng for any modification
                    if(true) {
                         //Check addition & removal of state
                        if(this.lastDeployedStates.length !== state.length) {
                            //Modification in number of transitions 
                            isAnyChangeInStates = true;
                        }
                        //Check NLS name change for states
                        if(isAnyChangeInStates !== true) {
                            //further test
                            for(i = 0; i <  state.length; i++) {
                                
                                for(j = 0; j < this.lastDeployedStates.length; j++) {
                                    if (state[i].id === this.lastDeployedStates[j].id) {
                                        if(state[i].stateUserName === this.lastDeployedStates[j].stateUserName ) {
                                            isAnyChangeInStates = false;
                                            break;
                                        } else {
                                            isAnyChangeInStates = true;
                                             break;
                                        }
                                       
                                    }
                                }
                                if(isAnyChangeInStates === true) {
                                    break;
                                }
                            }
                        }
                    }

                    if (isAnyChangeInStates === false) {
                       //Check adition or removal of transition
                        if (this.lastDeployedTransitions.length !== transition.length) {
                            //Modification in number of transitions 
                            isAnyChangedInTransition = true;
                        }
                        if (isAnyChangedInTransition !== true) {
                            //Check for any signature change/name change of a transition.                           
                            for(i = 0; i <  transition.length; i++) {
                                for (j = 0; j < this.lastDeployedTransitions.length; j++) {
                                    if (transition[i].sourceState === this.lastDeployedTransitions[j].sourceState &&
                                        transition[i].targetState === this.lastDeployedTransitions[j].targetState &&
                                        transition[i].name === this.lastDeployedTransitions[j].name /*not required but save side*/) {
                                        if (transition[i].nlsname === this.lastDeployedTransitions[j].nlsname ) {
                                            isAnyChangedInTransition = false;
                                            countSameTranistion++;
                                            break;
                                        } else {
                                            isAnyChangedInTransition = true;
                                             break;
                                        }
                                    }
                                }
                                if (isAnyChangedInTransition === true) {
                                    break;
                                }
                            }

                            if (isAnyChangedInTransition === false) { 
                                if(countSameTranistion !== this.lastDeployedTransitions.length)  
                                        isAnyChangedInTransition = true;
                            }

                        }
                    }
                    datatoSend = {
                        id          : that.policyID,
                        state       : state,
                        transition  : transition,
                        check       : LifecycleViewUtilities.getCurrentChecks(this.contentDiv, this.grph.appCategory) //FUN087047
                    };
                    if (isAnyChangeInStates === false && isAnyChangedInTransition === false) {
                        //Check addtion or removal of rule
                        if (this.lastDeployedChecks.length !== datatoSend.check.length) {
                            //Modification in number of transitions 
                            isAnyChangeInChecks = true;
                        }
                        if (isAnyChangeInChecks === false) {
                             //Check for any signature change/name change of a transition.                           
                            for (i = 0; i <  datatoSend.check.length; i++) {
                                for (j = 0; j < this.lastDeployedChecks.length; j++) {
                                    if (datatoSend.check[i].objType === this.lastDeployedChecks[j].objType &&
                                        datatoSend.check[i].fromState === this.lastDeployedChecks[j].fromState &&
                                        datatoSend.check[i].toState === this.lastDeployedChecks[j].toState &&
                                        datatoSend.check[i].ruleID === this.lastDeployedChecks[j].ruleID  &&
                                        datatoSend.check[i].additionalProps === this.lastDeployedChecks[j].additionalProps) {
                                        sameCheckCount++;
                                        break;
                                    }
                                }
                                if (isAnyChangeInChecks === true) {
                                    break;
                                }
                            }
                            if (isAnyChangeInChecks === false) {
                                if (sameCheckCount !== datatoSend.check.length)
                                    isAnyChangeInChecks = true;
                            }
                        }
                     }
                    isSomethingChanged = isAnyChangedInTransition || isAnyChangeInStates || isAnyChangeInChecks;
                    if(isSomethingChanged === false) {
                        this.userMessaging.add({className: "error", message: ParamSkeletonNLS.NoChangeFound});
                        tbodyreflist = this.contentDiv.getElements('.indicatortbody');
                        imgCell = LifecycleViewUtilities.getNamingDeployCellSts(tbodyreflist);
                        LifecycleViewUtilities.updateIcon(true, imgCell);
                    }
                        //alert("No changed found");
                    UWA.log(datatoSend);
                    //Comment to tempratory 

                    if(isSomethingChanged === true) {
                        // alert("Something changed ");
                        Mask.mask(that.contentDiv);
                        ParameterizationWebServices.postLifecycleParams.call(this, datatoSend,
                            this.onDeployLCFailure.bind(this), this.onDeployLCSuccess.bind(this,datatoSend));
                    }

                }
            },

            checksBeforeDeploy : function () {
                if (!LifecycleViewUtilities.checkforSingletonStates(this.grph.nodes, this.grph.edges)) {
                    this.userMessaging.add({className: "error", message: ParamSkeletonNLS.SingletonStateText});
                    return false;
                }
                return true;
            },

            launchDeployProcess : function () {
                UWA.log(this.grph);
            },

            resetParamsinSession : function () {
                Mask.mask(this.contentDiv);
                LifecycleViewUtilities.resetLifecycleChecks(this.contentDiv.getElements('.paramtbody')[0].children);//Checks 
                this.resetStates();//States
                this.resetTransitions();//Transitions
                this.handledeployIndicator();//deploy indicator
                LifecycleViewUtilities.enableApplyButton(this.contentDiv);//Apply Button, if it was disabled before
                Mask.unmask(this.contentDiv);
            },

            onDeployLCSuccess : function (data) {
                UWA.log("onDeployLCSuccess");
                UWA.log(data);
                var imgCell, tbodyreflist, transitionList, itr, i;
                this.handleChecksAfterDeploy();
                Mask.unmask(this.contentDiv);
                this.userMessaging.add({className: "success", message: ParamSkeletonNLS.LCParamsDeploySuccess});
                //IR-695253-3DEXPERIENCER2019x FD06, 20x FD01: update deployed parameter for UI
                this.lastDeployedTransitions = data.transition;
                this.lastDeployedStates = data.state;
                this.lastDeployedChecks = data.check;
                //UI update 
                transitionList = this.grph.edges;
                for ( itr = transitionList.first; itr; itr = itr.next) {
                    for ( i = 0 ; i < this.lastDeployedTransitions.length; i++) {

                        if (itr.signature === this.lastDeployedTransitions[i].name) {
                            itr.signatureNLS = this.lastDeployedTransitions[i].nlsname;
                            itr.DeployedSig = this.lastDeployedTransitions[i].nlsname;
                            break;
                        }
                    } 
                }
                tbodyreflist = this.contentDiv.getElements('.indicatortbody');
                imgCell = LifecycleViewUtilities.getNamingDeployCellSts(tbodyreflist);
                LifecycleViewUtilities.updateIcon(true, imgCell);

                LifecycleViewUtilities.UpdateLifecycleChecksStsInTable(this.contentDiv);//update icons
            },

            onDeployLCFailure : function (data) {
                UWA.log("onDeployLCFailure");
                UWA.log(data);
                Mask.unmask(this.contentDiv);
                this.userMessaging.add({className: "error", message: ParamSkeletonNLS.LCParamsDeployFailure});

                var tbodyreflist = this.contentDiv.getElements('.indicatortbody'),
                    imgCell = LifecycleViewUtilities.getNamingDeployCellSts(tbodyreflist);
                LifecycleViewUtilities.updateIcon(false, imgCell);
            },

            handleChecksAfterDeploy : function () {
                var i,//listofPopoversButtons,
                    tbodyref = this.contentDiv.getElements('.paramtbody')[0],
                    //listofLines = tbodyref.children,
                    //listofCloseButtons = tbodyref.getElements('.close');
                    listofCloseButtons = tbodyref.getElements('.cog');
                //
                for (i = 0; i < listofCloseButtons.length; i++) {
                    listofCloseButtons[i].setStyle("color", "green");
                }

                //listofPopoversButtons = tbodyref.getElements('.parampopover');
                /*removeCheckButton.getContent().setStyle("color",iconColor);//"#1D7294"  */
                /*for (var i=0; i<listofCloseButtons.length; i++)
                    listofCloseButtons[i].setStyle("color","green");*/
                //setBody
                //UWA.log(listofCloseButtons);
            },

            /*selectNode : function (e) {
                UWA.log("Node Selected");
               // LifecycleView.buildpropsNode(e, RenameState, RemoveState);
            },*/

            resetStates : function() {
                var i, defstateIndex,
                    nodesLength = this.nodes.length;

                for (i = 0; i < nodesLength; i++) {
                    this.nodes[i].remove();
                }
                for (i = 0; i < nodesLength; i++) {
                    defstateIndex = this.getDefaultStateIndex(this.nodes[i].stateid);
                    if (defstateIndex >= 0) {
                        this.nodes[i].name = this.defaultstates[i].name;
                        this.nodes[i].isEnabled = this.defaultstates[i].isEnabled;
                    }
                    this.grph.addNode(this.nodes[i]);
                }
            },

            getDefaultStateIndex: function (stateid) {
                var i,
                    defstatesLength = this.defaultstates.length;
                //
                for (i = 0; i < defstatesLength; i++) {
                    if (stateid == this.defaultstates[i].stateid) {
                        return i;
                    }
                }
                return -1;
            },

            /*
            resetTransitions : function ()
            {            
                var defTransitions = this.defaulttransitions;
                var nbofDefaultTransitions = defTransitions.length;

                for (var i=0; i<nbofDefaultTransitions; i++)
                {
                    var ifromNode = this.getNodeIndex(this.defaultnodes, defTransitions[i].sourceState);
                    var itoNode = this.getNodeIndex(this.defaultnodes, defTransitions[i].targetState);  

                    var xdiff = this.defaultnodes[itoNode].left - this.defaultnodes[ifromNode].left;                            
                    var iPositions = Math.round(xdiff/this.grph.nodeSpacing);

                    if  ((ifromNode>=0) && (itoNode>=0))
                    {
                        if (iPositions == 1)
                                this.addNewEdge(iPositions, defTransitions[i].name, defTransitions[i].isCritical, this.defaultnodes[ifromNode].data.right, this.defaultnodes[itoNode].data.left);
                            else if (iPositions <0)
                                this.addNewEdge(iPositions, defTransitions[i].name, defTransitions[i].isCritical, this.defaultnodes[ifromNode].data.bottom, this.defaultnodes[itoNode].data.bottom);
                            else
                                this.addNewEdge(iPositions, defTransitions[i].name, defTransitions[i].isCritical, this.defaultnodes[ifromNode].data.top, this.defaultnodes[itoNode].data.top);
                    }
                }              
            },*/

            resetTransitions : function () {
                var i,
                    nbofTransitions = this.defaulttransitions.length;

                for (i = 0; i < nbofTransitions; i++) {
                    this.drawtransition(this.defaulttransitions[i], this.grph.nodes);
                }
            },

            drawtransition : function(iTransition, iNodesList) {
                var xdiff, iPositions,
                    fromNode = LifecycleViewUtilities.getMatchingNode(iNodesList, iTransition.sourceState),
                    toNode   = LifecycleViewUtilities.getMatchingNode(iNodesList, iTransition.targetState);

                if ((fromNode !== null) && (toNode !== null)) {
                    xdiff = toNode.left - fromNode.left;
                    iPositions = Math.round(xdiff / this.grph.nodeSpacing);

                    if (iPositions === 1) {
                        this.addNewEdge(iPositions, iTransition.name, iTransition.nlsname, iTransition.isCritical, fromNode.data.right, toNode.data.left);
                    } else if (iPositions < 0) {
                        this.addNewEdge(iPositions, iTransition.name, iTransition.nlsname, iTransition.isCritical, fromNode.data.bottom, toNode.data.bottom);
                    } else {
                        this.addNewEdge(iPositions, iTransition.name, iTransition.nlsname, iTransition.isCritical, fromNode.data.top, toNode.data.top);
                    }
                } else {
                    UWA.log("prb with " + iTransition.sourceState + " or " + iTransition.targetState);
                }
            },

            addApplyResetToolbar2 : function (insertdivID) {
                var applyDiv, tableButtons, lineButtons, buttonApplyCell, applyBttn,
                    buttonResetCell, resetBbttn,
                    that = this;

                applyDiv =  UWA.createElement('div', {
                    'id': 'ApplyResetDivLC'
                }).inject(insertdivID);

                tableButtons = UWA.createElement('table', {
                    'class' : '',
                    'id' : '',
                    'width' : '100%'
                }).inject(applyDiv);

                lineButtons = UWA.createElement('tr').inject(tableButtons);  // tbody

                buttonApplyCell = UWA.createElement('td', {
                    'width' : '50%',
                    'Align' : 'center'
                }).inject(lineButtons);

                applyBttn =  new Button({
                    className: 'primary',
                    id : 'buttonExport',
                    icon : 'export',//'download'//value: 'Button',             
                    attributes: {
                        disabled: false,
                        title: ParamSkeletonNLS.ApplyLifecyleTooltip,
                        text : ParamSkeletonNLS.Apply
                    },
                    events: {
                        onClick: function () {
                            that.applyParams();
                        }
                    }
                }).inject(buttonApplyCell);
                //
                applyBttn.getContent().setStyle("width", 110);
                //
                buttonResetCell = UWA.createElement('td', {
                    'width' : '50%',
                    'Align' : 'center'
                }).inject(lineButtons);
                //
                resetBbttn = new Button({
                    className: 'warning',
                    icon: 'loop',
                    attributes: {
                        disabled: false,
                        title: ParamSkeletonNLS.ResetLifecycle,
                        text : ParamSkeletonNLS.Reset
                    },
                    events: {
                        onClick: function () {
                            that.resetParamsinSession();//testPreviewBlock();                               
                        }
                    }
                }).inject(buttonResetCell);
                //
                resetBbttn.getContent().setStyle("width", 110);
            },

			//NZV - IR-499665-3DEXPERIENCER2017x/IR-538770-3DEXPERIENCER2018x 
            removeElement : function () {
                var e, stateNodeFound = false, eltRemoved = false, isCritical = false;
                for (e = this.grph.selection.first; e; e = e.nextSel) {
                    if ((e.type === core.Type.NODE) &&
                            !e.hidden) {
                        eltRemoved = true;
                        if (e.isCritical == "true") {
                            this.userMessaging.add({
                                className: "warning",
                                message : ParamSkeletonNLS.StateCriticalText.format(e.name)
                            });
                            isCritical = true;
                            break;
                        } else {
                            stateNodeFound = true;
                        }
                    } else if ((e.type === core.Type.EDGE) && !e.hidden) {
                        eltRemoved = true;
                    }
                }
                if (!isCritical && eltRemoved && stateNodeFound) {
                    //IR-689657-3DEXPERIENCER2019x/20x
                    ParametersLayoutViewUtilities.showContextualDeleteModal(widget.body, "delAttrModal", ParamSkeletonNLS.removeStatesWarning, 
                        ParamSkeletonNLS.YesText,  ParamSkeletonNLS.NoText, ParamSkeletonNLS.Warning+"!", this.removeStatesAndTransitions, this);
                } else if (!isCritical && eltRemoved) {
                    this.removeStatesAndTransitions(this);
                } else if (!eltRemoved) {
                    this.userMessaging.add({className: "warning", message: ParamSkeletonNLS.NoObjectedSelectedrmText});
                }
            },

            removeStatesAndTransitions: function (that) {
                var e, cantrmTransition,
                    //eltRemoved = false,
                    eltstoDelete = [],
                    tbodyref = that.contentDiv.getElements('.paramtbody')[0];

                if (that.model.get("modifyTopology")) {

                    LifecycleEgraphUtilities.removePropsNode();

                    for (e = that.grph.selection.first; e; e = e.nextSel) {
                        if ((e.type === core.Type.NODE  ||
                                e.type === core.Type.EDGE) &&
                                !e.hidden) {

                            eltstoDelete.push(e);
                        }
                    }

                    that.grph.updateLock();
                    try {
                        UWA.log("delete");
                        eltstoDelete.forEach(function (e) {

                            if (e.type === core.Type.NODE) {
                                //eltRemoved = true;
                                // 
                                /*if (e.isCritical == "true") {
                                    that.userMessaging.add({
                                        className: "warning",
                                        message : ParamSkeletonNLS.StateCriticalText.format(e.name)
                                    });
                                } else*/ 
                                //{
                                console.log(e);
                                LifecycleViewUtilities.removeRelatedChecksForState(e.stateid, tbodyref);
                                e.remove();
                                that.handledeployIndicator();
                                //}
                            } else if (e.type === core.Type.EDGE) {
                                //eltRemoved = true;

                                if (e.isCritical == "true") {
                                    cantrmTransition = ParamSkeletonNLS.TransitionCriticalText.format(e.cl1.c.node.name, e.cl2.c.node.name);
                                    that.userMessaging.add({className: "warning", message: cantrmTransition});
                                } else {
                                    LifecycleViewUtilities.removeRelatedChecksForTransition(e.cl1.c.node.stateid, e.cl2.c.node.stateid, tbodyref);

                                    if (that.grph.appCategory === "CBP") {
                                        that.handleTransitionRemovalForCBP(e.cl1.c.node, e.cl2.c.node);
                                    }
                                    e.remove();
                                    that.handledeployIndicator();
                                }
                            }
                        });//forEach

                    } finally {
                        that.grph.updateUnlock();
                    }
                    //
                    /*if (!eltRemoved) {
                        that.userMessaging.add({className: "warning", message: ParamSkeletonNLS.NoObjectedSelectedrmText});
                    }*/
                } else {
                    that.userMessaging.add({className: "warning", message: ParamSkeletonNLS.TopologyNotModifiable});
                }
            },


            handledeployIndicator : function () {
                var tbodyreflist = this.contentDiv.getElements('.indicatortbody'),
                    imgCell = LifecycleViewUtilities.getNamingDeployCellSts(tbodyreflist);//"nameDeployIndicator"

                LifecycleViewUtilities.beingModified(imgCell, ParamSkeletonNLS.Being_Modified);
            },

            handleTransitionRemovalForCBP : function (fromNode, toNode) {

                var e, listofEdges,
                    nbofOutTrans = 0,
                    xdiff = toNode.left - fromNode.left,
                    iPositions = Math.round(xdiff /  this.grph.nodeSpacing);

                if (iPositions > 1) {
                    listofEdges = this.grph.edges;
                    for (e = listofEdges.first; e; e = e.next) {
                        if (e.cl1.c.node.stateid === fromNode.stateid) {
                            nbofOutTrans++;
                        }
                    }

                    if (nbofOutTrans == 2) {
                        for (e = listofEdges.first; e; e = e.next) {
                            xdiff = e.cl2.c.node.left - e.cl1.c.node.left;
                            iPositions = Math.round(xdiff / this.grph.nodeSpacing);
                            UWA.log("from : " + e.cl1.c.node.stateid + " to : " + e.cl2.c.node.stateid + " :: " + iPositions);

                            if (iPositions === 1) {
                                if (e.signature !== "") {
                                    e.signature = "";
                                    e.signatureNLS = "";
                                    break;
                                }
                            }
                        }
                    }
                }// of if (iPositions > 1)

            },

            /*
            removeElement_old : function () {
                UWA.log("inside removeElement");
                var i, itr,
                    cantrmTransition,
                    that = this,
                    nodesLength = that.nodes.length,
                    eltRemoved = false,
                    tbodyref = this.contentDiv.getElements('.paramtbody')[0];
                //
                if (that.model.get("modifyTopology")) {
                    for (i = 0;  i < nodesLength; i++) {
                        if (that.nodes[i].isSelected()) {
                            eltRemoved = true;
                            //
                            if (that.nodes[i].isCritical == "true") {
                                that.userMessaging.add({
                                    className: "warning",
                                    message : ParamSkeletonNLS.StateCriticalText.format(that.nodes[i].name)
                                });
                            } else {
                                that.nodes[i].remove();
                                that.removeRelatedChecksForState(that.nodes[i].stateid, tbodyref);
                            }
                        }
                    }

                    var transitionList = that.grph.edges;
                    for (itr = transitionList.first; itr; itr = itr.next) {
                        if (itr.isSelected() == true) {
                            eltRemoved = true;
                            //
                            if (itr.isCritical == "true") {
                                cantrmTransition = ParamSkeletonNLS.TransitionCriticalText.format(itr.cl1.c.node.name, itr.cl2.c.node.name);
                                that.userMessaging.add({className: "warning", message: cantrmTransition});
                            } else {
                                LifecycleViewUtilities.removeRelatedChecksForTransition(itr.cl1.c.node.stateid, itr.cl2.c.node.stateid, tbodyref);
                                itr.remove();
                            }
                        }
                    }
                    //
                    if (!eltRemoved) {
                        this.userMessaging.add({className: "warning", message: ParamSkeletonNLS.NoObjectedSelectedrmText});// + ' - ' + new Date();
                    }
                } else {
                    this.userMessaging.add({className: "warning", message: ParamSkeletonNLS.TopologyNotModifiable});
                }
            },*/

            restoreStates : function () {
                var warningNoRemovedStates, headertitle,
                    OKBtn, CancelBtn,
                    StatesListSelect,
                    restoreStsModal,
                    i,
                    that = this,
                    removedStates = this.getRemovedStatesList(),
                    nbofRemovedStates = removedStates.length;

                if (nbofRemovedStates === 0) {
                    warningNoRemovedStates = ParamSkeletonNLS.NoStatesRemoved;
                    that.userMessaging.add({className: "warning", message: warningNoRemovedStates});
                } else {
                    StatesListSelect =  new Select({
                        nativeSelect: true,
                        placeholder: false,
                        multiple: true
                    });
                    //
                    headertitle = UWA.createElement('h4', {
                        text   : ParamSkeletonNLS.SelectStateToRestore,//NZV-IR-613104-3DEXPERIENCER2019x
                        'class': 'font-3dslight' // font-3dsbold
                    });
                    //
                    OKBtn = new Button({
                        value : ParamSkeletonNLS.OKButton,
                        className : 'btn primary',
                        events : {
                            'onClick' : function() {
                                var selectedStates = StatesListSelect.getValue();//.getValue()[0]
                                that.restoreStatesinSession(selectedStates);
                                that.handledeployIndicator();
                            }
                        }
                    });
                    //    
                    CancelBtn = new Button({
                        value : ParamSkeletonNLS.CancelButton,
                        className : 'btn default',                        
                        events : {
                            'onClick' : function(e) {
                                that.onCancelCalled(e);
                            }
                        }
                    });
                    /*"<button type='button' class='btn btn-primary'>OK</button> " +
                    "<button type='button' class='btn btn-default'>Annuler</button>"*/

                    for (i = 0; i < nbofRemovedStates; i++) {
                        StatesListSelect.add([{
                            label: removedStates[i].name,
                            value: removedStates[i].stateid
                        }]);
                    }
                    //
                    restoreStsModal = new Modal({
                        className: "restore-sts-modal",
                        closable: true,
                        header: headertitle,
                        body:   StatesListSelect,
                        footer: [ OKBtn, CancelBtn ]
                    }).inject(that.contentDiv);
                    //
                    restoreStsModal.getContent().setStyle("padding-top", 90);
                    restoreStsModal.show();
                    //
                    restoreStsModal.getContent().getElements(".btn").forEach(function (element) {
                        element.addEvent("click", function () {
                            restoreStsModal.hide();
                        });
                    });
                }//of else if nbofRemovedStates

            },

            showAddElementsModal : function() {
                var itr, i, e,
                    headertitle,
                    sortedTypes, listofRulesForType, ruleTextID,
                    selectedRule, additionalInfo, additionalInfoNLS,
                    nbofTypes, selectHiddenCell,
                    tbodyref, isCheckAdded,
                    modalbodyTable, modaltbody,
                    lineModal,
                    typeTextCell, selectCell,
                    RulesListSelect,
                    lineComplModal, complementarySelect,
                    OKBtn, CancelBtn,
                    TypesListSelect, listofAttrs,
                    that = this,
                    transitionList = that.grph.edges,
                    addCheckAttrOK = true,
                    isTransitionSelected = false, tempTD, promoteCell, demoteCell, 
                    promoteToggle, actionLabelElm, lineDemotePromote, promoteLabelCell;

                for (e = this.grph.selection.first; e; e = e.nextSel) {
                    if (e.type === core.Type.EDGE) {
                        isTransitionSelected = true;
                        break;
                    }
                }
                // loop on the added elements and log them in the console
                /*for (itr = transitionList.first; itr; itr = itr.next) {
                    if (itr.isSelected()) {
                        isTransitionSelected = true;
                        break;
                    }
                }*/

                if (!isTransitionSelected) {
                    that.userMessaging.add({className: "warning", message: ParamSkeletonNLS.NoTransitionSelected});
                } else {
                    LifecycleEgraphUtilities.removePropsNode();
                    if (that.RulesModal !== null) {
                        that.RulesModal.show();//Modal already exists
                    } else {
                        headertitle = UWA.createElement('h4', {
                            text   : ParamSkeletonNLS.AddNewRule,
                            'class': 'font-3dslight' // font-3dsbold
                        });

                        sortedTypes = LifecycleViewUtilities.sortArrayByKey(that.collection._models[0]._attributes.types, "typeNLS");
                        nbofTypes = sortedTypes.length;

                        //if (( !== '') && (!== undefined))

                        modalbodyTable =  UWA.createElement('table', {
                            'id': '',
                            'class': 'table table-condensed table-hover'
                        });
                        modaltbody = UWA.createElement('tbody', {
                            'class': ''
                        }).inject(modalbodyTable);
                        //FUN087047 : Promote/Demote support
                        if (that.grph.appCategory === "CBP") {
                            lineDemotePromote = UWA.createElement('tr').inject(modaltbody);
                            promoteLabelCell = UWA.createElement('td', {
                                'Align' : 'left',
                                'width' : '20%'
                            }).inject(lineDemotePromote);
                            promoteLabelCell.setStyle('vertical-align','middle');

                            actionLabelElm = UWA.createElement('p', {
                                text   : ParamSkeletonNLS.Action,// font-3dsbold
                                'class': 'font-3dslight'
                            }).inject(promoteLabelCell);
                            tempTD =  UWA.createElement('td', {
                                'Align' : 'left'
                            }).inject(lineDemotePromote);
                            promoteCell = UWA.createElement('td', {
                                'Align' : 'left',
                                'width' : '30%'
                            }).inject(tempTD);
                            demoteCell = UWA.createElement('td', {
                                'Align' : 'center'
                            }).inject(tempTD);
                            promoteToggle = new Toggle(
                                {   name: 'radio2', 
                                    value: 'option1', 
                                    className: 'primary', 
                                    label: ParamSkeletonNLS.Promote }).check().inject(promoteCell);
                            new Toggle()
                                    .setName('radio2')
                                    .setValue('option2')
                                    .setLabel(ParamSkeletonNLS.Demote)
                                    .setClassName('primary')
                                    .inject(demoteCell);
                        }//End of Action
                        lineModal = UWA.createElement('tr').inject(modaltbody);
                        //
                        typeTextCell = UWA.createElement('td', {
                            'Align' : 'left',
                            'width' : '15%'                            
                        }).inject(lineModal);
                        typeTextCell.setStyle('vertical-align','middle');
                        UWA.createElement('p', {
                            text   : ParamSkeletonNLS.DataTypeLabel,// font-3dsbold
                            'class': 'font-3dslight'
                        }).inject(typeTextCell);

                        selectCell = UWA.createElement('td', {
                            'Align' : 'left'
                        }).inject(lineModal);

                        lineComplModal = UWA.createElement('tr');

                        TypesListSelect =  new Select({
                            nativeSelect: true,
                            placeholder: false,
                            multiple: false
                        }).inject(selectCell);

                        for (i = 0; i < nbofTypes; i++) {
                            TypesListSelect.add([{
                                label: sortedTypes[i].typeNLS,
                                value: sortedTypes[i].typeID
                            }]);
                        }
                        //Complementary Select
                        complementarySelect =  new Select({
                            nativeSelect: true,
                            placeholder: false,
                            multiple: false
                        });

                        lineModal = UWA.createElement('tr').inject(modaltbody);

                        typeTextCell = UWA.createElement('td', {
                            'Align' : 'left',
                            'width' : '15%'                            
                        }).inject(lineModal);
                        typeTextCell.setStyle('vertical-align','middle');

                        UWA.createElement('p', {
                            text   : ParamSkeletonNLS.Rulelabel,// font-3dsbold
                            'class': 'font-3dslight'
                        }).inject(typeTextCell);

                        selectCell = UWA.createElement('td', {
                            'Align' : 'left'
                        }).inject(lineModal);

                        RulesListSelect =  new Select({
                            nativeSelect: true,
                            placeholder: false,
                            multiple: false
                            /*events: {
                                'onChange' : function () {
                                    if (this.getValue()[0] === "RejectIfAnyOfTheCommonlyGovernedChildNotOnTargetState") {
                                        lineComplModal.show();
                                        LifecycleViewUtilities.populateAddInfoSelect(complementarySelect, TypesListSelect.getValue(), sortedTypes);
                                    } else {
                                        lineComplModal.hide();
                                    }
                                }
                            }*/
                        }).inject(selectCell);


                        //pour l'initalisation
                        listofRulesForType = sortedTypes[0].listofRules.split(',');

                        for (i = 0; i < listofRulesForType.length; i++) {
                            //if (listofRulesForType[i] !== "RejectIfAttributeNotValuated") {
                            ruleTextID = listofRulesForType[i] + "Text";

                            RulesListSelect.add([{
                                label: ParamSkeletonNLS[ruleTextID],
                                value: listofRulesForType[i]
                            }]);
                            //}
                        }

                        RulesListSelect.addEvent("onChange", function () {
                            if (this.getValue()[0] === "RejectIfAnyOfTheCommonlyGovernedChildNotOnTargetState") {
                                lineComplModal.show();
                                LifecycleViewUtilities.populateAddInfoSelect(complementarySelect, TypesListSelect.getValue(), sortedTypes);
                            } else if (this.getValue()[0] === "RejectIfAttributeNotValuated") {
                                lineComplModal.show();
                                listofAttrs = LifecycleViewUtilities.getListofAttributesForType(TypesListSelect.getValue(), sortedTypes);
                                LifecycleViewUtilities.populateAttributesSelector(complementarySelect, listofAttrs);
                            } else {
                                lineComplModal.hide();
                            }
                        });

                        TypesListSelect.addEvent("onChange", function () {
                            lineComplModal.hide();
                            LifecycleViewUtilities.updateRulesListforType(RulesListSelect, this.getValue(), sortedTypes);
                        });

                        typeTextCell = UWA.createElement('td', {
                            'Align' : 'left',
                            'width' : '15%'
                        }).inject(lineComplModal);

                        UWA.createElement('p', {
                            text   : ParamSkeletonNLS.ConsiderChildType,// font-3dsbold
                            'class': 'font-3dslight'
                        }).inject(typeTextCell);

                        selectHiddenCell = UWA.createElement('td', {
                            'Align' : 'left'
                        }).inject(lineComplModal);

                        complementarySelect.inject(selectHiddenCell);
                        lineComplModal.inject(modaltbody);
                        lineComplModal.hide();

                        OKBtn = new Button({
                            value : ParamSkeletonNLS.OKButton,
                            className : 'btn primary',
                            events : {
                                'onClick' : function() {
                                    var promote = true;
                                    //var selectedStates = StatesListSelect.getValue();//.getValue()[0]
                                    //that.restoreStatesinSession(selectedStates);//StatesListSelect.getValue()
                                    tbodyref = that.contentDiv.getElements('.paramtbody');
                                    addCheckAttrOK = true;

                                    for (itr = transitionList.first; itr; itr = itr.next) {
                                        if (itr.isSelected() === true) {
                                            //var readTypeVal = TypesListSelect.getValue();
                                            //var readTypeNAme = TypesListSelect.getName();
                                            /*UWA.log("complementary");
                                            UWA.log(complementarySelect.getValue());
                                            UWA.log(lineComplModal.hidden);*/

                                            selectedRule = RulesListSelect.getSelection()[0].value;
                                            additionalInfo = "NOINFO";
                                            additionalInfoNLS = "";
                                            //
                                            if (selectedRule === "RejectIfAnyOfTheCommonlyGovernedChildNotOnTargetState") {
                                                additionalInfo = complementarySelect.getSelection()[0].value;
                                                additionalInfoNLS = ParamSkeletonNLS.ConsiderKey.format(complementarySelect.getSelection()[0].label);
                                            }

                                            //ZUR IR-496665-3DEXPERIENCER2017x
                                            if (selectedRule === "RejectIfAttributeNotValuated") {
                                                if (complementarySelect.getOptions().length > 0) {
                                                    additionalInfo = complementarySelect.getSelection()[0].value;
                                                    additionalInfoNLS = ParamSkeletonNLS.ConsiderKey.format(complementarySelect.getSelection()[0].label);
                                                } else {
                                                    that.userMessagingDrag.add({className: "warning", message: ParamSkeletonNLS.NoCustoAttributesAdded});
                                                    addCheckAttrOK = false;
                                                }
                                            }
                                            //FUN087047
                                            if (that.grph.appCategory === "CBP") {
                                                promote = promoteToggle.isChecked();
                                            } else {
                                                promote = true;
                                            }
                                            //var tbodyref = this.contentDiv.getElements('.paramtbody')[0];
                                            isCheckAdded = LifecycleViewUtilities.isCheckAlreadyAdded(TypesListSelect.getSelection()[0].value,
                                                itr.cl1.c.node.stateid, itr.cl2.c.node.stateid,
                                                selectedRule, additionalInfo,
                                                tbodyref[0], promote);

                                            if (addCheckAttrOK) {
                                                if (!isCheckAdded) {
                                                    that.addChecktoTable(tbodyref[0],
                                                        TypesListSelect.getSelection()[0].value, TypesListSelect.getSelection()[0].label,
                                                        itr.cl1.c.node.stateid, itr.cl1.c.node.name,
                                                        itr.cl2.c.node.stateid, itr.cl2.c.node.name,
                                                        selectedRule,
                                                        additionalInfo, additionalInfoNLS,
                                                        "newcheck", promote);
                                                    that.handledeployIndicator();
                                                } else {
                                                    that.userMessaging.add({className: "error", message: ParamSkeletonNLS.CheckAlreadyAdded});
                                                }
                                            }
                                        }
                                    }//of for loop
                                }//of onclick
                            }//events
                        });

                        CancelBtn = new Button({
                            value : ParamSkeletonNLS.CancelButton,
                            className : 'btn default',
                            events : {
                                'onClick' : function(e) {
                                    UWA.log(e);//that.onCancelCalled();
                                }
                            }
                        });

                        that.RulesModal = new Modal({
                            className: "restore-sts-modal",
                            closable: true,
                            header  : headertitle,
                            body    : modalbodyTable,
                            footer  : [ OKBtn, CancelBtn ]
                        }).inject(that.contentDiv);

                        that.RulesModal.getContent().setStyle("padding-top", 90);
                        that.RulesModal.show();

                        that.RulesModal.getContent().getElements(".btn").forEach(function (element) {
                            element.addEvent("click", function () {
                                that.RulesModal.hide();
                            });
                        });
                    }
                }
            },

            restoreStatesinSession : function(ilistofStates) {
                var iRestore, i,
                    that = this,
                    nbofStatestoRestore = ilistofStates.length,
                    nodesLength = that.nodes.length;

                for (iRestore = 0; iRestore < nbofStatestoRestore; iRestore++) {
                    for (i = 0; i < nodesLength; i++) {
                        if (that.nodes[i].stateid == ilistofStates[iRestore]) {
                            that.grph.addNode(that.nodes[i]);
                            UWA.log("State Restored " + ilistofStates[iRestore]);
                            break;
                        }
                    }
                }
            },

            onCancelCalled : function(x) {
                UWA.log("onCancelCalled" + x);
            },

            getRemovedStatesList : function () {
                var i,
                    ArrayNodeList = [],
                    nodesLength = this.nodes.length,
                    k = 0;

                for (i = 0; i < nodesLength; i++) {
                    if (this.nodes[i].parent === null) {
                        ArrayNodeList[k++] = this.nodes[i];
                    }
                }
                return ArrayNodeList;
            },

            destroy : function() {
                UWA.log("LifecycleView::destroy");
                this.stopListening();
                this._parent.apply(this, arguments);
            }

        });

        return extendedView;
    });

define('DS/ParameterizationSkeleton/Views/ParamConfigurationManagement/CfgParamCustomizationUtility', [
	'UWA/Core',
	'DS/WAFData/WAFData',
	'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler',
], 
function (UWA,  WAFData, URLHandler) {
	
	/**
	 * @description Helper to call a web service.
     * This helper is adding security context first and if it success it calls the api.
	 * @param {String} url The web service route
	 * @param {String} methodType HTTP Protocole : GET / POST / PUT ...
	 * @param {String} data the data to send to the web service
	 * @param {Function} onSuccess onSuccess callback function
	 * @param {Function} onFailure onFailure callback function
	 */
	const requestHelper = function(url, methodType, data, onSuccess, onFailure){
		//IR-953493 Adding tenant in security context
		const urlSecurityContext =URLHandler.getURL() +"/resources/pno/person/getsecuritycontext?tenant=" + URLHandler.getTenant();
		console.log("Get security context:");
		WAFData.authenticatedRequest(urlSecurityContext, {
			timeout : 250000,
			method : 'GET',
			data : "",
			type : 'json',
			headers : {
				'Content-Type' : 'application/json',
				'Accept' : 'application/json'
			},
			onFailure : function (json) {
                UWA.log('CfgParamCustomizationUtility::requestHelper - Failure');
				UWA.log(json);
				console.log(json);
			},
			onComplete: function(securityContext) {
				const urlFinal =URLHandler.getURL()+ url + "?tenant=" + URLHandler.getTenant();
				WAFData.authenticatedRequest(urlFinal, {
					timeout : 250000,
					method : methodType,
					data : data,
					type : 'json',
					headers : {
						'Content-Type' : 'application/json',
						'Accept' : 'application/json',
						'SecurityContext' : securityContext.SecurityContext,
					},
					onFailure : function (result) {
                        UWA.log('CfgParamCustomizationUtility::requestHelper - Failure');
						UWA.log(result);
						onFailure(result);
					},
                    onComplete: function (result) {
                        UWA.log('CfgParamCustomizationUtility::requestHelper - Success');
                        UWA.log(result);
                        onSuccess(result);
					}
				});
			}
		});
	}
	/**
	 * Permits to push date or unit value easily
	 * @param {Boolean} setValue 
	 * @param {String} type Must be date or Unit
	 * @param {*} onSuccessCallback 
	 * @param {*} onFailureCallback 
	 */
	const postParamsArrOnServer = function (setValue, type,onSuccessCallback,onFailureCallback) {
	
		var data = [JSON.parse("{\"domain\":\"ConfigurationUXParameterization\",\"id\":\""+type+"\",\"argument\":[{\"id\":\"Argument\",\"value\":\""+setValue+"\"}]}")];
		
		var url = URLHandler.getURL() + "/resources/ParamWS/access/postparams?tenant=" + URLHandler.getTenant(),
			datatoSend = {
				domain    : "ConfigurationUXParameterization",
				parameter : data
            };

		WAFData.authenticatedRequest(url, {
			timeout: 100000,
			method: 'POST',
			data: JSON.stringify(datatoSend),
			type: 'json',
			//proxy: 'passport',

			headers: {
				'Content-Type' : 'application/json',
				'Accept' : 'application/json'
			},

			onFailure : function (json) {
				onFailureCallback(json);
			},

			onComplete: function(json) {
				if(!(json.deployStatus === "S_OK")){
					onFailureCallback(json);	
					return;
				}
				onSuccessCallback(json);
			}
		});
	}


    return {
        /*setFilteringInformation: function (filteringType, value, onSuccessCallback, onFailureCallback) {
            const url = "/resources/modeler/configuration/settingsServices/setConfigurationSettings";

            const data = {
                "version": "1.0",
                "settings": [
                    {
                        "settingName": filteringType,
                        "settingValue" : value
                    }
                ]
            };
            requestHelper(url, "POST", JSON.stringify(data), onSuccessCallback, onFailureCallback);
        },*/
        /*getParametrizationInformation: function (type, onSuccesCallback, onFailureCallback) {
            var url =  "/resources/modeler/configuration/settingsServices/getConfigurationSettings";
            var jsonData = {
                "version": "1.0",
                "settings": [type]
            };
            requestHelper(url, "POST",JSON.stringify(jsonData), onSuccesCallback, onFailureCallback);
        },*/
        /**
	     * Get actual date and unit value from server
	     * @param {String} type date or unit 
	     * @param {*} onSuccessCallback 
	     * @param {*} onFailureCallback 
	     */
         getParamsFromServer : function (type, onSuccessCallback, onFailureCallback) {

            var url = URLHandler.getURL() + "/resources/ParamWS/access/DomainElements?tenant=" + URLHandler.getTenant() + "&domainid=ConfigurationUXParameterization",
                 datatoSend = "";

            WAFData.authenticatedRequest(url, {
                timeout: 100000,
                method: 'GET',
                data: JSON.stringify(datatoSend),
                type: 'json',
                //proxy: 'passport',

                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },

                onFailure: function (json) {
                    onFailureCallback(json);
                },

                onComplete: function (json) {
                    if (type === "date")
                        onSuccessCallback(json.family[0].parameter[0].argument[0].argValue);
                    else if (type === "unit")
                        onSuccessCallback(json.family[0].parameter[1].argument[0].argValue);
										else if (type === 'StaticMappingActivation') onSuccessCallback(json.family[0].parameter[2].argument[0].argValue);
										else if (type === 'CompositionMatrixActivation') onSuccessCallback(json.family[0].parameter[3].argument[0].argValue);
                }
            });
        },
	
	    /**
	     * Call postparams webService to set UnitParam
	     * @param {Boolean} status 
	     */
		setUnitParam: function(status, onSuccessCallback, onFailureCallback){
			postParamsArrOnServer(status,"CFGParameterUnit",onSuccessCallback ,onFailureCallback );
		},
	    /**
	     * Call postparams webService to set DateParam
	     * @param {Boolean} status 
	     */
		setDateParam: function(status,onSuccessCallback,onFailureCallback){
			postParamsArrOnServer(status,"CFGParameterCtxtDate",onSuccessCallback ,onFailureCallback );
		},

		setStaticMappingParam: function (status, onSuccessCallback, onFailureCallback) {
			postParamsArrOnServer(status, 'CFGParameterStaticMapping', onSuccessCallback, onFailureCallback);
		},
		setCompositionMatrixParam: function (status, onSuccessCallback, onFailureCallback) {
			postParamsArrOnServer(status, 'CFGParameterCompositionMatrix', onSuccessCallback, onFailureCallback);
		},

	    /**
	     * Call setConfiguredExpressionXSLT API
	     * @param {String} XSLContent:XSL content as text
	     * @param {Function} onSuccessCallback
	     * @param {Function} onFailureCallback 
	     */
		uploadXSLCusto: function(XSLContent, onSuccessCallback, onFailureCallback){
			var objJSON = new Object();
			objJSON.version = "1.0";
			objJSON.content  = XSLContent;
			var postdata= JSON.stringify(objJSON);
			var url = "/resources/modeler/configuration/settingsServices/setConfiguredExpressionXSLT";
			console.log("makewscall now :")
			requestHelper(url, "POST", postdata, onSuccessCallback, onFailureCallback);
		},

	    /**
	     * Call getConfiguredExpressionXSLTDefault API
	     * @param {Function} onSuccessCallback 
	     * @param {Function} onFailureCallback 
	     */
		getDefaultXSL: function(onSuccessCallback, onFailureCallback){
			var postdataEmpty = "";
			var url ="/resources/modeler/configuration/settingsServices/getConfiguredExpressionXSLTDefault";
			console.log("makewscall now :");
			requestHelper(url, "GET",postdataEmpty, onSuccessCallback, onFailureCallback );
		},
		

	    /**
	     * Call getConfiguredExpressionXSLT API
	     * @param {Function} onSuccessCallback 
	     * @param {Function} onFailureCallback 
	     */
		getCustoXSL: function(onSuccessCallback, onFailureCallback){
			var postdataEmpty = "";
			var url ="/resources/modeler/configuration/navigationServices/getConfiguredExpressionXSLT";
			console.log("makewscall now :");
			requestHelper(url,"GET",postdataEmpty, onSuccessCallback, onFailureCallback);
		},
	

	    /**
	     * Open a browse dialog which choose a file
	     * @param {Function} WhatToDoWithFile:Function taking a file in parameter 
	     */
		browseFiles: function(WhatToDoWithFile){ 
			function openFileDialog (accept, multy = false, callback) { //Import file function : https://stackoverflow.com/questions/6463439/how-to-open-a-file-browse-dialog-using-javascript
				var inputElement = document.createElement("input");
				inputElement.type = "file";
				inputElement.accept = accept; // Note Edge does not support this attribute
				if (multy) {
					inputElement.multiple = multy;
				}
				if (typeof callback === "function") {
					 inputElement.addEventListener("change", callback);
				}
				inputElement.dispatchEvent(new MouseEvent("click")); 
			};
			function fileDialogChanged (event) {
				[...this.files].forEach(file => {
					WhatToDoWithFile(file);
				});
			}
			openFileDialog(".xsl,text/plain", false, fileDialogChanged); // Type / MultiFile / Callback
		},
	

	    /**
	     * Transform an XML with an XSL to a readable text
	     * @param {String} xmlText 
	     * @param {String} xslText 
	     * @param {Function} resultHandle 
	     */
		xmlXslTransformation: function(xmlText, xslText, resultHandle){
			var xsltProcessor = new XSLTProcessor();
			var docXSL = new DOMParser().parseFromString(xslText, "text/xml");
			xsltProcessor.importStylesheet(docXSL);
			var docXML = new DOMParser().parseFromString(xmlText, "text/xml");
			var fragment = xsltProcessor.transformToFragment(docXML, document);
			if(!fragment){
				resultHandle("");
			}
			if(!fragment.firstChild){
				resultHandle("");
			}
			resultHandle(fragment.firstChild.nodeValue);
			
		},
		
	    /***
	    *Download a file 
	    *Argument 1: Name of file to download
	    *Argument 2: Text content
	    **/	
	    /**
	     * Download a file
	     * @param {String} filename:Name to give to new file 
	     * @param {String} text:content of the file to save 
	     */
		download: function(filename, text) {
			var element = document.createElement('a');
			element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
			element.setAttribute('download', filename);

			element.style.display = 'none';
			document.body.appendChild(element);

			element.click();

			document.body.removeChild(element);
		}
	}
    });

define('DS/ParameterizationSkeleton/Views/PPRSynchronizationLifeCycle/PPRSynchroViewUtilities',
	[
		'UWA/Core',
		'DS/UIKIT/Input/Select',
		'DS/UIKIT/Modal',
		'DS/UIKIT/Input/Text',
		'DS/UIKIT/Input/Number',
		'DS/ParameterizationSkeleton/Views/ParametersLayoutViewUtilities',
		'DS/WAFData/WAFData',
		'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler',
		'DS/ParameterizationSkeleton/Views/PPRSynchronizationLifeCycle/PPRSynchroViewConstants',
		'DS/ParameterizationSkeleton/Views/PPRSynchronizationLifeCycle/PPRSynchroAddLineDialog',
		'i18n!DS/ParameterizationSkeleton/assets/nls/PPRSynchroLifeCycleNLS'
	],
	function (UWA,
		Select,
		Modal,
		Text,
		Number,
		ParametersLayoutViewUtilities,
		WAFData,
		URLHandler,
		PPRSynchroViewConstants,
		PPRSynchroAddLineDialog,
		PPRSynchroLifeCycleNLS) {

	'use strict';

	var LEFT_ALIGNMENT = 'left';
	var RIGHT_ALIGNMENT = 'right';

	

	var HTML_BOLD_FORMAT1 = 'h1';
		var HTML_BOLD_FORMAT3 = 'h3';
		var HTML_BOLD_FORMAT4 = 'h4';
		var HTML_BOLD_FORMAT5 = 'h5';
		var HTML_BOLD_FORMAT6 = 'h6';
	var HTML_PARAG_FORMAT = null;
	var RULES_BCKGROUND = "#ffffff";

	var rulesCouplingTable = UWA.createElement('table', {
		'class': 'lifecycTableMapping table table-striped'
		});
	var widthTable = PPRSynchroViewConstants.WIDTH_ARRAY;

	var lifeCycleRulesAttributesValues = {};
	var avoidDupCounterUserSelectionRequired = "";
	var strategySelectorCombobox = [{
			label: PPRSynchroLifeCycleNLS.UserDefined,
			value: "UserDefined"
		}
		/*,{
		label: PPRSynchroLifeCycleNLS.External,
		value: "External"
		}*/
	];

	var strategyCombobox;

	var ruleView = {
		initVariable: function () {
			this.cellsIndex = {
				"type": 0,
				"computedResultingProduct": 1,
				//SPEC_DOC commented asked by Paul IR926203
				//"specDoc": 2,=> incrementer les indices ci-dessous lorsque retabli
				"childTransformationTypes": 2,
				"newRevision": 3,
				"newBranch": 4,
				"duplicate": 5,
				"deletion": 6,
				"transferOwnership": 7,
				"changeMaturity": 8,
				"lock": 9,
				"changeControl": 10,
				"transfer": 11,
				"share":12,
				"action":13, //boutons add-Remove
				"deployFlag": 14 //green for deployed on server or orange for not deployed
			};
		},

		lifeCycleRulesAttributes: function (attributeMapping, avoidDupCounterValue) {
			lifeCycleRulesAttributesValues = attributeMapping;
			avoidDupCounterUserSelectionRequired = avoidDupCounterValue;
		},

		buildImgSpan: function (iconChoice, iconSize, iconColor, title) {
			var imgClass = 'fonticon fonticon-' + iconSize + 'x fonticon-' + iconChoice,
			imgSpan = UWA.createElement('span', {
					'class': imgClass,
					'title': title
				});

			imgSpan.setStyle("color", iconColor);
			return imgSpan;
		},

		convertFormatWebServiceToTable: function(iCollection/*format get by webservice*/)
		{
			var ind, jrules, kcmd, lineRow;
			var type, listCommandsForOneType, listRulesForOneType, oneCmd, oneLC_Rule;

			var tableOfRules = [];

			for (ind = 0; ind < iCollection.length; ind++) {
				var obj = [];
				lineRow = iCollection[ind];
				type = lineRow.type;

				obj[PPRSynchroViewConstants.TYPE] = type;
				//init
				obj[PPRSynchroViewConstants.COMPUTED_RESULTING_PRODUCT] = false;
				//SPEC_DOC commented asked by Paul IR926203
				//obj[PPRSynchroViewConstants.SPEC_DOC] = false;
				obj[PPRSynchroViewConstants.CHILD_TRANSFORMATION_TYPES] = false;

				obj[PPRSynchroViewConstants.NEW_REVISION] = false;
				obj[PPRSynchroViewConstants.NEW_BRANCH] = false;

				obj[PPRSynchroViewConstants.DUPLICATE] = false;
				obj[PPRSynchroViewConstants.DELETE] = false;
				obj[PPRSynchroViewConstants.TRANSFER_OWNERSHIP] = false;
				obj[PPRSynchroViewConstants.CHANGE_MATURIY] = false;

				obj[PPRSynchroViewConstants.LOCK] = false;
				obj[PPRSynchroViewConstants.CHANGE_CONTROL] = false;
				obj[PPRSynchroViewConstants.TRANSFER] = false;
				obj[PPRSynchroViewConstants.SHARE] = false;

				listRulesForOneType = lineRow.LC_Rules;
				for (jrules = 0; jrules < listRulesForOneType.length; jrules++) {
					oneLC_Rule = listRulesForOneType[jrules];
					if (oneLC_Rule == PPRSynchroViewConstants.COMPUTED_RESULTING_PRODUCT)
						obj[PPRSynchroViewConstants.COMPUTED_RESULTING_PRODUCT] = true;
					//SPEC_DOC commented asked by Paul IR926203
					//else if (oneLC_Rule == PPRSynchroViewConstants.SPEC_DOC)
					//	obj[PPRSynchroViewConstants.SPEC_DOC] = true;
					else if (oneLC_Rule == PPRSynchroViewConstants.CHILD_TRANSFORMATION_TYPES)
						obj[PPRSynchroViewConstants.CHILD_TRANSFORMATION_TYPES] = true;
				}

				listCommandsForOneType = lineRow.commands;

				for (kcmd = 0; kcmd < listCommandsForOneType.length; kcmd++) {
					oneCmd = listCommandsForOneType[kcmd];
					if (oneCmd == PPRSynchroViewConstants.NEW_REVISION)
						obj[PPRSynchroViewConstants.NEW_REVISION] = true;
					else if (oneCmd == PPRSynchroViewConstants.NEW_BRANCH)
						obj[PPRSynchroViewConstants.NEW_BRANCH] = true;
					else if (oneCmd == PPRSynchroViewConstants.DUPLICATE)
						obj[PPRSynchroViewConstants.DUPLICATE] = true;
					else if (oneCmd == PPRSynchroViewConstants.DELETE)
						obj[PPRSynchroViewConstants.DELETE] = true;
					else if (oneCmd == PPRSynchroViewConstants.TRANSFER_OWNERSHIP)
						obj[PPRSynchroViewConstants.TRANSFER_OWNERSHIP] = true;
					else if (oneCmd == PPRSynchroViewConstants.CHANGE_MATURIY)
						obj[PPRSynchroViewConstants.CHANGE_MATURIY] = true;
					else if (oneCmd == PPRSynchroViewConstants.LOCK)
						obj[PPRSynchroViewConstants.LOCK] = true;
					else if (oneCmd == PPRSynchroViewConstants.CHANGE_CONTROL)
						obj[PPRSynchroViewConstants.CHANGE_CONTROL] = true;
					else if (oneCmd == PPRSynchroViewConstants.TRANSFER)
						obj[PPRSynchroViewConstants.TRANSFER] = true;
					else if (oneCmd == PPRSynchroViewConstants.SHARE)
						obj[PPRSynchroViewConstants.SHARE] = true;
				}
				tableOfRules.push(obj);
			}
			return tableOfRules;
		},

		convertTableToFormatWebservice: function (iTableOfRules/*format table*/) {
			var ind;

			var collection = [];

			for (ind = 0; ind < iTableOfRules.length; ind++) {
				var obj = iTableOfRules[ind];
				var lineRow = {};
				lineRow.type = obj[PPRSynchroViewConstants.TYPE];
				lineRow.LC_Rules = [];
				lineRow.commands = [];

				//LC_Rules
				if (obj[PPRSynchroViewConstants.COMPUTED_RESULTING_PRODUCT])
					lineRow.LC_Rules.push(PPRSynchroViewConstants.COMPUTED_RESULTING_PRODUCT);
				//SPEC_DOC commented asked by Paul IR926203
				//if (obj[PPRSynchroViewConstants.SPEC_DOC])
				//	lineRow.LC_Rules.push(PPRSynchroViewConstants.SPEC_DOC);
				if (obj[PPRSynchroViewConstants.CHILD_TRANSFORMATION_TYPES])
					lineRow.LC_Rules.push(PPRSynchroViewConstants.CHILD_TRANSFORMATION_TYPES);

				//commands
				if (obj[PPRSynchroViewConstants.NEW_REVISION]) {
					lineRow.commands.push(PPRSynchroViewConstants.NEW_REVISION);
					//new Revision From merged with New Revision
					lineRow.commands.push(PPRSynchroViewConstants.NEW_REVISION_FROM);

				}
				if (obj[PPRSynchroViewConstants.NEW_BRANCH])
					lineRow.commands.push(PPRSynchroViewConstants.NEW_BRANCH);
				if (obj[PPRSynchroViewConstants.DUPLICATE]) {
					lineRow.commands.push(PPRSynchroViewConstants.DUPLICATE);
					//Advance Duplicate Merged with Duplicate
					lineRow.commands.push(PPRSynchroViewConstants.ADVANCE_DUPLICATE);
				}
				if (obj[PPRSynchroViewConstants.DELETE])
					lineRow.commands.push(PPRSynchroViewConstants.DELETE);
				if (obj[PPRSynchroViewConstants.TRANSFER_OWNERSHIP])
					lineRow.commands.push(PPRSynchroViewConstants.TRANSFER_OWNERSHIP);
				if (obj[PPRSynchroViewConstants.CHANGE_MATURIY])
					lineRow.commands.push(PPRSynchroViewConstants.CHANGE_MATURIY);
				if (obj[PPRSynchroViewConstants.LOCK])
					lineRow.commands.push(PPRSynchroViewConstants.LOCK);
				if (obj[PPRSynchroViewConstants.CHANGE_CONTROL])
					lineRow.commands.push(PPRSynchroViewConstants.CHANGE_CONTROL);
				if (obj[PPRSynchroViewConstants.TRANSFER])
					lineRow.commands.push(PPRSynchroViewConstants.TRANSFER);
				if (obj[PPRSynchroViewConstants.SHARE])
					lineRow.commands.push(PPRSynchroViewConstants.SHARE);

				collection.push(lineRow);
				}
			return collection;
		},

		buildTextTableCell: function (alignment, cellWidth, row, cellFormat, cellTest, colspan ) {
			var colspanValue = (colspan) ? colspan : '1';
			var iCell = UWA.createElement('td', {
				'Align': alignment,
				'width': cellWidth,
				'colspan': colspanValue,
				'class': 'font-3dslight'
			}).inject(row);

			if (cellFormat) {
				UWA.createElement(cellFormat, {
					text: cellTest
				}).inject(iCell);
			} else {
				iCell.appendText(cellTest);
			}
			return iCell;
		},

		buildAttributeTable: function (tableRules) {

			var pNFieldbody = UWA.createElement('tbody', {
					'class': 'PPRSynchroFieldbody'
			}).inject(rulesCouplingTable);

			var fieldInfo;

			fieldInfo = ruleView.buildPNFormulaRow(tableRules);
			fieldInfo.inject(pNFieldbody);

			fieldInfo = ruleView.buildPNTableHeading();
			fieldInfo.inject(pNFieldbody);

			return rulesCouplingTable;
		},


		buildPNFormulaRow: function (data) {
			var fieldInfo,iCell;

			fieldInfo = UWA.createElement('tr', {
					'class': 'PPRRulesFormula',
					'id': 'PPRRulesFormula'
				});

			fieldInfo.value = [];

			var imgClass = 'fonticon fonticon-' + '2.5' + 'x  fonticon-info';


			ruleView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.name], fieldInfo, HTML_PARAG_FORMAT, "");


			iCell = ruleView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.newRevision], fieldInfo, HTML_BOLD_FORMAT5, "[" + PPRSynchroLifeCycleNLS.freeValue + "]", "4");
			iCell.value = PPRSynchroViewConstants.FORMULA_CELL;

			iCell = UWA.createElement('td', {
					'width': widthTable[this.cellsIndex.deployFlag],
					'align': RIGHT_ALIGNMENT,
					'title': PPRSynchroLifeCycleNLS.deployStatus,
					'class': 'font-3dslight' // font-3dsbold
				});

			var imgSpan = ruleView.buildImgSpan('check', '2.5', 'green', PPRSynchroLifeCycleNLS.Deployed);
			imgSpan.inject(iCell);
			iCell.value = "success";
			iCell.inject(fieldInfo);

			return fieldInfo;
		},

		buildPNTableHeading: function () {
			var fieldInfo;

			fieldInfo = UWA.createElement('tr', {
					'class': 'success'
				});

			//Build Table Heading
			ruleView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.type], fieldInfo, HTML_BOLD_FORMAT4, PPRSynchroLifeCycleNLS.Type);

			var cell = ruleView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.computedResultingProduct], fieldInfo, HTML_BOLD_FORMAT4, PPRSynchroLifeCycleNLS.ComputedResultingProduct);
			//cell.addClassName("PPRSynchroColor1");
			//cell.setStyle("color", "#cc0000");
			//cell.setStyle("background-color", "#16537e");
			cell.setStyle("background-color", RULES_BCKGROUND);

			//SPEC_DOC commented asked by Paul IR926203
			//cell = ruleView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.specDoc], fieldInfo, HTML_BOLD_FORMAT4, PPRSynchroLifeCycleNLS.SpecDoc);
			//cell.setStyle("background-color", RULES_BCKGROUND);
			cell = ruleView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.childTransformationTypes], fieldInfo, HTML_BOLD_FORMAT4, PPRSynchroLifeCycleNLS.ChildTransformationTypes);
			cell.setStyle("background-color", RULES_BCKGROUND);

			ruleView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.newRevision], fieldInfo, HTML_BOLD_FORMAT4, PPRSynchroLifeCycleNLS.NewRevision);
			ruleView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.newBranch], fieldInfo, HTML_BOLD_FORMAT4, PPRSynchroLifeCycleNLS.NewBranch);
			ruleView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.duplicate], fieldInfo, HTML_BOLD_FORMAT4, PPRSynchroLifeCycleNLS.Duplicate);
			ruleView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.deletion], fieldInfo, HTML_BOLD_FORMAT4, PPRSynchroLifeCycleNLS.Delete);
			ruleView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.transferOwnership], fieldInfo, HTML_BOLD_FORMAT4, PPRSynchroLifeCycleNLS.TransferOwnership);
			ruleView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.changeMaturity], fieldInfo, HTML_BOLD_FORMAT4, PPRSynchroLifeCycleNLS.ChangeMaturity);

			ruleView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.lock], fieldInfo, HTML_BOLD_FORMAT4, PPRSynchroLifeCycleNLS.Lock);
			ruleView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.changeControl], fieldInfo, HTML_BOLD_FORMAT4, PPRSynchroLifeCycleNLS.ChangeControl);
			ruleView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.transfer], fieldInfo, HTML_BOLD_FORMAT4, PPRSynchroLifeCycleNLS.Transfer);
			ruleView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.share], fieldInfo, HTML_BOLD_FORMAT4, PPRSynchroLifeCycleNLS.Share);

			//Action (edit Remove)
			ruleView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.action], fieldInfo, HTML_BOLD_FORMAT5, PPRSynchroLifeCycleNLS.Action);
			//Deploy Status
			ruleView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.deployFlag], fieldInfo, HTML_BOLD_FORMAT5, PPRSynchroLifeCycleNLS.deployStatus);

			return fieldInfo;
		},

		addEditButtonToCellRow: function (iCell) {
			var editElts = ParametersLayoutViewUtilities.createActionElements(PPRSynchroLifeCycleNLS.editField, false);
			var editSpan = editElts[0];
			editSpan.setStyle("float", LEFT_ALIGNMENT);
			editSpan.setStyle("padding", "0px 8px");
			editSpan.inject(iCell);
			var editAttributeButton = editElts[1];
			var editPop = editElts[2];

			editAttributeButton.addEvent("onClick", function (event) {
				var fieldToEdit = event.currentTarget.getParent().getParent().getParent();
				ruleView.editFieldDialog(fieldToEdit, lifeCycleRulesAttributesValues, avoidDupCounterUserSelectionRequired);

			});

			return editAttributeButton;
		},

		addRemoveButtonToCellRow: function (iCell, fieldInfo) {
			var removelts = ParametersLayoutViewUtilities.createActionElements(PPRSynchroLifeCycleNLS.removeField, true);
			var deleteSpan = removelts[0];
			deleteSpan.setStyle("float", LEFT_ALIGNMENT);
			deleteSpan.setStyle("padding", "0px 8px");
			deleteSpan.inject(iCell);
			var removeAttributeButton = removelts[1];
			var removePop = removelts[2];

			removeAttributeButton.addEvent("onClick", function (e) {
				ruleView.removefieldLineCallBack(fieldInfo);
			});

			return removeAttributeButton;
		},

		fullfillBooleanCell(iCell, booleanValue, labelcategory)
		{
			iCell.empty();
			var textTooltip = labelcategory + " = " + booleanValue;

			if (booleanValue) {
			
				var imgSpan = ruleView.buildImgSpan('check', '2.5', 'green', textTooltip);
				imgSpan.inject(iCell);
			}
			else
			{
				var imgSpan = ruleView.buildImgSpan('wrong', '2.5', "#e2e4e3"/*grey-3*/, textTooltip);
				imgSpan.inject(iCell);
            }
        },

		buildLineField: function (fieldInfo, objParam, isDeployed) {
			var that = this;
			var iCell;

			//Build a new line from the objparam (a table containing the info to display in line)
			fieldInfo.value = isDeployed;
			var labelType = this.getLabelTypeFromTypeValue(objParam[PPRSynchroViewConstants.TYPE]);

			ruleView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.type], fieldInfo, HTML_PARAG_FORMAT, labelType);

			iCell = ruleView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.computedResultingProduct], fieldInfo, HTML_PARAG_FORMAT, "");
			this.fullfillBooleanCell(iCell, objParam[PPRSynchroViewConstants.COMPUTED_RESULTING_PRODUCT], PPRSynchroLifeCycleNLS.ComputedResultingProduct);

			//SPEC_DOC commented asked by Paul IR926203
			//iCell = ruleView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.specDoc], fieldInfo, HTML_PARAG_FORMAT, "");
			//this.fullfillBooleanCell(iCell, objParam[PPRSynchroViewConstants.SPEC_DOC], PPRSynchroLifeCycleNLS.SpecDoc);
		
			
			iCell = ruleView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.childTransformationTypes], fieldInfo, HTML_PARAG_FORMAT, "");
			this.fullfillBooleanCell(iCell, objParam[PPRSynchroViewConstants.CHILD_TRANSFORMATION_TYPES], PPRSynchroLifeCycleNLS.ChildTransformationTypes);
		

			iCell = ruleView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.newRevision], fieldInfo, HTML_PARAG_FORMAT, "");
			this.fullfillBooleanCell(iCell, objParam[PPRSynchroViewConstants.NEW_REVISION], PPRSynchroLifeCycleNLS.NewRevision);
		

			iCell = ruleView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.newBranch], fieldInfo, HTML_PARAG_FORMAT, "");
			this.fullfillBooleanCell(iCell, objParam[PPRSynchroViewConstants.NEW_BRANCH], PPRSynchroLifeCycleNLS.NewBranch);
			

			iCell = ruleView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.duplicate], fieldInfo, HTML_PARAG_FORMAT, "");
			this.fullfillBooleanCell(iCell, objParam[PPRSynchroViewConstants.DUPLICATE], PPRSynchroLifeCycleNLS.Duplicate);
		

			iCell = ruleView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.deletion], fieldInfo, HTML_PARAG_FORMAT, "");
			this.fullfillBooleanCell(iCell, objParam[PPRSynchroViewConstants.DELETE], PPRSynchroLifeCycleNLS.Delete);
		

			iCell = ruleView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.transferOwnership], fieldInfo, HTML_PARAG_FORMAT, "");
			this.fullfillBooleanCell(iCell, objParam[PPRSynchroViewConstants.TRANSFER_OWNERSHIP], PPRSynchroLifeCycleNLS.TransferOwnership);

			iCell = ruleView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.changeMaturity], fieldInfo, HTML_PARAG_FORMAT, "");
			this.fullfillBooleanCell(iCell, objParam[PPRSynchroViewConstants.CHANGE_MATURIY], PPRSynchroLifeCycleNLS.ChangeMaturity);


			iCell = ruleView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.lock], fieldInfo, HTML_PARAG_FORMAT, "");
			this.fullfillBooleanCell(iCell, objParam[PPRSynchroViewConstants.LOCK], PPRSynchroLifeCycleNLS.Lock);

			iCell = ruleView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.changeControl], fieldInfo, HTML_PARAG_FORMAT, "");
			this.fullfillBooleanCell(iCell, objParam[PPRSynchroViewConstants.CHANGE_CONTROL], PPRSynchroLifeCycleNLS.ChangeControl);

			iCell = ruleView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.transfer], fieldInfo, HTML_PARAG_FORMAT, "");
			this.fullfillBooleanCell(iCell, objParam[PPRSynchroViewConstants.TRANSFER], PPRSynchroLifeCycleNLS.Transfer);

			iCell = ruleView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.share], fieldInfo, HTML_PARAG_FORMAT, "");
			this.fullfillBooleanCell(iCell, objParam[PPRSynchroViewConstants.SHARE], PPRSynchroLifeCycleNLS.Share);

			//Action Cell (Edit & Remove)
			iCell = UWA.createElement('td', {
					'Align': LEFT_ALIGNMENT,
					'width': widthTable[6],
					'class': 'font-3dslight' // font-3dsbold
				}).inject(fieldInfo);

			var editAttributeButton = ruleView.addEditButtonToCellRow(iCell);
			var removeAttributeButton = ruleView.addRemoveButtonToCellRow(iCell, fieldInfo);

			//DeployStatus Cell (the icon checjk green or cog orange)
			iCell = UWA.createElement('td', {
					'Align': RIGHT_ALIGNMENT,
					'width': widthTable[5],
					'class': 'font-3dslight' // font-3dsbold
				}).inject(fieldInfo);

			if (isDeployed == PPRSynchroViewConstants.DEPLOYED) {
				var imgSpan = ruleView.buildImgSpan('check', '2.5', 'green', PPRSynchroLifeCycleNLS.Deployed);
				imgSpan.inject(iCell);
			} else if (isDeployed === PPRSynchroViewConstants.NEW_NOT_DEPLOYED) {
				var imgSpan = ruleView.buildImgSpan('cog', '2.5', 'orange', PPRSynchroLifeCycleNLS.Modified);
				imgSpan.inject(iCell);
			}

			iCell.inject(fieldInfo);

			return fieldInfo;
		},

		buildObjectFromRow: function (fieldInfo) {
			var obj = {};

			obj[PPRSynchroViewConstants.TYPE] = fieldInfo.cells[this.cellsIndex.type].value;
			
			obj[PPRSynchroViewConstants.COMPUTED_RESULTING_PRODUCT] = fieldInfo.cells[this.cellsIndex.computedResultingProduct].value;
			//SPEC_DOC commented asked by Paul IR926203
			//obj[PPRSynchroViewConstants.SPEC_DOC] = fieldInfo.cells[this.cellsIndex.specDoc].value;
			obj[PPRSynchroViewConstants.CHILD_TRANSFORMATION_TYPES] = fieldInfo.cells[this.cellsIndex.childTransformationTypes].value;
			
			obj[PPRSynchroViewConstants.NEW_REVISION] = fieldInfo.cells[this.cellsIndex.newRevision].value;
			obj[PPRSynchroViewConstants.NEW_BRANCH] = fieldInfo.cells[this.cellsIndex.newBranch].value;

			obj[PPRSynchroViewConstants.DUPLICATE] = fieldInfo.cells[this.cellsIndex.duplicate].value;
			obj[PPRSynchroViewConstants.DELETE] = fieldInfo.cells[this.cellsIndex.deletion].value;
			obj[PPRSynchroViewConstants.TRANSFER_OWNERSHIP] = fieldInfo.cells[this.cellsIndex.transferOwnership].value;
			obj[PPRSynchroViewConstants.CHANGE_MATURIY] = fieldInfo.cells[this.cellsIndex.changeMaturity].value;

			obj[PPRSynchroViewConstants.LOCK] = fieldInfo.cells[this.cellsIndex.lock].value;
			obj[PPRSynchroViewConstants.CHANGE_CONTROL] = fieldInfo.cells[this.cellsIndex.changeControl].value;
			obj[PPRSynchroViewConstants.TRANSFER] = fieldInfo.cells[this.cellsIndex.transfer].value;
			obj[PPRSynchroViewConstants.SHARE] = fieldInfo.cells[this.cellsIndex.share].value;

			return obj;
		},

		buildNewRuleField: function (objParam, deployedStatus) {
			var fieldInfo;

			fieldInfo = UWA.createElement('tr', {
					'class': 'PPRLifeCycleRulesMapping'
				});

			ruleView.buildLineField(fieldInfo, objParam, deployedStatus);

			fieldInfo.cells[this.cellsIndex.type].value = objParam[PPRSynchroViewConstants.TYPE];
			fieldInfo.cells[this.cellsIndex.computedResultingProduct].value = objParam[PPRSynchroViewConstants.COMPUTED_RESULTING_PRODUCT];
			//fieldInfo.cells[this.cellsIndex.specDoc].value = objParam[PPRSynchroViewConstants.SPEC_DOC];
			//SPEC_DOC commented asked by Paul IR926203
			fieldInfo.cells[this.cellsIndex.childTransformationTypes].value = objParam[PPRSynchroViewConstants.CHILD_TRANSFORMATION_TYPES];
			fieldInfo.cells[this.cellsIndex.newRevision].value = objParam[PPRSynchroViewConstants.NEW_REVISION];
			fieldInfo.cells[this.cellsIndex.newBranch].value = objParam[PPRSynchroViewConstants.NEW_BRANCH];
			fieldInfo.cells[this.cellsIndex.duplicate].value = objParam[PPRSynchroViewConstants.DUPLICATE];
			fieldInfo.cells[this.cellsIndex.deletion].value = objParam[PPRSynchroViewConstants.DELETE];
			fieldInfo.cells[this.cellsIndex.transferOwnership].value = objParam[PPRSynchroViewConstants.TRANSFER_OWNERSHIP];
			fieldInfo.cells[this.cellsIndex.changeMaturity].value = objParam[PPRSynchroViewConstants.CHANGE_MATURIY];



			fieldInfo.cells[this.cellsIndex.lock].value = objParam[PPRSynchroViewConstants.LOCK];
			fieldInfo.cells[this.cellsIndex.changeControl].value = objParam[PPRSynchroViewConstants.CHANGE_CONTROL];
			fieldInfo.cells[this.cellsIndex.transfer].value = objParam[PPRSynchroViewConstants.TRANSFER];
			fieldInfo.cells[this.cellsIndex.share].value = objParam[PPRSynchroViewConstants.SHARE];

			fieldInfo.cells[this.cellsIndex.deployFlag].value = deployedStatus;

			return fieldInfo;
		},

		modifyField: function (fieldInfo, objParam, deployedStatus) {
			var iCell;
			var value;
			var type = objParam[PPRSynchroViewConstants.TYPE];
			var label = this.getLabelTypeFromTypeValue(type);

			fieldInfo.cells[this.cellsIndex.type].value = type;
			fieldInfo.cells[this.cellsIndex.type].setText(label);
			
			value = objParam[PPRSynchroViewConstants.COMPUTED_RESULTING_PRODUCT];
			fieldInfo.cells[this.cellsIndex.computedResultingProduct].value = value;
			iCell = fieldInfo.cells[this.cellsIndex.computedResultingProduct];
			this.fullfillBooleanCell(iCell, value, PPRSynchroLifeCycleNLS.ComputedResultingProduct);

			//SPEC_DOC commented asked by Paul IR926203
			//value = objParam[PPRSynchroViewConstants.SPEC_DOC];
			//fieldInfo.cells[this.cellsIndex.specDoc].value = value;
			//iCell = fieldInfo.cells[this.cellsIndex.specDoc];
			//this.fullfillBooleanCell(iCell, value, PPRSynchroLifeCycleNLS.SpecDoc);

			value = objParam[PPRSynchroViewConstants.CHILD_TRANSFORMATION_TYPES];
			fieldInfo.cells[this.cellsIndex.childTransformationTypes].value = value;
			iCell = fieldInfo.cells[this.cellsIndex.childTransformationTypes];
			this.fullfillBooleanCell(iCell, value, PPRSynchroLifeCycleNLS.ChildTransformationTypes);

			value = objParam[PPRSynchroViewConstants.NEW_REVISION];
			fieldInfo.cells[this.cellsIndex.newRevision].value = value;
			iCell = fieldInfo.cells[this.cellsIndex.newRevision];
			this.fullfillBooleanCell(iCell, value, PPRSynchroLifeCycleNLS.NewRevision);

			value = objParam[PPRSynchroViewConstants.NEW_BRANCH];
			fieldInfo.cells[this.cellsIndex.newBranch].value = value;
			iCell = fieldInfo.cells[this.cellsIndex.newBranch];
			this.fullfillBooleanCell(iCell, value, PPRSynchroLifeCycleNLS.NewBranch);

			value = objParam[PPRSynchroViewConstants.DUPLICATE];
			fieldInfo.cells[this.cellsIndex.duplicate].value = value;
			iCell = fieldInfo.cells[this.cellsIndex.duplicate];
			this.fullfillBooleanCell(iCell, value, PPRSynchroLifeCycleNLS.Duplicate);

			value = objParam[PPRSynchroViewConstants.DELETE];
			fieldInfo.cells[this.cellsIndex.deletion].value = value;
			iCell = fieldInfo.cells[this.cellsIndex.deletion];
			this.fullfillBooleanCell(iCell, value, PPRSynchroLifeCycleNLS.Delete);


			value = objParam[PPRSynchroViewConstants.TRANSFER_OWNERSHIP];
			fieldInfo.cells[this.cellsIndex.transferOwnership].value = value;
			iCell = fieldInfo.cells[this.cellsIndex.transferOwnership];
			this.fullfillBooleanCell(iCell, value, PPRSynchroLifeCycleNLS.TransferOwnership);

			value = objParam[PPRSynchroViewConstants.CHANGE_MATURIY];
			fieldInfo.cells[this.cellsIndex.changeMaturity].value = value;
			iCell = fieldInfo.cells[this.cellsIndex.changeMaturity];
			this.fullfillBooleanCell(iCell, value, PPRSynchroLifeCycleNLS.CHANGE_MATURIY);


			value = objParam[PPRSynchroViewConstants.LOCK];
			fieldInfo.cells[this.cellsIndex.lock].value = value;
			iCell = fieldInfo.cells[this.cellsIndex.lock];
			this.fullfillBooleanCell(iCell, value, PPRSynchroLifeCycleNLS.Lock);

			value = objParam[PPRSynchroViewConstants.CHANGE_CONTROL];
			fieldInfo.cells[this.cellsIndex.changeMaturity].value = value;
			iCell = fieldInfo.cells[this.cellsIndex.changeControl];
			this.fullfillBooleanCell(iCell, value, PPRSynchroLifeCycleNLS.ChangeControl);

			value = objParam[PPRSynchroViewConstants.TRANSFER];
			fieldInfo.cells[this.cellsIndex.transfer].value = value;
			iCell = fieldInfo.cells[this.cellsIndex.transfer];
			this.fullfillBooleanCell(iCell, value, PPRSynchroLifeCycleNLS.Transfer);

			value = objParam[PPRSynchroViewConstants.SHARE];
			fieldInfo.cells[this.cellsIndex.share].value = value;
			iCell = fieldInfo.cells[this.cellsIndex.share];
			this.fullfillBooleanCell(iCell, value, PPRSynchroLifeCycleNLS.Share);


			//orange on the line
			this.setDeployedStatusFieldLine(fieldInfo,deployedStatus);

			fieldInfo.cells[this.cellsIndex.deployFlag].value = PPRSynchroViewConstants.MODIFY;

			//modify green orange on the Top
			ruleView.updateFormulaTextFields(deployedStatus);
		},

		updateFormulaTextFields: function (isDeployed) {
			//text displayed on Top
			var formulaField = document.querySelector(".PPRRulesFormula");
			var nCellFormula = formulaField.cells.length;
			if (nCellFormula > 1) {
				var cellIconStatusGlobal = formulaField.cells[nCellFormula - 1];
				cellIconStatusGlobal.empty();
				var imgSpan;
				if (isDeployed == PPRSynchroViewConstants.DEPLOYED )
					imgSpan = ruleView.buildImgSpan('check', '2.5', 'green', PPRSynchroLifeCycleNLS.Deployed);
				else
					imgSpan = ruleView.buildImgSpan('cog', '2.5', 'orange', PPRSynchroLifeCycleNLS.Modified);
				imgSpan.inject(cellIconStatusGlobal);
			}
		},

		removefieldLineCallBack: function (fieldInfo) {

			if (fieldInfo != "undefined")
			{
				ruleView.updateFormulaTextFields(PPRSynchroViewConstants.NEW_NOT_DEPLOYED);
				var value = fieldInfo.cells[ruleView.cellsIndex.deployFlag].value;
				if ( value == PPRSynchroViewConstants.NEW_NOT_DEPLOYED) {
					fieldInfo.remove();
				} else {
					ruleView.setForRemoveFieldLine(fieldInfo);
				}
			}
		},	
		setDeletedCellStyle: function (iCell) {
			//allow to Strikethrough the cell
			var previousVal = iCell.value, showValue = previousVal, iATpos;
			iCell.empty();
			iATpos = previousVal.indexOf("@");
			if (iATpos > 0) {
				showValue = previousVal.substring(0, iATpos);
			}
			UWA.createElement('del', {
				text: showValue,
				value: previousVal,
				'class': 'font-3dslight'
			}).inject(iCell);
		},
		setForRemoveFieldLine: function (fieldInfo) {
			fieldInfo.value = PPRSynchroViewConstants.NEW_NOT_DEPLOYED;
			var arrayAction = fieldInfo.cells[ruleView.cellsIndex.action].getElements('span');
			arrayAction.forEach(function (action) {
				action.hide();
			});

			var deploycell = fieldInfo.cells[ruleView.cellsIndex.deployFlag];
			var imgSpan = ruleView.buildImgSpan('trash', '1.5', 'red', PPRSynchroLifeCycleNLS.removedField);

			deploycell.empty();

			deploycell.value = PPRSynchroViewConstants.REMOVE;

			imgSpan.inject(deploycell);

			var typeCell = fieldInfo.cells[ruleView.cellsIndex.type];
			ruleView.setDeletedCellStyle(typeCell);
		},

		setDeployedStatusFieldLine: function (fieldInfo, deployedStatus) {
			var deploycell = fieldInfo.cells[ruleView.cellsIndex.deployFlag];
			deploycell.value = deployedStatus;

			var imgSpan;
			//check green
			if (deployedStatus == PPRSynchroViewConstants.DEPLOYED) 
				imgSpan = this.buildImgSpan('check', '2.5', 'green', PPRSynchroLifeCycleNLS.Deployed);
			else //orange
				imgSpan = this.buildImgSpan('cog', '2.5', 'orange', PPRSynchroLifeCycleNLS.Modified);
			deploycell.empty();
			imgSpan.inject(deploycell);
		},

		getTypeArrayAlradySetInview: function (tableLifeCyclePPRRules) {
			var nRows = tableLifeCyclePPRRules.length;

			var tableTypeAlreadySet = new Array();
			var i, type;
			for (i = 0; i < nRows; i++) {
				type = tableLifeCyclePPRRules[i].cells[this.cellsIndex.type].value;
				tableTypeAlreadySet.push(type);
			}
			return tableTypeAlreadySet;
		},

		getLabelTypeFromTypeValue: function (iValue)
		{
		var label;
         if ( iValue ==  PPRSynchroViewConstants.Provide ) {
					label = PPRSynchroLifeCycleNLS.Provide;
			}
			else if ( iValue ==  PPRSynchroViewConstants.CreateAssembly ) {
					label = PPRSynchroLifeCycleNLS.CreateAssembly;
			}

			else if ( iValue ==  PPRSynchroViewConstants.ElementaryEndItem ) {
					label = PPRSynchroLifeCycleNLS.ElementaryEndItem;
			}

			else if ( iValue ==  PPRSynchroViewConstants.Fasten ) {
					label = PPRSynchroLifeCycleNLS.Fasten;
			}
			else if ( iValue ==  PPRSynchroViewConstants.RemoveMaterial ) {
					label = PPRSynchroLifeCycleNLS.RemoveMaterial;
			}
			else if ( iValue ==  PPRSynchroViewConstants.Predrill ) {
					label = PPRSynchroLifeCycleNLS.Predrill;
			}
			else if ( iValue ==  PPRSynchroViewConstants.Drill ) {
					label = PPRSynchroLifeCycleNLS.Drill;
			}
			else if ( iValue ==  PPRSynchroViewConstants.NoDrill ) {
					label = PPRSynchroLifeCycleNLS.NoDrill;
			}
			else if ( iValue ==  PPRSynchroViewConstants.ContinuousProcessProvide ) {
					label = PPRSynchroLifeCycleNLS.ContinuousProcessProvide;
			}
			else if ( iValue ==  PPRSynchroViewConstants.ContinuousProcessCreateMaterial ) {
					label = PPRSynchroLifeCycleNLS.ContinuousProcessCreateMaterial;
			}
			else if ( iValue ==  PPRSynchroViewConstants.Transform ) {
					label = PPRSynchroLifeCycleNLS.Transform;
			}
			else if ( iValue ==  PPRSynchroViewConstants.CreateKit ) {
					label = PPRSynchroLifeCycleNLS.CreateKit;
			}
			else if ( iValue ==  PPRSynchroViewConstants.Installation ) {
					label = PPRSynchroLifeCycleNLS.Installation;
			}
			else if ( iValue ==  PPRSynchroViewConstants.ServicePart ) {
					label = PPRSynchroLifeCycleNLS.ServicePart;
			}
			else if ( iValue ==  PPRSynchroViewConstants.ServiceKit ) {
					label = PPRSynchroLifeCycleNLS.ServiceKit;
			}
			else if ( iValue ==  PPRSynchroViewConstants.ServiceAssembly ) {
					label = PPRSynchroLifeCycleNLS.ServiceAssembly;
			}
			else if ( iValue ==  PPRSynchroViewConstants.Machining ) {
					label = PPRSynchroLifeCycleNLS.Machining;
			}
			else if ( iValue ==  PPRSynchroViewConstants.Marking ) {
					label = PPRSynchroLifeCycleNLS.Marking;
			}
			else if ( iValue ==  PPRSynchroViewConstants.Split ) {
					label = PPRSynchroLifeCycleNLS.Split;
			}
			else if ( iValue ==  PPRSynchroViewConstants.Beveling ) {
					label = PPRSynchroLifeCycleNLS.Beveling;
			}
			else if ( iValue ==  PPRSynchroViewConstants.Cutting ) {
					label = PPRSynchroLifeCycleNLS.Cutting;
			}
		
			else if ( iValue ==  PPRSynchroViewConstants.Grinding ) {
					label = PPRSynchroLifeCycleNLS.Grinding;
			}
		 else if (iValue == PPRSynchroViewConstants.DetailedFasten) {
			 label = PPRSynchroLifeCycleNLS.DetailedFasten;
			 }
			return label;
		},

		editFieldDialog: function (editField, result, avoidDupCounterUserValue) {

			var options = {
				className: "ppr-lifecyclrules-edit-modal",
				title: PPRSynchroLifeCycleNLS.editField,
				AvoidDupCounterUserSelectionRequired : avoidDupCounterUserValue
			};

			var that = this;
			this.modal = new PPRSynchroAddLineDialog(options);
			this.modal.attributes = result;

			

			function _getFooter() {
				return "<button type='button'  name='addButton' id='add-button' class='btn btn-primary'>" + PPRSynchroLifeCycleNLS.add + "</button> " + "</button>" + "<button type='button' name='cancelButton' id='cancel-button' class='btn btn-default'>" + PPRSynchroLifeCycleNLS.cancel + "</button>"
			}
			this.modal.modal.setFooter(_getFooter());

			var fetchedData = this.buildObjectFromRow(editField);
			var comboValue = fetchedData.Type;
			var comboLabel = this.getLabelTypeFromTypeValue(comboValue);

			var selectTypeCombo = new Select({
				multiple: false,
				custom: false,
				options: [
					{label : comboLabel, value : comboValue}
				]});

			this.modal.getModalBody(selectTypeCombo);
			this.modal._bindFooterEvent();

			var editingField = editField;

			var rowsOfMappedFields = document.querySelectorAll(".PPRLifeCycleRulesMapping");
			var successFields = document.querySelector('.success');
			var toCheckTheExistingRows = rowsOfMappedFields.length;

			

			//set the value in modal (dialog -Edition)
			this.modal.setEditValueFields(fetchedData);
	

			this.tableWdthArray = PPRSynchroViewConstants.WIDTH_ARRAY

			this.modal.getContent().getElements('.btn').forEach(function (element) {

				if (element.name === 'addButton') {

					element.addEvent('click', function () {
						var duplicateData = {};
						var checkStatus = {};
						checkStatus.isSuccess = true;

						var toDisplayOver = that.modal.getContent().getElement('.ppr-lifecycling-rules-content');

						//at least one type should be selected
						//normaly in edition, this case should not happened
						if (that.modal.typeSelectionNotValid()) {
							that.modal.displayAlertMessage(PPRSynchroLifeCycleNLS.selectTypeMessage, toDisplayOver);
						}
						//at least one rule should be selected
						else if (that.modal.lifeCycleRulesSelectionNotValid()) {
							that.modal.displayAlertMessage(PPRSynchroLifeCycleNLS.selectrulesMessage, toDisplayOver);
						}
						//at least one command should be selected
						else if (that.modal.commandSelectionNotValid()) {
							that.modal.displayAlertMessage(PPRSynchroLifeCycleNLS.selectcommandsMessage, toDisplayOver);
						}
						else {
							
							var userSelectedMultiTypes = that.modal.getUserEnteredValues();

							var listTypesSelected = userSelectedMultiTypes[PPRSynchroViewConstants.TYPE];
							//loop on every type in list
							//when editing there is only one
							for (var ii = 0; ii < listTypesSelected.length; ii++) {
								var userEditedFormat = {};
								userEditedFormat[PPRSynchroViewConstants.TYPE] = listTypesSelected[ii];
								userEditedFormat[PPRSynchroViewConstants.COMPUTED_RESULTING_PRODUCT] = userSelectedMultiTypes[PPRSynchroViewConstants.COMPUTED_RESULTING_PRODUCT];
								//SPEC_DOC commented asked by Paul IR926203
								//userEditedFormat[PPRSynchroViewConstants.SPEC_DOC] = userSelectedMultiTypes[PPRSynchroViewConstants.SPEC_DOC];
								userEditedFormat[PPRSynchroViewConstants.CHILD_TRANSFORMATION_TYPES] = userSelectedMultiTypes[PPRSynchroViewConstants.CHILD_TRANSFORMATION_TYPES];

								userEditedFormat[PPRSynchroViewConstants.NEW_REVISION] = userSelectedMultiTypes[PPRSynchroViewConstants.NEW_REVISION];
								userEditedFormat[PPRSynchroViewConstants.NEW_BRANCH] = userSelectedMultiTypes[PPRSynchroViewConstants.NEW_BRANCH];
								userEditedFormat[PPRSynchroViewConstants.DUPLICATE] = userSelectedMultiTypes[PPRSynchroViewConstants.DUPLICATE];
								userEditedFormat[PPRSynchroViewConstants.DELETE] = userSelectedMultiTypes[PPRSynchroViewConstants.DELETE];
								userEditedFormat[PPRSynchroViewConstants.TRANSFER_OWNERSHIP] = userSelectedMultiTypes[PPRSynchroViewConstants.TRANSFER_OWNERSHIP];
								userEditedFormat[PPRSynchroViewConstants.CHANGE_MATURIY] = userSelectedMultiTypes[PPRSynchroViewConstants.CHANGE_MATURIY];
								userEditedFormat[PPRSynchroViewConstants.LOCK] = userSelectedMultiTypes[PPRSynchroViewConstants.LOCK];
								userEditedFormat[PPRSynchroViewConstants.CHANGE_CONTROL] = userSelectedMultiTypes[PPRSynchroViewConstants.CHANGE_CONTROL];
								userEditedFormat[PPRSynchroViewConstants.TRANSFER] = userSelectedMultiTypes[PPRSynchroViewConstants.TRANSFER];
								userEditedFormat[PPRSynchroViewConstants.SHARE] = userSelectedMultiTypes[PPRSynchroViewConstants.SHARE];


								userEditedFormat[PPRSynchroViewConstants.OPERATION] = PPRSynchroViewConstants.MODIFY;
								var fieldInfo = ruleView.modifyField(editingField, userEditedFormat, PPRSynchroViewConstants.NEW_NOT_DEPLOYED);
							}

							that.modal.destroy();
						}
					});
				}
			});
			this.modal.show();
		}
	};
	ruleView.initVariable();
	return ruleView;
});

/**
* @quickreview  KB9 21:11:09
*/

define('DS/ParameterizationSkeleton/Views/DELConfigurationParameterization/DELConfigurationTreeListView',
[
  'UWA/Class',
  'DS/Controls/Button',
  'DS/Controls/Label',
  'DS/Controls/ComboBox',
  'DS/Tree/TreeDocument',
  'DS/Tree/TreeNodeModel',
  'DS/DataGridView/DataGridView',
  'DS/ParameterizationSkeleton/Views/DELConfigurationParameterization/DELConfigurationTreeListViewConstants',
  'i18n!DS/ParameterizationSkeleton/assets/nls/DELConfigurationTreeListView',
  'css!DS/ParameterizationSkeleton/assets/css/DELConfigurationTreeListView.css'
],
function
(
  Class,
  WUXButton,
  WUXLabel,
  WUXComboBox,
  TreeDocument,
  TreeNodeModel,
  DataGridView,
  DELConfigurationTreeListViewConstants,
  DELConfigurationTreeListViewNls
)
{
  'use strict';

  var DELConfigurationTreeListView = Class.extend({

    _nls : null,

    /*
    * init
    */
    init : function init(options)
    {
       var that = this;
       that._nls = options.nls;
       that._paramID = options.paramid;

       var colLabelsNls = options.nls;

       that._columnsIDs = [];
       that._columnsVisibilityStatus = [];
       that._columnsCellSemantics = [];

       var columns = options.columns;
       var colLength = columns.length;
       for (var i=0;i<colLength;i++)
       {
        that._columnsIDs.push(columns[i].id);
        that._columnsCellSemantics.push(columns[i].onCellSemantics);
        that._columnsVisibilityStatus.push(columns[i].hidden);
      }

       that._treeListViewConstants = new DELConfigurationTreeListViewConstants();
       that._treeListViewConstants.setColumnsIndex(that._columnsIDs);
       that._treeListViewConstants.setColumnsNameNls(colLabelsNls);
       that._treeListViewConstants.setColumnsVisibilityStatus(that._columnsVisibilityStatus);
    },

    /*
    * buildColumns
    */
    buildColumns : function buildColumns(ldata)
    {
      var that = this;
      var index = that._treeListViewConstants.getColumnsIndex().indexOf(ldata.dataIndex);
      if (that._treeListViewConstants.getColumnsVisibilityStatus()[index] != undefined || that._treeListViewConstants.getColumnsVisibilityStatus()[index] != null)
        ldata.visibleFlag  = !(that._treeListViewConstants.getColumnsVisibilityStatus()[index]);

      if (ldata.dataIndex === "isDeployed" || ldata.dataIndex === "edit" || ldata.dataIndex === "delete")
      {
          ldata.alwaysVisibleFlag = true;

          ldata.alignment = 'center';
          ldata.width = '50';
          if (ldata.dataIndex === "delete")
          {
            ldata.typeRepresentation = "delete";
            //ldata.onCellRequest = that.onDeleteCellRequestValue.bind(that);
            ldata.getCellTooltip = that.getCellTooltip.bind(that);
          }

          if (ldata.dataIndex === "edit")
          {
            ldata.typeRepresentation = "edit";
            //ldata.onCellRequest = that.onEditCellRequestValue.bind(that);
            ldata.getCellTooltip = that.getCellTooltip.bind(that);
          }

          if (ldata.dataIndex === "isDeployed")
          {
            ldata.width = '150';
            ldata.alignment = 'center';
            ldata.getCellTypeRepresentation = function (iCellInfos) {
             if (iCellInfos.nodeModel) {
               if (iCellInfos.nodeModel.options.grid.isDeployed === true)
                 return 'isDeployed';
               else
                 return 'notDeployed';
             }
           };
           //ldata.onCellRequest = that.onIsDeployedCellRequestValue.bind(that);
           //ldata.getCellTooltip = that.getCellTooltip.bind(that);
           ldata.getCellTooltip = function(iCellInfos)
           {
              if (iCellInfos.nodeModel != undefined && iCellInfos.nodeModel.options.grid.isDeployed === true)
              {
                return {
                  shortHelp : DELConfigurationTreeListViewNls.Applied
                };
              }
           }
         }
       }
       else
       {

         if (that._columnsCellSemantics[index] != undefined || that._columnsCellSemantics[index] != null)
         {
           ldata.editableFlag = true;
           ldata.typeRepresentation = 'string';
           ldata.editionPolicy ='EditionOnOver';
           //ldata.onCellRequest = that.onIsDeployedCellRequestValue.bind(that);
           ldata.getCellSemantics = that._columnsCellSemantics[index];
         }
         else {
           if(ldata.type === "checkbox"){
             ldata.width = '150';
             ldata.alignment = 'center';
             ldata.typeRepresentation = 'checkboxoff';
             ldata.getCellTypeRepresentation = function (iCellInfos) {
               if(iCellInfos.cellModel === true)
               return 'checkboxon';
               else
               return 'checkboxoff';
             };
           }
         }
       }
    },


    /*
    * buildView
    */
     buildView : function buildView(options)
     {
        var that = this;

        var columns = options.columns;
        var colLabelsNls = options.nls;
        var data = options.data;

        var cols = [];
        var columnsLength = that._treeListViewConstants.getColumnsIndex().length;
        for (var i=0;i<columnsLength;i++)
        {
          var ldata = {};

          ldata.editableFlag = false;
          ldata.sortableFlag = true;
          ldata.resizableFlag = true;

          if (columns[i] != null && columns[i].mandatory != null && columns[i].mandatory === true)
            ldata.alwaysVisibleFlag = true;

          ldata.dataIndex = that._treeListViewConstants.getColumnsIndex()[i];
          ldata.text = that._treeListViewConstants.getColumnsName()[i];
          if(columns[i] != null)
            ldata.type = columns[i].type;


          //var shortHelp = that._nls[ldata.dataIndex];
          that.buildColumns(ldata);
          cols.push(ldata);
        }


       // Create the model for the DataGridView
       this.model = new TreeDocument();

       this.dataGridView = new DataGridView({
         identifier : "DELDatagridviewparam_" + that._paramID,
         treeDocument: this.model,
         columns: cols
       });

       //this.setReusablecontent();
       this.setTypeRepresentation();

       this.dataGridView.getContent().style.top = null;
       this.dataGridView.getContent().style.bottom = null;
       this.dataGridView.getContent().style.height = "300px";
       this.dataGridView.getContent().style.position = "relative";
       //this.dataGridView.getContent().style.width = "92%"

       /*this.dataGridView.addEventListener('change', function(e, cellInfos) {
         console.log(" RowID: " + cellInfos.rowID );
       });*/
       return this.dataGridView;
    },


    /*
    * getCellTooltip
    */
    getCellTooltip : function getCellTooltip(iCellInfos)
    {
      var that = this;
      if (iCellInfos.nodeModel) {
          return {
            shortHelp : that._treeListViewConstants.getColumnsName()[iCellInfos.columnID]
          };
      }
    },

    /*onIsDeployedCellRequestValue : function onIsDeployedCellRequestValue(iCellInfos)
    {
      if (iCellInfos.nodeModel.options.grid.isDeployed === true)
      {
        var reusableContent = iCellInfos.cellView.reuseCellContent('reusableIsDeployed');
        reusableContent = iCellInfos.cellView.collectionView.reuseCellContent('reusableIsDeployed');
        iCellInfos.cellView.getContent().setContent(reusableContent);
      }
    },*/

     /*onEditCellRequestValue : function onEditCellRequestValue(iCellInfos)
     {
       var reusableContent = iCellInfos.cellView.reuseCellContent('reusableEdit');
       reusableContent = iCellInfos.cellView.collectionView.reuseCellContent('reusableEdit');
       iCellInfos.cellView.getContent().setContent(reusableContent);
     },

     onDeleteCellRequestValue : function onDeleteCellRequestValue(iCellInfos)
     {
       var reusableContent = iCellInfos.cellView.reuseCellContent('reusableDelete');
       reusableContent = iCellInfos.cellView.collectionView.reuseCellContent('reusableDelete');
       iCellInfos.cellView.getContent().setContent(reusableContent);
     },*/

     /*
     * setTypeRepresentation
     */
     setTypeRepresentation : function setTypeRepresentation(customTypeRep)
     {
       var that = this;

       /*var customTypeRep = {
         checkboxon: {
            stdTemplate: 'functionIcon',
            semantics: {
              icon: {
                iconName: 'checkbox-on',
                fontIconFamily: WUXManagedFontIcons.Font3DS
              }
            }
          },
          checkboxoff: {
             stdTemplate: 'functionIcon',
             semantics: {
               icon: {
                 iconName: 'checkbox-off',
                 fontIconFamily: WUXManagedFontIcons.Font3DS
               }
             }
           }
        };*/

       var typeReps = {
          delete: {
            stdTemplate: 'functionIcon',
            semantics: {
              icon: {
                iconName: 'trash',
                fontIconFamily: WUXManagedFontIcons.Font3DS
              }
            }
          },
          edit: {
            stdTemplate: 'functionIcon',
            semantics: {
              icon: {
                iconName: 'pencil',
                fontIconFamily: WUXManagedFontIcons.Font3DS
              }
            }
          },
          isDeployed: {
            stdTemplate: 'functionIcon',
            semantics: {
              icon: {
                iconName: 'check',
                fontIconFamily: WUXManagedFontIcons.Font3DS
              }
            }
          },
          notDeployed: {
            stdTemplate: 'functionIcon',
            semantics: {
              icon: {
                iconName: 'cog',// 'close',
                fontIconFamily: WUXManagedFontIcons.Font3DS
              }
            }
          },
          checkboxon: {
            stdTemplate: 'functionIcon',
            semantics: {
              icon: {
                iconName: 'check',
                fontIconFamily: WUXManagedFontIcons.Font3DS
              }
            }
          },
          checkboxoff: {
            stdTemplate: 'functionIcon',
            semantics: {
              icon: {
                iconName: 'wrong',
                fontIconFamily: WUXManagedFontIcons.Font3DS
              },
              color: '#e2e4e3'
            }
          }
				};

        typeReps = Object.assign(typeReps, customTypeRep);
        this.dataGridView.getTypeRepresentationFactory().registerTypeRepresentations(JSON.stringify(typeReps));
     },

     /*setReusablecontent: function setReusablecontent()
     {
         var that = this;

         //-- registering custom cell contents --
          that.dataGridView.registerReusableCellContent({
             id: 'reusableIsDeployed',
             buildContent: function () {
               var myDeleteButton = new WUXComboBox({
                elementsList: ["Julien", "David", "Alexandre", "Cyrielle", "Blandine"]
             	});
               myDeleteButton.getContent().addEventListener('onChange', function(data){
                    console.log("clickclick myDeleteButton" + data);
               });
               return myDeleteButton;
             }
         });
      },*/

      /*setReusablecontent: function setReusablecontent()
      {
          var that = this;

          //-- registering custom cell contents --
           that.dataGridView.registerReusableCellContent({
              id: 'reusableEdit',
              buildContent: function () {
                var myEditButton = new WUXButton({ icon: { iconName: "pencil", fontIconFamily: WUXManagedFontIcons.Font3DS } })
                myEditButton.getContent().addEventListener('buttonclick', function(data){
                     console.log("clickclick myEditButton" + data);
                });
                return myEditButton;
              }
          });

          that.dataGridView.registerReusableCellContent({
              id: 'reusableDelete',
              buildContent: function () {
                var myDeleteButton = new WUXButton({ icon: { iconName: "trash", fontIconFamily: WUXManagedFontIcons.Font3DS } })
                myDeleteButton.getContent().addEventListener('buttonclick', function(data){
                     console.log("clickclick myDeleteButton" + data);
                });
                return myDeleteButton;
              }
          });
      },*/

      /*
      * addChild
      */
     addChild : function addChild(nodeData)
     {
       var that = this;
       this.model.prepareUpdate();

       var nodeDataLength = nodeData.length;
       for (var i=0;i<nodeDataLength;i++)
       {
         var nodeKeysTMP = Object.keys(nodeData[i]);
         if (nodeKeysTMP.length)
         {
           for (var k=0;k<nodeKeysTMP.length;k++)
           {
             var keys = nodeKeysTMP[k];
             if (keys)
             {
               for (var m=0;m<that.dataGridView.columns.length;m++)
               {
                 if (that.dataGridView.columns[m].dataIndex === keys)
                  that.dataGridView.columns[m].visibleFlag = true;
              }
             }
           }
         }

         this.model.addChild(nodeData[i]);
      }

       this.model.expandAll();
       this.model.pushUpdate();
     }
  });


  return DELConfigurationTreeListView;
});

/**
* @quickreview  KB9 21:10:25 creation
*/

define('DS/ParameterizationSkeleton/Views/DELConfigurationParameterization/DELConfigurationFamilyView',
    [
    'UWA/Core',
    'UWA/Class',
    'DS/Tweakers/GeneratedToolbar',
    'DS/ParameterizationSkeleton/Views/DELConfigurationParameterization/DELConfigurationTreeListView',
    'DS/ParameterizationSkeleton/Utils/DELConfigurationParameterization/DELConfigurationParameterizationWebServices',
    'DS/Controls/Label',
    'DS/Controls/ComboBox',
    'DS/Controls/LineEditor',
    'DS/Controls/Toggle',
    'DS/Controls/TooltipModel',
    'DS/ParameterizationSkeleton/Views/DELConfigurationParameterization/DELConfigurationModalView',
    'DS/ParameterizationSkeleton/Model/DELConfigurationParameterizationModel/DELConfigurationParamTranslationModel',
    'DS/Notifications/NotificationsManagerUXMessages',
    'DS/Notifications/NotificationsManagerViewOnScreen',
    'i18n!DS/ParameterizationSkeleton/assets/nls/ParamSkeletonNLS',
    'i18n!DS/ParameterizationSkeleton/assets/nls/DELConfigurationLayoutView',
    'css!DS/ParameterizationSkeleton/ParameterizationSkeleton',
    'css!DS/ParameterizationSkeleton/assets/css/DELConfigurationLayoutView'
    ],
    function (
      UWA,
      Class,
      WUXGeneratedToolbar,
      DELConfigurationTreeListView,
      DELConfigurationParameterizationWebServices,
      WUXLabel,
      WUXComboBox,
      WUXEditor,
      WUXToggle,
      WUXTooltipModel,
      DELConfigurationModalView,
      DELConfigurationParamTranslationModel,
      NotificationsManagerUXMessages,
      NotificationsManagerViewOnScreen,
      ParamSkeletonNLS,
      Nls
    )
  {

  'use strict';

  var DELConfigurationFamilyView = Class.extend({

    _uiElementsIDs : [],
    _treeListViewNls : null,
    _modalViewNls : null,
    _nodeTreeViewNls : null,
    _xmlDoc : null,
    _domainID : null,
    _familyID : null,
    _paramID : null,
    _argID : null,

    /*
    * init
    */
    init : function init(options)
    {
      //this._parent(options);

      this._domainID = options.domainid;
      this._familyID = options.familyid;
      this._paramID = options.parameterid;
      this._argID = options.argid;

      this._xmlDoc = options.xmlDoc;

      if (options.treeListViewNls != undefined || options.treeListViewNls != null)
        this._treeListViewNls = options.treeListViewNls;

      if (options.modalViewNls != undefined || options.modalViewNls != null)
        this._modalViewNls = options.modalViewNls;

      if (options.nodeTreeViewNls != undefined || options.nodeTreeViewNls != null)
        this._nodeTreeViewNls = options.nodeTreeViewNls;

      // -- Initialize notificationsManager to display events on screen
      NotificationsManagerViewOnScreen.setNotificationManager(NotificationsManagerUXMessages);

      // -- Configure the manager
      NotificationsManagerViewOnScreen.setRemoveStackOnFirstTimeoutFlag(true);
      NotificationsManagerViewOnScreen.setStackingPolicy(31); //21
    },

    /*
    * presetModal
    */
    presetModal : function presetModal(node)
    {
      console.log("presetModal");
      var that = this;
      that._node = node;

      var nodeGrid = node.getGrid();
      var uiElementsIDLength = that._uiElementsIDs.length;
      for (var i=0;i<uiElementsIDLength;i++)
      {
        var eltUI = that._uiElementsIDs[i];
        if (eltUI)
        {
          var eltUIid = eltUI.id;
          var docElt = document.getElementById(eltUIid);
          if (docElt)
          {
            if (eltUI.type === "textarea")
              docElt.dsModel.value = nodeGrid[eltUIid];

            if (eltUI.type === "checkbox")
                docElt.dsModel.checkFlag = nodeGrid[eltUIid];

            if (eltUI.type === "combobox" || eltUI.type === "multiselcombobox")
            {
              var selectedIndex = -1;
              var elementList = docElt.dsModel.elementsList;
              var elementListLength = elementList.length;
              for (var k=0;k<elementListLength && selectedIndex === -1;k++)
              {
                if (elementList[k].label === nodeGrid[eltUIid])
                 selectedIndex = k;
              }

              docElt.dsModel.selectedIndex = selectedIndex;
            }
          }
        }
      }
    },


    /*
    * createtreeNode
    */
    createtreeNode : function createtreeNode(data, grid)
    {
      var that = this;

      var treeNodeModel = new DELConfigurationParamTranslationModel({
        data : data,
        grid : grid,
        nls : that._nodeTreeViewNls
      });

      return treeNodeModel;
    },

    /*
    * validateModal
    */
    validateModal : function validateModal()
    {
      var that = this;
      console.log("validateModal");

      var data = new Map();
      var grid = new Map();

      var uiElementsIDLength = that._uiElementsIDs.length;
      var uiElementsID = that._uiElementsIDs;

      for (var i=0;i<uiElementsIDLength;i++)
      {
        var uiEl = document.getElementById(that._uiElementsIDs[i].id);
        if (uiEl)
        {
          if (uiEl.dsModel.checkFlag != undefined || uiEl.dsModel.checkFlag != null)
          {
            data.set(that._uiElementsIDs[i].id, uiEl.dsModel.checkFlag);
            grid.set(that._uiElementsIDs[i].id, uiEl.dsModel.checkFlag);
          }
          else
          {
            if (that._uiElementsIDs[i].mandatory === true)
            {
              var bMandatoryField = false;
              if (that._uiElementsIDs[i].type != "combobox")
              {
                if (uiEl.dsModel.value != undefined && uiEl.dsModel.value != null && uiEl.dsModel.value != "")
                {
                  bMandatoryField = true;
                  data.set(that._uiElementsIDs[i].id, uiEl.dsModel.value);
                  grid.set(that._uiElementsIDs[i].id, uiEl.dsModel.value);
                }
              }
              else {
                if (uiEl.dsModel.label != undefined && uiEl.dsModel.label != null && uiEl.dsModel.label != "")
                {
                  bMandatoryField = true;
                  data.set(that._uiElementsIDs[i].id, uiEl.dsModel.value);//uiEl.dsModel.label);
                  grid.set(that._uiElementsIDs[i].id, uiEl.dsModel.label);
                }
              }

              if (!bMandatoryField) {
                var mandatoryCol = that._treeListViewNls[that._uiElementsIDs[i].id];
                var nlsErrorMsg = Nls.columnMandatory;
                nlsErrorMsg = nlsErrorMsg.replace("%1", mandatoryCol);
                that._modalView.showToastMessage(2, nlsErrorMsg);
                return;
              }
            }
            else
            {
              if (that._uiElementsIDs[i].type != "combobox")
              {
                data.set(that._uiElementsIDs[i].id, uiEl.dsModel.value);
                grid.set(that._uiElementsIDs[i].id, uiEl.dsModel.value);
              }
              else
              {
                data.set(that._uiElementsIDs[i].id, uiEl.dsModel.value);//uiEl.dsModel.label);
                grid.set(that._uiElementsIDs[i].id, uiEl.dsModel.label);
              }
            }
          }
        }
      }

      var objData = {};
      var objGrid = {};
      data.forEach(function(value, key){;
        if (value != "" && value != undefined)
          objData[key] = value;
      });

      grid.forEach(function(value, key){
        objGrid[key] = value;
      });


      var treeNodeModel = that.createtreeNode(objData, objGrid);
      return treeNodeModel;
    },

    /*
    * mapFunctions
    */
    mapFunctions : function mapFunctions(name)
    {

    },

    /*
    * render
    */
    render : function render()
    {
      var that = this;
      this._parent();

      return this;
    },

    /*
    * buildtreeListView
    */
    buildtreeListView : function buildtreeListView()
    {
      var that = this;

      var options = {};
      options.data = [];
      options.columns = that._uiElementsIDs;
      options.nls = that._treeListViewNls;
      options.paramid = this._paramID;

      that.treeList = new DELConfigurationTreeListView(options);
      that.treeListView  = that.treeList.buildView(options);
    },

    /*
    * buildFamilyContent
    */
    buildFamilyContent : function buildFamilyContent() {
      var that = this;

      this._uiElementsIDs = [];

      var contentTreeView = UWA.createElement('div');
      //that._xmlDoc = xmlDoc;
      //that._xmlDoc = that._xmlMap.get(iFamily.id);

      var ui = that._xmlDoc.getElementsByTagName("ui");
      if (ui != null && ui.length)
      {
        var attrList = ui[0].getElementsByTagName("object");
        var attrListLength = attrList.length;
        for (var i=0;i<attrListLength;i++)
        {
          //var uiobjectLabelValue = attrList[i].attributes.labelvalue.value;
          var uiobjectType = attrList[i].attributes.type.value;
          //var uiobjectValue = attrList[i].attributes.value.value;

          var uiobjectID = null;
          if (attrList[i].attributes.id)
            uiobjectID = attrList[i].attributes.id.value;

          var uiobjectHidden = null;
          if (attrList[i].attributes.hidden)
            uiobjectHidden = (attrList[i].attributes.hidden.value === "true");

          var uiobjectMandatory = null;
          if (attrList[i].attributes.mandatory)
            uiobjectMandatory = (attrList[i].attributes.mandatory.value === "true");

          var uiobjectOnCellSemantics = null;
          if (attrList[i].attributes.onCellSemantics)
            uiobjectOnCellSemantics = that.mapFunctions(attrList[i].attributes.onCellSemantics.value);

          //that._uiElementsIDs.push(uiobjectID);
          that._uiElementsIDs.push({id : uiobjectID, type : uiobjectType, hidden : uiobjectHidden, mandatory : uiobjectMandatory, onCellSemantics : uiobjectOnCellSemantics});
        }

          //Generate the toolbar with the model JSONToolbar
          //var toolbar = dataGridView.setToolbar(JSON.stringify(JSONToolbar));

          //this.contentDiv.appendChild(treeListView);

          var divToolbar = document.createElement("div");
          divToolbar.className = "divToolbar";
          //that.contentDiv.appendChild(divToolbar);
          contentTreeView.appendChild(divToolbar);

          var JSONToolbar = {
          "entries": [
                {
                  "id": "buildModal",
                  "dataElements": {
                    "typeRepresentation": "functionIcon",
                    "tooltip": Nls.Add,
                    value: that.buildModal.bind(that, false),
                    "icon": {
                      "iconName": "plus",
                      "fontIconFamily": 1
                    },
                    "position": "far",
                    "category": "1"
                  }
                }
              ]};


          var toolbarModel = WUXGeneratedToolbar.prototype.createTreeDocument(JSONToolbar);
          var toolbar = new WUXGeneratedToolbar({
                overflowManagement: "scroll",
                direction: "horizontal",
                items: toolbarModel
            });

         toolbar.inject(divToolbar);


         //var options = {};
         //options.data = [];
         //options.columns = that._uiElementsIDs;
         //options.nls = that._treeListViewNls;

         //that.treeList = new DELConfigurationTreeListView(options);
         //that.treeListView  = that.treeList.buildView(options);
         that.buildtreeListView();
         that.treeListView.inject(contentTreeView);

         //that.treeListView.addEventListener('change', that.onCellViewChange.bind(that));

         //parent Div container
        //that.container.setContent(that.contentDiv);

        DELConfigurationParameterizationWebServices.getParameters(that._domainID, that._familyID, that._paramID, that._argID, {
          onSuccess : function(aprisoParams)
          {
              var listOfnodeTree = [];
              var aprisoParamsLength = aprisoParams.length;
              for (var i=0;i<aprisoParamsLength;i++)
                listOfnodeTree.push(that.createtreeNode(aprisoParams[i]))
              that.addChild(listOfnodeTree);//aprisoParams);
          }
        });

        return contentTreeView;
      }
      //else
      //  return this._parent(iFamily, familyPosition);
    },

    /*
    * onCellViewChange
    */
    /*onCellViewChange : function onCellViewChange(iCellEvent, iCellInfos)
    {
      var that = this;

      var node = iCellInfos.nodeModel.options.grid;
      delete node["isDeployed"];
      delete node["delete"];
      delete node["edit"];

      DELConfigurationParameterizationWebServices.deleteParameter(that._domainID, that._familyID, that._paramID, that._argID, that._node, {
        onSuccess : function(data)
        {
          DELConfigurationParameterizationWebServices.setParameters(that._domainID, that._familyID, that._paramID, that._argID, node, {
              onSuccess : function(data)
              {
                that._node = null;

                that.displayNotifications({
                  level: 'info',
                  message: Nls.modifyParameter,
                  title: Nls.modifyParameterTitle
                });
              },
              onFailure : function (err)
              {
                that.displayNotifications({
                  level: 'error',
                  message: Nls.modifyParameterError,
                  title: Nls.modifyParameterTitle
                });
              }
            });
        },
        onFailure : function (err)
        {
          that.displayNotifications({
            level: 'error',
            message: Nls.deleteParameterError,
            title: Nls.deleteParameter
          });
        }
      });
    },*/

    /*
    * addChild
    */
    addChild : function addChild(nodesTab)
    {
        var that = this;

        var nodesTabLength = nodesTab.length;
        for (var i=0;i<nodesTabLength;i++)
        {
            var grid = nodesTab[i].getGrid();
            grid.delete = {
            module: 'DS/ParameterizationSkeleton/Views/DELConfigurationParameterization/DELConfigurationFamilyView',
            func: 'removeSelectedNode',
            argument : {
              configurationLayoutView : that
            }
          };

            grid.edit = {
              module: 'DS/ParameterizationSkeleton/Views/DELConfigurationParameterization/DELConfigurationFamilyView',
              func: 'editSelectedNode',
              argument : {
                configurationLayoutView : that
              }
          };

       }

        that.treeList.addChild(nodesTab);//nodesTab);
    },

    /*
    * buildModal
    */
    buildModal : function buildModal(bEditMod)
    {
      var that = this;

      var contentModalView = UWA.createElement('div');
      //contentModalView.class = "contentModalView";

      if (that._xmlDoc != null)
      {
        var attrList = that._xmlDoc.getElementsByTagName("ui")[0].getElementsByTagName("object");
        var attrListLength = attrList.length;
        for (var i=0;i<attrListLength;i++)
        {
          if (that.treeListView.columns[i].visibleFlag === false)
            continue;

          //var uiobjectLabelValue = attrList[i].attributes.labelvalue.value;
          var uiobject = attrList[i].attributes.type.value;
          var uiobjectID = attrList[i].attributes.id.value;
          var uiobjectValue = attrList[i].attributes.value.value;

          var uiobjectDisabled = false;
          if (attrList[i].attributes.disabled)
            uiobjectDisabled = (attrList[i].attributes.disabled.value === "true");

          var uiobjectMandatory = null;
          if (attrList[i].attributes.mandatory)
            uiobjectMandatory = (attrList[i].attributes.mandatory.value === "true");

          var uiobjectOnChange = null;
          if (attrList[i].attributes.onChange)
            uiobjectOnChange = attrList[i].attributes.onChange.value;

          var subcontentDiv = new UWA.Element('div');
          subcontentDiv.className = "subcontentModalView";
          subcontentDiv.inject(contentModalView);

          var labelTitleNls = uiobjectID;
          var labelTooltipNls = uiobjectID;
          if (that._treeListViewNls != null || that._treeListViewNls != undefined)
          {
            if (that._treeListViewNls[uiobjectID] != undefined)
              labelTitleNls = that._treeListViewNls[uiobjectID];//that._treeListViewNls[uiobjectLabelValue];

            if (that._treeListViewNls[uiobjectID+"Tooltip"] != undefined)
              labelTooltipNls = that._treeListViewNls[uiobjectID+"Tooltip"];
          }

          var myLabel = new WUXLabel({value : labelTitleNls}).inject(subcontentDiv);
          myLabel.elements.container.className += " dellabelmodal";

          var myIcon = new WUXLabel({icon: "info"}).inject(subcontentDiv);
          myIcon.tooltipInfos = new WUXTooltipModel({
                       shortHelp: labelTooltipNls,
                       mouseRelativePosition: false,
                       position: "bottom"
                   });
          myIcon.elements.container.className += " deliconmodal";

          var uiElt = null;
          if (uiobject === "textarea")
          {
            var lOptions = {};
            //lOptions.nbRows = 1;
            lOptions.value = uiobjectValue;
            lOptions.disabled = uiobjectDisabled;
            lOptions.requiredFlag = uiobjectMandatory;
            uiElt = new WUXEditor(lOptions);
            uiElt.elements.container.className += " deltextEditormodal";
          }
          else if (uiobject === "checkbox")
          {
            var lOptions = {};
            lOptions.type = "switch";
            lOptions.value = 0;
            lOptions.disabled = (uiobjectDisabled === "true");
            uiElt = new WUXToggle(lOptions);
            //uiElt.elements.container.className = "toggleUI";
          }
          else if (uiobject === "combobox" || uiobject === "multiselcombobox")
          {
            //if (that._modalViewNls[uiobjectValue] != null)
            //  uiobjectValue = that._modalViewNls[uiobjectValue];

            var elementsList =  uiobjectValue.split(",");
            var elementsListNls = elementsList;
            var elementsListLength = elementsList.length;
            for (var m=0;m<elementsListLength;m++)
            {
              if (that._nodeTreeViewNls != null && that._nodeTreeViewNls[elementsList[m]] != null && that._nodeTreeViewNls[elementsList[m]] != undefined)
                elementsListNls[m] = {label: that._nodeTreeViewNls[elementsList[m]], value: elementsList[m]};
              else
                elementsListNls[m] = {label: elementsList[m], value: elementsList[m]};
            }

            var lOptions = {};
            lOptions.elementsList = elementsListNls;
            lOptions.selectedIndexes = [];
            lOptions.displayStyle = "normal";
            lOptions.enableSearchFlag = true;
            lOptions.placeholder = "Select";
            if (that._modalViewNls != null || that._modalViewNls != undefined)
              lOptions.placeholder = that._modalViewNls.Select;
            //lOptions.reachablePlaceholderFlag = true;
            lOptions.multiSelFlag = false;
            if (uiobject === "multiselcombobox")
              lOptions.multiSelFlag = true;

            lOptions.width = "100%";
            lOptions.height = "30px";
            lOptions.disabled = (uiobjectDisabled === "true");
            lOptions.generateRegexpString = function(text) {
               return text;
             };

            uiElt = new WUXComboBox(lOptions);
            uiElt.elements.container.className += " delcomboboxmodal";

            //uiElt.elements.container.className = "comboboxUI";
            //uiElt.elements.container.setAttribute('id',uiobjectID);

            if (uiobjectOnChange)
              uiElt.addEventListener('change', that.mapFunctions(uiobjectOnChange));
          }
          uiElt.elements.container.setAttribute('id',uiobjectID);
          uiElt.inject(subcontentDiv);
        }
      }

      var options = {};
      options.content = contentModalView;
      options.modalView = 2;
      options.title = "title";
      if (that._modalViewNls != null || that._modalViewNls != undefined)
        options.title = that._modalViewNls.modalTitle;

      if (bEditMod)
        options.OKButtonClick = that.onOKEditButtonClick.bind(that);
      else
        options.OKButtonClick = that.onOKButtonClick.bind(that);
      options.CancelButtonClick = that.onCancelButtonClick.bind(that);

      options.info = "info";
      if (that._modalViewNls != null || that._modalViewNls != undefined)
        options.info = that._modalViewNls.Info;

      that._modalView = new DELConfigurationModalView(options);
      that._modalView.buildModal();
    },

    /*
    * destroyModal
    */
    destroyModal : function destroyModal()
    {
      that._modalView.destroyModal();
    },

    /*
    * onOKEditButtonClick
    */
    onOKEditButtonClick : function onOKEditButtonClick()
    {
      var that = this;

      var treeListNode = that.validateModal();

      var oldnodeData = that._node.getData();
      delete oldnodeData["isDeployed"];
      delete oldnodeData["delete"];
      delete oldnodeData["edit"];

      var oldnodeGrid = that._node.getGrid();

      DELConfigurationParameterizationWebServices.deleteParameter(that._domainID, that._familyID, that._paramID, that._argID, oldnodeData, {
        onSuccess : function(data)
        {
          DELConfigurationParameterizationWebServices.setParameters(that._domainID, that._familyID, that._paramID, that._argID, treeListNode.getData()/*objNodeIsDeployed*/, {
              onSuccess : function(data)
              {
                DELConfigurationParameterizationWebServices.isDeployed(that._domainID, that._familyID, that._paramID, that._argID, treeListNode.getData()/*objNodeIsDeployed*/, {
                    onSuccess : function(dataIsDeployed)
                    {
                      var treeDoc = that.treeList.dataGridView.treeDocument;
                      if (treeDoc)
                      {
                        var children = treeDoc.getChildren();
                        var childrenLength = children.length;
                        for (var i=0;i<childrenLength;i++)
                        {
                          var childrenTMP = children[i];
                          if (childrenTMP)
                          {
                            var grid = childrenTMP.options.grid;
                            if (grid)
                            {
                              var bFound = true;
                              var uiElementsIDLength = that._uiElementsIDs.length;
                              var uiElementsID = that._uiElementsIDs;
                              for (var m=0;m<uiElementsIDLength && bFound;m++)
                              {
                                if (grid[that._uiElementsIDs[m].id] === "")
                                  continue;

                                if (grid[that._uiElementsIDs[m].id] != oldnodeGrid/*that._node*/[that._uiElementsIDs[m].id])
                                  bFound = false;
                              }

                              if (bFound)
                              {
                                  var objNode = treeListNode.getData();

                                  var objNodeGrid = treeListNode.getGrid();
                                  objNodeGrid.isDeployed = dataIsDeployed;
                                  objNodeGrid.edit = grid.edit;
                                  objNodeGrid.delete = grid.delete;

                                  childrenTMP.updateOptions({data : null});
                                  childrenTMP.updateOptions({grid : objNodeGrid, data : objNode});
                                  break;
                              }
                            }
                          }
                        }
                      }

                      that._node = null;

                      that.displayNotifications({
                        level: 'info',
                        message: Nls.modifyParameter,
                        title: Nls.modifyParameterTitle
                      });
                    }
                  });
              },
              onFailure : function (err)
              {
                that.displayNotifications({
                  level: 'error',
                  message: Nls.modifyParameterError,
                  title: Nls.modifyParameterTitle
                });
              }
            });
        },
        onFailure : function (err)
        {
          that.displayNotifications({
            level: 'error',
            message: Nls.deleteParameterError,
            title: Nls.deleteParameter
          });
        }
      });
    },

    /*
    * onOKButtonClick
    */
    onOKButtonClick : function onOKButtonClick()
    {
      var that = this;
      var treeListNode = that.validateModal();

      DELConfigurationParameterizationWebServices.setParameters(that._domainID, that._familyID, that._paramID, that._argID, treeListNode.getData()/*objNodeIsDeployed*/, {
        onSuccess : function(dataParams)
        {
          DELConfigurationParameterizationWebServices.isDeployed(that._domainID, that._familyID, that._paramID, that._argID, treeListNode.getData()/*objNodeIsDeployed*/, {
              onSuccess : function(dataIsDeployed)
              {
                //objNode.isDeployed = dataIsDeployed;
                treeListNode.addGridAttributes({isDeployed : dataIsDeployed});

                that.addChild([treeListNode/*objNode*/]);

                that.displayNotifications({
                  level: 'info',
                  message: Nls.setParameters,
                  title: Nls.setParametersTitle
                });
              }
            });
        },
        onFailure : function (err)
        {

          that.displayNotifications({
            level: 'error',
            message: Nls.setParametersError,
            title: Nls.setParametersTitle
          });
        }
      });
    },

    /*
    * onCancelButtonClick
    */
    onCancelButtonClick : function onCancelButtonClick()
    {

    },

    /*
    * destroy
    */
    destroy : function destroy() {
      this._uiElementsIDs = [];
      //this._uiElementsLabelValues = [];

        if (this._modalView)
          this._modalView.destroyModal();
        this._parent.apply(this, arguments);
    },

    /*
    * removeSelectedNode
    */
    removeSelectedNode : function removeSelectedNode(params)
    {
      console.log("params " + params);
      var that = this;

      var node = params.context.nodeModel;
      var nodeData = node.getData();
      delete nodeData["isDeployed"];
      delete nodeData["delete"];
      delete nodeData["edit"];

      DELConfigurationParameterizationWebServices.deleteParameter(that._domainID, that._familyID, that._paramID, that._argID, nodeData/*objNodeIsDeployed*/, {
        onSuccess : function(data)
        {
          var treeDoc = params.configurationLayoutView.treeList.dataGridView.treeDocument;
          if (treeDoc)
            treeDoc.removeRoot(node);//params.context.nodeModel);

          that.displayNotifications({
            level: 'info',
            message: Nls.deleteParameter,
            title: Nls.deleteParameterTitle
          });
        },
        onFailure : function (err)
        {
          that.displayNotifications({
            level: 'error',
            message: Nls.deleteParameterError,
            title: Nls.deleteParameterTitle
          });
        }
      });
    },

    /*
    * editSelectedNode
    */
    editSelectedNode : function editSelectedNode(params)
    {
      console.log("params " + params);

        var node = params.context.nodeModel;//Object.assign({}, params.context.nodeModel);
        var bEditMod = true;
        params.configurationLayoutView.buildModal(bEditMod);
        params.configurationLayoutView.presetModal(node);
    },

    /*
    * displayNotifications
    */
    displayNotifications : function displayNotifications(options)
    {
      console.log("options " + options);

      NotificationsManagerUXMessages.addNotif(options);
    }
  });

  DELConfigurationFamilyView.removeSelectedNode = function(params)
  {
    console.log("params " + params);
    params.configurationLayoutView.removeSelectedNode(params);
  }

  DELConfigurationFamilyView.editSelectedNode = function(params)
  {
    console.log("params " + params);
    params.configurationLayoutView.editSelectedNode(params);
  }

  return DELConfigurationFamilyView;
});

define('DS/ParameterizationSkeleton/Views/ParameterizationSystemsSafety/SystemsSafetyViewPartnerUtilities', [
    'UWA/Core',
    'DS/ParameterizationSkeleton/Views/ParametersLayoutViewUtilities',
    'DS/ParameterizationSkeleton/Views/ParameterizationSystemsSafety/ParameterizationSystemsSafetyConstants',
    'DS/ParameterizationSkeleton/Views/ParameterizationSystemsSafety/SystemsSafetyModalPartner',
    'DS/ParameterizationSkeleton/Views/ParameterizationSystemsSafety/SystemsSafetyViewUtilities',

    'i18n!DS/ParameterizationSkeleton/assets/nls/SystemsSafetyNLS'
], function(
    UWA,
    ParametersLayoutViewUtilities,
    ParameterizationSystemsSafetyConstants,
    SystemsSafetyModal,
    SystemsSafetyViewCommonUtilities,

    SystemsSafetyNLS
) {

    'use strict';

    var LEFT_ALIGNMENT = SystemsSafetyViewCommonUtilities.LEFT_ALIGNMENT;
    var RIGHT_ALIGNMENT = SystemsSafetyViewCommonUtilities.RIGHT_ALIGNMENT;
    var HTML_BOLD_FORMAT = SystemsSafetyViewCommonUtilities.HTML_BOLD_FORMAT;
    var HTML_PARAG_FORMAT = SystemsSafetyViewCommonUtilities.HTML_PARAG_FORMAT;
    var COLUMNS_WIDTH = ['30%', '50%', '10%', '10%'];
    var CELLS_INDEX = {
        name: 0,
        url: 1,
        action: 2,
        deployFlag: 3
    };


    var SystemsSafetyViewUtilities = {
        buildTable: function() {
            var partNumberTable = UWA.createElement('table', {
                'class': 'partNumberTableMapping table table-condensed'
            });
            var pNFieldbody = UWA.createElement('tbody', {
                'class': 'partnerFieldbody'
            }).inject(partNumberTable);

            var fieldInfo;
            fieldInfo = SystemsSafetyViewUtilities.buildStatusRow();
            fieldInfo.inject(pNFieldbody);

            fieldInfo = UWA.createElement('tr', {
                'class': 'success'
            });
            SystemsSafetyViewCommonUtilities.buildTextTableCell(LEFT_ALIGNMENT, COLUMNS_WIDTH[CELLS_INDEX.name], fieldInfo, HTML_BOLD_FORMAT, SystemsSafetyNLS.partnerName);
            SystemsSafetyViewCommonUtilities.buildTextTableCell(LEFT_ALIGNMENT, COLUMNS_WIDTH[CELLS_INDEX.url], fieldInfo, HTML_BOLD_FORMAT, SystemsSafetyNLS.url);
            SystemsSafetyViewCommonUtilities.buildTextTableCell(LEFT_ALIGNMENT, COLUMNS_WIDTH[CELLS_INDEX.action], fieldInfo, HTML_BOLD_FORMAT, SystemsSafetyNLS.actions);
            SystemsSafetyViewCommonUtilities.buildTextTableCell(RIGHT_ALIGNMENT, COLUMNS_WIDTH[CELLS_INDEX.deployFlag], fieldInfo, HTML_BOLD_FORMAT, SystemsSafetyNLS.deployStatus);
            fieldInfo.inject(pNFieldbody);

            return partNumberTable;
        },

        buildStatusRow: function() {
            var fieldInfo = UWA.createElement('tr', {
                'id': 'partnersStatusRow'
            });
            SystemsSafetyViewCommonUtilities.buildTextTableCell(LEFT_ALIGNMENT, COLUMNS_WIDTH[CELLS_INDEX.name], fieldInfo, HTML_PARAG_FORMAT, SystemsSafetyNLS.partnersUrl);
            var iCell = UWA.createElement('td', {
                'colspan': '3',
                'align': RIGHT_ALIGNMENT,
                'title': SystemsSafetyNLS.deployStatus,
                'class': 'architectureNumberingField font-3dslight'
            });

            var imgSpan = SystemsSafetyViewCommonUtilities.buildImgSpan('check', '2.5', 'green', SystemsSafetyNLS.deployed);
            imgSpan.inject(iCell);
            iCell.value = "success";
            iCell.inject(fieldInfo);
            return fieldInfo;
        },

        addEditButtonToCellRow: function(iCell) {
            var editElts = ParametersLayoutViewUtilities.createActionElements(SystemsSafetyNLS.editPattern, false);
            var editSpan = editElts[0];
            editSpan.setStyle("float", LEFT_ALIGNMENT);
            editSpan.setStyle("padding", "0px 8px");
            editSpan.inject(iCell);
            var editAttributeButton = editElts[1];

            editAttributeButton.addEvent("onClick", function(event) {
                var fieldToEdit = event.currentTarget.getParent().getParent().getParent();
                SystemsSafetyViewUtilities.editDialog(fieldToEdit);
            });

            return editAttributeButton;
        },

        addRemoveButtonToCellRow: function(iCell, fieldInfo) {
            var removelts = ParametersLayoutViewUtilities.createActionElements(SystemsSafetyNLS.removePattern, true);
            var deleteSpan = removelts[0];
            deleteSpan.setStyle("float", LEFT_ALIGNMENT);
            deleteSpan.setStyle("padding", "0px 8px");
            deleteSpan.inject(iCell);
            var removeAttributeButton = removelts[1];

            removeAttributeButton.addEvent("onClick", function() {
                SystemsSafetyViewUtilities.removefieldLineCallBack(fieldInfo);
            });

            return removeAttributeButton;
        },

        buildField: function(fieldInfo, name, url, isDeployed) {
            fieldInfo.value = isDeployed;
            SystemsSafetyViewCommonUtilities.buildTextTableCell(LEFT_ALIGNMENT, COLUMNS_WIDTH[CELLS_INDEX.name], fieldInfo, HTML_PARAG_FORMAT, name);
            SystemsSafetyViewCommonUtilities.buildTextTableCell(LEFT_ALIGNMENT, COLUMNS_WIDTH[CELLS_INDEX.url], fieldInfo, HTML_PARAG_FORMAT, url);

            var iCell = UWA.createElement('td', {
                'Align': LEFT_ALIGNMENT,
                'width': COLUMNS_WIDTH[CELLS_INDEX.action],
                'class': 'architectureNumberingField font-3dslight'
            }).inject(fieldInfo);

            SystemsSafetyViewUtilities.addEditButtonToCellRow(iCell, fieldInfo);
            SystemsSafetyViewUtilities.addRemoveButtonToCellRow(iCell, fieldInfo);

            iCell = UWA.createElement('td', {
                'Align': RIGHT_ALIGNMENT,
                'width': COLUMNS_WIDTH[CELLS_INDEX.deployFlag],
                'class': 'architectureNumberingField font-3dslight'
            }).inject(fieldInfo);

            if (isDeployed === ParameterizationSystemsSafetyConstants.DEPLOYED) {
                SystemsSafetyViewCommonUtilities.buildImgSpan('check', '2.5', 'green', SystemsSafetyNLS.deployed).inject(iCell);
            } else if (isDeployed === ParameterizationSystemsSafetyConstants.NEW_NOT_DEPLOYED) {
                SystemsSafetyViewCommonUtilities.buildImgSpan('cog', '2.5', 'orange', SystemsSafetyNLS.modified).inject(iCell);
            }
            iCell.inject(fieldInfo);
            return fieldInfo;
        },

        buildsFieldJsonObject: function(fieldInfo) {
            return {
                name: fieldInfo.cells[CELLS_INDEX.name].getText(),
                url: fieldInfo.cells[CELLS_INDEX.url].getText(),
                action: fieldInfo.cells[CELLS_INDEX.deployFlag].value
            };
        },

        buildNewField: function(objParam, isDeployedStatus) {
            var fieldInfo;
            fieldInfo = UWA.createElement('tr', {
                'class': 'partnerFieldMapping'
            });
            SystemsSafetyViewUtilities.buildField(fieldInfo, objParam.name, objParam.url, isDeployedStatus);
            fieldInfo.cells[CELLS_INDEX.deployFlag].value = ParameterizationSystemsSafetyConstants.ADD;
            return fieldInfo;
        },

        modifyField: function(fieldInfo, objParam, isDeployedStatus) {
            fieldInfo.value = isDeployedStatus;
            // name must not be modified
            fieldInfo.cells[CELLS_INDEX.url].setText(objParam.url);
            var deploycell = fieldInfo.cells[CELLS_INDEX.deployFlag];
            deploycell.empty();

            SystemsSafetyViewCommonUtilities.buildImgSpan('cog', '2.5', 'orange', SystemsSafetyNLS.modified).inject(deploycell);
            deploycell.value = ParameterizationSystemsSafetyConstants.MODIFY;
            return fieldInfo;
        },

        removefieldLineCallBack: function(fieldInfo) {
            if (typeof fieldInfo !== undefined) {
                if (fieldInfo.value === ParameterizationSystemsSafetyConstants.NEW_NOT_DEPLOYED) {
                    fieldInfo.remove();
                } else {
                    SystemsSafetyViewUtilities.setForRemoveFieldLine(fieldInfo);
                }
            }
        },

        resetForRemove: function(fieldInfo) {
            var imgSpan = SystemsSafetyViewCommonUtilities.buildImgSpan('check', '2.5', 'green', SystemsSafetyNLS.deployed);
            var actionCell = fieldInfo.cells[CELLS_INDEX.action];
            var deploycell = fieldInfo.cells[CELLS_INDEX.deployFlag];

            SystemsSafetyViewUtilities.addEditButtonToCellRow(actionCell, fieldInfo);
            SystemsSafetyViewUtilities.addRemoveButtonToCellRow(actionCell, fieldInfo);
            deploycell.empty();
            imgSpan.inject(deploycell);
        },

        resetForModify: function(fieldInfo, savedInfo) {
            var imgSpan = SystemsSafetyViewCommonUtilities.buildImgSpan('check', '2.5', 'green', SystemsSafetyNLS.deployed);
            var deploycell = fieldInfo.cells[CELLS_INDEX.deployFlag];

            if (savedInfo) {
                fieldInfo.cells[CELLS_INDEX.name].setText(savedInfo.name);
                fieldInfo.cells[CELLS_INDEX.url].setText(savedInfo.url);
            }
            deploycell.empty();
            imgSpan.inject(deploycell);
        },

        resetForFieldLineChanges: function(fieldInfo, savedInfo) {
            if (fieldInfo.value === ParameterizationSystemsSafetyConstants.NEW_NOT_DEPLOYED) {
                var cellValue = fieldInfo.cells[CELLS_INDEX.deployFlag].value;
                if (cellValue === ParameterizationSystemsSafetyConstants.ADD) {
                    return fieldInfo;
                } else if (cellValue === ParameterizationSystemsSafetyConstants.REMOVE) {
                    SystemsSafetyViewUtilities.resetForRemove(fieldInfo);

                } else if (cellValue === ParameterizationSystemsSafetyConstants.MODIFY) {
                    SystemsSafetyViewUtilities.resetForModify(fieldInfo, savedInfo);
                }

                fieldInfo.value = ParameterizationSystemsSafetyConstants.DEPLOYED;
                fieldInfo.cells[CELLS_INDEX.deployFlag].value = null;
            }
        },

        setForRemoveFieldLine: function(fieldInfo) {
            fieldInfo.value = ParameterizationSystemsSafetyConstants.NEW_NOT_DEPLOYED;
            var arrayAction = fieldInfo.cells[CELLS_INDEX.action].getElements('span');
            arrayAction.forEach(function(action) {
                action.hide();
            });

            var deploycell = fieldInfo.cells[CELLS_INDEX.deployFlag];
            var imgSpan = SystemsSafetyViewCommonUtilities.buildImgSpan('trash', '1.5', 'red', SystemsSafetyNLS.removed);

            deploycell.empty();
            deploycell.value = ParameterizationSystemsSafetyConstants.REMOVE;
            imgSpan.inject(deploycell);
        },

        editDialog: function(fieldToEdit) {
            var options = {
                className: "part-number-edit-modal",
                title: SystemsSafetyNLS.editPartner
            };

            var that = this;
            this.modal = new SystemsSafetyModal(options);

            this.modal.modal.setFooter("<button type='button'  name='addButton' id='add-button' class='btn btn-primary'>" + SystemsSafetyNLS.apply + "</button> " + "</button>" + "<button type='button' name='cancelButton' id='cancel-button' class='btn btn-default'>" + SystemsSafetyNLS.cancel + "</button>");
            this.modal.getModalBody();
            this.modal._bindFooterEvent();

            var fetchedData = this.buildsFieldJsonObject(fieldToEdit);

            this.modal.nameTextBox.setValue(fetchedData.name);
            this.modal.nameTextBox.setDisabled(true);
            this.modal.urlTextBox.setValue(fetchedData.url);

            this.modal.getContent().getElements('.btn').forEach(function(element) {
                if (element.name === 'addButton') {
                    element.addEvent('click', function() {
                        var userEditedFormat = that.modal.getUserEnteredValues();
                        var checkStatus = {};
                        checkStatus.isSuccess = true;

                        var toDisplayOver = that.modal.getContent().getElement('.enox-arch-number-content');

                        if (userEditedFormat.type === '') {
                            that.modal.displayAlertMessage(SystemsSafetyNLS.typeNullMessage, toDisplayOver);
                        } else if (userEditedFormat.pattern === '') {
                            that.modal.displayAlertMessage(SystemsSafetyNLS.patternNullMessage, toDisplayOver);
                        } else {
                            userEditedFormat.action = ParameterizationSystemsSafetyConstants.MODIFY;
                            SystemsSafetyViewUtilities.modifyField(fieldToEdit, userEditedFormat, ParameterizationSystemsSafetyConstants.NEW_NOT_DEPLOYED);
                            that.modal.destroy();
                        }
                    });
                }
            });

            this.modal.show();
        }
    };

    return SystemsSafetyViewUtilities;
});

/**
* @quickreview  KB9 21:10:25 creation
*/

define('DS/ParameterizationSkeleton/Views/ParameterizationApriso3DExperience/Apriso3DExpConfigurationFamilyView',
    [
    'UWA/Core',
    'DS/ParameterizationSkeleton/Views/DELConfigurationParameterization/DELConfigurationFamilyView',
    'DS/ParameterizationSkeleton/Utils/ParameterizationApriso3DExperience/ParameterizationApriso3DExpWebServices',
    'DS/Controls/ModalContainer',
    'DS/Controls/Loader',
    'DS/ParameterizationSkeleton/Model/DELConfigurationParameterizationModel/DELConfigurationParamTranslationModel',
    'i18n!DS/ParameterizationSkeleton/assets/nls/Apriso3DExpConfigurationLayoutView',
    'i18n!DS/ParameterizationSkeleton/assets/nls/Apriso3DExpConfigurationModalView',
    'i18n!DS/ParameterizationSkeleton/assets/nls/Apriso3DExpConfigurationTreeListView',
    'i18n!DS/ParameterizationSkeleton/assets/nls/Apriso3DExpConfigurationNodeTreeView'
    ],
    function (
      UWA,
      DELConfigurationFamilyView,
      ParameterizationApriso3DExpWebServices,
      WUXModalContainer,
      WUXLoader,
      DELConfigurationParamTranslationModel,
      Nls,
      Apriso3DExpConfigurationModalViewNls,
      Apriso3DExpConfigurationTreeListViewNls,
      Apriso3DExpConfigurationNodeTreeViewNls
    )
  {

  'use strict';

  var Apriso3DExpConfigurationFamilyView = DELConfigurationFamilyView.extend({

    _typeResult : null,
    _node : null,

    /*
    * init
    */
    init : function init(options)
    {
      var that = this;
      this._parent(options);

      that._treeListViewNls = Apriso3DExpConfigurationTreeListViewNls;
      that._modalViewNls = Apriso3DExpConfigurationModalViewNls;
      that._nodeTreeViewNls = Apriso3DExpConfigurationNodeTreeViewNls;
    },

    /*
    * render
    */
    render : function render()
    {
      var that = this;
      this._parent();

      return this;
    },

    /*
    * buildModal
    */
    buildModal : function buildModal(bEditMod)
    {
      this._parent(bEditMod);

      var comboAttributeKeys = document.getElementById("keys");
      comboAttributeKeys.dsModel.disabled = true;
      comboAttributeKeys.dsModel.elementsList = [];
      comboAttributeKeys.dsModel.selectedIndex = -1;

      var comboAttributes = document.getElementById("attributes");
      comboAttributes.dsModel.disabled = true;
      comboAttributes.dsModel.elementsList = [];
      comboAttributes.dsModel.selectedIndex = -1;
    },

    /*
    * presetModal
    */
    presetModal : function presetModal(node)
    {
      console.log("presetModal");
      var that = this;

      var nodeType = node.getData();
      var promise = new UWA.Promise(function (resolve, reject) {
        if (that._typeResult == null || that._typeResult == undefined || that._typeResult[nodeType.types/*node.types*/] === undefined || that._typeResult[nodeType.types/*node.types*/] === null)
        {
          if (that._typeResult == null || that._typeResult == undefined)
            that._typeResult = [];

          var listOfTypes = [];
          listOfTypes.push(nodeType.types);//node.types);//value);

          //loader
          var loader = new WUXLoader({height : 22});
          loader.on(Apriso3DExpConfigurationModalViewNls.Loading);

          var comboAttributeTypes = document.getElementById("types");
          var comboAttributeKeys = document.getElementById("keys");
          var comboAttributes = document.getElementById("attributes");

          //loader
          var loader = new WUXLoader({height : 22});
          loader.on(Apriso3DExpConfigurationModalViewNls.Loading);

          var parentNodeTypeContainer = comboAttributeTypes.getParent();
          parentNodeTypeContainer.style.position = "sticky";
          WUXModalContainer.createModal(parentNodeTypeContainer/*, loader.elements.container*/);

          var parentNodeKeysContainer = comboAttributeKeys.getParent();
          parentNodeKeysContainer.style.position = "sticky";
          WUXModalContainer.createModal(parentNodeKeysContainer, loader.elements.container);

          var parentNodeAttrContainer = comboAttributes.getParent();
          parentNodeAttrContainer.style.position = "sticky";
          WUXModalContainer.createModal(parentNodeAttrContainer/*, loader.elements.container*/);

          ParameterizationApriso3DExpWebServices.getlistofDELMIATypes(listOfTypes, {
            onSuccess : function(data)
            {
              that._typeResult[nodeType.types/*node.types/*value*/] = data;

              loader.off();

              WUXModalContainer.removeModal(parentNodeTypeContainer);
              WUXModalContainer.removeModal(parentNodeKeysContainer);
              WUXModalContainer.removeModal(parentNodeAttrContainer);

              parentNodeTypeContainer.style.position = "";
              parentNodeKeysContainer.style.position = "";
              parentNodeAttrContainer.style.position = "";


              resolve();
            }
          });
        }
        else
          resolve();
      });

      UWA.Promise.all([promise]).then(function() {

        var keysList = [];
        var keys = Object.keys(that._typeResult[nodeType.types/*node.types/*value*/]);
        var keysLength = keys.length;
        for (var i=0;i<keysLength;i++)
        {
          var key = keys[i];
          if (key)
            keysList.push({label: key, value: key});
        }

        var keysListLength = keysList.length;
        if (keysListLength > 0)
        {
          var comboAttributeKeys = document.getElementById("keys");
          comboAttributeKeys.dsModel.disabled = false;
          comboAttributeKeys.dsModel.elementsList = keysList;
        }

        var attributesList = [];
        var attributes = that._typeResult[nodeType.types/*node.types/*value*/][nodeType.keys/*node.keys*/].attributes;
        var attributesLength = attributes.length;
        for (var i=0;i<attributesLength;i++)
        {
          var attr = attributes[i];
          if (attr)
            attributesList.push({label: attr, value: attr});
        }

        var attributesListLength = attributesList.length;
        if (attributesListLength > 0)
        {
          var comboAttributes = document.getElementById("attributes");
          comboAttributes.dsModel.disabled = false;
          comboAttributes.dsModel.elementsList = attributesList;
        }

        DELConfigurationFamilyView.prototype.presetModal.call(that, node);
      });
    },


    /*
    * createtreeNode
    */
    createtreeNode : function createtreeNode(data, grid)
    {
      var translationModel = new DELConfigurationParamTranslationModel({
        data : data,
        grid : grid,
        nls : Apriso3DExpConfigurationNodeTreeViewNls});

        return translationModel;
    },

    /*
    * addChild
    */
    addChild : function addChild(nodesTab)
    {
        var that = this;
        that._parent(nodesTab);
    },

    /*
    * mapFunctions
    */
    mapFunctions: function mapFunctions(name)
    {
        var that = this;
        if (name === "onChangeTypeCombo")
          return that.onChangeTypeClick.bind(that);
        if (name === "onChangeKeyCombo")
          return that.onChangeKeyClick.bind(that);
        if (name === "getCellKeysSemantics")
          return that.getCellKeysSemantics.bind(that)
        if (name === "getCellAttributesSemantics")
          return that.getCellAttributesSemantics.bind(that)
        else return null;
    },

    /*
    * onCellViewChange
    */
    /*onCellViewChange : function onCellViewChange(iCellEvent, iCellInfos)
    {
      var that = this;
      that._parent(iCellEvent, iCellInfos);
    },*/

    /*
    * getCellAttributesSemantics
    */
    getCellAttributesSemantics : function getCellAttributesSemantics(iCellInfos)
    {
      var that = this;
      /*return {
          possibleValues: ["Australia", "Brazil", "China", "France", "Germany", "Italy", "Netherlands", "Sri Lanka", "United States"]
        };*/
      var type = iCellInfos.nodeModel.options.grid.types;
      var key = iCellInfos.nodeModel.options.grid.keys;

      var node = Object.assign({}, iCellInfos.nodeModel.options.grid);
      delete node["isDeployed"];
      delete node["delete"];
      delete node["edit"];

      if (node && that._node === null)
         that._node = node


      if (that._typeResult ===  null || that._typeResult[type] === undefined)
      {
          return {
            possibleValues: function(text) {
              return new Promise(function (resolve, reject) {

                  var listOfTypes = [];
                  listOfTypes.push(type);

                  if (that._typeResult ===  null)
                    that._typeResult = [];

                   ParameterizationApriso3DExpWebServices.getlistofDELMIATypes(listOfTypes, {
                     onSuccess : function(data)
                     {
                       that._typeResult[type] = data;
                       var attributes = that._typeResult[type][key].attributes;

                        resolve(attributes);
                     }
                  });
             });
          }
        };
      }
      else
      {
        if (that._typeResult[type] != undefined && that._typeResult[type][key] != undefined)
        {
          var data = that._typeResult[type][key].attributes;
          return {
              possibleValues: data
          };
        }
      }
    },

    /*
    * getCellKeysSemantics
    */
    getCellKeysSemantics : function getCellKeysSemantics(iCellInfos)
    {
      var that = this;
      /*return {
          possibleValues: ["Australia", "Brazil", "China", "France", "Germany", "Italy", "Netherlands", "Sri Lanka", "United States"]
        };*/
      var type = iCellInfos.nodeModel.options.grid.types;
      //var key = iCellInfos.nodeModel.options.grid.keys;
      var node = Object.assign({}, iCellInfos.nodeModel.options.grid);
      delete node["isDeployed"];
      delete node["delete"];
      delete node["edit"];

      if (node && that._node === null)
        that._node = node


      if (that._typeResult ===  null || that._typeResult[type] === undefined)
      {
          return {
            possibleValues: function(text) {
              return new Promise(function (resolve, reject) {

                  var listOfTypes = [];
                  listOfTypes.push(type);

                  if (that._typeResult ===  null)
                    that._typeResult = [];

                   ParameterizationApriso3DExpWebServices.getlistofDELMIATypes(listOfTypes, {
                     onSuccess : function(data)
                     {
                       iCellInfos.nodeModel.options.grid.attributes = "";


                       that._typeResult[type] = data;

                       var keysList = [];
                       var keys = Object.keys(data);
                       var keysLength = keys.length;
                       for (var i=0;i<keysLength;i++)
                       {
                         var key = keys[i];
                         if (key)
                           keysList.push(key);
                       }

                       var keysListLength = keysList.length;
                       if (keysListLength > 0)
                        resolve(keysList);
                     }
                   });
             });
          }
        };
      }
      else
      {
        var data = that._typeResult[type];

        var keysList = [];
        var keys = Object.keys(data);
        var keysLength = keys.length;
        for (var i=0;i<keysLength;i++)
        {
          var key = keys[i];
          if (key)
            keysList.push(key);
        }

        var keysListLength = keysList.length;
        if (keysListLength > 0)
        {
          return {
              possibleValues: keysList
          };
        }
      }
    },

    /*
    * onOKEditButtonClick
    */
    onOKEditButtonClick : function onOKEditButtonClick()
    {
      var that = this;
      that._parent();
    },

    /*
    * onOKButtonClick
    */
    onOKButtonClick : function onOKButtonClick()
    {
      var that = this;
      that._parent();
    },

    /*
    * onCancelButtonClick
    */
    onCancelButtonClick : function onCancelButtonClick()
    {
      var that = this;
      that._parent();
    },

    /*
    * onChangeTypeClick
    */
    onChangeTypeClick : function onChangeTypeClick(type)
    {
      var that = this;

      var types = null;
      if (type.dsModel != null || type.dsModel != undefined)
        types = type.dsModel.elementsList[type.dsModel.selectedIndex].value;

      var comboAttributeKeys = document.getElementById("keys");
      comboAttributeKeys.dsModel.disabled = true;
      comboAttributeKeys.dsModel.elementsList = [];
      comboAttributeKeys.dsModel.selectedIndex = -1;

      var comboAttributes = document.getElementById("attributes");
      comboAttributes.dsModel.disabled = true;
      comboAttributes.dsModel.elementsList = [];
      comboAttributes.dsModel.selectedIndex = -1;

      if (that._typeResult ===  null || that._typeResult[types] === undefined)
      {
        if (that._typeResult ===  null)
          that._typeResult = [];

        var listOfTypes = [];
        listOfTypes.push(types);

        //loader
        var loader = new WUXLoader({height : 22});
        loader.on(Apriso3DExpConfigurationModalViewNls.Loading);

        var parentNodeKeysContainer = comboAttributeKeys.getParent();
        parentNodeKeysContainer.style.position = "sticky";
        WUXModalContainer.createModal(parentNodeKeysContainer, loader.elements.container);

        var parentNodeAttrContainer = comboAttributes.getParent();
        parentNodeAttrContainer.style.position = "sticky";
        WUXModalContainer.createModal(parentNodeAttrContainer/*, loader.elements.container*/);

         ParameterizationApriso3DExpWebServices.getlistofDELMIATypes(listOfTypes, {
           onSuccess : function(data)
           {
             loader.off();
             WUXModalContainer.removeModal(parentNodeKeysContainer);
             WUXModalContainer.removeModal(parentNodeAttrContainer);

             parentNodeKeysContainer.style.position = "";
             parentNodeAttrContainer.style.position = "";

             that._typeResult[types] = data;

             var keysList = [];
             var keys = Object.keys(data);
             var keysLength = keys.length;
             for (var i=0;i<keysLength;i++)
             {
               var key = keys[i];
               if (key)
                 keysList.push({label: key, value: key});
             }

             var keysListLength = keysList.length;
             if (keysListLength > 0)
             {
               //var comboAttributeKeys = document.getElementById("keys");
               comboAttributeKeys.dsModel.disabled = false;
               comboAttributeKeys.dsModel.elementsList = keysList;
               comboAttributeKeys.dsModel.selectedIndex = -1;

               //var comboAttributes = document.getElementById("attributes");
               comboAttributes.dsModel.disabled = true;
               comboAttributes.dsModel.elementsList = [];
               comboAttributes.dsModel.selectedIndex = -1;
             }
           },
           onFailure : function(err)
           {
             loader.off();
             WUXModalContainer.removeModal(parentNodeKeysContainer);
             WUXModalContainer.removeModal(parentNodeAttrContainer);

             parentNodeKeysContainer.style.position = "";
             parentNodeAttrContainer.style.position = "";

             that.displayNotifications({
               level: 'error',
               message: Nls.getlistofDELMIATypesError,
               title: Nls.getlistofDELMIATypesTitle
             });
           }
       });
      }
      else
      {
        var data = that._typeResult[types];

        var keysList = [];
        var keys = Object.keys(data);
        var keysLength = keys.length;
        for (var i=0;i<keysLength;i++)
        {
          var key = keys[i];
          if (key)
            keysList.push({label: key, value: key});
        }

        var keysListLength = keysList.length;
        if (keysListLength > 0)
        {
          //var comboAttributeKeys = document.getElementById("keys");
          comboAttributeKeys.dsModel.disabled = false;
          comboAttributeKeys.dsModel.elementsList = keysList;
          comboAttributeKeys.dsModel.selectedIndex = -1;

          //var comboAttributes = document.getElementById("attributes");
          comboAttributes.dsModel.disabled = true;
          comboAttributes.dsModel.elementsList = [];
          comboAttributes.dsModel.selectedIndex = -1;
        }
      }
    },

    /*
    * onChangeKeyClick
    */
    onChangeKeyClick : function onChangeKeyClick(data)
    {
      var that = this;

      var typesElt = document.getElementById("types");
      var types = typesElt.dsModel.elementsList[typesElt.dsModel.selectedIndex].value;

      if (that._typeResult[types] != undefined && data.dsModel.elementsList[data.dsModel.selectedIndex] != undefined)
      {
        var attributesList = that._typeResult[types][data.dsModel.elementsList[data.dsModel.selectedIndex].value].attributes;

        var valuesList = [];
        var values = Object.values(attributesList);
        var valuesLength = values.length;
        for (var i=0;i<valuesLength;i++)
        {
          var value = values[i];
          if (value)
            valuesList.push({label: value, value: value});
        }

        if (valuesList.length > 0)
       {
         var comboAttributes = document.getElementById("attributes");
         comboAttributes.dsModel.disabled = false;
         comboAttributes.dsModel.elementsList = valuesList;
       }

      }
      else {
        var comboKeys = document.getElementById("keys");
        comboKeys.dsModel.disabled = true;
        comboKeys.dsModel.elementsList = [];
      }
    },

    /*
    * removeSelectedNode
    */
    removeSelectedNode : function removeSelectedNode(params)
    {
      console.log("params " + params);
      var that = this;
      that._parent(params);
    },

    /*
    * editSelectedNode
    */
    editSelectedNode : function editSelectedNode(params)
    {
      console.log("params " + params);
      var that = this;
      that._parent(params);
    }

  });



  return Apriso3DExpConfigurationFamilyView;
});

/**
* @quickreview  ROW 22:11:08 creation
*/

define('DS/ParameterizationSkeleton/Views/PPRSynchronizationLifeCycle/DELLifeCycleRulesFamilyView',
[
  'UWA/Core',
  'DS/ParameterizationSkeleton/Views/DELConfigurationParameterization/DELConfigurationFamilyView',
  'DS/ParameterizationSkeleton/Utils/DELConfigurationParameterization/DELConfigurationParameterizationWebServices',
  'DS/Controls/ModalContainer',
  'DS/Controls/Loader',
  'DS/ParameterizationSkeleton/Model/DELConfigurationParameterizationModel/DELConfigurationParamTranslationModel',
  'DS/UIKIT/Mask',
  'DS/WAFData/WAFData',
  'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler',
  'i18n!DS/ParameterizationSkeleton/assets/nls/DELConfigurationLayoutView',
  'i18n!DS/ParameterizationSkeleton/assets/nls/DELLifeCycleRulesModalView',
  'i18n!DS/ParameterizationSkeleton/assets/nls/DELLifeCycleRulesTreeListView',
  'i18n!DS/ParameterizationSkeleton/assets/nls/DELLifeCycleRulesNodeTreeView'
],
function (
  UWA,
  DELConfigurationFamilyView,
  DELConfigurationParameterizationWebServices,
  WUXModalContainer,
  WUXLoader,
  DELConfigurationParamTranslationModel,
  Mask,
  WAFData,
  URLHandler,
  Nls,
  DELLifeCycleRulesModalViewNls,
  DELLifeCycleRulesTreeListViewNls,
  DELLifeCycleRulesNodeTreeViewNls
)
{

  'use strict';

  var DELLifeCycleRulesFamilyView = DELConfigurationFamilyView.extend({

    _typeResult : null,
    _node : null,
    _bEditMode : false,

    /*
    * init
    */
    init : function init(options)
    {
      var that = this;
      this._parent(options);

      that._treeListViewNls = DELLifeCycleRulesTreeListViewNls;
      that._modalViewNls = DELLifeCycleRulesModalViewNls;
      that._nodeTreeViewNls = DELLifeCycleRulesNodeTreeViewNls;
    },

    /*
    * render
    */
    render : function render()
    {
      var that = this;
      this._parent();

      return this;
    },

    /*
    * buildModal
    */
    buildModal : function buildModal(bEditMod)
    {
      var that = this;
      this._parent(bEditMod);
      var comboTypes = document.getElementById("Type");
      if(bEditMod){

        comboTypes.dsModel.disabled = true;
      }
      else{
        var typeElementsList = comboTypes.dsModel.elementsList;
        var nbTypes = typeElementsList.length;
        var updatedtypeElementsList = [];
        for(var idxTypeElem =0; idxTypeElem < nbTypes; idxTypeElem++){
          var typeElem = typeElementsList[idxTypeElem];
          var count =0;
          var treeDoc = that.treeList.dataGridView.treeDocument;
          if (treeDoc){
            var children = treeDoc.getChildren();
            var childrenLength = children.length;
            for (var idxChild=0;idxChild<childrenLength;idxChild++){

              var child = children[idxChild];
              if(child && typeElem && typeElem.value != undefined && child.options.data.Type === typeElem.value){
                count = count+1;
              }
            }
          }
          if(count < 2)
            updatedtypeElementsList.push(typeElem);
        }
        comboTypes.dsModel.elementsList = updatedtypeElementsList;
      }
      comboTypes.dsModel.enableSearchFlag = false;
    },

    /*
    * presetModal
    */
    presetModal : function presetModal(node)
    {
      console.log("presetModal");
      var that = this;
      this._parent(node);

    },


    /*
    * createtreeNode
    */
    createtreeNode : function createtreeNode(data, grid)
    {
      var that = this;
      var translationModel = new DELConfigurationParamTranslationModel({
        data : data,
        grid : grid,
        nls : DELLifeCycleRulesNodeTreeViewNls});
        if(grid == undefined){
          var columnIDs = that.treeList._columnsIDs;
          for(var IdxColumnID = 0; IdxColumnID < columnIDs.length; IdxColumnID++){
            var columnID = columnIDs[IdxColumnID];
            var gridTemp = translationModel.getGrid();
            //var uiElements = that._uiElementsIDs;
            if(!gridTemp.hasOwnProperty(columnID) && that._uiElementsIDs[IdxColumnID].type === "checkbox"){
              translationModel.addGridAttributes({[columnID] : false});
            }
          }
        }
        return translationModel;
      },

      /*
      * addChild
      */
      addChild : function addChild(nodesTab)
      {
        var that = this;
        that._parent(nodesTab);
      },

      /*
      * mapFunctions
      */
      mapFunctions: function mapFunctions(name)
      {
         var that = this;
         if (name === "onChangeTypeCombo")
           return that.onChangeTypeClick.bind(that);
         if (name === "onChangeLifeCycleRuleCombo")
           return that.onChangeLifeCycleRuleClick.bind(that);
        // if (name === "getCellKeysSemantics")
        //   return that.getCellKeysSemantics.bind(that)
        // if (name === "getCellAttributesSemantics")
        //   return that.getCellAttributesSemantics.bind(that)
        // else return null;
      },

      /*
      * validateModal
      */
      validateModal : function validateModal()
      {
        var that = this;
        console.log("validateModal");
        var treeNodesList = [];
        var uiElementsIDLength = that._uiElementsIDs.length;
        var uiElementsID = that._uiElementsIDs;
        if(uiElementsIDLength > 1 && that._uiElementsIDs[0].id === "Type" && that._uiElementsIDs[0].type === "multiselcombobox"){
          var uiTypeEl = document.getElementById(that._uiElementsIDs[0].id);
          if(uiTypeEl && uiTypeEl.dsModel.label != undefined && uiTypeEl.dsModel.label != null && uiTypeEl.dsModel.label != ""){

            var typeElementData = uiTypeEl.dsModel.value;
            var typeElementLabels = uiTypeEl.dsModel.label.split(",");

            var typeElementDataLength = typeElementData.length;
            var bOneCommandSelected = false;
            for(var idxType =0; idxType < typeElementDataLength; idxType++){

              var data = new Map();
              var grid = new Map();

              data.set(uiTypeEl.id, typeElementData[idxType]);
              grid.set(uiTypeEl.id, typeElementLabels[idxType]);

              for (var i=1;i<uiElementsIDLength;i++)
              {
                var uiEl = document.getElementById(that._uiElementsIDs[i].id);
                if (uiEl)
                {
                  if (uiEl.dsModel.checkFlag != undefined || uiEl.dsModel.checkFlag != null)
                  {
                    data.set(that._uiElementsIDs[i].id, uiEl.dsModel.checkFlag);
                    grid.set(that._uiElementsIDs[i].id, uiEl.dsModel.checkFlag);
                    if(uiEl.dsModel.checkFlag === true)
                      bOneCommandSelected = uiEl.dsModel.checkFlag;
                  }
                  else
                  {
                    if (that._uiElementsIDs[i].mandatory === true)
                    {
                      var bMandatoryField = false;
                      if (that._uiElementsIDs[i].type != "combobox")
                      {
                        if (uiEl.dsModel.value != undefined && uiEl.dsModel.value != null && uiEl.dsModel.value != "")
                        {
                          bMandatoryField = true;
                          data.set(that._uiElementsIDs[i].id, uiEl.dsModel.value);
                          grid.set(that._uiElementsIDs[i].id, uiEl.dsModel.value);
                        }
                      }
                      else {
                        if (uiEl.dsModel.label != undefined && uiEl.dsModel.label != null && uiEl.dsModel.label != "")
                        {
                          bMandatoryField = true;
                          data.set(that._uiElementsIDs[i].id, uiEl.dsModel.value);//uiEl.dsModel.label);
                          grid.set(that._uiElementsIDs[i].id, uiEl.dsModel.label);
                        }
                      }

                      if (!bMandatoryField) {
                        var mandatoryCol = that._treeListViewNls[that._uiElementsIDs[i].id];
                        var nlsErrorMsg = Nls.columnMandatory;
                        nlsErrorMsg = nlsErrorMsg.replace("%1", mandatoryCol);
                        that._modalView.showToastMessage(2, nlsErrorMsg);
                        return;
                      }
                    }
                    else
                    {
                      if (that._uiElementsIDs[i].type != "combobox")
                      {
                        data.set(that._uiElementsIDs[i].id, uiEl.dsModel.value);
                        grid.set(that._uiElementsIDs[i].id, uiEl.dsModel.value);
                      }
                      else
                      {
                        data.set(that._uiElementsIDs[i].id, uiEl.dsModel.value);//uiEl.dsModel.label);
                        grid.set(that._uiElementsIDs[i].id, uiEl.dsModel.label);
                      }
                    }
                  }
                }
              }
              if(!bOneCommandSelected){
                var nlsErrorMsg = that._modalViewNls.selectAtleastOneCommand;
                that._modalView.showToastMessage(2, nlsErrorMsg);
                return;
              }
              var objData = {};
              var objGrid = {};
              data.forEach(function(value, key){;
                if (value != "" && value != undefined)
                objData[key] = value;
              });

              grid.forEach(function(value, key){
                objGrid[key] = value;
              });


              var treeNodeModel = that.createtreeNode(objData, objGrid);
              treeNodesList.push(treeNodeModel);
            }
          }else {
            var mandatoryCol = that._treeListViewNls[that._uiElementsIDs[0].id];
            var nlsErrorMsg = Nls.columnMandatory;
            nlsErrorMsg = nlsErrorMsg.replace("%1", mandatoryCol);
            that._modalView.showToastMessage(2, nlsErrorMsg);
            return;
          }
        }
        if(treeNodesList.length === 1 && that._bEditMode)
          return treeNodesList[0];
        else
          return treeNodesList;
      },

      /*
      * onOKButtonClick
      */
      /*onOKButtonClick : function onOKButtonClick()
      {
        var that = this;
        var treeListNodes = that.validateModal(false);
        var nbNodesTobeAdded = treeListNodes.length;
        var promisesSetParams = [];
        var listParams = {};
        for(var idxNode=0; idxNode < nbNodesTobeAdded; idxNode++){
          var treeListNode = treeListNodes[idxNode];
          var dataObject = treeListNode.getData();
          var param = {domain:that._domainID, family:that._familyID, parameter:that._paramID,argument:that._argID, params:dataObject};
          listParams[idxNode] = param;
        }
        var contentDiv = "DELDatagridviewparam_DELMBOMLifeCycleRulesTreeListView";
        Mask.mask(that.treeListView.elements.body);
        DELConfigurationParameterizationWebServices.setParametersMulti(listParams, {
          onSuccess : function(dataParams)
          {
            DELConfigurationParameterizationWebServices.isDeployedMulti(listParams, {
                onSuccess : function(dataIsDeployed)
                {
                  var strResponse = JSON.stringify(dataIsDeployed);
                  var response = JSON.parse(strResponse);
                  for(var idxNode=0; idxNode < nbNodesTobeAdded; idxNode++){
                    var treeListNode = treeListNodes[idxNode];
                    //objNode.isDeployed = dataIsDeployed;
                    let type = "";
                    type = treeListNode.getData().Type;
                    const isDeployed = response[treeListNode.getData().Type];//[treeListNode.getData().Type];
                    treeListNode.addGridAttributes({isDeployed : isDeployed});
                  }
                  that.addChild(treeListNodes);

                  that.displayNotifications({
                    level: 'info',
                    message: Nls.setParameters,
                    title: Nls.setParametersTitle
                  });
                  Mask.unmask(that.treeListView.elements.body);
                },
                onFailure : function (err){
                  Mask.unmask(that.treeListView.elements.body);
                }
              });
          },
          onFailure : function (err)
          {
            that.displayNotifications({
              level: 'error',
              message: Nls.setParametersError,
              title: Nls.setParametersTitle
            });
            Mask.unmask(that.treeListView.elements.body);
          }
        });


      },*/
      /*
      * onOKButtonClick
      */
      onOKButtonClick : function onOKButtonClick4()
      {
        var that = this;
        var treeListNodes = that.validateModal(false);
        var nbNodesTobeAdded = treeListNodes.length;
        var promisesSetParams = [];
        Mask.mask(that.treeListView.elements.body);
        for(var idxNode=0; idxNode < nbNodesTobeAdded; idxNode++){


            var promiseSetParams = new Promise(function (resolve, reject){
              var treeListNode = treeListNodes[idxNode];
              if(treeListNode){
                var dataObject = treeListNode.getData();
              DELConfigurationParameterizationWebServices.setParameters(that._domainID, that._familyID, that._paramID, that._argID, dataObject,{
                onSuccess : function(data){
                  resolve(dataObject);
                },
                onFailure : function(error){
                  reject("DELConfigurationParameterizationWebServices.setParameters");
                  console.error("DELConfigurationParameterizationWebServices.setParameters");
                }
              });
            }
            });
            promisesSetParams.push(promiseSetParams);
        }

        UWA.Promise.all(promisesSetParams).then(function(typesSetParams) {

          // Check Deployment and update Tree
          var promisesIsDeployed = [];
          for(var idxNode=0; idxNode < nbNodesTobeAdded; idxNode++){

            var promiseIsDeployed = new Promise(function (resolve, reject){
              var treeListNode = treeListNodes[idxNode];
              if(treeListNode){
                var dataObject = treeListNode.getData();
                DELConfigurationParameterizationWebServices.isDeployed(that._domainID, that._familyID, that._paramID, that._argID, dataObject, {
                  onSuccess : function(data){
                    resolve({treeNode:treeListNode, isDeployed:data});
                  },
                  onFailure : function(error){
                    reject("DELConfigurationParameterizationWebServices.isDeployed");
                    console.error("DELConfigurationParameterizationWebServices.isDeployed");
                  }
                });
              }
            });
            promisesIsDeployed.push(promiseIsDeployed);

          }
          UWA.Promise.all(promisesIsDeployed).then(function(resultIsDeployed){

            var listOfnodeTree = [];
            var lengthIsDeployed = resultIsDeployed.length;
            for(var idxDeployed =0; idxDeployed < lengthIsDeployed; idxDeployed++){

              var treeListNode = resultIsDeployed[idxDeployed].treeNode;
              if(treeListNode){
                treeListNode.addGridAttributes({isDeployed : resultIsDeployed[idxDeployed].isDeployed});
                listOfnodeTree.push(treeListNode);
              }
            }
            that.addChild(listOfnodeTree);

            that.displayNotifications({
              level: 'info',
              message: Nls.setParameters,
              title: Nls.setParametersTitle
            });
            Mask.unmask(that.treeListView.elements.body);
          }).catch(function(rejectMessages){
            that.displayNotifications({
              level: 'error',
              message: Nls.setParametersError,
              title: Nls.setParametersTitle
            });
            console.error(rejectMessages);
            Mask.unmask(that.treeListView.elements.body);
          });


        }).catch(function(rejectMessages){

            that.displayNotifications({
              level: 'error',
              message: Nls.setParametersError,
              title: Nls.setParametersTitle
            });
            console.error(rejectMessages);
            Mask.unmask(that.treeListView.elements.body);

        });

      },


    /*
    * onOKEditButtonClick
    */
    onOKEditButtonClick : function onOKEditButtonClick()
    {
      var that = this;
      that._bEditMode = true;
      that._parent();
      that._bEditMode = false;
    },

    /*
    * onOKButtonClick
    */
    // onOKButtonClick : function onOKButtonClick()
    // {
    //   var that = this;
    //   that._parent();
    // },

    /*
    * onCancelButtonClick
    */
    onCancelButtonClick : function onCancelButtonClick()
    {
      var that = this;
      that._parent();
    },
    /*
    * onChangeTypeClick
    */
    onChangeTypeClick : function onChangeTypeClick(type)
    {
      var that = this;
      var comboLCRules = document.getElementById("LifeCycleRules");

      var rulesComboElements = comboLCRules.dsModel.elementsList;

      comboLCRules.dsModel.disabled = true;
      comboLCRules.dsModel.elementsList = [];
      comboLCRules.dsModel.selectedIndex = -1;

      var rules = ['LC_ResultingProduct','LC_ExpandMbomStructure'];
      var typeElementData = type.dsModel.value;
      var typeElementLabels = type.dsModel.label.split(",");
      var nbTypes = typeElementData.length;
      var updatedtypeElementsList = [];
      for(var idxTypeElem =0; idxTypeElem < nbTypes; idxTypeElem++){
        var type = typeElementData[idxTypeElem];

        var treeDoc = that.treeList.dataGridView.treeDocument;
        if (treeDoc){
          var children = treeDoc.getChildren();
          var childrenLength = children.length;
          for (var idxChild=0;idxChild<childrenLength;idxChild++){

            var child = children[idxChild];
              if(child && type  && child.options.data.Type === type){

                var idxRule = rules.findIndex((element)=>element === child.options.data.LifeCycleRules);
                if(idxRule != -1)
                  rules.splice(idxRule, 1);
              }
          }

        }
      }
      if(rules.length){
        var ruleElementList = [];
        for (var idxRule=0;idxRule<rules.length;idxRule++)
        {
          var element = {};
          if (that._nodeTreeViewNls != null && that._nodeTreeViewNls[rules[idxRule]] != null && that._nodeTreeViewNls[rules[idxRule]] != undefined)
            element = {label: that._nodeTreeViewNls[rules[idxRule]], value: rules[idxRule]};
          else
            element = {label: rules[idxRule], value: rules[idxRule]};
          ruleElementList.push(element);
        }
        comboLCRules.dsModel.elementsList = ruleElementList;
        comboLCRules.dsModel.disabled = false;
      }
      else{
        var nlsErrorMsg = that._modalViewNls.rulesAlreadyDefined;
        that._modalView.showToastMessage(2, nlsErrorMsg);
      }
    },
    onChangeLifeCycleRuleClick : function onChangeLifeCycleRuleClick(type)
    {
      var that = this;
    },

    /*
    * onChangeTypeClick
    */
    // onChangeTypeClick : function onChangeTypeClick(type)
    // {
    //   var that = this;
    //
    //   var types = null;
    //   if (type.dsModel != null || type.dsModel != undefined)
    //     types = type.dsModel.elementsList[type.dsModel.selectedIndex].value;
    //
    //   var comboAttributeKeys = document.getElementById("keys");
    //   comboAttributeKeys.dsModel.disabled = true;
    //   comboAttributeKeys.dsModel.elementsList = [];
    //   comboAttributeKeys.dsModel.selectedIndex = -1;
    //
    //   var comboAttributes = document.getElementById("attributes");
    //   comboAttributes.dsModel.disabled = true;
    //   comboAttributes.dsModel.elementsList = [];
    //   comboAttributes.dsModel.selectedIndex = -1;
    //
    //   if (that._typeResult ===  null || that._typeResult[types] === undefined)
    //   {
    //     if (that._typeResult ===  null)
    //       that._typeResult = [];
    //
    //     var listOfTypes = [];
    //     listOfTypes.push(types);
    //
    //     //loader
    //     var loader = new WUXLoader({height : 22});
    //     loader.on(PPRSynchroLifeCycleNLS.Loading);
    //
    //     var parentNodeKeysContainer = comboAttributeKeys.getParent();
    //     parentNodeKeysContainer.style.position = "sticky";
    //     WUXModalContainer.createModal(parentNodeKeysContainer, loader.elements.container);
    //
    //     var parentNodeAttrContainer = comboAttributes.getParent();
    //     parentNodeAttrContainer.style.position = "sticky";
    //     WUXModalContainer.createModal(parentNodeAttrContainer/*, loader.elements.container*/);
    //
    //      ParameterizationApriso3DExpWebServices.getlistofDELMIATypes(listOfTypes, {
    //        onSuccess : function(data)
    //        {
    //          loader.off();
    //          WUXModalContainer.removeModal(parentNodeKeysContainer);
    //          WUXModalContainer.removeModal(parentNodeAttrContainer);
    //
    //          parentNodeKeysContainer.style.position = "";
    //          parentNodeAttrContainer.style.position = "";
    //
    //          that._typeResult[types] = data;
    //
    //          var keysList = [];
    //          var keys = Object.keys(data);
    //          var keysLength = keys.length;
    //          for (var i=0;i<keysLength;i++)
    //          {
    //            var key = keys[i];
    //            if (key)
    //              keysList.push({label: key, value: key});
    //          }
    //
    //          var keysListLength = keysList.length;
    //          if (keysListLength > 0)
    //          {
    //            //var comboAttributeKeys = document.getElementById("keys");
    //            comboAttributeKeys.dsModel.disabled = false;
    //            comboAttributeKeys.dsModel.elementsList = keysList;
    //            comboAttributeKeys.dsModel.selectedIndex = -1;
    //
    //            //var comboAttributes = document.getElementById("attributes");
    //            comboAttributes.dsModel.disabled = true;
    //            comboAttributes.dsModel.elementsList = [];
    //            comboAttributes.dsModel.selectedIndex = -1;
    //          }
    //        },
    //        onFailure : function(err)
    //        {
    //          loader.off();
    //          WUXModalContainer.removeModal(parentNodeKeysContainer);
    //          WUXModalContainer.removeModal(parentNodeAttrContainer);
    //
    //          parentNodeKeysContainer.style.position = "";
    //          parentNodeAttrContainer.style.position = "";
    //
    //          that.displayNotifications({
    //            level: 'error',
    //            message: Nls.getlistofDELMIATypesError,
    //            title: Nls.getlistofDELMIATypesTitle
    //          });
    //        }
    //    });
    //   }
    //   else
    //   {
    //     var data = that._typeResult[types];
    //
    //     var keysList = [];
    //     var keys = Object.keys(data);
    //     var keysLength = keys.length;
    //     for (var i=0;i<keysLength;i++)
    //     {
    //       var key = keys[i];
    //       if (key)
    //         keysList.push({label: key, value: key});
    //     }
    //
    //     var keysListLength = keysList.length;
    //     if (keysListLength > 0)
    //     {
    //       //var comboAttributeKeys = document.getElementById("keys");
    //       comboAttributeKeys.dsModel.disabled = false;
    //       comboAttributeKeys.dsModel.elementsList = keysList;
    //       comboAttributeKeys.dsModel.selectedIndex = -1;
    //
    //       //var comboAttributes = document.getElementById("attributes");
    //       comboAttributes.dsModel.disabled = true;
    //       comboAttributes.dsModel.elementsList = [];
    //       comboAttributes.dsModel.selectedIndex = -1;
    //     }
    //   }
    // },

    /*
    * onChangeKeyClick
    */
    // onChangeKeyClick : function onChangeKeyClick(data)
    // {
    //   var that = this;
    //
    //   var typesElt = document.getElementById("types");
    //   var types = typesElt.dsModel.elementsList[typesElt.dsModel.selectedIndex].value;
    //
    //   if (that._typeResult[types] != undefined && data.dsModel.elementsList[data.dsModel.selectedIndex] != undefined)
    //   {
    //     var attributesList = that._typeResult[types][data.dsModel.elementsList[data.dsModel.selectedIndex].value].attributes;
    //
    //     var valuesList = [];
    //     var values = Object.values(attributesList);
    //     var valuesLength = values.length;
    //     for (var i=0;i<valuesLength;i++)
    //     {
    //       var value = values[i];
    //       if (value)
    //         valuesList.push({label: value, value: value});
    //     }
    //
    //     if (valuesList.length > 0)
    //    {
    //      var comboAttributes = document.getElementById("attributes");
    //      comboAttributes.dsModel.disabled = false;
    //      comboAttributes.dsModel.elementsList = valuesList;
    //    }
    //
    //   }
    //   else {
    //     var comboKeys = document.getElementById("keys");
    //     comboKeys.dsModel.disabled = true;
    //     comboKeys.dsModel.elementsList = [];
    //   }
    // },

    /*
    * removeSelectedNode
    */
    removeSelectedNode : function removeSelectedNode(params)
    {
      console.log("params " + params);
      var that = this;
      that._parent(params);
    },

    /*
    * editSelectedNode
    */
    editSelectedNode : function editSelectedNode(params)
    {
      console.log("params " + params);
      var that = this;
      that._parent(params);
    }

  });



  return DELLifeCycleRulesFamilyView;
});

define('DS/ParameterizationSkeleton/Views/ParamConfigurationManagement/CfgConfigurationUXComponents', [
	'UWA/Core',
    'DS/ParameterizationSkeleton/Views/ParamConfigurationManagement/CfgParamCustomizationUtility',
    'DS/ParameterizationSkeleton/Views/ParamConfigurationManagement/CfgParamAlertUtility',
    'i18n!DS/ParameterizationSkeleton/assets/nls/ConfigurationManagementNLS',
    'DS/UIKIT/Input/Toggle',
    'DS/UIKIT/Input/Button',
    'DS/UIKIT/Input/File',
    'DS/UIKIT/Spinner',
    'DS/UIKIT/Popover',
], 
function (UWA,CfgParamCustomizationUtility, CfgParamAlertUtility,ConfigurationManagementNLS, Toggle, Button, UXFile,  Spinner, Popover) {
    'use strict';

    /**
     * This method is private.
     * It will create the label case with his text and inject it into parentElement
     * @param {String} text text to display as label
     * @param {HTMLElement} parentElement parentElement to inject the case
     */
    const createLabelCase = function (text, parentElement) {
        UWA.createElement('td', {
            'class': 'labels',
            html: text
        }).inject(parentElement);
    };
   
    /**
     * This method is private.
     * It will create an information case with information icon inside. At mouseover it will show a text as tooltip. 
     * This will be injected into parentElement
     * @param {String} text tooltip text
     * @param {HTMLElement} parentElement parentElement to inject the case
     */
    const createInformationCase = function (text, parentElement) {

        const informationCase = UWA.createElement('td', {
            'class': 'bubble-info'
        }).inject(parentElement);

        const informationIcon = UWA.createElement('span', { 'class': "fonticon fonticon-info" }).inject(informationCase);

        //Information tooltip 
        new Popover({
            target: informationIcon,
            trigger: "hover",
            animate: "true",
            position: "top",
            body: text,
            title: ''
        });

    };

    /**
     * This method is private.
     * It create a case to inject validation states (succes, loading, error) inside. 
     * The case is returned
     * @returns {HTMLTableDataCellElement} validationCase
    */
    const createValidationCase = function () {

        return UWA.createElement('td', {
            'class': 'validation'
        });

    };

    /**
     * This method is private.
     * It will create validation states (succes, loading, error) and return them.
     * @param {HTMLTableDataCellElement} parentElement validation case to inject states inside
     * @returns {Array} states - all states values 
     */
    const createValidationStates = function (parentElement) {
        const states = {
            "ok":
                UWA.createElement('span', {
                    'class': "Config_valid fonticon fonticon-2x fonticon-check "
                }),

            "error":
                UWA.createElement('span', {
                    'class': "Config_error fonticon fonticon-2x fonticon-wrong "
                }),

            "loader": new Spinner()
        };


        states['ok'].inject(parentElement).hide();
        states['error'].inject(parentElement).hide();
        states['loader'].inject(parentElement).hide();

        return states;
    };

    /**
     * This method is private.
     * It will create checkbox to enable or disable a parameter. The checkbox is injected into parentContainer
     * It will call webServices for it depends of the type. 
     * @param {HTMLElement} parentContainer parentContainer to inject checkbox inside
     * @param {Array} validationStates states to display the good one depends on webServices status (if OK then succes, if calling then loading, if failed then error)
     * @param {String} type Must be : date / unit / static / matrix
     * @param {String} apiKey The api key linked to the type.
     */
    const createCheckBoxCase = function (parentContainer, validationStates, type, apiKey) {

        const checkBoxCase = UWA.createElement('td', {
            'class': 'checkboxCase'
        }).inject(parentContainer);

        const checkBoxContainer = UWA.createElement('div', {
            'class': 'checkboxContainer'
        }).inject(checkBoxCase);

        const checkbox = new Toggle(
            {
                label: '',
                type: 'checkbox',
                checked: false,
                className: 'primary checkbox_',
                events: {
                    'onClick': function (event) {
                        const onSuccess = function () {
                            validationStates['loader'].hide();
                            setTimeout(function () {
                                validationStates['ok'].show();
                            }, 300);
                            CfgParamAlertUtility.message('success', ConfigurationManagementNLS.SuccessfulSettingsApplied);  // IR-813391-3DEXPERIENCER2021x
                        };

                        const onFailure = function () {
                            validationStates['loader'].hide();
                            setTimeout(function () {
                                validationStates['error'].show();
                            }, 300);
                            CfgParamAlertUtility.message('error', ConfigurationManagementNLS.ProcessError);

                        };

                        validationStates['loader'].show();
                        validationStates['ok'].hide();
                        validationStates['error'].hide();
                        if (type === "date") {
                            let value = "Enabled";
                            if (event.srcElement.checked === false)
                                value = "Disabled"
                            CfgParamCustomizationUtility.setDateParam(value, onSuccess, onFailure);
                        }
                        else if (type === "unit") {
                            let value = "Enabled";
                            if (event.srcElement.checked === false)
                                value = "Disabled"
                            CfgParamCustomizationUtility.setUnitParam(value, onSuccess, onFailure);
                        }
                        else if (type === 'static') {
                            let value = 'Enabled';
                            if (event.srcElement.checked === false) value = 'Disabled';
                            CfgParamCustomizationUtility.setStaticMappingParam(value, onSuccess, onFailure);
                        } else if (type === 'matrix') {
                            let value = 'Enabled';
                            if (event.srcElement.checked === false) value = 'Disabled';
                            CfgParamCustomizationUtility.setCompositionMatrixParam(value, onSuccess, onFailure);
                        }
                    }
                }
            }
        ).inject(checkBoxContainer);
        parentContainer.appendChild(checkBoxCase);
        return checkbox;
    };

    /**
     * This method is private.
     * It will call webService linked to the apiKey to get the value : enabled or disable. Then, check or not the checkbox. 
     * and then, show the call status as validation state display (succes, error)
     * @param {String} apiKey The api key linked to the type.
     * @param {HTMLInputElement} checkbox the checkbox to initialize
     * @param {Array} validationStates states array to display the good one depends of webServices call status
     */
    const initCheckboxState = function (apiKey, checkbox, validationStates) {

        const onSuccess = function (data) {
            if (data.constructor.name != "String") { //If response comming from Static or Matrix web services
                if (data.settings[0].value === "enabled")
                    checkbox.elements.content.checked = true;
                else
                    checkbox.elements.content.checked = false;
            } else { // If response coming from date or unit web services
                if (data === "true" || data === "Enabled")
                    checkbox.elements.content.checked = true;
                else
                    checkbox.elements.content.checked = false;
            }
            validationStates['ok'].show();
        };

        const onFailure = function (data) {
            validationStates['error'].show();
            console.log(data);
        };

        //if (apiKey === "date" || apiKey === "unit")
            CfgParamCustomizationUtility.getParamsFromServer(apiKey, onSuccess, onFailure);
        //else if (apiKey === "StaticMappingActivation" || apiKey === "CompositionMatrixActivation")
            //CfgParamCustomizationUtility.getParametrizationInformation(apiKey, onSuccess, onFailure);
    };

    /**
     * This method is private.
     * This method creating a new Param component as an table row. It inject the component into the parentElement. 
     * @param {any} label This label will be display at first in the row. It must be like "Enable Data criteria" for example.
     * @param {any} description This description will be display as tooltip in an information icon.
     * @param {any} parentElement The parentElement to inject the component
     * @param {any} type Must be : date / unit / static / matrix - It will create the component linked to the type.
     * @param {any} webServiceKey This is the webServiceKey discribe in PES.
     */
    const createParamComponent = function (label, description, parentElement, type, webServiceKey) {
        createLabelCase(label, parentElement);
        createInformationCase(description, parentElement);

        let validationTD = createValidationCase();
        let states = createValidationStates(validationTD);

        let boxes = createCheckBoxCase(parentElement, states, type, webServiceKey);
        initCheckboxState(webServiceKey, boxes, states);

        validationTD.inject(parentElement);
    };


	return  {

        /**
         * CreateComponent method - Called in ConfigurationManagementView 
         * This method create component and inject it into parentElement. You can create 4 differents compononent by changing type.
         * @param {any} type date / unit / static / matrix - Use to create the good component
         * @param {any} parentElement this is the element in which the component will be injected
         */
        ceateComponent: function (type, parentElement) {
            if (type === "date")
                //this.createDateComponent(parentElement);
                createParamComponent(
                    ConfigurationManagementNLS.DateCriteriaTitle,
                    ConfigurationManagementNLS.DateDescription,
                    parentElement,
                    type,
                    "date" // contextualDateActivation
                );
            else if (type === "unit")
                //this.createUnitComponent(parentElement);
                createParamComponent(
                    ConfigurationManagementNLS.UnitCriteriaTitle,
                    ConfigurationManagementNLS.UnitDescription,
                    parentElement,
                    type,
                    "unit" //unitActivation
                );
            else if (type === "static")
               // this.createStaticMappingComponent(parentElement);
                createParamComponent(
                    ConfigurationManagementNLS.StaticMappingTitle,
                    ConfigurationManagementNLS.StaticMappingDescription,
                    parentElement,
                    type,
                    "StaticMappingActivation"
                );
            else if (type === "matrix")
                //this.createCompositionMatrixComponent(parentElement);
                createParamComponent(
                    ConfigurationManagementNLS.CompositionMatrixTitle,
                    ConfigurationManagementNLS.CompositionMatrixDescription,
                    parentElement,
                    type,
                    "CompositionMatrixActivation"
                );
        },
       
        /**
         * Create an XSL parameterization component, which contain way to download default and customized XSL and a browse and upload button to set the customized XSL
         * @param {*} configurationXSLDiv 
         */
        createXSLComponents: function(configurationXSLDiv){
            var selectedContent ="";
            var browseDiv =  UWA.createElement('div', {'id': "browseDiv",'display': "inline"}).inject(configurationXSLDiv);
            // File Selector component. Allow only one file
            var fileSelector =new UXFile({
                multiple: false,
                buttonBefore: false,
                name: 'file-input',
                buttonClassName: 'default',
                placeholder: ConfigurationManagementNLS.SelectAFile,
                buttonText: ConfigurationManagementNLS.BrowseButtonText
            }).inject(browseDiv);
            // On file change, save the content of the file on a variable
            fileSelector.onChange = function(data){
                var putFileInVariable = function(file){
                    fileSelector.elements.container.getChildren()[0].placeholder = file.name;
                    var reader = new FileReader();
                    reader.onload = function(event) { 
                        selectedContent = reader.result;
                    };
                    reader.readAsText(file);
                }
                putFileInVariable(fileSelector.elements.input.files[0]);               
            }

            
            // Upload button to upload selected file
            var uploadButton = new Button({ id:"uploadButton", className:"primary", value: ConfigurationManagementNLS.UploadButtonText, icon: 'upload'}).inject(browseDiv); // Create the button to send datas
            uploadButton.elements.container.style.marginTop = "5px";
            uploadButton.addEvent('onClick', function(){//Push content on server
                var textContent = selectedContent.trim();
                if(textContent === ""){
                    //Nothing to import
                    CfgParamAlertUtility.message('error',ConfigurationManagementNLS.NoFileToUpload);
                    return;
                }
                if(!textContent.startsWith("<?xml version=\"1.0\" encoding=\"utf-8\"?>")){
                    //Version should be 1.0
                    CfgParamAlertUtility.message('error',ConfigurationManagementNLS.XSLFileError);
                    return;
                }
                else{
                    var onSuccess = function(data){
                        CfgParamAlertUtility.message('success',ConfigurationManagementNLS.XSLUploadSuccessAlert);
                    }
                    CfgParamCustomizationUtility.uploadXSLCusto(textContent, onSuccess, console.log);
                }
            });
            

            // Download the customized XSL file
            var downloadCustoButton = new Button({id:"downloadCustoButton", value: ConfigurationManagementNLS.DowloadCustoButton,icon: 'download'}).inject(browseDiv);
            downloadCustoButton.elements.container.style.float = "right";
            downloadCustoButton.elements.container.style.marginTop = "5px";
            downloadCustoButton.addEvent('onClick', function(){
                function onSuccessGetXSL(result){
                    CfgParamCustomizationUtility.download("XslCusto.xsl",result.xslt.content);
                }
                CfgParamCustomizationUtility.getCustoXSL(onSuccessGetXSL,console.log);
            });
            
            // Download the Default XSL file
            var downloadButton = new Button({id:"downloadButton", value: ConfigurationManagementNLS.DowloadDefaultButton,icon: 'download' }).inject(browseDiv); // Create the button to send datas
            downloadButton.elements.container.style.margin = "5px";
            downloadButton.elements.container.style.float = "right";
            downloadButton.addEvent('onClick', function(){
                function onSuccessGetXSL(result){
                    CfgParamCustomizationUtility.download("XslDefault.xsl",result.xslt.content);
                }
                CfgParamCustomizationUtility.getDefaultXSL(onSuccessGetXSL,console.log);
            });
        },
	}
});


/*@fullReview  ZUR 15/11/23 2017x Param Skeleton*/
/*global define, widget*/
define('DS/ParameterizationSkeleton/Views/ParamConfigurationManagement/ConfigurationManagementView',
    [
        'UWA/Core',
        'UWA/Class/View',
        'DS/UIKIT/Mask',
        'DS/ParameterizationSkeleton/Views/ParamConfigurationManagement/CfgConfigurationUXComponents',
        'DS/UIKIT/Accordion',
        'i18n!DS/ParameterizationSkeleton/assets/nls/ConfigurationManagementNLS'
    ], function (UWA, View, Mask, UXComponent, Accordion, ConfigurationManagementNLS) {

        'use strict';
        var extendedView;
     

        extendedView = View.extend({

            defaultOptions: {
                type: 'default'
            },

            // The ‘options’ object is passed via the ‘viewOptions’ specified in the Renderer at the Skeleton instantiation
            init : function (options) {
                UWA.log("ConfigurationManagementView::init");
                UWA.log(options);
                this.options  = UWA.clone(options || {}, false); //environment options
                this._parent(options); 
                this.childView = null;
            },

            render: function () {
                var that = this;

                //This is the main div. It contains configurationCriteria, configurationFiletring and XSL
                that.contentDiv =  UWA.createElement('div', {'id': "configurationParamContainer"});
                that.container.setContent(that.contentDiv);
                that.contentDiv.parentElement.classList.add("configurated-structure-main") ;
                that.createHeader(that.contentDiv);

                // It is again for delete the gap between the two items
                var configurationXSLTable = UWA.createElement('table', {'id': "configurationXSL"});
                configurationXSLTable.style.width = "100%";
                var configurationXSLDiv =UWA.createElement('tr',{'id': "Elmt1"}).inject(configurationXSLTable);
                UXComponent.createXSLComponents(configurationXSLDiv);

                new Accordion({
                    className: 'filled',
                    exclusive: false,
                    items: [
                        { 
                            title: ConfigurationManagementNLS.ConfigurationCriteriaAccordeonTab,
                            content: that.createConfigurationParamView('configurationCriteriaTable',
                                {
                                    "dateTableCase" : "date",
                                    "unitTableCase" : "unit"
                                }
                            ),
                            selected: true
                        },
                        {
                            title: ConfigurationManagementNLS.ConfigurationFilteringAccordeonTab,
                            content: that.createConfigurationParamView('configurationFileringTable',
                                {
                                    "StaticMappingTableCase": "static",
                                    "CompositionMatrixTableCase": "matrix"
                                }
                            ),
                            selected: true 
                        },
                        { 
                            title: ConfigurationManagementNLS.XSLAccordeonTab,
                            content: configurationXSLTable,
                            selected: true
                        }                       
                    ]
                }).inject(that.contentDiv);
                
                return that;
            },

            createConfigurationParamView: function (id,array) {
                var configurationParamTable = UWA.createElement('table',
                    {
                        'id': id,
                        'class' : 'configurationParamTable'
                    }
                );
                Object.entries(array).forEach(entry => {
                    const [key, value] = entry;
                    UXComponent.ceateComponent(value, this.createTableCase(key, configurationParamTable));
                });           
                return configurationParamTable;
            },

            createTableCase: function (id, parentElement) {
                var tableCase =  UWA.createElement('tr', {
                    'id': id,
                    'class': 'configurationTableCase',
                }).inject(parentElement);

                tableCase.addEventListener('mouseover', function () {
                    tableCase.classList.add('colored')
                });

                tableCase.addEventListener('mouseout', function () {
                    tableCase.classList.remove('colored');
                }); 

                return tableCase;

            },

            createHeader: function (parentElement) {
                UWA.createElement('div', {
                    'id': "configurationParamTitle",
                    html: ConfigurationManagementNLS.ConfigurationManagementHeader
                }).inject(parentElement);
            },

            onCompleteRequestMapping : function(){
                Mask.unmask(this.contentDiv);

            },

            destroy: function() {
                this.stopListening();
                this._parent.apply(this, arguments);
            }

        });
        return extendedView;
    });



define('DS/ParameterizationSkeleton/Views/ParameterizationMSF/MSFGCOMappingView',
		[
			'UWA/Core',
			'DS/UIKIT/Input/Text',
			'DS/UIKIT/Modal',
			'DS/UIKIT/Input/Select',
			'DS/UIKIT/Input/Button',
			'DS/ParameterizationSkeleton/Views/ParametersLayoutViewUtilities',
			'DS/ParameterizationSkeleton/Views/ParameterizationMSF/MSFGCOMappingViewUtilities',
			'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler',
			'DS/WAFData/WAFData',
			'i18n!DS/ParameterizationSkeleton/assets/nls/MSFContentMgmtNLS'
			],
			function (UWA,
					Text,
					Modal,
					Select,
					Button,
					ParametersLayoutViewUtilities,
					MSFGCOMappingViewUtilities,
					URLHandler,
					WAFData,
					MSFContentMgmtNLS) {

	'use strict';
	var policyCell, formatCell, policySelectComboBox, formatSelectComboBox;

	var gcoMappingView = {

			initVariable: function() {
				this.cellsIndex = {
						"internalType": 0,
						"experienceType": 1,
						"policy": 2,
						"format": 3,
						"relationship": 4,
						"action": 5,
						"deploy": 6
				};
			},

			ShowMappingModelDialog : function(buttonID, contentDiv) {

				var that = this;

				if(buttonID == "btnCustomTypeMapping")
				{
					var editAttributesModal, modalbodyTable, modaltbody, lineModal,
					modalCellLabel, modalCellValue;

					modalbodyTable =  UWA.createElement('table', {
						'id': 'newEntryTable',
						'class': 'table table-condensed table-hover'
					});
					modaltbody = UWA.createElement('tbody', {
						'class': ''
					}).inject(modalbodyTable);

					//1st row - Internal Type
					lineModal = UWA.createElement('tr').inject(modaltbody);

					modalCellLabel = UWA.createElement('td', {
						'Align' : 'left',
					});
					UWA.createElement('p', {text: MSFContentMgmtNLS.InternalType, 'class': ''}).inject(modalCellLabel);

					modalCellLabel.inject(lineModal);

					modalCellValue = UWA.createElement('td', {
						'Align' : 'left'
					}).inject(lineModal);

					var typesSelectComboBox = this.buildTypeSelect();
					typesSelectComboBox.inject(modalCellValue);

					//2nd row - 3DEXPEREINCE Type
					lineModal = UWA.createElement('tr').inject(modaltbody);

					modalCellLabel = UWA.createElement('td', {
						'Align' : 'left',
					});
					UWA.createElement('p', {text: MSFContentMgmtNLS.ExperienceType, 'class': ''}).inject(modalCellLabel);
					modalCellLabel.inject(lineModal);

					modalCellValue = UWA.createElement('td', {
						'Align' : 'left'
					}).inject(lineModal);

					var enoviaTypeText = new Text({
						placeholder: "",
						attributes: {
							id : "enoviaTypeID",
							value: "",
							multiline: true,
							disabled: true
						},
						events: {
							onChange: function (e) {
								var url = URLHandler.getURL() + "/resources/v1/msfParameterization/getPolicyAssociatedWithType?tenant=" + URLHandler.getTenant() + " &TypeName=" + enoviaTypeText.getValue();
								WAFData.authenticatedRequest(url, {
									timeout: 250000,
									method: 'GET',
									type: 'text',
									headers: {
										'Content-Type': 'text/html'
									},

									onFailure: function (json) {
										console.log("policy retreival failed " + json.message);
									},

									onComplete: function (json) {
										that.buildPolicyNFormatSelectBoxAgain(json, that);
									}
								});
							}
						}
					});
					enoviaTypeText.inject(modalCellValue);

					//3rd row Policy
					lineModal = UWA.createElement('tr').inject(modaltbody);

					modalCellLabel = UWA.createElement('td', {
						'Align' : 'left',
					});
					UWA.createElement('p', {text: MSFContentMgmtNLS.Policy, 'class': ''}).inject(modalCellLabel);

					modalCellLabel.inject(lineModal);

					policyCell = modalCellValue = UWA.createElement('td', {
						'Align' : 'left'
					}).inject(lineModal);

					policySelectComboBox = this.buildPolicySelect([]);
					policySelectComboBox.inject(modalCellValue);

					//4th row Format
					lineModal = UWA.createElement('tr').inject(modaltbody);

					modalCellLabel = UWA.createElement('td', {
						'Align' : 'left',
					});
					UWA.createElement('p', {text: MSFContentMgmtNLS.Format, 'class': ''}).inject(modalCellLabel);

					modalCellLabel.inject(lineModal);

					formatCell = modalCellValue = UWA.createElement('td', {
						'Align' : 'left'
					}).inject(lineModal);

					formatSelectComboBox = this.buildFormatSelect([]);
					formatSelectComboBox.inject(modalCellValue);

					//5th row Relationship
					lineModal = UWA.createElement('tr').inject(modaltbody);

					modalCellLabel = UWA.createElement('td', {
						'Align' : 'left',
					});
					UWA.createElement('p', {text: MSFContentMgmtNLS.RelationshipOptional, 'class': ''}).inject(modalCellLabel);

					modalCellLabel.inject(lineModal);

					modalCellValue = UWA.createElement('td', {
						'Align' : 'left'
					}).inject(lineModal);

					var relationshipText = new Text({
						placeholder: "",
						attributes: {
							id : "relationshipID",
							value: "",
							multiline: false,
							disabled: false
						}
					});
					relationshipText.inject(modalCellValue);


					var OKBtn = new Button({
						value : MSFContentMgmtNLS.Add,
						id    : "modalOKButton",
						className : 'btn primary'
					});

					var CancelBtn = new Button({
						value : MSFContentMgmtNLS.Cancel,
						id    : 'modalCancelButton',
						className : 'btn default'
					});

					OKBtn.addEvent("onClick", function () {
						var internalTypeFieldValue = typesSelectComboBox.getValue()[0];
						var enoviaTypeValue = enoviaTypeText.getValue();
						var policyFieldValue = policySelectComboBox.getValue()[0];
						var formatFieldValue = formatSelectComboBox.getValue()[0];
						var relationshipValue = relationshipText.getValue();

						if(that.checkforduplicate(internalTypeFieldValue, enoviaTypeValue, policyFieldValue, formatFieldValue, relationshipValue))
						{
							MSFGCOMappingViewUtilities.getAlertMessage(MSFContentMgmtNLS.alreadyExists, 'error', contentDiv);
						}
						else if(that.check3DExpTypeEmpty(enoviaTypeValue))
						{
							MSFGCOMappingViewUtilities.getAlertMessage(MSFContentMgmtNLS.EnoviaTypeEmptyMessage, 'error', contentDiv);
						}
						else if(that.checkPolicyEmpty(policyFieldValue))
						{
							MSFGCOMappingViewUtilities.getAlertMessage(MSFContentMgmtNLS.PolicyEmptyMessage, 'error', contentDiv);
						}
						else if(that.checkFormatEmpty(formatFieldValue))
						{
							MSFGCOMappingViewUtilities.getAlertMessage(MSFContentMgmtNLS.FormatEmptyMessage, 'error', contentDiv);
						}
						else {

							var row = that.buildMappingRow(internalTypeFieldValue, enoviaTypeValue, policyFieldValue, formatFieldValue, relationshipValue, "NewNotDeployed");
							row.inject(contentDiv.getElement(".msfgcofamilytable"));
							row["IsDeployed"] = "NewNotDeployed";
							editAttributesModal.hide();
						}
					});
					CancelBtn.addEvent("onClick", function (e) {
						UWA.log(e);
						editAttributesModal.destroy();
					});

					editAttributesModal = new Modal({
						className: 'add-attr-modal',
						closable: true,
						header  : MSFContentMgmtNLS.CustomTypePanelHeader,
						body    : modalbodyTable,
						footer  : [ OKBtn, CancelBtn ]
					}).inject(contentDiv);

					editAttributesModal.show();
				}
			},

			check3DExpTypeEmpty : function (internalTypeFieldValue) {
				return this.validateEnteredValuesNotNull(internalTypeFieldValue);
			},

			checkPolicyEmpty: function (policyFieldValue) {
				return this.validateEnteredValuesNotNull(policyFieldValue);
			},

			checkFormatEmpty: function (formatFieldValue) {
				return this.validateEnteredValuesNotNull(formatFieldValue);
			},

			validateEnteredValuesNotNull : function (userEnteredValue) {

				var isEmpty = false;
				if (userEnteredValue == undefined || userEnteredValue.length === 0 || userEnteredValue === "") {
					isEmpty = true;
				}
				return isEmpty;
			},

			checkforduplicate: function(internalTypeFieldValue, enoviaTypeValue, policyFieldValue, formatFieldValue, relationshipValue) {

				var rowsOfMappedFields = document.querySelectorAll(".customTypeMappingRow");

				var isDuplicate = false;

				for (var k1 = 0; k1 < rowsOfMappedFields.length; k1++) {

					if(internalTypeFieldValue == rowsOfMappedFields[k1].getChildren()[0].getText() &&
							enoviaTypeValue == rowsOfMappedFields[k1].getChildren()[1].getText() &&
							(policyFieldValue == rowsOfMappedFields[k1].getChildren()[2].getText() ||
							formatFieldValue == rowsOfMappedFields[k1].getChildren()[3].getText() ||
							relationshipValue == rowsOfMappedFields[k1].getChildren()[4].getText())) {

						isDuplicate = true;
						break;
					}					
				}
				return isDuplicate;
			},

			buildMappingRow: function (internalTypeFieldValue, enoviaTypeValue, policyFieldValue, formatFieldValue, relationshipValue, isDeployed) {

				var rowInfo = UWA.createElement('tr', {
					'class': 'customTypeMappingRow'
				});

				this.buildTextTableCell('Left', 15, rowInfo, '', internalTypeFieldValue);
				this.buildTextTableCell('Left', 15, rowInfo, '', enoviaTypeValue);
				this.buildTextTableCell('Left', 15, rowInfo, '', policyFieldValue);
				this.buildTextTableCell('Left', 15, rowInfo, '', formatFieldValue);
				this.buildTextTableCell('Left', 15, rowInfo, '', relationshipValue);

				var cell = UWA.createElement('td', {
					'Align': 'center'
				}).inject(rowInfo);

				var removeAttributeButton = MSFGCOMappingViewUtilities.addRemoveButtonToCellRow(cell, rowInfo);

				cell = UWA.createElement('td', {
					"Align": "center"
				}).inject(rowInfo);
				cell.UserOperation = "Add";

				if (isDeployed == "Deployed") {
					var imgSpan = MSFGCOMappingViewUtilities.buildImgSpan('check', '2.5', 'green', MSFContentMgmtNLS.Deployed);
					imgSpan.inject(cell);
				} else if (isDeployed == "NewNotDeployed") {
					var imgSpan = MSFGCOMappingViewUtilities.buildImgSpan('cog', '2.5', 'orange', MSFContentMgmtNLS.Modified);
					imgSpan.inject(cell);
				}

				return rowInfo;
			},			

			buildTableHeadingRow : function() {
				var rowInfo = UWA.createElement('tr', {
					'class': 'success'
				});

				this.buildTextTableCell('Left', 15, rowInfo, 'h5', MSFContentMgmtNLS.InternalType);
				this.buildTextTableCell('Left', 15, rowInfo, 'h5', MSFContentMgmtNLS.ExperienceType);
				this.buildTextTableCell('Left', 15, rowInfo, 'h5', MSFContentMgmtNLS.Policy);
				this.buildTextTableCell('Left', 15, rowInfo, 'h5', MSFContentMgmtNLS.Format);
				this.buildTextTableCell('Left', 15, rowInfo, 'h5', MSFContentMgmtNLS.Relationship);
				this.buildTextTableCell('Left', 15, rowInfo, 'h5', MSFContentMgmtNLS.actions);
				this.buildTextTableCell('Left', 15, rowInfo, 'h5', MSFContentMgmtNLS.deployStatus);

				return rowInfo;
			},

			buildTextTableCell: function (alignment, cellWidth, row, cellFormat, cellText) {

				var cell = UWA.createElement('td', {
					'Align': alignment,
					'width': cellWidth,
					'class': 'customTypeMappingTable'
				}).inject(row);

				if (cellFormat) {
					UWA.createElement(cellFormat, {
						text: cellText
					}).inject(cell);
				} else {
					cell.appendText(cellText);
				}
				return cell;
			},

			buildTypeSelect : function () {
				var typesArray = [];
				typesArray.push({ type: 'msword', length: '' });
				typesArray.push({ type: 'msexcel', length: '' });
				typesArray.push({ type: 'mspowerpoint', length: '' });
				typesArray.push({ type: 'msoutlook', length: '' });
				typesArray.push({ type: 'mswin', length: '' });

				var i, typeID, isOptionSelected,
				listofTypes = typesArray,
				typesSelectComboBox =  new Select({
					nativeSelect: true,
					placeholder: false,
					multiple: false,
					id : "3dexperienceType"
				});

				for (i = 0; i < listofTypes.length; i++) {
					typeID = listofTypes[i].type + listofTypes[i].length;
					isOptionSelected = false;
					if (typeID  === 'msword') {
						isOptionSelected = true;
					}

					typesSelectComboBox.add([{
						label: typeID,
						value: typeID,
						selected: isOptionSelected
					}], false);
				}
				return typesSelectComboBox;
			},

			buildPolicySelect : function (policyArray, that) {

				var i, policyID, isOptionSelected;

				policySelectComboBox =  new Select({
					placeholder: false,
					multiple: false,
					id : "policycombobox",
					events: {
						onChange: function(e) {
							var url = URLHandler.getURL() + "/resources/enoviamsfmodeler/msf/GetFormatsAssociatedWithPolicy?PolicyName=" + this.getValue();
							WAFData.authenticatedRequest(url, {
								timeout: 250000,
								method: 'GET',
								type: 'text',
								headers: {
									'Content-Type': 'text/html'
								},

								onFailure: function (json) {
									console.log("format retreival failed " + json.message);
								},

								onComplete: function (formatjson) {
									var formatArray = [];
									var format = formatjson.split("|");
									for(var i = 0; i < format.length; i++) {
										formatArray.push({ type: format[i] });
									}
									formatSelectComboBox = that.buildFormatSelect(formatArray);
									formatCell.innerHTML = "";
									formatSelectComboBox.inject(formatCell);
								}
							});
						}
					}
				});

				for (i = 0; i < policyArray.length; i++) {
					policyID = policyArray[i].type;
					isOptionSelected = false;

					policySelectComboBox.add([{
						label: policyID,
						value: policyID,
						selected: false
					}], false);
				}
				return policySelectComboBox;
			},

			buildPolicyNFormatSelectBoxAgain: function (json, that) {
				var policyArray = [];
				var policy = json.split("|");

				for(var i = 0; i < policy.length ; i++) {
					policyArray.push({ type: policy[i] });
				}
				policySelectComboBox = that.buildPolicySelect(policyArray, that);
				policyCell.innerHTML = "";
				policySelectComboBox.inject(policyCell);
			},

			buildFormatSelect : function (formatArray) {

				var i, formatID,
				formatSelectComboBox =  new Select({
					placeholder: false,
					multiple: false,
					id : "formatcombobox"
				});

				for (i = 0; i < formatArray.length; i++) {
					formatID = formatArray[i].type;

					formatSelectComboBox.add([{
						label: formatID,
						value: formatID,
						selected: false
					}], false);
				}
				return formatSelectComboBox;
			}
	};
	gcoMappingView.initVariable();
	return gcoMappingView;

});

/*@fullReview  CN1 18/05/15 2019xBeta2 Mapping Widget*/
/*global define, widget, document, setTimeout, console*/
/*jslint plusplus: true*/
/*jslint nomen: true*/
define('DS/ParameterizationSkeleton/Views/ParamCollaboration/AttributeMapping/MappingViewUtilities',
		[
		 'UWA/Core',
		 'UWA/Controls/Accordion',
		 'DS/UIKIT/Accordion',
		 'DS/UIKIT/Input/Button',
		 'DS/UIKIT/Input/Select',
		 'DS/UIKIT/Input/Toggle',
		 'DS/UIKIT/Modal',
		 'DS/UIKIT/Alert',
		 'DS/UIKIT/Popover',
		 'DS/UIKIT/Tooltip',
		 'DS/UIKIT/Spinner',
		 'DS/ParameterizationSkeleton/Views/ParametersLayoutViewUtilities',
		 'i18n!DS/ParameterizationSkeleton/assets/nls/MappingManagementNLS',
		 ],
		 function (UWA,
				 UWAccordion, Accordion,
				 Button, Select, Toggle,
				 Modal,
				 Alert, Popover,Tooltip, Spinner, ParametersLayoutViewUtilities,
				 MappingManagementNLS) {

	'use strict';

	var UIview = {

			init : function () {
				this.cellsAttrIndex = [];
				this.cellsIndex = [];
			},

			initVariable : function () {
				this.cellsIndex = {
						"kindOfMapping" : 0,
						"VPMObject" : 1,
						"side" : 2,
						"MatrixObject" : 3,
						"action" : 4,
						"deployFlag" : 5,
						"Indexed" : 6,
				};
				this.cellsAttrIndex = {
						"VPMAttr" : 0,
						"side" : 1,
						"MatrixAttr" : 2,
						"info" : 3,
						"action" : 4,
						"deployFlag" : 5,
				};

				this.direction =  {
						"BOTH" : "<=>",
						"VPM_To_MX" : "=>",
						"MX_To_VPM" : "<=",
				};

				this.enumType = "enum";
				this.PartAttrAsTarget = [ "Part Classification","Material Category", "Production Make Buy Code" , "Service Make Buy Code" ,  "Unit of Measure", "Description", "Estimated Cost","Target Cost", "Lead Time","Spare Part","End Item","End Item Override Enabled","Lead Time Duration","Effectivity Date","Design Purchase","Spare Part" ];
				this.VPMAttrAsTarget = [ "PLMReference.V_versionComment","PLMEntity.V_description","PLMReference.V_ApplicabilityDate"];
				this.mappableAttributeReaseon = {
						0 : MappingManagementNLS.ErrorNotSameType,
						1 : MappingManagementNLS.ErrorRange,
						2 : MappingManagementNLS.ErrorAlreadyMappedTogether,
						3 : MappingManagementNLS.ErrorVPMOnlyUsedAsSource,
						4 : MappingManagementNLS.ErrorMxOnlyUsedAsSource,
						5 : MappingManagementNLS.ErrorPartAlreadyUsedAsTarget,
						6 : MappingManagementNLS.ErrorProductAlreadyUsedAsTarget,
						7 : MappingManagementNLS.ErrorPartNotDeployed,
						8 : MappingManagementNLS.ErrorProductNotDeployed,
						9 : MappingManagementNLS.ErrorPartNotAvailable,
						10 : MappingManagementNLS.ErrorProductNotAvailable,
						11 : MappingManagementNLS.ErrorProductUnknown,
						12 : MappingManagementNLS.ErrorPartUnknown
				};
			},




			UpdatePartComboAttributeList: function (VPMTypeRelInfo,MatrixTypeRelInfo,listofAttributesMapping,attrMappingMap,listNewSelect,currentSelectVPM,currentSelectMatrix){
				var i, j,attrLinetmp,deployCells, selectVPM,mappingEltAttr;

				var directionAvailableMap = new Map();
				var toExludeForUpdate = false;
				//For each Part attribute select, build Part attribute list mappable with selected VPM attribute
				for(i=0; i<listNewSelect.length;i++)
				{
					var newLine = listNewSelect[i];
					if ( currentSelectVPM!==undefined && newLine.VPM===currentSelectVPM && currentSelectMatrix !==undefined && newLine.Matrix===currentSelectMatrix )
						toExludeForUpdate =true;
					else toExludeForUpdate =false;

					if(!toExludeForUpdate)
					{
						mappingEltAttr=UIview.retrieveMappingAttrEntryFromAttrLine(newLine.NewLine,listofAttributesMapping);
						UIview.enableMatrixAttrAccordingRules( VPMTypeRelInfo, newLine.VPM ,MatrixTypeRelInfo,newLine.Matrix,attrMappingMap,directionAvailableMap,mappingEltAttr) ;
					}
				}

			},



			addNewAttributeLine : function (VPMTypeRelInfo ,MatrixTypeRelInfo ,kindOfMapping ,/*attrtbodyNew,*/attrtbody,listofAttributesMapping,widthTable,listofTypeRelMapping/*, selectedVPM, selectedPart, selectedDirection,status*/ ) {
				var iCell, removeAttributeButton, deleteSpan, removePop,position, VPMTypeRelInfo,MatrixTypeRelInfo,mappingElt,listOfLinkedMapping,attrMappingMap,
				actionButton = [],//editElts = [],
				lineAttr = UWA.createElement('tr', {'class': 'AttrLineMapping'}),
				mappingEltAttr,
				that = this,
				selectObj,
				iCellStatus,
				selectMatrix,
				selectVPM,
				iCellAction;

				var directionAvailableMap = new Map()
				iCell = UWA.createElement('td', {
					'Align'  : 'left',
					'width'  : widthTable[0],
					'class': 'attributeMappingField font-3dslight'// font-3dsbold
				}).inject(lineAttr);

				selectVPM =  new Select({
					nativeSelect: true,
					placeholder: MappingManagementNLS.selectAttr.format(VPMTypeRelInfo.name),
					multiple: false,
					className: "selectVPM",
				});
				selectVPM.inject(iCell);

				iCell = UWA.createElement('td', {
					'width' : widthTable[1],
					'align' : 'left',
					'title' : "",
					'value' : "",
					'class': 'attributeMappingField font-3dslight'// font-3dsbold
				}).inject(lineAttr);

				var modifyDirectionButton = new Button({
					className: 'ModifyDirectionButton',
					icon: 'fonticon fonticon-arrow-combo-horizontal',
					attributes: {
						disabled: false,
						'aria-hidden' : 'true',
						title : MappingManagementNLS.modifyDirection,
						value: "BOTH"
					},
					events: {
						onClick: function (e) {
							var changeDirectionModal = UIview.ShowModifyDirectionPanel.call(that,this,iCellStatus,VPMTypeRelInfo,MatrixTypeRelInfo,listofAttributesMapping,mappingEltAttr/*,kindOfMapping*/,listofTypeRelMapping,selectVPM,selectMatrix,iCellAction,actionButton);
							changeDirectionModal.inject(that.contentDiv);
						}

					}
				}).inject(iCell);

				modifyDirectionButton.setDisabled(true);

				iCell = UWA.createElement('td', {
					'Align'  : 'left',
					'width'  : widthTable[2],
					'class': 'attributeMappingField font-3dslight'// font-3dsbold
				}).inject(lineAttr);

				selectMatrix =  new Select({
					nativeSelect: true,
					placeholder: MappingManagementNLS.selectAttr.format(MatrixTypeRelInfo.name),
					multiple: false,
					className: "selectMatrix",
				});
				selectMatrix.inject(iCell);

				iCell = UWA.createElement('td', {
					'Align'  : 'left',
					'width'  : widthTable[3],
					'class': 'attributeMappingField font-3dslight'// font-3dsbold
				}).inject(lineAttr);

				var infoSpan = UWA.createElement('span');
				var infoButton = new Button({
					className: 'close',
					icon: 'fonticon fonticon-info fonticon-1.5x',//value: 'Button', //fonticon-cancel  fonticon-minus-circled
					attributes: {
						disabled: false,
						'aria-hidden' : 'true'
					}
				}).inject(infoSpan);
				var infoPop = new Popover({
					target: infoSpan,
					trigger : "hover",
					animate: "true",
					position: "top",
					body: MappingManagementNLS.NotMappableAttributes,
					title: ''
				});
				infoSpan.inject(iCell);
				infoButton.hide();


				var VPMAttributes;
				if(VPMTypeRelInfo!==undefined)
					VPMAttributes = VPMTypeRelInfo.attributeInfo;

				var MatrixAttributes;
				if(MatrixTypeRelInfo!==undefined)
					MatrixAttributes = MatrixTypeRelInfo.attributeInfo;


				function addEltToSelect(value, select) {
					var i, attributeInfo,attributeName,attributeItf,position,option,listOfEnableOption = new Array(), listOfDisableOption=new Array(), attrType;
					for (i=0; i<value.length;i++)
					{
						attributeInfo = value[i];

						attributeItf = attributeInfo.itf;

						//select only OOTB attribute and custo attribute (attributes coming from another interface cloud added once bug will be corrected)
						/*HACKif(attributeItf === null || attributeItf ==="" || attributeItf === "XP_VPMReference_Ext" || attributeItf === "XP_Part_Ext")*/
						//{
							attributeName = attributeInfo.id;
							if(attributeInfo.isenum === true )
								attrType = UIview.enumType;
							else
								attrType = attributeInfo.type;
							option = {label:attributeInfo.name + " ("+attrType+")", value:attributeInfo.id };

							listOfEnableOption.push(option);
						//}
					}

					listOfEnableOption.forEach(function(optionSelect){
						select.add(optionSelect );
						select.enable(optionSelect);
					});

					listOfDisableOption.forEach(function(optionSelect){
						select.add( optionSelect);
						select.disable(optionSelect);

					});

				}

				addEltToSelect(VPMAttributes, selectVPM);
				addEltToSelect(MatrixAttributes, selectMatrix);

				selectMatrix.disable();


				selectVPM.addEvent("onChange",  function (e) {

					var selectedAttributes= selectVPM.getSelection(false);
					selectMatrix.select(0,true);

					if( selectedAttributes.length!=0)
					{
						selectMatrix.enable();
						UIview.enableMatrixAttrAccordingRules( VPMTypeRelInfo, selectVPM,MatrixTypeRelInfo,selectMatrix, that.attributeMappingMap,directionAvailableMap) ;
						infoButton.show();
					}
					else
					{
						selectMatrix.disable();
						infoButton.hide();
					}

					if(mappingEltAttr!==undefined)
						UIview.removeMappingAttrInModel(VPMTypeRelInfo,MatrixTypeRelInfo,mappingEltAttr,listofAttributesMapping,that.attributeMappingMap,that.listNewSelect);

				});


				var directionAvailableMap = new Map();


				infoButton.addEvent("onClick", function (e) {
					var changeDirectionModal =UIview.ShowNotMappableAttribute.call(that,(selectVPM.getSelection(false))[0].value,MatrixAttributes,VPMTypeRelInfo ,MatrixTypeRelInfo,mappingEltAttr);
					changeDirectionModal.inject(that.contentDiv);
				});


				selectMatrix.addEvent("onChange", function (e) {

					var listMatrixOptions = selectMatrix.getOptions(false);

					if(listMatrixOptions.length !==0)
					{
						var deployAttrcellSpan=lineAttr.cells[UIview.cellsAttrIndex.deployFlag].getElement('span');
						var selectedAttributes = selectMatrix.getSelection(false);

							//remove current associated attribute mapping
							if(mappingEltAttr!==undefined)
								UIview.removeMappingAttrInModel(VPMTypeRelInfo,MatrixTypeRelInfo,mappingEltAttr,listofAttributesMapping,that.attributeMappingMap,that.listNewSelect);

							if( selectedAttributes.length!=0)
							{
								modifyDirectionButton.setDisabled(false);
								deployAttrcellSpan.show();

								var selectedVPMAttr = (selectVPM.getSelection(false))[0].value;
								var selectedMatrixAttr = selectedAttributes[0].value;

								var attrVPMInfo = UIview.retrieveAttributeInfo(VPMTypeRelInfo,(selectVPM.getSelection(false))[0].value);
								var attrMXInfo =  UIview.retrieveAttributeInfo(MatrixTypeRelInfo,selectedAttributes[0].value);

								var listOfMappedVPMattr = (that.attributeMappingMap.MX).get(selectedMatrixAttr);
								var listOfMappedMXattr = (that.attributeMappingMap.VPM).get( selectedVPMAttr);

								var authorizedDirection = UIview.CheckRulesToAddAttrMapping(VPMTypeRelInfo, attrVPMInfo,MatrixTypeRelInfo,attrMXInfo, listOfMappedMXattr, listOfMappedVPMattr);
								var direction = 'BOTH';
								if(authorizedDirection.BOTH) direction = 'BOTH';
								else if(authorizedDirection.VPM_To_MX) direction = "VPM_To_MX";
								else if (authorizedDirection.MX_To_VPM) direction ='MX_To_VPM';
								UIview.setButtonDirection(direction, modifyDirectionButton);

								mappingElt=UIview.retrieveMappingEntry(VPMTypeRelInfo.id,MatrixTypeRelInfo.id,listofTypeRelMapping);
								if(mappingElt!=undefined)
								{
									mappingEltAttr = { MatrixAttribute: attrMXInfo, SynchDirection: modifyDirectionButton.elements.input.value, VPMAttribute:attrVPMInfo,status:"New",isBaseMapping:false,VPMAttributeDeployed:true, MatrixAttributeDeployed:true };
									mappingElt.AttributeMapping.push(mappingEltAttr);
									UIview.AddNewMappingInAttrMap(VPMTypeRelInfo,MatrixTypeRelInfo,listofAttributesMapping,mappingEltAttr,that.attributeMappingMap,that.listNewSelect);
								}
							}
							else
							{
								UIview.setButtonDirection('BOTH', modifyDirectionButton);
								modifyDirectionButton.setDisabled(true);
								deployAttrcellSpan.hide();
							}

							//Update Part attribute select lists to take into account removing and new mapping
							UIview.UpdatePartComboAttributeList(VPMTypeRelInfo,MatrixTypeRelInfo,listofAttributesMapping,that.attributeMappingMap,that.listNewSelect,selectVPM,selectMatrix);
					}
				});

				iCellAction = UWA.createElement('td', {
					'Align' : 'left',
					'width' : widthTable[4],
					'class': 'attributeMappingField font-3dslight'// font-3dsbold
				}).inject(lineAttr);


				actionButton = UIview.createDeleteModifyActionsIcon(iCellAction);

				actionButton[0].addEvent("onClick", function (e) {
					UIview.removeAttrLineCallBack.call(that, lineAttr,mappingEltAttr,listofAttributesMapping,VPMTypeRelInfo,MatrixTypeRelInfo,kindOfMapping);
				});

				actionButton[1].addEvent("onClick", function (e) {
					UIview.reviveAttrLineCallBack.call(that,lineAttr,mappingEltAttr,listofAttributesMapping,VPMTypeRelInfo,MatrixTypeRelInfo,kindOfMapping,modifyDirectionButton);
				});


				//Hide button to modify and revive mapping, only delete button must be displayed for new mapping line
				actionButton[1].hide();
				var imgClass = 'fonticon fonticon-' + '1.5' + 'x fonticon-cog';
				var imgTitle =  MappingManagementNLS.newNotdeployedParam;
				var iconColor = 'black';
				iCellStatus = UWA.createElement('td', {
					'width' : widthTable[5],
					'align' : 'center',
					'title' : imgTitle
				});
				var imgSpan = UWA.createElement('span', {
					'class' : imgClass
				}).inject(iCellStatus);
				imgSpan.setStyle("color", iconColor);
				iCellStatus.setStyle("vertical-align", "text-bottom");
				imgSpan.hide();

				iCellStatus.value = "New";
				iCellStatus.inject(lineAttr);

				//Add associated select to listNewSelect (For update selects in case of mapping modification)
				selectObj ={NewLine:lineAttr ,VPM:selectVPM, Matrix:selectMatrix};
				that.listNewSelect.push(selectObj);


				return {newline:lineAttr, selectVPM:selectVPM, selectMatrix:selectMatrix, buttonDirection:modifyDirectionButton}  ;
			},


			modifyDeployCellSatus : function (cell, cellValue, cellTitle, icon, color)
			{
				cell.empty();
				cell.value=cellValue;
				cell.title= cellTitle;

				var imgSpan = UWA.createElement('span', {
					'class' : 'fonticon fonticon-' + '1.5' + 'x '+  icon
				}).inject(cell);

				imgSpan.setStyle("color", color);
				cell.setStyle("vertical-align", "text-bottom");
			},


			buildAttributeLine : function (VPMTypeRelInfo ,MatrixTypeRelInfo ,kindOfMapping,attributeMapping,listofAttributesMapping,widthTable,listofTypeRelMapping,attrtbody) {
				var iCell, removeAttributeButton, deleteSpan, removePop,position,
				actionButton = [],//editElts = [],
				lineAttr = UWA.createElement('tr', {'class': 'AttrLineMapping'}),
				itfVPM= "",
				attrVPM=attributeMapping.VPMAttribute.id,
				attrVPMInfo,
				attrVPMName = attributeMapping.VPMAttribute.name,
				side=attributeMapping.SynchDirection,
				itfMatrix="",
				attrMatrix=attributeMapping.MatrixAttribute.id,
				attrMatrixInfo,
				attrMatrixName=attributeMapping.MatrixAttribute.name,
				status=attributeMapping.status,
				isBaseMapping = attributeMapping.isBaseMapping.toString(),
				iCellStatus,
				iCellAction,
				that = this;

				UIview.initVariable();


				iCell = UWA.createElement('td', {
					'Align'  : 'left',
					'width'  : widthTable[0],
					'value'  : attrVPM,
					'class': 'attributeMappingField font-3dslight'// font-3dsbold
				}).inject(lineAttr);

				UWA.createElement('p', {
					text   : attrVPMName,
					value  : attrVPM,
				}).inject(iCell);

				if(isBaseMapping==="true")
				{
					iCell = UWA.createElement('td', {
					'width' : widthTable[1],
					'align' : 'left',
					'title' : "",
					'value' : "",
					'class': 'attributeMappingField font-3dslight'// font-3dsbold
				}).inject(lineAttr);


				UIview.setDirectionCell(iCell, side, VPMTypeRelInfo.name, MatrixTypeRelInfo.name);
				}
				else
				{

					iCell = UWA.createElement('td', {
						'width' : widthTable[1],
						'align' : 'left',
						'title' : "",
						'value' : "",
						'class': 'attributeMappingField font-3dslight'// font-3dsbold
					}).inject(lineAttr);


					var modifyDirectionButton = new Button({
						className: 'ModifyDirectionButton',
						icon: 'fonticon fonticon-arrow-combo-horizontal',
						attributes: {
							disabled: false,
							'aria-hidden' : 'true',
							title : MappingManagementNLS.modifyDirection,
							value: "BOTH"
						},
						events: {
							onClick: function (e) {
								var changeDirectionModal = UIview.ShowModifyDirectionPanel.call(that,this,iCellStatus,VPMTypeRelInfo,MatrixTypeRelInfo,listofAttributesMapping,attributeMapping,/*kindOfMapping,*/listofTypeRelMapping,null,null,iCellAction,actionButton);
								changeDirectionModal.inject(that.contentDiv);
							}

						}
					}).inject(iCell);

					UIview.setButtonDirection(side, modifyDirectionButton);

				}

				iCell = UWA.createElement('td', {
					'Align'  : 'left',
					'width'  : widthTable[2],
					'value'  : attrMatrix,
					'class': 'attributeMappingField font-3dslight'// font-3dsbold
				}).inject(lineAttr);

				UWA.createElement('p', {
					text   : attrMatrixName,
					value  : attrMatrix,
				}).inject(iCell);

				iCell = UWA.createElement('td', {
					'Align' : 'left',
					'width' : widthTable[3],
					'class': 'attributeMappingField font-3dslight'// font-3dsbold
				}).inject(lineAttr);

				iCellAction = UWA.createElement('td', {
					'Align'  : 'left',
					'width'  : widthTable[4],
					'class': 'attributeMappingField font-3dslight'// font-3dsbold
				}).inject(lineAttr);

				var listOfMappedMXattr = (that.attributeMappingMap.VPM).get(attributeMapping.VPMAttribute.id);
				var listOfMappedVPMattr = (that.attributeMappingMap.MX).get(attributeMapping.MatrixAttribute.id);
				var resultInvalidMapping=false;
				if(isBaseMapping==="false")
					resultInvalidMapping = UIview.isInvalidMapping(VPMTypeRelInfo,MatrixTypeRelInfo,attributeMapping,  listOfMappedMXattr, listOfMappedVPMattr);


				//If mapping can be modified or removed, add action buttons
				if(isBaseMapping==="false")
				{
					actionButton = UIview.createDeleteModifyActionsIcon(iCellAction);
					actionButton[0].addEvent("onClick", function (e) {
						UIview.removeAttrLineCallBack.call(that,lineAttr,attributeMapping,listofAttributesMapping,VPMTypeRelInfo,MatrixTypeRelInfo,kindOfMapping);
					});

					actionButton[1].addEvent("onClick", function (e) {
						UIview.reviveAttrLineCallBack.call(that,lineAttr,attributeMapping,listofAttributesMapping,VPMTypeRelInfo,MatrixTypeRelInfo,kindOfMapping,modifyDirectionButton);
					});

					//hide revive button
					actionButton[1].hide();

					if(resultInvalidMapping.isInvalid && (resultInvalidMapping.errorsList.indexOf(0)!=-1 || resultInvalidMapping.errorsList.indexOf(2)!=-1 || resultInvalidMapping.errorsList.indexOf(7)!=-1 || resultInvalidMapping.errorsList.indexOf(8)!=-1 || resultInvalidMapping.errorsList.indexOf(9)!=-1 || resultInvalidMapping.errorsList.indexOf(10)!=-1 || resultInvalidMapping.errorsList.indexOf(11)!=-1 || resultInvalidMapping.errorsList.indexOf(12)!=-1))
						modifyDirectionButton.disable();

				}
				else
				{
					imgSpan = UWA.createElement('span', {
						'class' : 'fonticon fonticon-' + '1.5' + 'x fonticon-lock'
					}).inject(iCellAction);

					iCellAction.setStyle("vertical-align", "text-bottom");
					iCellAction.title = MappingManagementNLS.NotModifiable;
				}



				var isDeployed ;
				if(status==="New") isDeployed ="NewNotDeployed";
				else
					isDeployed = (status==="Deployed")? 'true':'false';

				var invalidMapping;
				if(isDeployed === "true")
				{
					if(!resultInvalidMapping.isInvalid || status.indexOf("Removed")!==-1)
					{
						imgTitle =  MappingManagementNLS.Deployed;
						iconColor = 'green';
					}
					else
					{
						imgTitle = resultInvalidMapping.errorMessage;
						iconColor = 'red';
						attributeMapping.status = "InvalidDeployed";
						status = "InvalidDeployed";
						invalidMapping ={attrLine:lineAttr ,attrMapping:attributeMapping};
						that.listInvalidMultipeTargetMapping.push(invalidMapping);
					}

					var imgSpan,
					imgTitle = imgTitle,
					imgClass = 'fonticon fonticon-' + '1.5' + 'x fonticon-check',
					iconColor = iconColor,
					iconSize = '1.5';
				}

				else if (isDeployed === "false") {
					imgClass = 'fonticon fonticon-' + iconSize + 'x fonticon-cog';
					if(!resultInvalidMapping.isInvalid || status.indexOf("Removed")!==-1)
					{
						imgTitle =  MappingManagementNLS.Stored;
						iconColor = 'orange';
					}
					else
					{
						imgTitle = resultInvalidMapping.errorMessage;
						iconColor = 'red';
						attributeMapping.status = "InvalidStored";
						status = "InvalidStored";
						invalidMapping ={attrLine:lineAttr ,attrMapping:attributeMapping};
						that.listInvalidMultipeTargetMapping.push(invalidMapping);
					}
				} else if (isDeployed === "NewNotDeployed") {
					imgClass = 'fonticon fonticon-' + iconSize + 'x fonticon-cog';
					imgTitle =  MappingManagementNLS.newNotdeployedParam;
					iconColor = 'black';
				}

				iCellStatus = UWA.createElement('td', {
					'width' : widthTable[5],
					'align' : 'center',
					'title' : imgTitle
				});

				imgSpan = UWA.createElement('span', {
					'class' : imgClass
				}).inject(iCellStatus);

				imgSpan.setStyle("color", iconColor);
				iCellStatus.setStyle("vertical-align", "text-bottom");
				iCellStatus.value = status;
				iCellStatus.inject(lineAttr);

				//Mapping has been removed by import
				if(status.indexOf("Removed")!==-1)
					UIview.setToRemoveAttrLine(lineAttr);
				return lineAttr;
			},



			setDirectionCell : function (directionCell, direction, VPMTypeName, MatrixTypeName) {

				directionCell.empty();

				var txtSide =MappingManagementNLS.both;
				if(direction=="BOTH")
					txtSide = MappingManagementNLS.both;
				else if (direction=="VPM_To_MX")
					txtSide =MappingManagementNLS.unilateralDirection.format(VPMTypeName,MatrixTypeName);
				else if (direction=="MX_To_VPM")
					txtSide =MappingManagementNLS.unilateralDirection.format(MatrixTypeName,VPMTypeName);

				directionCell.value = direction;
				directionCell.title = txtSide;

				var imgSpanRight = UWA.createElement('span', {
					'class' : 'fonticon  fonticon-expand-right'
				})

				var imgSpanLeft = UWA.createElement('span', {
					'class' : 'fonticon  fonticon-expand-left'
				})

				if(direction=="BOTH")
				{
					imgSpanLeft.inject(directionCell);
					imgSpanRight.inject(directionCell);
				}
				else if (direction=="VPM_To_MX")
					{
					imgSpanRight.inject(directionCell);
					imgSpanRight.setStyle("margin-left", "22px");
					}
				else if (direction=="MX_To_VPM")
					{
					imgSpanLeft.inject(directionCell);
					}

				directionCell.setStyle("vertical-align", "text-bottom");
			},


			buildIconForDirection: function (direction)
			{

				var divIconDirection =  UWA.createElement('div', {
					'class' : 'divDirectionIcon'
				})

				var imgSpanRight = UWA.createElement('span', {
					'class' : 'fonticon  fonticon-expand-right'
				})

				var imgSpanLeft = UWA.createElement('span', {
					'class' : 'fonticon  fonticon-expand-left'
				})

				if(direction=="BOTH")
				{
					imgSpanLeft.inject(divIconDirection);
					imgSpanRight.inject(divIconDirection);
				}
				else if (direction=="VPM_To_MX")
					{
					imgSpanRight.inject(divIconDirection);
					imgSpanRight.setStyle("margin-left", "22px");
					}
				else if (direction=="MX_To_VPM")
					{
					imgSpanLeft.inject(divIconDirection);
					}
				return divIconDirection;
			},


			buildAttributeTableHeading : function (widthTable) {
				var lineTitle,iCell;

				lineTitle = UWA.createElement('tr', {
					'class' : 'success'
				});

				iCell = UWA.createElement('td', {
					'Align' : 'left',
					'width' : widthTable[0],
				}).inject(lineTitle);

				UWA.createElement('h5', {
					text   : MappingManagementNLS.ProductAttr
					//'class': 'font-3dslight'// font-3dsbold
				}).inject(iCell);


				iCell = UWA.createElement('td', {
					'Align' : 'left',
					'width' : widthTable[1],
				}).inject(lineTitle);

				UWA.createElement('h5', {
					text   : MappingManagementNLS.side
					//'class': 'font-3dslight'// font-3dsbold
				}).inject(iCell);


				iCell = UWA.createElement('td', {
					'Align' : 'left',
					'width' : widthTable[2],
				}).inject(lineTitle);

				UWA.createElement('h5', {
					text   : MappingManagementNLS.PartAttr
					//'class': 'font-3dslight'// font-3dsbold
				}).inject(iCell);

				iCell = UWA.createElement('td', {
					'Align' : 'left',
					'width' : widthTable[3],
				}).inject(lineTitle);


				iCell = UWA.createElement('td', {
					'Align' : 'left',
					'width' : widthTable[4],
				}).inject(lineTitle);

				UWA.createElement('h5', {
					text   : MappingManagementNLS.actions
					//'class': 'font-3dslight'// font-3dsbold
				}).inject(iCell);

				iCell = UWA.createElement('td', {
					'Align' : 'left',
					'width' : widthTable[5],
				}).inject(lineTitle);

				UWA.createElement('h5', {
					text   : MappingManagementNLS.deployStatus
					//'class': 'font-3dslight'// font-3dsbold
				}).inject(iCell);

				return lineTitle;
			},


			buildMappingLine : function (eltmapping)
			{

				var MatrixType,VPMType, side, kindOfMapping ,isBaseMapping,status  ,mappingTable,lineMapping,txtSide,iCell,deleteIcon,deleteAction,deleteSpan,
				removeLineMappingButton,removePropMappingButton,attributeMappingDiv,attributesTable,mappingTable,actionCol,modifySpan,modifyAttributeButton,modifyPop,modifySpan, MatrixTypeName, VPMTypeName, that=this;
				UIview.initVariable();

				MatrixType = eltmapping.MatrixObject;
				VPMType = eltmapping.VPMObject;
				MatrixTypeName = eltmapping.MatrixObjectName;
				VPMTypeName = eltmapping.VPMObjectName;
				side  = eltmapping.SynchDirection;
				kindOfMapping = eltmapping.KindOfMapping.toLowerCase();
				isBaseMapping = eltmapping.isBaseMapping.toString();
				status = eltmapping.status;
				mappingTable = UWA.createElement('table', {
					'class': 'tableMapping'
				});//table-bordered

				lineMapping = UWA.createElement('tr', {
					'class' : 'lineMapping'
				}).inject(mappingTable);

				UWA.createElement('td', {'class': 'colMappingType', 'text': "", 'value':""}).inject(lineMapping);

				UWA.createElement('td', {'class': 'colMappingVPMObject', 'text':VPMTypeName, 'value':VPMType}).inject(lineMapping);

				if(side=="BOTH")
					txtSide="<=>";
				else if (side=="VPM_To_MX")
					txtSide="=>";
				else if (side=="MX_To_VPM")
					txtSide="<=";


				side = UWA.createElement('td', {'class': 'colMappingSide', 'text':txtSide, 'value':side}).inject(lineMapping);

				UWA.createElement('td', {'class': 'colMappingMatrixObject', 'text':MatrixTypeName, 'value':MatrixType}).inject(lineMapping);

				var isDeployed = (status==="deployed")? 'true':'false';
				iCell = UWA.createElement('td', {'class': 'colMappingType', 'text': "", 'value':"deployed"}).inject(lineMapping);
				return mappingTable;
			},


			buildAttributeTable : function (VPMTypeRelInfo,MatrixTypeRelInfo,kindOfMapping,listofAttributesMapping,widthTable,listofTypeRelMapping) {
				var attributesTable, attrtbody, iCell,lineTitle, lineAttribute,j;

				//sort mapping => 1:Deployed, 2:Stored: 3:Removed, 4:New
				function compare(attrMapping1, attrMapping2) {
					if(attrMapping1.isBaseMapping.toString()==="true"  && attrMapping2.isBaseMapping.toString()==="false")
						return -1;
					else if(attrMapping1.isBaseMapping.toString()==="false"  && attrMapping2.isBaseMapping.toString()==="true")
						return 1;
					else if(attrMapping1.isBaseMapping.toString()==="true"  && attrMapping2.isBaseMapping.toString()==="true")
						return 0;
					else if(attrMapping1.status==="Deployed"  && attrMapping2.status!=="Deployed")
						return -1;
					else if(attrMapping1.status!=="Deployed"  && attrMapping2.status==="Deployed")
						return 1;
					else if(attrMapping1.status==="Deployed"  && attrMapping2.status==="Deployed")
						return 0;
					else if(attrMapping1.status==="Stored"  && attrMapping2.status!=="Stored")
						return -1;
					else if(attrMapping1.status!=="Stored"  && attrMapping2.status==="Stored")
						return 1;
					else if(attrMapping1.status==="Stored"  && attrMapping2.status==="Stored")
						return 0;
					return 0;
				}

				listofAttributesMapping.sort(compare);

				attributesTable = UWA.createElement('table', {
					'class': 'attrTableMapping table table-condensed'
				});//table-bordered

				attrtbody =  UWA.createElement('tbody', {
					'class': 'attrstbodyMapping'
				}).inject(attributesTable);


				lineTitle = UIview.buildAttributeTableHeading(widthTable);
				lineTitle.inject(attrtbody);

				//Sort attributes  in alphabetical order
				function compareAttr(attrInfo1, attrInfo2) {
					if (attrInfo1.name.toUpperCase() <  attrInfo2.name.toUpperCase())
						return -1;
					if (attrInfo1.name.toUpperCase() >  attrInfo2.name.toUpperCase())
						return 1;
					return 0;
				}

				var VPMAttributes;
				if(VPMTypeRelInfo!==undefined)
					VPMTypeRelInfo.attributeInfo.sort(compareAttr);

				var MatrixAttributes;
				if(MatrixTypeRelInfo!==undefined)
					MatrixTypeRelInfo.attributeInfo.sort(compareAttr);

				for (j = 0; j < listofAttributesMapping.length; j++)
					if(listofAttributesMapping[j].status.indexOf("Removed")===-1)
						UIview.AddNewMappingInAttrMap(VPMTypeRelInfo,MatrixTypeRelInfo,listofAttributesMapping,listofAttributesMapping[j],this.attributeMappingMap,this.listNewSelect);

				for (j = 0; j < listofAttributesMapping.length; j++) {
					lineAttribute = UIview.buildAttributeLine.call(this,VPMTypeRelInfo,MatrixTypeRelInfo,kindOfMapping,listofAttributesMapping[j],listofAttributesMapping,widthTable,listofTypeRelMapping,attrtbody);
					lineAttribute.inject(attrtbody);
				}

				return attributesTable;
			},

			retrieveMappingEntry : function (VPMTypeRel, MxTypeRel,collectionMapping) {
				var EltMapping, foundElt=false, cpt=0;

				while (!foundElt && cpt <collectionMapping.length)
				{
					EltMapping = collectionMapping[cpt];
					if(EltMapping!=undefined)
					{
						if( VPMTypeRel ===EltMapping.VPMObject &&  MxTypeRel === EltMapping.MatrixObject)
							foundElt=true;
						else cpt++
					}

				}
				if (!foundElt) return undefined;
				else return EltMapping;
			},

			retrieveMappingAttrEntry : function (VPMAttr,MxAttr,direction,status, attributeMappingList) {
				var EltAttrMapping, foundElt=false, cpt=0, VPMAttrName=VPMAttr, MxAttrName=MxAttr;

				while (!foundElt && cpt <attributeMappingList.length)
				{
					EltAttrMapping = attributeMappingList[cpt];
					if(EltAttrMapping!=undefined)
					{
						if( VPMAttrName ===EltAttrMapping.VPMAttribute.id &&    MxAttrName === EltAttrMapping.MatrixAttribute.id && direction == EltAttrMapping.SynchDirection && status == EltAttrMapping.status)
							foundElt=true;
						else cpt++
					}

				}
				if (!foundElt) return undefined;
				else return EltAttrMapping;
			},


			retrieveMappingAttrEntryFromAttrLine : function (attrLine, attributeMappingList) {

				var cellAttr, vpmAttr,cellVPMAttr,cellMatrixAttr,cellDirection,vpmAttr, partAttr,direction,mappingEltAttr,cellStatus;

				cellAttr=attrLine.cells[UIview.cellsAttrIndex.deployFlag];
				cellVPMAttr=attrLine.cells[UIview.cellsAttrIndex.VPMAttr];
				cellMatrixAttr = attrLine.cells[UIview.cellsAttrIndex.MatrixAttr];
				cellDirection =  attrLine.cells[UIview.cellsAttrIndex.side];
				cellStatus  =  attrLine.cells[UIview.cellsAttrIndex.deployFlag];

				var selectVPM = cellVPMAttr.getElement('select');
				var selectPart = cellMatrixAttr.getElement('select');

				if(selectVPM!==undefined && selectVPM!==null)
					vpmAttr = selectVPM.value;
				else
					vpmAttr = cellVPMAttr.value;

				if(selectPart!==undefined && selectPart!==null )
					partAttr = selectPart.value;
				else
					partAttr = cellMatrixAttr.value;

				var directionbutton = cellDirection.getElement('button');
				if(directionbutton!==undefined && directionbutton!==null)
					direction = directionbutton.value;
				else
					direction = cellDirection.value;

				status = cellStatus.value;
				mappingEltAttr=UIview.retrieveMappingAttrEntry(vpmAttr,partAttr,direction,status,attributeMappingList);
				return mappingEltAttr;
			},

			retrieveAttributeInfo : function (typeRelInfo,attr) {
				var EltAttrInfo, foundElt=false,attributeInfo, cpt=0;

				if(attr ==="WCGEquivalentDeclaredWeightExt.V_WCG_Declared_Mass" )
					return {basic:false,id:"WCGEquivalentDeclaredWeightExt.V_WCG_Declared_Mass",itf:"WCGEquivalentDeclaredWeightExt",range:[], type:"Double"};

					attributeInfo = typeRelInfo.attributeInfo;

					while (!foundElt && cpt <attributeInfo.length)
					{
						EltAttrInfo = attributeInfo[cpt];
						if(EltAttrInfo!=undefined)
						{
							if( attr.toUpperCase() ===EltAttrInfo.id.toUpperCase())
								foundElt=true;
							else cpt++
						}

					}
					if (!foundElt) return undefined;
					else return EltAttrInfo;
			},




			//Change mapping in Deployed  state to remove State
			setToRemoveAttrLine : function (attrLine) {
				var deployAttrcell,imgAttrSpan,i,arrayAction;

				deployAttrcell=attrLine.cells[UIview.cellsAttrIndex.deployFlag];

				//Set the line as deleted
				UIview.setDeletedCellStyle(attrLine.cells[UIview.cellsAttrIndex.VPMAttr]);
				UIview.setDeletedCellStyle(attrLine.cells[UIview.cellsAttrIndex.MatrixAttr]);
				var buttonSide = attrLine.cells[UIview.cellsAttrIndex.side].getElements('button');
				buttonSide[0].disabled=true;
				if(buttonSide===undefined)
				{
					var iconsSide = attrLine.cells[UIview.cellsAttrIndex.side].getElements('span');
					iconsSide.forEach(function(icon){
						icon.setStyle("color", "grey");
					});
				}

				//hide modify and remove action, show revive button
				arrayAction = attrLine.cells[UIview.cellsAttrIndex.action];
				var buttons = arrayAction.getElements('button');
				buttons[1].hide();
				buttons[0].show();

				//Set status cell as removed according the previous status
				var icon='fonticon-trash',color,cellValue, cellTitle;
				if(deployAttrcell.value.indexOf("Stored")!==-1)
				{
					cellTitle = MappingManagementNLS.DeletedStoredNotApplied;
					cellValue = "RemovedStored";
					color="orange";
				}
				else
				{
					cellTitle = MappingManagementNLS.DeletedNotApplied;
					color="red";
					cellValue = "RemovedDeployed";
				}
				UIview.modifyDeployCellSatus(deployAttrcell, cellValue, cellTitle, icon, color);

			},


			//Change mapping in remove state to deployed state
			unsetRemoveAttrLine : function (attrLine,resultInvalidStored) {
				var deployAttrcell,imgAttrSpan,i,actionCell,deleteIcon,actionButton,arrayAction,status, that=this;

				deployAttrcell=attrLine.cells[UIview.cellsAttrIndex.deployFlag];
				actionCell = attrLine.cells[UIview.cellsAttrIndex.action];

				//Set the line as not deleted
				var buttonSide = attrLine.cells[UIview.cellsAttrIndex.side].getElements('button');
				if(buttonSide===undefined)
				{
					var iconsSide = attrLine.cells[UIview.cellsAttrIndex.side].getElements('span');
					iconsSide.forEach(function(icon){
						icon.setStyle("color", "black");
					});
				}
				UIview.setNormalCellStyle(attrLine.cells[UIview.cellsAttrIndex.VPMAttr]);
				UIview.setNormalCellStyle(attrLine.cells[UIview.cellsAttrIndex.MatrixAttr]);

				//Show modify and remove button, hide revive button
				arrayAction = attrLine.cells[UIview.cellsAttrIndex.action];
				var buttons = arrayAction.getElements('button');
				buttons[1].show();
				buttons[0].hide();

				if(!(resultInvalidStored.isInvalid && (resultInvalidStored.errorsList.indexOf(2)!=-1 || resultInvalidStored.errorsList.indexOf(7)!=-1 || resultInvalidStored.errorsList.indexOf(8)!=-1 || resultInvalidStored.errorsList.indexOf(9)!=-1 || resultInvalidStored.errorsList.indexOf(10)!=-1 || resultInvalidStored.errorsList.indexOf(11)!=-1 || resultInvalidStored.errorsList.indexOf(12)!=-1)))
					buttonSide[0].disabled=false;


				//Set status cell  according the previous status
				var cellTitle, cellColor, status, cellIcon;
				if(deployAttrcell.value === "RemovedStored")
				{
					cellTitle =  MappingManagementNLS.Stored;
					cellColor = "orange";
					status = "Stored";
					cellIcon ='fonticon-cog';

					if(resultInvalidStored.isInvalid)
					{
						cellTitle =  resultInvalidStored.errorMessage;
						cellColor = "red";
						status = "InvalidStored";
					}

				}
				else //RemoveDeployed
				{
					cellTitle =  MappingManagementNLS.Deployed;
					cellColor = "green";
					status = "Deployed";
					cellIcon ='fonticon-check';

					if(resultInvalidStored.isInvalid)
					{
						cellTitle =  resultInvalidDeployed.errorMessage;
						cellColor = "red";
						status = "InvalidDeployed";
					}
				}

				UIview.modifyDeployCellSatus(deployAttrcell, status, cellTitle, cellIcon, cellColor);
			},

			isInvalidMapping : function (VPMTypeRelInfo,MatrixTypeRelInfo,attributeMapping, VPMObjMappedAttr, MXObjMappedAttr) {

				var invalidStoredMapping=false,messageInvalidStoredMapping="",attrVPMInfo,attrMatrixInfo,findAttribute,listofErrors=new Array();

				//test authorized and deployed for Product attribute
				if(!attributeMapping.VPMAttribute.deployed)
				{
					invalidStoredMapping = true;
					messageInvalidStoredMapping += MappingManagementNLS.NonDeployedProductAttribute +"\n";
					listofErrors.push(8);
				}
				else
				{
					if(attributeMapping.VPMAttribute.isUnknown)
					{
						invalidStoredMapping = true;
						messageInvalidStoredMapping += MappingManagementNLS.ErrorProductUnknown+"\n";;
						listofErrors.push(11);
					}
					else if(!attributeMapping.VPMAttribute.isauthorized){
						invalidStoredMapping = true;
						messageInvalidStoredMapping += MappingManagementNLS.NonAuthorizedProductAttribute+"\n";
						listofErrors.push(10);
					}
				}

				//test authorized and deployed for Part attribute
				if(!attributeMapping.MatrixAttribute.deployed)
				{
					invalidStoredMapping = true;
					messageInvalidStoredMapping += MappingManagementNLS.NonDeployedPartAttribute+"\n";
					listofErrors.push(7);
				}
				else
				{
					if(attributeMapping.MatrixAttribute.isUnknown)
					{
						invalidStoredMapping = true;
						messageInvalidStoredMapping += MappingManagementNLS.ErrorPartUnknown +"\n";;
						listofErrors.push(12);
					}
					else if(!attributeMapping.MatrixAttribute.isauthorized ){
						invalidStoredMapping = true;
						messageInvalidStoredMapping += MappingManagementNLS.NonAuthorizedPartAttribute +"\n";
						listofErrors.push(9);
					}
				}


				//Check other rules

				var directionAvailable = UIview.CheckRulesToAddAttrMapping(VPMTypeRelInfo,attributeMapping.VPMAttribute,MatrixTypeRelInfo,attributeMapping.MatrixAttribute,VPMObjMappedAttr, MXObjMappedAttr, attributeMapping);
				var i=0;
				if(attributeMapping.SynchDirection=="BOTH" && !directionAvailable.BOTH)
				{
					for(i=0;i<directionAvailable.message.BOTH.length;i++)
					{
						messageInvalidStoredMapping += UIview.mappableAttributeReaseon[directionAvailable.message.BOTH[i]] + "\n";
						listofErrors.push(directionAvailable.message.BOTH[i]);
					}
					invalidStoredMapping=true;
				}
				else if(attributeMapping.SynchDirection=="VPM_To_MX" && !directionAvailable.VPM_To_MX)
				{
					for(i=0;i<directionAvailable.message.VPM_To_MX.length;i++)
					{
						messageInvalidStoredMapping += UIview.mappableAttributeReaseon[directionAvailable.message.VPM_To_MX[i]] + "\n";
						listofErrors.push(directionAvailable.message.VPM_To_MX[i]);
					}
					invalidStoredMapping=true;
				}
				else if(attributeMapping.SynchDirection=="MX_To_VPM" && !directionAvailable.MX_To_VPM)
				{
					for(i=0;i<directionAvailable.message.MX_To_VPM.length;i++)
					{
						messageInvalidStoredMapping += UIview.mappableAttributeReaseon[directionAvailable.message.MX_To_VPM[i]] + "\n";
						listofErrors.push(directionAvailable.message.MX_To_VPM[i]);
					}
					invalidStoredMapping=true;
				}

				return {isInvalid:invalidStoredMapping,errorMessage:messageInvalidStoredMapping, errorsList:listofErrors};
			},





			//CallBack to remove a mapping
			removeAttrLineCallBack : function (attrLine,attributeMapping,listofAttributesMapping,VPMTypeRelInfo,MatrixTypeRelInfo,kindOfMapping) {
				var deployAttrcell,actionAttrcell,selectVPM,selectMatrix;
				if(attrLine!=undefined)
				{
					deployAttrcell=attrLine.cells[UIview.cellsAttrIndex.deployFlag];
					actionAttrcell=attrLine.cells[UIview.cellsAttrIndex.action];
					//If mapping in New state, delete the line
					if(deployAttrcell.value==="New" || deployAttrcell.value==="InvalidNew")
					{

						//retrieve associated select and remove it of listNewSelect
						var indexLine=-1, selectObj, i=0;
						while(indexLine===-1 && i<this.listNewSelect.length)
						{
							selectObj = this.listNewSelect[i];
							if(selectObj.NewLine ===attrLine)
								indexLine=i;
							i++;
						}
						if(indexLine!=-1)
							this.listNewSelect.splice(indexLine,1);

						//remove the line
						attrLine.remove();
					}
					else
						{//If mapping in deployed state, change the state and the UI to removed
						if(attributeMapping.status.indexOf("Modified")!==-1)
							UIview.resetModifyMapping.call(this,attrLine,attributeMapping,VPMTypeRelInfo,MatrixTypeRelInfo,listofAttributesMapping);
						UIview.setToRemoveAttrLine(attrLine);
						}

				}
				//Update mapping model
				if(attributeMapping !== undefined)
				{
					var selectVPM, selectMatrix;
					if(selectObj!==undefined)
					{
						selectVPM = selectObj.VPM;
						selectMatrix = selectObj.Matrix;
					}
					UIview.removeMappingAttrInModel(VPMTypeRelInfo,MatrixTypeRelInfo,attributeMapping,listofAttributesMapping,this.attributeMappingMap,this.listNewSelect);
					UIview.UpdatePartComboAttributeList(VPMTypeRelInfo,MatrixTypeRelInfo,listofAttributesMapping,this.attributeMappingMap,this.listNewSelect,selectVPM,selectMatrix);

					var i=0;
					var indexInvalid = -1;
					var invalidAttrToRemove = new Array();

					for(i=0;i<this.listInvalidMultipeTargetMapping.length;i++)
					{

						var attributeMappingLoop = this.listInvalidMultipeTargetMapping[i].attrMapping;
						var isRemoved = attributeMappingLoop.status.indexOf("Removed")!==-1;
						if( !isRemoved &&( (attributeMappingLoop.VPMAttribute.id ===attributeMapping.VPMAttribute.id  && (attributeMappingLoop.SynchDirection ==="BOTH" || attributeMappingLoop.SynchDirection ==="MX_To_VPM") )
								||
								(attributeMappingLoop.MatrixAttribute.id ===attributeMapping.MatrixAttribute.id  && (attributeMappingLoop.SynchDirection ==="BOTH" || attributeMappingLoop.SynchDirection ==="VPM_To_MX") )))
						{
							var listOfMappedMXattr = (this.attributeMappingMap.VPM).get(attributeMappingLoop.VPMAttribute.id);
							var listOfMappedVPMattr = (this.attributeMappingMap.MX).get(attributeMappingLoop.MatrixAttribute.id);
							var resultInvalidMapping = UIview.isInvalidMapping(VPMTypeRelInfo,MatrixTypeRelInfo,attributeMappingLoop,  listOfMappedMXattr, listOfMappedVPMattr);
							var deployAttrcell=this.listInvalidMultipeTargetMapping[i].attrLine.cells[UIview.cellsAttrIndex.deployFlag];
							if(!resultInvalidMapping.isInvalid)
							{
								attributeMappingLoop.status.substring(7);

								var cellTitle, cellIcon, cellValue, color;
								if(deployAttrcell.value.indexOf("Stored")!==-1)
								{
									cellTitle = MappingManagementNLS.Stored;
									cellValue = "Stored";
									color='orange';
									cellIcon ='fonticon-cog';
								}
								else
								{
									cellTitle = MappingManagementNLS.Deployed;
									color='green';
									cellValue = "Deployed";
									cellIcon ='fonticon-check';
								}
								UIview.modifyDeployCellSatus(deployAttrcell, cellValue, cellTitle, cellIcon, color);
								invalidAttrToRemove.push(this.listInvalidMultipeTargetMapping[i]);
								indexInvalid=1;

								break;

							}
							else
								deployAttrcell.title = resultInvalidMapping.errorMessage;

						}
					}
					if(indexInvalid!==-1)
						this.listInvalidMultipeTargetMapping.slice(indexInvalid,indexInvalid);

				}
			},


			//Callback to revive a removed mapping
			reviveAttrLineCallBack : function (attrLine,attributeMapping,listofAttributesMapping,VPMTypeRelInfo,MatrixTypeRelInfo,kindOfMapping,modifyDirectionButton,selectVPM,selectMatrix) {
				var deployAttrcell, errorMessage= "",
				listOfMappedVPMattr = (this.attributeMappingMap.MX).get(attributeMapping.MatrixAttribute.id),
				listOfMappedMXattr = (this.attributeMappingMap.VPM).get( attributeMapping.VPMAttribute.id),
				isPrtUsedAsTarget=false, isPrdUsedAsTarget=false, isAlreadyMapped=false, mappingToExclude;

				//if the mapping has associated line, previous operation done was "modified", in this case the associated new mapping will be removed.
				//So it must not be taking into account to check if there is conflict to revive the mapping
				if(attributeMapping.newAssociatedLine!==undefined)
					mappingToExclude=UIview.retrieveMappingAttrEntryFromAttrLine (attributeMapping.newAssociatedLine, listofAttributesMapping);
				if(attributeMapping.SynchDirectionBase!==undefined && attributeMapping.SynchDirectionBase!=="")
					mappingToExclude=attributeMapping;

				//Check if the mapping can be revive => no conflict with others mapping
				var authorizedDirection = UIview.CheckRulesToAddAttrMapping(VPMTypeRelInfo, attributeMapping.VPMAttribute,MatrixTypeRelInfo,attributeMapping.MatrixAttribute, listOfMappedMXattr, listOfMappedVPMattr,mappingToExclude);

				//Another mapping exists with same attributes
				if(authorizedDirection.message.BOTH.indexOf(2)!==-1) isAlreadyMapped=true;
				//Another mapping uses Part attribute as target
				if(authorizedDirection.message.BOTH.indexOf(5)!==-1) isPrtUsedAsTarget=true;
				//Another mapping uses VPM attribute as target
				if(authorizedDirection.message.BOTH.indexOf(6)!==-1) isPrdUsedAsTarget=true;


				var directionToSet=attributeMapping.SynchDirection;
				if(attributeMapping.SynchDirectionBase!==undefined && attributeMapping.SynchDirectionBase!=="")
					directionToSet=attributeMapping.SynchDirectionBase;

				//If a conflict has been detected, don't revive the mapping and display error message with the reason
				if( (!authorizedDirection.BOTH && directionToSet ==="BOTH" /* && (isAlreadyMapped ||isPrtUsedAsTarget|| isPrdUsedAsTarget)*/)
						|| (!authorizedDirection.VPM_To_MX && directionToSet ==="VPM_To_MX")/* && (isAlreadyMapped ||isPrtUsedAsTarget|| isPrdUsedAsTarget)*/
						|| (!authorizedDirection.MX_To_VPM && directionToSet ==="MX_To_VPM" ) /*&& (isAlreadyMapped ||isPrtUsedAsTarget|| isPrdUsedAsTarget)*/)
				{

					if(isAlreadyMapped)
						errorMessage = MappingManagementNLS.errorReviveMappingAlreadyMapped;
					if(isPrtUsedAsTarget && isPrdUsedAsTarget)
						errorMessage = MappingManagementNLS.errorReviveMappingPrdAndPrtUsedAsTarget;
					else if(isPrtUsedAsTarget)
						errorMessage = MappingManagementNLS.errorReviveMappingPartUsedAsTarget;
					else if (isPrdUsedAsTarget)
						errorMessage = MappingManagementNLS.errorReviveMappingPrdUsedAsTarget ;
					else errorMessage = MappingManagementNLS.errorReviveMappingInvalid;
					errorMessage += MappingManagementNLS.errorReviveMapping;
					this.userMessaging.add({ className: "warning", message: errorMessage});

				}
				else
				{
					//if the mapping has associated line, previous operation done was "modified".
					//The associated new line must be deleted
					if(attributeMapping.newAssociatedLine!==undefined)
						UIview.removeAttrLineCallBack.call(this, attributeMapping.newAssociatedLine,mappingToExclude,listofAttributesMapping,VPMTypeRelInfo,MatrixTypeRelInfo,kindOfMapping);

					if(attrLine!=undefined)
					{
						if(attributeMapping.SynchDirectionBase!==undefined)
							UIview.resetModifyMapping.call(this,attrLine,attributeMapping,VPMTypeRelInfo,MatrixTypeRelInfo,listofAttributesMapping)

						//revive removed line
						if(attributeMapping.status.indexOf("Removed")!==-1)
						{
							//var resultInvalidStored = UIview.isInvalidMapping(VPMTypeRelInfo,MatrixTypeRelInfo,attributeMapping);
							var listOfMappedMXattr = (this.attributeMappingMap.VPM).get(attributeMapping.VPMAttribute.id);
							var listOfMappedVPMattr = (this.attributeMappingMap.MX).get(attributeMapping.MatrixAttribute.id);
							var resultInvalidMapping = UIview.isInvalidMapping(VPMTypeRelInfo,MatrixTypeRelInfo,attributeMapping,  listOfMappedMXattr, listOfMappedVPMattr);
							//revive in UI
							UIview.unsetRemoveAttrLine.call(this,attrLine,resultInvalidMapping);
							//revive in model
							if(attributeMapping !== undefined)
							{
								UIview.addMappingAttrInModel(VPMTypeRelInfo,MatrixTypeRelInfo,attributeMapping, listofAttributesMapping,this.attributeMappingMap,this.listNewSelect, resultInvalidMapping.isInvalid);
								//remove associated new line (in case of modify undo)
								attributeMapping.newAssociatedLine=undefined;
								//Update others select list
								UIview.UpdatePartComboAttributeList(VPMTypeRelInfo,MatrixTypeRelInfo,listofAttributesMapping,this.attributeMappingMap,this.listNewSelect,selectVPM,selectMatrix);
							}
						}
					}
				}
			},


			//Create action icon button (remove, modify, revive)
			createDeleteModifyActionsIcon: function(actionCell)
			{
				var deleteSpan, deleteButton, deletePop, modifySpan, modifyButton, modifyPop, undoSpan, undoButton, undoPop  ;


				//revie button
				undoSpan = UWA.createElement('span');
				undoButton = new Button({
					className: 'close',
					icon: 'fonticon fonticon-undo fonticon-1.5x',//value: 'Button', //fonticon-cancel  fonticon-minus-circled
					attributes: {
						disabled: false,
						'aria-hidden' : 'true'
					}
				}).inject(undoSpan);
				undoPop = new Popover({
					target: undoSpan,
					trigger : "hover",
					animate: "true",
					position: "top",
					body: MappingManagementNLS.undoOperation,
					title: ''
				});
				undoSpan.inject(actionCell);

				//remove button
				deleteSpan = UWA.createElement('span');
				deleteButton = new Button({
					className: 'close',
					icon: 'fonticon fonticon-trash fonticon-1.5x',//value: 'Button', //fonticon-cancel  fonticon-minus-circled
					attributes: {
						disabled: false,
						'aria-hidden' : 'true'
					}
				}).inject(deleteSpan);
				deletePop = new Popover({
					target: deleteSpan,
					trigger : "hover",
					animate: "true",
					position: "top",
					body: MappingManagementNLS.deleteAttrMapping,
					title: ''
				});
				deleteSpan.inject(actionCell);

				return [deleteButton,/*modifyButton,*/undoButton];
			},


			//remove mapping in attributeMappingList
			removeMappingAttrInModel : function (VPMTypeRelInfo,MatrixTypeRelInfo,eltAttrMapping, listOfAttributeMapping,attributeMappingMap,listNewSelect) {
				var index;
				//if the mapping is already in removed state, no action to do
				if(eltAttrMapping.status.indexOf("Removed")===-1)
				{
					//if the mapping is New, just remove it from mapping attribute list
					if(eltAttrMapping.status==="New" || eltAttrMapping.status==="InvalidNew")
					{
						index = listOfAttributeMapping.indexOf(eltAttrMapping);
						if(index!=-1)
							listOfAttributeMapping.splice(index,1);
					}
					if(eltAttrMapping.status==="Stored" || eltAttrMapping.status==="InvalidStored")
						eltAttrMapping.status="RemovedStored";
					//if the mapping is deployed, put it in "RemoveDeployed" state
					else
						eltAttrMapping.status="RemovedDeployed";

					//Update attributeMappingMap (to compute list of available attribute in select)
					UIview.RemoveMappingInAttrMap(VPMTypeRelInfo,MatrixTypeRelInfo,listOfAttributeMapping,eltAttrMapping,attributeMappingMap,listNewSelect);
				}
			},

			//remove mapping in attributeMappingList
			resetStoredMapping : function (VPMTypeRelInfo,MatrixTypeRelInfo,eltAttrMapping, listOfAttributeMapping,attributeMappingMap,listNewSelect) {
				var index;
					//remove stored mapping from model
					if(eltAttrMapping.status.indexOf("Stored")!==-1 )
					{
						index = listOfAttributeMapping.indexOf(eltAttrMapping);
						if(index!=-1)
							listOfAttributeMapping.splice(index,1);
					}
					//Update attributeMappingMap (to compute list of available attribute in select)
					UIview.RemoveMappingInAttrMap(VPMTypeRelInfo,MatrixTypeRelInfo,listOfAttributeMapping,eltAttrMapping,attributeMappingMap,listNewSelect);
			},

			//add or revive a mapping in attribute mapping list
			addMappingAttrInModel : function (VPMTypeRelInfo,MatrixTypeRelInfo,eltAttrMapping, listOfAttributeMapping,attributeMappingMap,listNewSelect, isInvalidMapping) {
				var index;
				//if status is new, add it to attribute mapping list
				if(eltAttrMapping.status==="New" || eltAttrMapping.status==="InvalidNew")
				{
					listOfAttributeMapping.push(eltAttrMapping);
				}
				//if the mapping is stored and has "RemovedStored" state, it is already in mapping attribute list
				//modify its status in Sored of InvalidStored
				else if(eltAttrMapping.status==="RemovedStored")
				{
					if(!isInvalidMapping)
						eltAttrMapping.status="Stored";
					else
						eltAttrMapping.status="InvalidStored";
				}
				//if the mapping is deployed and has "RemovedDeployed" state, it is already in mapping attribute list
				//modify its status in Deployed
				else
					if(!isInvalidMapping)
						eltAttrMapping.status="Deployed";
					else
						eltAttrMapping.status="InvalidDeployed";
				//Update attributeMappingMap (to compute list of available attribute in select)
				UIview.AddNewMappingInAttrMap(VPMTypeRelInfo,MatrixTypeRelInfo,listOfAttributeMapping,eltAttrMapping,attributeMappingMap,listNewSelect);
			},




			//Add a mapping in attributeMappingMap. This map allows to know for each attributes (VPM and Matrix) with which attribute it is mapped and with which direction
			//This map is useful to compute the list of available attribute in select list and to detect potential conflict to revive mapping
			AddNewMappingInAttrMap: function(VPMTypeRelInfo,MatrixTypeRelInfo,listofAttributesMapping,attributeMapping,attributeMappingMap,listNewSelect)
			{
				var VPMAttr, MxAttr, mapValue, dirArray, VPMMap, MXMap;

				//Map for VPM attributes
				VPMMap = attributeMappingMap.VPM;
				//Map for Matrix attributes
				MXMap = attributeMappingMap.MX;

				if(attributeMapping!==undefined)
				{
					VPMAttr = attributeMapping.VPMAttribute.id;
					MxAttr = attributeMapping.MatrixAttribute.id;

					//get the value for VPMAttr
					mapValue=VPMMap.get(VPMAttr);
					//If no value is retrieved, populate the map with 3 array: on for both direction, on for VPM to Mx, or for Mx to VPM
					if(mapValue === undefined )
					{
						mapValue = new Map();
						mapValue.set("BOTH",new Array());
						mapValue.set("VPM_To_MX",new Array());
						mapValue.set("MX_To_VPM",new Array());
						VPMMap.set(VPMAttr, mapValue)
					}

					//put MxAttr in the array corresponding to mapping direction
					dirArray = mapValue.get(attributeMapping.SynchDirection);
					if (dirArray != undefined) dirArray.push(MxAttr);

					//get the value for MxAttr
					mapValue=MXMap.get(MxAttr);
					//If no value is retrieved, populate the map with 3 array: on for both direction, on for VPM to Mx, or for Mx to VPM
					if(mapValue === undefined )
					{
						mapValue = new Map();
						mapValue.set("BOTH",new Array());
						mapValue.set("VPM_To_MX",new Array());
						mapValue.set("MX_To_VPM",new Array());
						MXMap.set(MxAttr, mapValue)
					}

					//put VPMAttr in the array corresponding to mapping direction
					dirArray = mapValue.get(attributeMapping.SynchDirection);
					if (dirArray != undefined)
						dirArray.push(VPMAttr);
				}
			},


			//Remove a mapping from attributeMappingMap. This map allows to know for each attributes (VPM and Matrix) with which attribute it is mapped and with which direction
			//This map is useful to compute the list of available attribute in select list and to detect potential conflict to revive mapping
			RemoveMappingInAttrMap: function(VPMTypeRelInfo, MatrixTypeRelInfo,listofAttributesMapping, attributeMapping,attributeMappingMap,listNewSelect)
			{
				var VPMAttr, MxAttr, mapValue, dirArray, VPMMap, MXMap, directionArray, index;

				//Map for VPM attributes
				VPMMap = attributeMappingMap.VPM;
				//Map for Matrix attributes
				MXMap = attributeMappingMap.MX;

				if(attributeMapping!==undefined)
				{
					VPMAttr = attributeMapping.VPMAttribute.id;
					MxAttr = attributeMapping.MatrixAttribute.id;

					//get the value for VPMAttr
					mapValue=VPMMap.get(VPMAttr);
					if(mapValue !== undefined )
					{
						//Retrieve array corresponding to mapping direction
						directionArray = mapValue.get(attributeMapping.SynchDirection);
						//Search index of MxAttr
						index = directionArray.indexOf(MxAttr);
						//Remove MxAttr from the map
						if(index!==-1)
							directionArray.splice(index, 1);
					}
					//get the value for MxAttr
					mapValue=MXMap.get(MxAttr);
					if(mapValue !== undefined )
					{
						//Retrieve array corresponding to mapping direction
						directionArray = mapValue.get(attributeMapping.SynchDirection);
						//Search index of VPMAttr
						index = directionArray.indexOf(VPMAttr);
						//Remove VPMAttr from the map
						if(index!==-1)
							directionArray.splice(index, 1);
					}
				}
			},



			//Check if it possible to add a mapping by respecting mapping rules
			//return for each direction, if the mapping is possible or not
			CheckRulesToAddAttrMapping:function (VPMTypeRelInfo,VPMAttrInfo,MxTypeRelInfo,MxAttrInfo,VPMObjMappedAttr, MXObjMappedAttr, attrMapping)
			{
				//Check blocking rules (type attribute, already mapped)
				var directionAvailable = UIview.CheckBlockingRules(VPMTypeRelInfo,VPMAttrInfo,MxTypeRelInfo,MxAttrInfo,VPMObjMappedAttr, MXObjMappedAttr,attrMapping);
				//if no blocking rules has been detected, check coherence rules
				if(directionAvailable.BOTH)
					directionAvailable = UIview.CheckCoherenceRules(VPMTypeRelInfo, VPMAttrInfo,MxTypeRelInfo,MxAttrInfo, VPMObjMappedAttr, MXObjMappedAttr,attrMapping);
				return directionAvailable;
			},

			/*Test the following rules to map two given attributes:
			 ***An attribute cannot be used twice as target
			 ***An attribute is read only and cannot be used as target
			 ***Compatibility range
			 *Input:
			 **VPMTypeRelInfo: VPM type object
			 **VPMAttrInfo: the VPM attribute object  to map
			 **MxTypeRelInfo: Matrix type object
			 **MxAttrInfo: the Matrix attribute object to map
			 **VPMObjMappedAttr: attributes already mapped with VPMAttrInfo
			 **MXObjMappedAttr: attributes already mapped with MxAttrInfo
			 **attrMapping: mapping to not taking into account to check the rules, can be undefined
			 *Return: For each direction :
			 **status true/false is returned to know if the mapping is possible for these direction
			 **If the status is false, a message is returned to explain the reason
			 */
			CheckCoherenceRules: function(VPMTypeRelInfo,VPMAttrInfo,MxTypeRelInfo,MxAttrInfo ,VPMObjMappedAttr, MXObjMappedAttr, attrMapping)
			{

				var VPMArrayVPMToMx=new Array(),VPMArrayMxToVPM=new Array(),VPMArrayBoth=new Array(),MXArrayVPMToMx=new Array(),MXArrayMxToVPM=new Array(),MXArrayBoth=new Array(),result,resultRule1,resultRule2,resultRule3,resultRule4,resultRule5,resultRule6,VPMAttrInfo, MxAttrInfo,VPMAttrRange="",MxAttrRange="",index;
				result={VPM_To_MX:true,MX_To_VPM:true,BOTH:true,message:{VPM_To_MX:new Array(), MX_To_VPM:new Array(),BOTH:new Array()}};

				//get the already mapped attributes with VPM Attribute for each direction
				if(VPMObjMappedAttr!=undefined)
				{
					VPMArrayVPMToMx=VPMObjMappedAttr.get("VPM_To_MX");
					VPMArrayMxToVPM = VPMObjMappedAttr.get("MX_To_VPM");
					VPMArrayBoth = VPMObjMappedAttr.get("BOTH");
				}
				//get the already mapped attributes with Matrix Attribute for each direction
				if(MXObjMappedAttr!=undefined)
				{
					MXArrayVPMToMx=MXObjMappedAttr.get("VPM_To_MX");
					MXArrayMxToVPM = MXObjMappedAttr.get("MX_To_VPM");
					MXArrayBoth = MXObjMappedAttr.get("BOTH");
				}

				//if there is a mapping to exclude
				//remove the corresponding attributes from already mapped attributes array
				if(attrMapping!==undefined)
				{
					var resultArray;
					if(attrMapping.SynchDirection==="BOTH")
					{
						resultArray=UIview.excludeAttributeForAlreadyMappedArray(VPMArrayBoth,MXArrayBoth,attrMapping);
						VPMArrayBoth=resultArray[0]; MXArrayBoth =resultArray[1];
					}

					if(attrMapping.SynchDirection==="VPM_To_MX")
					{
						resultArray=UIview.excludeAttributeForAlreadyMappedArray(VPMArrayVPMToMx,MXArrayVPMToMx,attrMapping);
						VPMArrayVPMToMx=resultArray[0]; MXArrayVPMToMx =resultArray[1];
					}

					if(attrMapping.SynchDirection==="MX_To_VPM")
					{
						resultArray=UIview.excludeAttributeForAlreadyMappedArray(VPMArrayMxToVPM,MXArrayMxToVPM,attrMapping);
						VPMArrayMxToVPM=resultArray[0]; MXArrayMxToVPM =resultArray[1];
					}

				}

				//Check "cannot be used twice as target" rule
				resultRule1 = UIview.CheckNotUsedTwiceAsTarget(VPMArrayVPMToMx,VPMArrayMxToVPM,VPMArrayBoth,MXArrayVPMToMx,MXArrayMxToVPM,MXArrayBoth);

				//Check range compatibilty rule
				if(VPMAttrInfo!=undefined) VPMAttrRange = VPMAttrInfo.range;
				if(MxAttrInfo!=undefined) MxAttrRange = MxAttrInfo.range;
				resultRule5 =  UIview.CheckIsSameAttrRange(VPMAttrRange,MxAttrRange);

				//check read only attributes rules
				resultRule6 = UIview.CheckIsAuthorizedAsTarget(MxAttrInfo,VPMAttrInfo);


				//merge results of previous rules
				result.VPM_To_MX = resultRule1.VPM_To_MX && resultRule5.VPM_To_MX && resultRule6.VPM_To_MX;
				result.MX_To_VPM = resultRule1.MX_To_VPM && resultRule5.MX_To_VPM && resultRule6.MX_To_VPM;
				result.BOTH = resultRule1.BOTH  && resultRule5.BOTH && resultRule6.BOTH;

				Array.prototype.push.apply(result.message.BOTH, resultRule1.message.BOTH);Array.prototype.push.apply(result.message.BOTH, resultRule5.message.BOTH);Array.prototype.push.apply(result.message.BOTH, resultRule6.message.BOTH);
				Array.prototype.push.apply(result.message.VPM_To_MX, resultRule1.message.VPM_To_MX); Array.prototype.push.apply(result.message.VPM_To_MX, resultRule5.message.VPM_To_MX);Array.prototype.push.apply(result.message.VPM_To_MX, resultRule6.message.VPM_To_MX);
				Array.prototype.push.apply(result.message.MX_To_VPM, resultRule1.message.MX_To_VPM);Array.prototype.push.apply(result.message.MX_To_VPM, resultRule5.message.MX_To_VPM);Array.prototype.push.apply(result.message.MX_To_VPM, resultRule6.message.MX_To_VPM);

				return result;
			},



			/*Test the following rules to map two given attributes:
			 ***attributes must have same type
			 ***attributs must not be already mapped
			 *Input:
			 **VPMTypeRelInfo: VPM type object
			 **VPMAttrInfo: the VPM attribute object  to map
			 **MxTypeRelInfo: Matrix type object
			 **MxAttrInfo: the Matrix attribute object to map
			 **VPMObjMappedAttr: attributes already mapped with VPMAttrInfo
			 **MXObjMappedAttr: attributes already mapped with MxAttrInfo
			 **attrMapping: mapping to not taking into account to check the rules, can be undefined
			 *Return: For each direction :
			 **status true/false is returned to know if the mapping is possible for these direction
			 **If the status is false, a message is returned to explain the reason
			 */
			CheckBlockingRules: function(VPMTypeRelInfo,VPMAttrInfo,MxTypeRelInfo,MxAttrInfo,VPMObjMappedAttr, MXObjMappedAttr, attrMapping)
			{

				var VPMArrayVPMToMx=new Array(),VPMArrayMxToVPM=new Array(),VPMArrayBoth=new Array(),MXArrayVPMToMx=new Array(),MXArrayMxToVPM=new Array(),MXArrayBoth=new Array(),result,resultRule1,resultRule2,resultRule3,resultRule4,resultRule5,resultRule6,VPMAttrInfo, MxAttrInfo,VPMAttrRange="",MxAttrRange="",index;
				result={VPM_To_MX:true,MX_To_VPM:true,BOTH:true,message:{VPM_To_MX:new Array(), MX_To_VPM:new Array(),BOTH:new Array()}};
				//get the already mapped attributes with VPM Attribute for each direction
				if(VPMObjMappedAttr!=undefined)
				{
					VPMArrayVPMToMx=VPMObjMappedAttr.get("VPM_To_MX");
					VPMArrayMxToVPM = VPMObjMappedAttr.get("MX_To_VPM");
					VPMArrayBoth = VPMObjMappedAttr.get("BOTH");
				}
				//get the already mapped attributes with Matrix Attribute for each direction
				if(MXObjMappedAttr!=undefined)
				{
					MXArrayVPMToMx=MXObjMappedAttr.get("VPM_To_MX");
					MXArrayMxToVPM = MXObjMappedAttr.get("MX_To_VPM");
					MXArrayBoth = MXObjMappedAttr.get("BOTH");
				}

				var resultArray;
				//if there is a mapping to exclude
				//remove the corresponding attributes from already mapped attributes array
				if(attrMapping!==undefined)
				{
					if(attrMapping.SynchDirection==="BOTH")
					{
						resultArray = UIview.excludeAttributeForAlreadyMappedArray(VPMArrayBoth,MXArrayBoth,attrMapping);
						VPMArrayBoth=resultArray[0]; MXArrayBoth =resultArray[1];
					}

					if(attrMapping.SynchDirection==="VPM_To_MX")
					{
						resultArray = UIview.excludeAttributeForAlreadyMappedArray(VPMArrayVPMToMx,MXArrayVPMToMx,attrMapping);
						VPMArrayVPMToMx=resultArray[0]; MXArrayVPMToMx =resultArray[1];
					}

					if(attrMapping.SynchDirection==="MX_To_VPM")
					{
						resultArray = UIview.excludeAttributeForAlreadyMappedArray(VPMArrayMxToVPM,MXArrayMxToVPM,attrMapping);
						VPMArrayMxToVPM=resultArray[0]; MXArrayMxToVPM =resultArray[1];
					}

				}

				//check if attributes has same type
				if(!VPMAttrInfo.isUnknown && !MxAttrInfo.isUnknown)
					resultRule1 = UIview.CheckIsSameAttrType(VPMAttrInfo,MxAttrInfo);
				else resultRule1 = {VPM_To_MX:true,MX_To_VPM:true,BOTH:true,message:{VPM_To_MX:new Array(), MX_To_VPM:new Array(),BOTH:new Array()}};
				//Check if attributes are not already mapped
				resultRule2 = UIview.CheckIsNotAlreadyMappedWithMxObj(MxAttrInfo,VPMArrayVPMToMx,VPMArrayMxToVPM,VPMArrayBoth);

				//merge rules result
				result.VPM_To_MX = resultRule1.VPM_To_MX && resultRule2.VPM_To_MX ;
				result.MX_To_VPM = resultRule1.MX_To_VPM && resultRule2.MX_To_VPM ;
				result.BOTH = resultRule1.BOTH  && resultRule2.BOTH ;

				Array.prototype.push.apply(result.message.BOTH, resultRule1.message.BOTH);Array.prototype.push.apply(result.message.BOTH, resultRule2.message.BOTH);
				Array.prototype.push.apply(result.message.VPM_To_MX, resultRule1.message.VPM_To_MX); Array.prototype.push.apply(result.message.VPM_To_MX, resultRule2.message.VPM_To_MX);
				Array.prototype.push.apply(result.message.MX_To_VPM, resultRule1.message.MX_To_VPM);Array.prototype.push.apply(result.message.MX_To_VPM, resultRule2.message.MX_To_VPM);

				return result;
			},

			excludeAttributeForAlreadyMappedArray : function (VPMAlreadyMappedArray,MatrixAlreadyMappedArray,attributeMappingToExclude) {
				var ModifiedVPMAlreadyMappedArray=new Array(), ModifiedMatrixAlreadyMappedArray=new Array();
				var index=-1;
				index = VPMAlreadyMappedArray.indexOf(attributeMappingToExclude.MatrixAttribute.id);
				if(index!==-1)
					ModifiedVPMAlreadyMappedArray = VPMAlreadyMappedArray.slice(0, index).concat(VPMAlreadyMappedArray.slice(index+1, VPMAlreadyMappedArray.length));
				else ModifiedVPMAlreadyMappedArray = VPMAlreadyMappedArray.slice();
				index = MatrixAlreadyMappedArray.indexOf(attributeMappingToExclude.VPMAttribute.id);
				if(index!==-1)
					ModifiedMatrixAlreadyMappedArray = MatrixAlreadyMappedArray.slice(0, index).concat(MatrixAlreadyMappedArray.slice(index+1, MatrixAlreadyMappedArray.length));
				else ModifiedMatrixAlreadyMappedArray = MatrixAlreadyMappedArray.slice();
				return [ModifiedVPMAlreadyMappedArray,ModifiedMatrixAlreadyMappedArray];

			},


			//check if two attributes has the same type
			CheckIsSameAttrType : function (VPMAttr,MxAttr) {
				var result={VPM_To_MX:true,MX_To_VPM:true,BOTH:true,message:{VPM_To_MX:new Array(), MX_To_VPM:new Array(),BOTH:new Array()}},message="";

				//VPM enum attribute must be mapped with String attribute
				if(VPMAttr.isenum === true )
				{
					if(MxAttr.type !== "String")
					{
						result.BOTH=false;result.VPM_To_MX=false;result.MX_To_VPM=false;
						result.message.BOTH.push(0);result.message.VPM_To_MX.push(0);result.message.MX_To_VPM.push(0);
					}
				}
				else if(VPMAttr.type !==MxAttr.type)
				{
					message=MappingManagementNLS.ErrorNotSameType;
					result.BOTH=false;result.VPM_To_MX=false;result.MX_To_VPM=false;
					result.message.BOTH.push(0);result.message.VPM_To_MX.push(0);result.message.MX_To_VPM.push(0);
				}
				return result;
			},

			//Check compatibility range
			CheckIsSameAttrRange : function (VPMAttrRange,MxAttrRange) {
				var result={VPM_To_MX:true,MX_To_VPM:true,BOTH:true,message:{VPM_To_MX:new Array(), MX_To_VPM:new Array(),BOTH:new Array()}},message="",isVPMRangesIncludesMxRange,isMxRangesIncludesVPMRange,cpt,range;

				//if VPM attr has range and no Matrix attr, only VPM to Mx direction is possible
				if( VPMAttrRange.length===0 &&  MxAttrRange.length!==0)
				{
					result.VPM_To_MX=false;result.message.VPM_To_MX.push(1);
					result.BOTH=false;result.message.BOTH.push(1);
				}
				//if Matrix attr has range and no VPM attr, only MX to VPM direction is possible
				else if( VPMAttrRange.length!==0 &&  MxAttrRange.length===0)
				{
					result.MX_To_VPM=false;result.message.MX_To_VPM.push(1);
					result.BOTH=false;result.message.BOTH.push(1);
				}
				//if both attributes have range, check range values compatibility
				else if(VPMAttrRange.length!==0 &&  MxAttrRange.length!==0)
				{
					isVPMRangesIncludesMxRange = true;
					isMxRangesIncludesVPMRange =true;
					cpt=0;
					//check if VPM attributes ranges values are included in Matrix ranges
					while(cpt<VPMAttrRange.length && isMxRangesIncludesVPMRange)
					{
						range = VPMAttrRange[cpt];
						if(MxAttrRange.indexOf(range)<0) isMxRangesIncludesVPMRange=false;
						cpt++;
					}
					cpt=0;
					//check if Matrix attributes ranges values are included in VPM ranges
					while(cpt<MxAttrRange.length && isVPMRangesIncludesMxRange)
					{
						range = MxAttrRange[cpt];
						if(VPMAttrRange.indexOf(range)<0) isVPMRangesIncludesMxRange=false;
						cpt++;
					}
					//if ranges are not equal, at least both direction is not possible
					if(!isVPMRangesIncludesMxRange || !isMxRangesIncludesVPMRange)
					{
						result.BOTH=false;
						result.message.BOTH.push(1);
					}
					//if VPM ranges is included in Matrix ranges, direction MX to VPM is possible
					if(!isVPMRangesIncludesMxRange )
					{
						result.MX_To_VPM=false;
						result.message.MX_To_VPM.push(1);
					}
					//if Matrix ranges is included in VPM ranges, direction VPM to MX is possible
					if(!isMxRangesIncludesVPMRange )
					{
						result.VPM_To_MX=false;
						result.message.VPM_To_MX.push(1);
					}

				}

				return result;
			},

			//Check if attributes are not already mapped
			CheckIsNotAlreadyMappedWithMxObj : function (MXObj,VPMArrayVPMToMx,VPMArrayMxToVPM,VPMArrayBoth) {

				var result={VPM_To_MX:true,MX_To_VPM:true,BOTH:true,message:{VPM_To_MX:new Array(), MX_To_VPM:new Array(),BOTH:new Array()}},message="";

				//if attributes are already mapped, matrix attributes must be found in VPMArrayVPMToMx or in VPMArrayMxToVPM or in VPMArrayBoth
				if(VPMArrayVPMToMx.indexOf(MXObj.id)!==-1 || VPMArrayMxToVPM.indexOf(MXObj.id)!==-1 || VPMArrayBoth.indexOf(MXObj.id)!==-1)
				{
					message=MappingManagementNLS.ErrorAlreadyMappedTogether;
					result.BOTH=false;result.VPM_To_MX=false;result.MX_To_VPM=false;
					result.message.BOTH.push(2);result.message.VPM_To_MX.push(2);result.message.MX_To_VPM.push(2);
				}
				return result;
			},

			//Check if an attribute can be used as target (not read only)
			CheckIsAuthorizedAsTarget : function (MXObjInfo, VPMObjInfo) {

				var result={VPM_To_MX:true,MX_To_VPM:true,BOTH:true,message:{VPM_To_MX:new Array(), MX_To_VPM:new Array(),BOTH:new Array()}},message="", isVPMAuthorized, isPartAuthorized;

				//if VPM attribute is read only, direction both and MX_To_VPM are not possible
				//if( !isVPMAuthorized && (VPMItf==="" ||VPMItf===undefined)  )
				if(VPMObjInfo.isreadonly)
				{
					message=MappingManagementNLS.ErrorVPMOnlyUsedAsSource;
					result.BOTH=false;result.MX_To_VPM=false;;
					result.message.BOTH.push(3);result.message.MX_To_VPM.push(3);
				}
				//if Matrix attribute is read only, direction both and VPM_To_MX are not possible
				//if( !isPartAuthorized && (MxItf==="" ||MxItf===undefined) )
				if(MXObjInfo.isreadonly)
				{
					message=MappingManagementNLS.ErrorMxOnlyUsedAsSource;
					result.BOTH=false;result.VPM_To_MX=false;;
					result.message.BOTH.push(4);result.message.VPM_To_MX.push(4);
				}
				return result;
			},



			//Check if Part or VPM attribute are already used as target in another mapping
			CheckNotUsedTwiceAsTarget : function (VPMArrayVPMToMx,VPMArrayMxToVPM,VPMArrayBoth,MXArrayVPMToMx,MXArrayMxToVPM,MXArrayBoth) {

				var result={VPM_To_MX:true,MX_To_VPM:true,BOTH:true, message:{VPM_To_MX:new Array(), MX_To_VPM:new Array(),BOTH:new Array()}},message="";

				//if Part or VPM attribute is already used as target in another mapping, both direction is not possible
				if(MXArrayBoth.length!==0 || VPMArrayBoth.length!==0 || VPMArrayMxToVPM.length!==0 || MXArrayVPMToMx.length!==0)
				{
					result.BOTH=false;
					//if Part attribute is already used as target in another mapping, VPM_To_MX is not possible
					if(MXArrayBoth.length!==0 || MXArrayVPMToMx.length!==0)
					{
						message="";
						message = message +  MappingManagementNLS.ErrorPartAlreadyUsedAsTarget;
						result.BOTH=false;result.VPM_To_MX=false;;
						result.message.BOTH.push(5);
						result.message.VPM_To_MX.push(5);
					}
					//if Product attribute is already used as target in another mapping, MX_To_VPM is not possible
					if(VPMArrayBoth.length!==0 ||VPMArrayMxToVPM.length!==0)
					{
						message="";
						message = message +  MappingManagementNLS.ErrorProductAlreadyUsedAsTarget;
						result.BOTH=false;result.MX_To_VPM=false;;
						result.message.BOTH.push(6);
						result.message.MX_To_VPM.push(6);
					}
				}
				return result;
			},



			//Fill Part Select with Part attributes mappable (at least one direction is possible) with selected VPM attribute
			enableMatrixAttrAccordingRules : function (VPMTypeRelInfo, attrsSelectVPM, MxTypeRelInfo, attrsSelectMatrix,attrMappingMap,directionAvailableMap, attrMapping) {

				var selectedVPMAttr, selectedVPMAttrType, selectedMxAttrType,selectedVPMAttrOpt,listOfMappedMXattr,listMatrixOptions,cptOptions,listOfMappedVPMattr,directionAvailable ,matrixOption,position,listOfEnableOption = new Array(), listOfDisableOption=new Array(),group,VPMAttrInfo,MxAttrInfo;

				//Get the selected VPM attributes
				selectedVPMAttrOpt = attrsSelectVPM.getSelection(false);

				//Get the selected Matrix attribute
				var matrixSelectValue = attrsSelectMatrix.getValue()[0];

				if(selectedVPMAttrOpt.length!=0)
				{
					//Get VPM attribute value
					selectedVPMAttr = selectedVPMAttrOpt[0].value;
					//retrieve VPM attribute object
					VPMAttrInfo = UIview.retrieveAttributeInfo(VPMTypeRelInfo,selectedVPMAttr);
					//clear and remove content of Part select
					attrsSelectMatrix.clear(true);
					attrsSelectMatrix.remove();

					//get the list of attributes already mapped with VPM attribute
					listOfMappedMXattr = (attrMappingMap.VPM).get(selectedVPMAttr);

					//For each Part attribute, check if it can be mapped with VPM attributes and add it in the select if it is the case
					listMatrixOptions = attrsSelectMatrix.getOptions(false);
					for(cptOptions=0; cptOptions<MxTypeRelInfo.attributeInfo.length;cptOptions++)
					{

						MxAttrInfo = MxTypeRelInfo.attributeInfo[cptOptions];
						//get the list of attributes already mapped with MxAttrInfo
						listOfMappedVPMattr = (attrMappingMap.MX).get(MxAttrInfo.id);
						//Check mapping rules beetwen MxAttrInfo and VPM attribute
						directionAvailable = UIview.CheckRulesToAddAttrMapping(VPMTypeRelInfo, VPMAttrInfo,MxTypeRelInfo,MxAttrInfo, listOfMappedMXattr, listOfMappedVPMattr,attrMapping);

						var option = {label:MxAttrInfo.name + " ("+MxAttrInfo.type+")", value:MxAttrInfo.id };
						//If at least one direction is possible, add MxAttrInfo to the select
						if(directionAvailable.VPM_To_MX || directionAvailable.MX_To_VPM  || directionAvailable.BOTH )
						{
							attrsSelectMatrix.add(option);
							if(matrixSelectValue === MxAttrInfo.id)
							{
								attrsSelectMatrix.select(option,true,true, false);
								attrsSelectMatrix.enable(option);

							}
						}

					}

				}
			},



			//Add the input list of messages in the given popover
			displayAddMappingWarningMessage : function (messageDiv,popoverInfoMapping ,messages ) {
				var messageList,iconInfo,cpt=0;
				if(messageDiv!=undefined)
				{
					iconInfo = messageDiv.getElement(".InfoAddMapping");
					if(messages.length !==0)
					{
						iconInfo.show();
						messageList =UWA.createElement('ul', {'class' : 'ListAddMappingMessage'});

						for(cpt=0;cpt<messages.length;cpt++)
						{
							UWA.createElement('li', {
								'text':UIview.mappableAttributeReaseon[messages[cpt]],
							}).inject(messageList);
						}
						popoverInfoMapping.setBody(messageList);
					}
					else
					{
						popoverInfoMapping.setBody("");
						iconInfo.hide();
					}
				}
			},




			//display panel to modify attribute direction
			ShowModifyDirectionPanel: function (modifyDirectionButton,cellStatus,VPMTypeRelInfo,MatrixTypeRelInfo,listofAttributesMapping,attributeMapping,/*kindOfMapping,*/listofTypeRelMapping,selectVPM,selectMatrix,iCellAction,actionButton) {

				var  iconInfoMessageBOTH,iconInfoMessageVPMENG,iconInfoMessageENGVPM,divMessageBOTH,
				divMessageVPMENG, divMessageENGVPM,popoverInfoMappingBOTH,popoverInfoMappingVPMENG,popoverInfoMappingENGVPM,
				OKBtn, CancelBtn,modalbodydiv, modalbodyTable,modaltbody,lineModal,iCell,iCell1, toggleBoth, toggleVPM, toggleENG, changeDirectionModal, modifyDirectionTitle,that=this;

				if( attributeMapping !== undefined)
				{
					modifyDirectionTitle = UWA.createElement('h4', {
						text   : MappingManagementNLS.ModifyDirectionTitle.format(attributeMapping.VPMAttribute.name,attributeMapping.MatrixAttribute.name) ,
					});

					modalbodydiv = UWA.createElement('div', {
						'class': 'PartProductAddMappingDiv',
					})

					modalbodyTable =  UWA.createElement('table', {
						'id': 'PartProductAddMappingTable',
						'class': 'table table-condensed table-hover'
					}).inject(modalbodydiv);


					modaltbody = UWA.createElement('tbody', {
						'class': 'addMappingBody'
					}).inject(modalbodyTable);

					lineModal = UWA.createElement('tr').inject(modaltbody);

					iCell = UWA.createElement('td', {
						'Align' : 'left',
					});

					iCell1 = UWA.createElement('td', {
						'Align' : 'left',
						'width' : '92%'
					}).inject(iCell);

					UWA.createElement('p', {
						text   : MappingManagementNLS.currentDirection,
						'class': 'font-3dslight'// font-3dsbold
					}).inject(iCell1);

					iCell.inject(lineModal);

					iCell = UWA.createElement('td', {
						'Align' : 'left',
					});

					iCell1 = UWA.createElement('td', {
						'Align' : 'left',
						'width' : '92%'
					}).inject(iCell);

					var txtDirection="";
					if(attributeMapping.SynchDirection === "BOTH" ) {txtDirection = MappingManagementNLS.both;}
					if(attributeMapping.SynchDirection === "VPM_To_MX" ) {txtDirection = MappingManagementNLS.unilateralDirection.format(VPMTypeRelInfo.name,MatrixTypeRelInfo.name);}
					if(attributeMapping.SynchDirection === "MX_To_VPM" ) {txtDirection = MappingManagementNLS.unilateralDirection.format(MatrixTypeRelInfo.name,VPMTypeRelInfo.name);}

					UWA.createElement('p', {
						text   : txtDirection,
						'class': 'font-3dslight'// font-3dsbold
					}).inject(iCell1);

					iCell.inject(lineModal);

					lineModal = UWA.createElement('tr').inject(modaltbody);

					iCell = UWA.createElement('td', {
						'Align' : 'left',
					});

					iCell1 = UWA.createElement('td', {
						'Align' : 'left',
						'width' : '92%'
					}).inject(iCell);

					UWA.createElement('p', {
						text   : MappingManagementNLS.newDirection,
						'class': 'font-3dslight'// font-3dsbold
					}).inject(iCell1);

					iCell.inject(lineModal);

					iCell = UWA.createElement('td', {
						'Align' : 'left',
					}).inject(lineModal);


					toggleBoth =  new Toggle({ name: "optionsRadiosSide", value: MappingManagementNLS.both, className: "primary"}).inject(iCell);
					toggleVPM =  new Toggle({ name: "optionsRadiosSide", value: MappingManagementNLS.unilateralDirection.format(VPMTypeRelInfo.name,MatrixTypeRelInfo.name), className: "primary"}).inject(iCell);
					toggleENG =  new Toggle({ name: "optionsRadiosSide", value: MappingManagementNLS.unilateralDirection.format(MatrixTypeRelInfo.name,VPMTypeRelInfo.name), className: "primary"}).inject(iCell);


					var iCell2 = UWA.createElement('td', {
						'Align' : 'left',
					}).inject(lineModal);
					divMessageBOTH = UWA.createElement('div', {'class':'divAddMappingMessage'}).inject(iCell2);
					divMessageVPMENG = UWA.createElement('div', {'class':'divAddMappingMessage'}).inject(iCell2);
					divMessageENGVPM = UWA.createElement('div', {'class':'divAddMappingMessage'}).inject(iCell2);


					if(attributeMapping.SynchDirection === "BOTH" ) {toggleBoth.hide();divMessageBOTH.hide();}
					if(attributeMapping.SynchDirection === "VPM_To_MX" ) {toggleVPM.hide();divMessageVPMENG.hide();}
					if(attributeMapping.SynchDirection === "MX_To_VPM" ) {toggleENG.hide();divMessageENGVPM.hide();}

					iconInfoMessageBOTH = UWA.createElement('span', {
						'class' : 'InfoAddMapping fonticon fonticon-info'
					}).inject(divMessageBOTH);
					iconInfoMessageBOTH.hide();
					popoverInfoMappingBOTH = new Popover({
						target   : iconInfoMessageBOTH,
						trigger  : "hover",
						animate  : "true",
						position : 'left',
						body     : "",
						title    : 'BOTH'
					});

					iconInfoMessageVPMENG = UWA.createElement('span', {
						'class' : 'InfoAddMapping fonticon fonticon-info'
					}).inject(divMessageVPMENG);
					iconInfoMessageVPMENG.hide();
					popoverInfoMappingVPMENG = new Popover({
						target   : iconInfoMessageVPMENG,
						trigger  : "hover",
						animate  : "true",
						position : 'left',
						body     : "",
						title    : 'VPM to ENG'
					});

					iconInfoMessageENGVPM = UWA.createElement('span', {
						'class' : 'InfoAddMapping fonticon fonticon-info'
					}).inject(divMessageENGVPM);
					iconInfoMessageENGVPM.hide();
					popoverInfoMappingENGVPM = new Popover({
						target   : iconInfoMessageENGVPM,
						trigger  : "hover",
						animate  : "true",
						position : 'left',
						body     : "",
						title    : 'ENG to VPM'
					});

					UWA.createElement('ul', {'class' : 'ListAddMappingMessage'}).inject(divMessageBOTH);
					UWA.createElement('ul', {'class' : 'ListAddMappingMessage'}).inject(divMessageVPMENG);
					UWA.createElement('ul', {'class' : 'ListAddMappingMessage'}).inject(divMessageENGVPM);


					var listOfVPMTypeRel,listOfMxTypeRel,listOfLinkedMapping,attrMappingMap,listOfMappedMXattr,listOfMappedVPMattr, VPMTypeRelInfo, MatrixTypeRelInfo, directionAvailable,authorizedDirection,
					messagesBOTH,messagesVPMENG,messagesENGVPM;

						listOfVPMTypeRel = this.listOfCustoVPMType;
						listOfMxTypeRel = this.listOfCustoPartType;

					OKBtn = new Button({
						value : MappingManagementNLS.Apply,
						id    : "modalOKButton",
						className : 'btn primary'
					});

					CancelBtn = new Button({
						value : MappingManagementNLS.Cancel,
						id    : 'modalCancelButton',
						className : 'btn default'
					});


					//enable/disable direction according mapping rules
					if(VPMTypeRelInfo !== undefined  && MatrixTypeRelInfo !== undefined)
					{
						//Check which direction is available
						var attrMappingMapWithoutCurrentMapping = {VPM:new Map(this.attributeMappingMap.VPM),MX:new Map(this.attributeMappingMap.MX)};
						listOfMappedMXattr = (attrMappingMapWithoutCurrentMapping.VPM).get(attributeMapping.VPMAttribute.id);
						listOfMappedVPMattr = (attrMappingMapWithoutCurrentMapping.MX).get(attributeMapping.MatrixAttribute.id);
						directionAvailable = UIview.CheckCoherenceRules(VPMTypeRelInfo, attributeMapping.VPMAttribute ,MatrixTypeRelInfo,attributeMapping.MatrixAttribute, listOfMappedMXattr, listOfMappedVPMattr,attributeMapping);

						//disable/enable direction
						if(directionAvailable!==undefined)
						{
							if(!directionAvailable.BOTH) toggleBoth.setDisabled(true);
							if(!directionAvailable.VPM_To_MX) toggleVPM.setDisabled(true);
							if(!directionAvailable.MX_To_VPM) toggleENG.setDisabled(true);

							messagesBOTH = directionAvailable.message.BOTH;
							messagesVPMENG = directionAvailable.message.VPM_To_MX;
							messagesENGVPM = directionAvailable.message.MX_To_VPM;
						}

						//Check an available direction by default
						if( !toggleBoth.isDisabled() && attributeMapping.SynchDirection !== "BOTH") toggleBoth.check();
						else if(!toggleVPM.isDisabled()&& attributeMapping.SynchDirection !== "VPM_To_MX") toggleVPM.check();
						else if(!toggleENG.isDisabled()&& attributeMapping.SynchDirection !== "MX_To_VPM") toggleENG.check();

						//if no direction is available, disable OK button
						if(!toggleENG.isChecked() && !toggleVPM.isChecked() && !toggleBoth.isChecked())
							OKBtn.setDisabled(true);

						//display message in popover
						UIview.displayAddMappingWarningMessage (divMessageBOTH,popoverInfoMappingBOTH ,messagesBOTH );
						UIview.displayAddMappingWarningMessage (divMessageVPMENG,popoverInfoMappingVPMENG ,messagesVPMENG );
						UIview.displayAddMappingWarningMessage (divMessageENGVPM,popoverInfoMappingENGVPM ,messagesENGVPM );
					}


					changeDirectionModal = new Modal({
						className: 'add-mapping-modal',
						closable: true,
						header  :modifyDirectionTitle,
						body    : modalbodydiv,
						footer  : [ OKBtn, CancelBtn ]
					});

					CancelBtn.addEvent("onClick", function (e) {
						UWA.log(e);
						changeDirectionModal.hide();
					});

					OKBtn.addEvent("onClick", function (e) {
						var deployAttrcell,imgAttrSpan,direction;

						//Retrieve direction choosen by the user
						if(toggleBoth.isChecked())  direction="BOTH";
						else if (toggleVPM.isChecked()) direction="VPM_To_MX";
						else if (toggleENG.isChecked()) direction="MX_To_VPM";
						else direction="BOTH";

			 if(cellStatus.value === "Deployed" || cellStatus.value === "Stored" || cellStatus.value.indexOf("Modified")!==-1 || cellStatus.value.indexOf("Invalid")!==-1)

							if( attributeMapping.SynchDirectionBase===undefined)
							{
								actionButton[0].show();
								actionButton[1].show();

								var imgSpanRight = UWA.createElement('span', {
									'class' : 'fonticon fonticon-expand-right'
								})

								var imgSpanLeft = UWA.createElement('span', {
									'class' : 'fonticon fonticon-expand-left'
								})

								var imgSpanBoth = UWA.createElement('span', {
									'class' : 'fonticon fonticon-arrow-combo-horizontal'
								})
								if(attributeMapping.SynchDirection=="BOTH")
								{
									imgSpanBoth.inject(iCellAction);
									imgSpanBoth.setStyle("display", "block");
									imgSpanBoth.setStyle("text-align", "left")
								}
								else if (attributeMapping.SynchDirection=="VPM_To_MX")
								{
									imgSpanRight.inject(iCellAction);
									imgSpanRight.setStyle("display", "block");
									imgSpanRight.setStyle("text-align", "left")
								}
								else if (attributeMapping.SynchDirection=="MX_To_VPM")
								{
									imgSpanLeft.inject(iCellAction);
									imgSpanLeft.setStyle("display", "block");
									imgSpanLeft.setStyle("text-align", "left")
								}


								var color="green";
								var status = "ModifiedDeployed";
								if(cellStatus.value.indexOf("Stored")!==-1) {color="orange"; status = "ModifiedStored";}
								attributeMapping.status = status;
								UIview.modifyDeployCellSatus(cellStatus,status,MappingManagementNLS.ModifiedNotApplied,"fonticon-pencil",color);

								attributeMapping.SynchDirectionBase = attributeMapping.SynchDirection;
							}
							else if(attributeMapping.SynchDirectionBase === direction)
							{
								UIview.ResetModifyStatus(attributeMapping,iCellAction,cellStatus);
								attributeMapping.SynchDirectionBase = undefined;
							}
						//modify direction in UI and in model
						UIview.modifyMappingDirection.call(that,VPMTypeRelInfo,MatrixTypeRelInfo,direction,modifyDirectionButton,attributeMapping,listofAttributesMapping,selectVPM,selectMatrix);

						changeDirectionModal.hide();
					});

					changeDirectionModal.show();
					return changeDirectionModal;
				}
			},


			ResetModifyStatus: function(attributeMapping,iCellAction,icellStatus)
			{
				var iconright = iCellAction.getElement(".fonticon-expand-right");
				var iconleft = iCellAction.getElement(".fonticon-expand-left");
				var iconboth = iCellAction.getElement(".fonticon-arrow-combo-horizontal");
				if(iconright!==null && iconright !==undefined) iconright.remove();
				if(iconleft!==null && iconleft !==undefined) iconleft.remove();
				if(iconboth!==null && iconboth !==undefined) iconboth.remove();
				var color="green";
				var icon = "fonticon-check";
				var status = "Deployed";
				var tooltip = MappingManagementNLS.Deployed;
				if(icellStatus.value.contains("Stored"))  {status = "Stored";color="orange", icon ="fonticon-cog", tooltip= MappingManagementNLS.Stored};
				attributeMapping.status = status;
				UIview.modifyDeployCellSatus(icellStatus,status,tooltip,icon,color);
				var buttons = iCellAction.getElements('button');
				buttons[1].show();
				buttons[0].hide();
			},


			//modify direction in UI and in model
			modifyMappingDirection: function (VPMTypeRelInfo,MatrixTypeRelInfo,direction,modifyDirectionButton,attributeMapping,listofAttributesMapping,selectVPM,selectMatrix )
			{
				//UI modification
				UIview.setButtonDirection(direction, modifyDirectionButton);

				//Model modification
				UIview.RemoveMappingInAttrMap(VPMTypeRelInfo,MatrixTypeRelInfo,listofAttributesMapping,attributeMapping,this.attributeMappingMap,this.listNewSelect);
				attributeMapping.SynchDirection = direction;
				UIview.AddNewMappingInAttrMap(VPMTypeRelInfo,MatrixTypeRelInfo,listofAttributesMapping, attributeMapping,this.attributeMappingMap,this.listNewSelect);

				//Update attributeMappingMap
				UIview.UpdatePartComboAttributeList(VPMTypeRelInfo,MatrixTypeRelInfo,listofAttributesMapping,this.attributeMappingMap,this.listNewSelect,selectVPM,selectMatrix);
			},

			//modify direction button
			setButtonDirection: function (direction, modifyDirectionButton)
			{
				if(direction ==="BOTH" )
				{
					modifyDirectionButton.setIcon("fonticon fonticon-arrow-combo-horizontal" );
					modifyDirectionButton.elements.input.value = 'BOTH';
				}
				else if (direction === "VPM_To_MX")
				{
					modifyDirectionButton.setIcon("fonticon fonticon-expand-right" );
					modifyDirectionButton.elements.input.value = "VPM_To_MX";
				}
				else if (direction === "MX_To_VPM")
				{
					modifyDirectionButton.setIcon("fonticon fonticon-expand-left" );
					modifyDirectionButton.elements.input.value ='MX_To_VPM';
				}
			},


			//launch not mappable attribute panel => show attributes that cannot be mapped with selected VPM attributes and why they cannot be mapped
			ShowNotMappableAttribute: function (selectedVPMAttribute, MatrixAttributes, VPMTypeRelInfo,MxTypeRelInfo,attrMapping ) {

				var  iconInfoMessageBOTH,iconInfoMessageVPMENG,iconInfoMessageENGVPM,divMessageBOTH,
				divMessageVPMENG, divMessageENGVPM,popoverInfoMappingBOTH,popoverInfoMappingVPMENG,popoverInfoMappingENGVPM,
				OKBtn, CancelBtn,modalbodydiv, modalbodyTable,modaltbody,lineModal,iCell,iCell1, toggleBoth, toggleVPM, toggleENG, changeDirectionModal, modifyDirectionTitle,that=this;

				modifyDirectionTitle = UWA.createElement('h4', {
					text   : MappingManagementNLS.Incompatibleattributes ,
				});

				modalbodydiv = UWA.createElement('div', {
					'class': 'PartProductAddMappingDiv',
				})

				//Map with all not mappable reasons as key and the attributes matching with these reasons as values
				var mapNotMappableReason = new Map();
				mapNotMappableReason.set("DifferentType",new Array());
				mapNotMappableReason.set("AlreadyMapped",new Array());
				mapNotMappableReason.set("RangeError",new Array());
				mapNotMappableReason.set("PartNotEditable",new Array());
				mapNotMappableReason.set("PartUsedAsTarget",new Array());
				mapNotMappableReason.set("PartUsedAsTargetAndRangeError",new Array());
				mapNotMappableReason.set("PartNotEditableAndRangeError",new Array());

				var isVPMIsUsedAsTarget=false;
				var isVPMNotEditable=false;
				var listOfMappedMXattr = (this.attributeMappingMap.VPM).get(selectedVPMAttribute);
				var VPMAttrInfo = UIview.retrieveAttributeInfo(VPMTypeRelInfo,selectedVPMAttribute);

				var i=0;
				for (i=0; i<MatrixAttributes.length;i++)
				{
					var listOfMappedVPMattr = (this.attributeMappingMap.MX).get(MatrixAttributes[i].id);
					//Get direction available and reason for mapping beetwen selected VPM attribute and MatrixAttributes[i]
					var directionAvailable = UIview.CheckRulesToAddAttrMapping(VPMTypeRelInfo, VPMAttrInfo,MxTypeRelInfo,MatrixAttributes[i], listOfMappedMXattr, listOfMappedVPMattr,attrMapping);

					var arrayToPopulate;
					//if no direction is available, put Matrix attribute in "not mappable" attribute panel
					if(!directionAvailable.BOTH && !directionAvailable.VPM_To_MX && !directionAvailable.MX_To_VPM)
					{
						//Put all not mappable reasons in NotMappableReason array
						var NotMappableReason = new Array();
						var j=0;
						for(j=0; j< directionAvailable.message.BOTH.length;j++)
						{
							NotMappableReason.push(directionAvailable.message.BOTH[j]);
						}
						for(j=0; j< directionAvailable.message.VPM_To_MX.length;j++)
						{
							if(NotMappableReason.indexOf(directionAvailable.message.VPM_To_MX[j])===-1)
								NotMappableReason.push(directionAvailable.message.VPM_To_MX[j]);
						}
						for(j=0; j< directionAvailable.message.MX_To_VPM.length;j++)
						{
							if(NotMappableReason.indexOf(directionAvailable.message.MX_To_VPM[j])===-1)
								NotMappableReason.push(directionAvailable.message.MX_To_VPM[j]);
						}

						//Attributes cannot be mapped for only on reason
						if(NotMappableReason.length ===1)
						{
							//the attribute have different type (DifferentType in the map)
							if(NotMappableReason[0]===0)
							{
								arrayToPopulate=mapNotMappableReason.get("DifferentType");
								arrayToPopulate.push(MatrixAttributes[i].name+" ("+MatrixAttributes[i].type+")");
							}
							//the attributes have range incompatibily (RangeError key in the map)
							else if(NotMappableReason[0]===1)
							{
								arrayToPopulate=mapNotMappableReason.get("RangeError");
								arrayToPopulate.push(MatrixAttributes[i].name);
							}
							//the attributes are already mapped (AlreadyMapped key in the map)
							else if(NotMappableReason[0]===2)
							{
								arrayToPopulate=mapNotMappableReason.get("AlreadyMapped");
								arrayToPopulate.push(MatrixAttributes[i].name);
							}
						}
						//Attributes cannot be mapped for many reasons
						else{
							//VPM attribute is read only or already used as target
							if(!isVPMIsUsedAsTarget && !isVPMNotEditable)
							{
								if(NotMappableReason.indexOf(3)!==-1) isVPMNotEditable=true;
								else if(NotMappableReason.indexOf(6)!==-1) isVPMIsUsedAsTarget=true;
							}
							//range incompatibility exists
							if(NotMappableReason.indexOf(1)!==-1)
							{
								//and Part attribute is read_only
								if(NotMappableReason.indexOf(4)!==-1)
								{
									arrayToPopulate=mapNotMappableReason.get("PartNotEditableAndRangeError");
									arrayToPopulate.push(MatrixAttributes[i].name);
								}
								//and Part attribute is already used as target
								else if(NotMappableReason.indexOf(5)!==-1){
									arrayToPopulate=mapNotMappableReason.get("PartUsedAsTargetAndRangeError");
									arrayToPopulate.push(MatrixAttributes[i].name);
								}
								else
								{
									arrayToPopulate=mapNotMappableReason.get("RangeError");
									arrayToPopulate.push(MatrixAttributes[i].name);
								}

							}
							//Part is read-only
							else if(NotMappableReason.indexOf(4)!==-1)
							{
								arrayToPopulate=mapNotMappableReason.get("PartNotEditable");
								arrayToPopulate.push(MatrixAttributes[i].name);
							}
							//part is alreday used as target
							else if(NotMappableReason.indexOf(5)!==-1)
							{
								arrayToPopulate=mapNotMappableReason.get("PartUsedAsTarget");
								arrayToPopulate.push(MatrixAttributes[i].name);
							}
						}
					}
				}



				var resultDiv = UWA.createElement('div', {'class': 'result'}).inject(modalbodydiv);
				///create accordion and fill it with different mapping reasons and their associated attribute
				var accordionNotMappable = ParametersLayoutViewUtilities.createFamilyUIKITAccordion(resultDiv);

				var cpt=0;

				//For Not same type reason
				var typeIncompatibilytattributes = mapNotMappableReason.get("DifferentType");
				var listTypeIncompatibilytattributes =UWA.createElement('ul', {'class' : 'listNotMappableAttribute'});
				for(cpt=0;cpt<typeIncompatibilytattributes.length;cpt++)
				{
					UWA.createElement('li', {
						'text':typeIncompatibilytattributes[cpt],
					}).inject(listTypeIncompatibilytattributes);
				}


				accordionNotMappable.addItem({
					title:  MappingManagementNLS.TypeincompatibilityReason,
					content: listTypeIncompatibilytattributes,
					selected : false,
					name:"TypeIncompatibility",
				});

				//For already map reason
				var alreadyMapped = mapNotMappableReason.get("AlreadyMapped");
				if(alreadyMapped.length!==0)
				{
					var listAlreadyMapped =UWA.createElement('ul', {'class' : 'listNotMappableAttribute'});
					for(cpt=0;cpt<alreadyMapped.length;cpt++)
					{
						UWA.createElement('li', {
							'text':alreadyMapped[cpt],
						}).inject(listAlreadyMapped);
					}


					accordionNotMappable.addItem({
						title:  MappingManagementNLS.AlreadyMappedReason,
						content: listAlreadyMapped,
						selected : false,
						name:"AlreadyMapped",
					});
				}

				//For other reasons
				var othersReasonDiv = UWA.createElement('div', {'class': 'others'});
				//Display if Product attribute is read-only or alredy used as target
				var VPMMessage="";
				if(isVPMIsUsedAsTarget) VPMMessage= MappingManagementNLS.PrdUsedAsTargetReason
				else if(isVPMNotEditable)  VPMMessage= MappingManagementNLS.PrdReadOnlyReason
				UWA.createElement('p', {
					text   :VPMMessage,
					'class': 'font-3dsbold'// font-3dsbold
				}).inject(othersReasonDiv);


				//Create sub-accordions for others reason
				var accordionOthers = new Accordion({
					className: 'accordionOthers',
					exclusive: false,
					items : []
				}).inject(othersReasonDiv);

				//sub-accordions dor Part read-only and range error
				var RangeAndNotEditableAttribute = mapNotMappableReason.get("PartNotEditableAndRangeError");
				if(RangeAndNotEditableAttribute.length!==0)
				{
					var listRangeAndNotEditableAttribute =UWA.createElement('ul', {'class' : 'listNotMappableAttribute'});
					for(cpt=0;cpt<RangeAndNotEditableAttribute.length;cpt++)
					{
						UWA.createElement('li', {
							'text':RangeAndNotEditableAttribute[cpt],
						}).inject(listRangeAndNotEditableAttribute);
					}

					accordionOthers.addItem({
						title:  MappingManagementNLS.RangeIncompatibilyAndPrtReadOnlyReason,
						content: listRangeAndNotEditableAttribute,
						selected : false,
						name:"PartNotEditableAndRangeError",
					});
				}

				//sub-accordions for Part already used as target and range error
				var RangeAndAlreadyUsedAsTargetAttribute = mapNotMappableReason.get("PartUsedAsTargetAndRangeError");
				if(RangeAndAlreadyUsedAsTargetAttribute.length!==0)
				{
					var listRangeAndAlreadyUsedAsTargetAttribute =UWA.createElement('ul', {'class' : 'listNotMappableAttribute'});
					for(cpt=0;cpt<RangeAndAlreadyUsedAsTargetAttribute.length;cpt++)
					{
						UWA.createElement('li', {
							'text':RangeAndAlreadyUsedAsTargetAttribute[cpt],
						}).inject(listRangeAndAlreadyUsedAsTargetAttribute);
					}

					accordionOthers.addItem({
						title:  MappingManagementNLS.RangeIncompatibilyAndPrtAlreadyUsedReason,
						content: listRangeAndAlreadyUsedAsTargetAttribute,
						selected : false,
						name:"PartUsedAsTargetAndRangeError",
					});
				}

				//sub-accordions for Part read-only
				var NotEditableAttribute = mapNotMappableReason.get("PartNotEditable");
				if(NotEditableAttribute.length !==0)
				{
					var listNotEditableAttribute =UWA.createElement('ul', {'class' : 'listNotMappableAttribute'});
					for(cpt=0;cpt<NotEditableAttribute.length;cpt++)
					{
						UWA.createElement('li', {
							'text':NotEditableAttribute[cpt],
						}).inject(listNotEditableAttribute);
					}

					accordionOthers.addItem({
						title:  MappingManagementNLS.PrtReadOnlyReason,
						content: listNotEditableAttribute,
						selected : false,
						name:"PartNotEditable",
					});

				}

				//sub-accordions for Part already used as target
				var TargetAttribute = mapNotMappableReason.get("PartUsedAsTarget");
				if(TargetAttribute.length!==0)
				{
					var listTargetAttribute =UWA.createElement('ul', {'class' : 'listNotMappableAttribute'});
					for(cpt=0;cpt<TargetAttribute.length;cpt++)
					{
						UWA.createElement('li', {
							'text':TargetAttribute[cpt],
						}).inject(listTargetAttribute);
					}
					accordionOthers.addItem({
						title:  MappingManagementNLS.PrtUsedAsTargetReason,
						content: listTargetAttribute,
						selected : false,
						name:"PartUsedAsTarget",
					});

				}

				//sub-accordion for range error
				var rangeErrorAttribute = mapNotMappableReason.get("RangeError");
				if(rangeErrorAttribute.length!==0)
				{
					var listRangeErrorAttribute =UWA.createElement('ul', {'class' : 'listNotMappableAttribute'});
					for(cpt=0;cpt<rangeErrorAttribute.length;cpt++)
					{
						UWA.createElement('li', {
							'text':rangeErrorAttribute[cpt],
						}).inject(listRangeErrorAttribute);
					}

					accordionOthers.addItem({
						title:  MappingManagementNLS.RangeIncompatibilyReason,
						content: listRangeErrorAttribute,
						selected : false,
						name:"RangeError",
					});

				}

				if(accordionOthers.items.length!==0 )
					accordionNotMappable.addItem({
						title:  MappingManagementNLS.RulesIncompatibilityReason,
						content: othersReasonDiv,
						selected : false,
						name:"others",
					});


				//OKBtn.disable();

				CancelBtn = new Button({
					value : MappingManagementNLS.Cancel,
					id    : 'modalCancelButton',
					className : 'btn default'
				});

				changeDirectionModal = new Modal({
					className: 'add-mapping-modal',
					closable: true,
					header  :modifyDirectionTitle,
					body    : modalbodydiv,
					footer  : [ OKBtn, CancelBtn ]
				});

				CancelBtn.addEvent("onClick", function (e) {
					UWA.log(e);//that.onCancelCalled();
					changeDirectionModal.hide();
				});


				//changeDirectionModal.inject(this.contentDiv);
				changeDirectionModal.show();
				return changeDirectionModal;

			},


			//Build mapping to send at Apply
			BuildMappingToSend : function(attrMappingPartProduct)
			{
				var isInvalidMapping = false;
				var mappingToSend = new Array();
				var i=0;
				for (i=0;i<attrMappingPartProduct.length;i++)
				{
					//exclude remove mapping (mapping find in server and not find in tool will be automatically deleted)
					if(attrMappingPartProduct[i].status.indexOf("Removed")===-1)
					{
						//Check if mapping to send has no invalid mapping
						if(attrMappingPartProduct[i].status === "InvalidStored" || attrMappingPartProduct[i].status === "InvalidNew" || attrMappingPartProduct[i].status === "InvalidDeployed") isInvalidMapping=true;
						else
							mappingToSend.push(attrMappingPartProduct[i]);
					}
				}
				return {isInvalidMapping:isInvalidMapping,mappingToSend:mappingToSend }
			},


			//Refresh UI after applying mapping in database
			onApplySuccessForAttributes : function (mappingElt,attrTable,attrTableNew) {
				var item,attrTable,nbofLines,cptAttr,attrLines,cellAttr,mappingEltAttr,imgSpan,listOfAttributes,attrLineToRemove=new Array(),attrLineInNewTable=new Array(), attrLinesToSwitch=new Array();

				listOfAttributes = mappingElt.AttributeMapping;
				if(attrTable !== undefined)
				{
					nbofLines = attrTable.children.length;
					//for each attribute line in UI
					//treat first table above "+" button => new mapping in this table are linked to modify action
					for(cptAttr=1;cptAttr<nbofLines;cptAttr++)
					{
						attrLines = attrTable.children[cptAttr];
						cellAttr=attrLines.cells[UIview.cellsAttrIndex.deployFlag];
						mappingEltAttr=UIview.retrieveMappingAttrEntryFromAttrLine(attrLines,listOfAttributes);
						//if the status was new, mapping is now deployed in database and cannot be modified directly => remove select and button to edit the mapping
						if(cellAttr.value==="New")
						{
							//set the line as not editable
							if(mappingEltAttr!=undefined)
								UIview.setLineAsNoEditable(attrLines,mappingElt,mappingEltAttr);
							else //New lines with no both attributes defined
								attrLineToRemove.push(attrLines);
						}

						//if the status was new or stored, mapping is now deployed in database => mapping status icon must be set to deployed
						if(cellAttr.value==="New" ||cellAttr.value === "Stored" ||cellAttr.value === "Stored"|| cellAttr.value.indexOf("Modified")!==-1 )
						{
							if(mappingEltAttr!=undefined)
							{

								if(cellAttr.value.indexOf("Modified")!==-1)
								{
									var iCellAction=attrLines.cells[UIview.cellsAttrIndex.action];
									var iconright = iCellAction.getElement(".fonticon-expand-right");
									var iconleft = iCellAction.getElement(".fonticon-expand-left");
									var iconboth = iCellAction.getElement(".fonticon-arrow-combo-horizontal");
									if(iconright!==null && iconright !==undefined) iconright.remove();
									if(iconleft!==null && iconleft !==undefined) iconleft.remove();
									if(iconboth!==null && iconboth !==undefined) iconboth.remove();
									var buttons = iCellAction.getElements('button');
									buttons[1].show();
									buttons[0].hide();
								}
								mappingEltAttr.status="Deployed";
								/**
								 * IR : IR-734449-3DEXPERIENCER2020x
								 * Description : When modifying the direction of a mapping and applying it, the concerned mapping is visible as deployed.
								 *								But if we change the direction again using the old value (which isn't the DB value anymore), the mapping
								 *								isn't seen as 'modified'.
								 * AMN14 : The stored value corresponding to the mapping direction in DB should always be the same as the one displayed
								 * 					(as the apply operation succeed).
								 */
								mappingEltAttr.SynchDirectionBase = undefined;

								UIview.modifyDeployCellSatus(cellAttr, "Deployed", MappingManagementNLS.Deployed, 'fonticon-check', 'green');

							}
						}

						//if the status was "To removed", mapping is now removed from the database => mapping line must be remove in UI
						else if(cellAttr.value.indexOf("Removed")!==-1)
						{
							attrLineToRemove.push(attrLines);
							var index = listOfAttributes.indexOf(mappingEltAttr);
							if(index!=-1)
								listOfAttributes.splice(index,1);
						}


					}

					attrLineToRemove.forEach(function(attrMapping){
						attrMapping.remove();
					});
				}

				//treat table under "+" button, only new mapping
				//As new mapping are added under "+" button, they must be go back up  above "+" button once they are deployed
				if(attrTableNew !== undefined)
				{
					for(cptAttr=0;cptAttr< attrTableNew.children.length;cptAttr++)
					{
						attrLines = attrTableNew.children[cptAttr];
						cellAttr=attrLines.cells[UIview.cellsAttrIndex.deployFlag];
						mappingEltAttr=UIview.retrieveMappingAttrEntryFromAttrLine(attrLines,listOfAttributes);
						if(mappingEltAttr!=undefined)
						{
							//set the line as not editable
							UIview.setLineAsNoEditable(attrLines,mappingElt,mappingEltAttr);
							//set status to deployed
							mappingEltAttr.status="Deployed";
							UIview.modifyDeployCellSatus(cellAttr, "Deployed", MappingManagementNLS.Deployed, 'fonticon-check', 'green');

							//Attribute line must be put in table above "+" button
							attrLinesToSwitch.push(attrLines);
						}
						//if the new is not a complete mapping (VPM attribute or Part attribute has not been defined),just remove the line
						else
							attrLineInNewTable.push(attrLines);
					}

					attrLineInNewTable.forEach(function(attrMapping){
						attrMapping.remove();
					});

					//Switch new line in deployed table (above "+" button)
					if(attrTable !== undefined)
						attrLinesToSwitch.forEach(function(attrMapping){
							attrMapping.inject(attrTable);
						});
				}
			},

			setLineAsNoEditable: function(attrLine,mappingElt,mappingEltAttr)
			{
				var cellVPMAttr=attrLine.cells[UIview.cellsAttrIndex.VPMAttr];
				cellVPMAttr.empty();
				UWA.createElement('p', {
					text   : mappingEltAttr.VPMAttribute.name,
					value  : mappingEltAttr.VPMAttribute.id,
				}).inject(cellVPMAttr);
				cellVPMAttr.value = mappingEltAttr.VPMAttribute.id;

				var cellMatrixAttr = attrLine.cells[UIview.cellsAttrIndex.MatrixAttr];
				cellMatrixAttr.empty();
				UWA.createElement('p', {
					text   : mappingEltAttr.MatrixAttribute.name,
					value  : mappingEltAttr.MatrixAttribute.id,
				}).inject(cellMatrixAttr);
				cellMatrixAttr.value = mappingEltAttr.MatrixAttribute.id;

				//show modify action button
				var cellaction = attrLine.cells[UIview.cellsAttrIndex.action];
				var buttons = cellaction.getElements('button');
				buttons[0].hide();
				buttons[1].show();

				var cellInfo =  attrLine.cells[UIview.cellsAttrIndex.info];
				var buttonsInfo = cellInfo.getElements('button');
				if(buttonsInfo!==undefined && buttonsInfo!==null && buttonsInfo.length>0)
					buttonsInfo[0].hide();
			},


			//Refresh UI after doing reset
			resetForForAttributes : function (mappingElt,attrTable, attrTableNew) {
				var item,attrTable,nbofLines,cptAttr,attrLines,cellAttr,mappingEltAttr,listOfAttributes,attrLinesToRemove=new Array(),vpmAttr,partAttr,VPMTypeRelInfo,MatrixTypeRelInfo,that=this;

				if(mappingElt!=undefined)
				{
					listOfAttributes = mappingElt.AttributeMapping;
					VPMTypeRelInfo = this.listOfCustoVPMType.get(mappingElt.VPMObject);
					MatrixTypeRelInfo = this.listOfCustoPartType.get(mappingElt.MatrixObject);

					if(attrTable !== undefined)
					{
						nbofLines = attrTable.children.length;
						//deployed table (table above "+" button)
						for(cptAttr=1;cptAttr<nbofLines;cptAttr++)
						{
							attrLines = attrTable.children[cptAttr];
							cellAttr=attrLines.cells[UIview.cellsAttrIndex.deployFlag];
							mappingEltAttr=UIview.retrieveMappingAttrEntryFromAttrLine(attrLines,listOfAttributes);

							if(mappingEltAttr === undefined)
								attrLinesToRemove.push(attrLines);

							//if mapping is New or Stored, remove it
							else if(mappingEltAttr.status==="New" || mappingEltAttr.status==="InvalidNew" || mappingEltAttr.status.indexOf("Stored")!==-1)
							{
								attrLinesToRemove.push(attrLines);
								if(mappingEltAttr!=undefined)
								{

									if(mappingEltAttr.status.indexOf("New")!=-1)
										UIview.removeMappingAttrInModel(VPMTypeRelInfo,MatrixTypeRelInfo,mappingEltAttr,listOfAttributes,this.attributeMappingMap, this.listNewSelect);
									else if(mappingEltAttr.status.indexOf("Stored")!==-1)
										UIview.resetStoredMapping(VPMTypeRelInfo,MatrixTypeRelInfo,mappingEltAttr,listOfAttributes,this.attributeMappingMap, this.listNewSelect);

								}
							}
							//if mapping is revive, restore it
							else if(mappingEltAttr.status.indexOf("Removed")!==-1)
							{
								if(mappingEltAttr!=undefined)
								{
									var VPMTypeRelInfo = this.listOfCustoVPMType.get(mappingElt.VPMObject);
									var MatrixTypeRelInfo = this.listOfCustoPartType.get(mappingElt.MatrixObject);
									var listOfMappedMXattr = (this.attributeMappingMap.VPM).get(mappingEltAttr.VPMAttribute.id);
									var listOfMappedVPMattr = (this.attributeMappingMap.MX).get(mappingEltAttr.MatrixAttribute.id);
									var resultInvalidStored = UIview.isInvalidMapping(VPMTypeRelInfo,MatrixTypeRelInfo,mappingEltAttr,listOfMappedMXattr, listOfMappedVPMattr);
									UIview.unsetRemoveAttrLine.call(this,attrLines,resultInvalidStored);
									UIview.addMappingAttrInModel (VPMTypeRelInfo,MatrixTypeRelInfo,mappingEltAttr, listOfAttributes,this.attributeMappingMap,this.listNewSelect, resultInvalidStored.isInvalid)
								}
							}
							else if(mappingEltAttr.status.indexOf("Modified")!==-1)
								UIview.resetModifyMapping.call(that,attrLines,mappingEltAttr,VPMTypeRelInfo,MatrixTypeRelInfo,listOfAttributes);
						}
					}
				}
				//remove all mappings in New table
				if(attrTableNew !== undefined)
				{
					for(cptAttr=0;cptAttr<attrTableNew.children.length;cptAttr++)
					{
						attrLines = attrTableNew.children[cptAttr];
						cellAttr=attrLines.cells[UIview.cellsAttrIndex.deployFlag];
						mappingEltAttr=UIview.retrieveMappingAttrEntryFromAttrLine(attrLines,listOfAttributes);

						attrLinesToRemove.push(attrLines);
						if(mappingEltAttr!=undefined)
						{
							var VPMTypeRelInfo = this.listOfCustoVPMType.get(mappingElt.VPMObject);
							var MatrixTypeRelInfo = this.listOfCustoPartType.get(mappingElt.MatrixObject);
							UIview.removeMappingAttrInModel(VPMTypeRelInfo,MatrixTypeRelInfo,mappingEltAttr,listOfAttributes,this.attributeMappingMap, this.listNewSelect);
						}
					}
				}
				attrLinesToRemove.forEach (function (attrline) {attrline.remove();});
			},



			resetModifyMapping: function(attrLine,mappingEltAttr,VPMTypeRelInfo,MatrixTypeRelInfo,listOfAttributes)
			{
				var that=this;
				if(mappingEltAttr.status.indexOf("Modified")!==-1)
				{
					if(mappingEltAttr!=undefined)
					{
						var deployAttrcell=attrLine.cells[UIview.cellsAttrIndex.deployFlag];
						var actionCell = attrLine.cells[UIview.cellsAttrIndex.action];
						var buttons = actionCell.getElements('button');
						UIview.ResetModifyStatus(mappingEltAttr,actionCell,deployAttrcell);
						var cellside = attrLine.cells[UIview.cellsAttrIndex.side];
						cellside.empty();
						var modifyDirectionButton = new Button({
							className: 'ModifyDirectionButton',
							icon: 'fonticon fonticon-arrow-combo-horizontal',
							attributes: {
								disabled: false,
								'aria-hidden' : 'true',
								title : MappingManagementNLS.modifyDirection,
								value: "BOTH"
							},
							events: {
								onClick: function (e) {
									var changeDirectionModal = UIview.ShowModifyDirectionPanel.call(that,this,deployAttrcell,VPMTypeRelInfo,MatrixTypeRelInfo,listOfAttributes,mappingEltAttr,/*kindOfMapping,*/that.listofTypeRelMapping,null,null,actionCell,buttons);
									changeDirectionModal.inject(that.contentDiv);
								}

							}
						}).inject(cellside);

						UIview.modifyMappingDirection.call(this,VPMTypeRelInfo,MatrixTypeRelInfo,mappingEltAttr.SynchDirectionBase,modifyDirectionButton,mappingEltAttr,listOfAttributes );
						mappingEltAttr.SynchDirectionBase = undefined;
					}
				}
			},

			setDeletedCellStyle : function (iCell) {
				var previousVal = iCell.value,
				previousTxt = iCell.getText();
				if(previousTxt === undefined) previousTxt = previousVal;
				iCell.empty();
				UWA.createElement('del', {
					text   : previousTxt,
					value  : previousVal,
				}).inject(iCell);
			},

			setNormalCellStyle : function (iCell) {
				var previousVal = iCell.value,
				previousTxt = iCell.getText();
				if(previousTxt === undefined) previousTxt = previousVal;
				iCell.empty();
				UWA.createElement('p', {
					text   : previousTxt,
					value  : previousVal,
				}).inject(iCell);
			},
	}



	return UIview;
});

/*global define, widget, document, setTimeout, console, clearTimeout, FileReader*/
/*jslint plusplus: true*/
/*jslint nomen: true*/
/*! Copyright 2017, Dassault Systemes. All rights reserved. */
/*@fullReview  CN1     18/05/15 2019xBeta2 Mapping Widget*/
define('DS/ParameterizationSkeleton/Views/ParamCollaboration/AttributeMapping/MappingLayoutView',
		[
		 'UWA/Core',
		 'UWA/Class/View',
		 'DS/UIKIT/Modal',
		 'DS/UIKIT/Popover',
		 'DS/UIKIT/Mask',
		 'DS/UIKIT/Scroller',
		 'DS/ParameterizationSkeleton/Views/ParametersLayoutViewUtilities',
		 'DS/ParameterizationSkeleton/Views/ParamCollaboration/AttributeMapping/MappingViewUtilities',
		 'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler',
		 'DS/UIKIT/Input/Button',
		 'DS/UIKIT/Input/Select',
		 'DS/UIKIT/Input/Toggle',
		 'DS/UIKIT/Alert',
		 'i18n!DS/ParameterizationSkeleton/assets/nls/MappingManagementNLS',
		 'DS/WAFData/WAFData',
		 ],
		 function (UWA, View,
				 Modal,
				 Popover, Mask, Scroller,
				 ParametersLayoutViewUtilities, MappingViewUtilities,
				 URLHandler,  Button, Select, Toggle, Alert,
				 MappingManagementNLS,WAFData) {

	'use strict';

	var extendedView;

	extendedView = View.extend({
		tagName: 'div',
		className: 'generic-detail',

		init: function (options) {
			var initDate =  new Date();

			options = UWA.clone(options || {}, false);
			this._parent(options);
			this.contentDiv = null;
			this.paramScroller = null;
			this.userMessaging = null;
			this.lastAlertDate = initDate.getTime();
			this.controlDiv = null;
			//this.wdthArrayAttr = [35,10,35,10,10];
			this.wdthArrayAttr = [32,11,32,5,10,10];
			this.divMapping = null;
			//this.divCustoMapping =null;
			//this.custoAccordion=null;
			this.baseAccordion=null;
			//this.selectMapping=null;
			//this.listOfBasicVPMType =[];
			//this.listOfBasicType =[];
			this.listOfCustoVPMType=new Map();
			this.listOfCustoPartType=new Map();
			//this.listOfCustoVPMRel=new Map();
			//this.listOfCustoEBOMRel=new Map();
			this.divBaseMapping;
			this.listofTypeRel;
			this.listofTypeRelMapping;
			//this.mappingScroller=null;
			this.userMessaging=null;
			this.listNewSelect = new Array();
			this.listInvalidMultipeTargetMapping= new Array();
			this.attributeMappingMap = {VPM:new Map(),MX:new Map()};
		},

		setup: function(options) {
			UWA.log('AttributesLayoutView::setup!');
			UWA.log(options);
			//var listoftagsSetup = this.model.get('sixwTagDescription');
		},

		render: function () {
			UWA.log("AttributesLayoutView::render");
			var introDiv,
			mappingDiv,
			that = this;
			/*introText = ParamDataModelingNLS.IntroDivText.format(this.model.get('title'));*/

			this.contentDiv =  UWA.createElement('div', {'id': 'typeMainDiv'});
			Mask.mask(this.contentDiv);
			
			this.userMessaging = new Alert({
                className : 'param-alert',
                closable: true,
                visible: true,
                renderTo : document.body,
                autoHide : true,
                hideDelay : 2000,
                messageClassName : 'warning'
            });

			introDiv = UWA.createElement('div', {'class': 'information'}).inject(this.contentDiv);

			UWA.createElement('p', {
				text   : MappingManagementNLS.intro,
				'class': 'font-3dslight'//'font-3dsbold'
			}).inject(introDiv);

			this.controlDiv = ParametersLayoutViewUtilities.createApplyResetToolbar.call(this, this.contentDiv, true,
					this.applyParams.bind(this), this.resetParams.bind(this));
	
			this.container.setContent(this.contentDiv);
			this.listenTo(this.collection, {
				onSync: that.onCompleteRequestMapping
			});

			return this;
		},




		onCompleteRequestMapping : function() {

			UWA.log("MappingLayoutView::onCompleteRequestMapping");
			var resultDiv;
			var that=this;
			var MatrixType, VPMType, side, line,i,j, kindOfMapping, listofAttributesMapping, TypeName, DerivedFrom , listOfAttributeInfos, isBaseMapping, isDeployed;
			var AddMappingAttributeButton,divMapping,MatrixTypeRelInfo,VPMTypeRelInfo,attrtbodyNew;


			this.divMapping = UWA.createElement('div', {
				'class': 'DivMappingScroll',
			}).inject(this.contentDiv);
			
				
					
			/*this.divBaseMapping = UWA.createElement('div', {
				'class': 'DivMapping',
			}).inject(this.divMapping);


			var labelBaseMapping = UWA.createElement('div', {
				'class': 'labelMapping',
				'text': 'Base Mapping',
			}).inject(this.divBaseMapping);*/

			/*this.divCustoMapping = UWA.createElement('div', {
				'class': 'DivMapping',
			}).inject(this.divMapping);*/

			/*var labelCustoMapping = UWA.createElement('div', {
				'class': 'labelMapping',
				'text': 'Custo Mapping',
			}).inject(this.divCustoMapping);*/


			//Recupération des types et leur attributs
			this.listofTypeRel = this.collection._models[0]._attributes.TypeRelInfo;
			this.listofTypeRelMapping = this.collection._models[0]._attributes.TypeRelMapping;

			for (i = 0; i < this.listofTypeRel.length; i++)
			{
				TypeName = this.listofTypeRel[i].id;
				DerivedFrom=this.listofTypeRel[i].derivedFrom;
				listOfAttributeInfos = this.listofTypeRel[i].AttributeInfo;

				if(DerivedFrom === "VPMReference" || TypeName==="VPMReference")
					this.listOfCustoVPMType.set(TypeName,this.listofTypeRel[i]);
				else if (DerivedFrom === "Part" || TypeName==="Part")
					this.listOfCustoPartType.set(TypeName,this.listofTypeRel[i]);
				/*else if (DerivedFrom === "VPMInstance"|| TypeName==="VPMInstance")
					this.listOfCustoVPMRel.set(TypeName,this.listofTypeRel[i]);
				else if (DerivedFrom === "EBOM"|| TypeName==="EBOM")
					this.listOfCustoEBOMRel.set(TypeName,this.listofTypeRel[i]);*/
			}

			resultDiv = UWA.createElement('div', {'class': 'result'}).inject(this.contentDiv);

			//this.baseAccordion = ParametersLayoutViewUtilities.createFamilyUIKITAccordion(/*this.divBaseMapping*/this.divMapping);
			//this.custoAccordion = ParametersLayoutViewUtilities.createFamilyUIKITAccordion(this.divCustoMapping);


			//First manage mapping only between Product/part=> typeRelMapping must be equald to 1
			//for (i = 0; i < this.listofTypeRelMapping.length; i++) 
			if(this.listofTypeRelMapping.length === 1)
			{

				
				MatrixType = this.listofTypeRelMapping[0].MatrixObject;
				VPMType = this.listofTypeRelMapping[0].VPMObject;
				side  = this.listofTypeRelMapping[0].SynchDirection;
				kindOfMapping = this.listofTypeRelMapping[0].KindOfMapping;
				listofAttributesMapping = this.listofTypeRelMapping[0].AttributeMapping;
				isBaseMapping = this.listofTypeRelMapping[0].isBaseMapping;
				status = this.listofTypeRelMapping[0].status;

				VPMTypeRelInfo = this.listOfCustoVPMType.get(VPMType);
				MatrixTypeRelInfo = this.listOfCustoPartType.get(MatrixType);


				var mappingTable = MappingViewUtilities.buildMappingLine.call(that,this.listofTypeRelMapping[0]);


				//attribute table

				var attributeMappingDiv = UWA.createElement('div', {
					'class': 'attributeMapping'
				}).inject(this.divMapping );//table-bordered

				var attributesTable = MappingViewUtilities.buildAttributeTable.call(that,VPMTypeRelInfo,MatrixTypeRelInfo,kindOfMapping,listofAttributesMapping,that.wdthArrayAttr,that.listofTypeRelMapping);
				attributesTable.inject(attributeMappingDiv);
				
				var attributesTableNew = UWA.createElement('table', {
					'class': 'attrTableMappingNew table table-condensed'
				});

				attrtbodyNew =  UWA.createElement('tbody', {
					'class': 'attrstbodyNewMapping'
				}).inject(attributesTableNew);
				
				var attrtbody = attributesTable.getElement(".attrstbodyMapping")
				
				var AddMappingButton = new Button({
					className: 'AddMappingButton',
					icon: 'plus-circled',
					attributes: {
						disabled: false,
						'aria-hidden' : 'true',
						title : MappingManagementNLS.AddAttributeMappingTooltip,
					},
					events: {
						//onClick: that.ShowAddMappingAttributePanel.bind(that,this.listofTypeRelMapping[i],side,kindOfMapping,attributesTable.getElement(".attrstbodyMapping"))
						
						onClick: that.AddNewAttributeMappingLine.bind(that, this.listofTypeRelMapping[0],kindOfMapping/*,attrtbodyNew*/,attrtbody)
					
					}
				}).inject(attributeMappingDiv);
				
				
			   attributesTableNew.inject(attributeMappingDiv);

			


				//addAttributeMappingIcon.addEvent('click', that.ShowAddMappingAttributePanel.bind(that,VPMType,MatrixType,side,kindOfMapping,attributesTable.getElement(".attrstbodyMapping")));

			//	if(isBaseMapping)
					/*this.baseAccordion.addItem({
						title:  mappingTable,
						content: attributeMappingDiv,
						selected : true,
						name:VPMType+"_"+MatrixType,
					});*/
				/*else
					this.custoAccordion.addItem({
						title:  mappingTable,
						content: attributeMappingDiv,
						selected : false,
						name:VPMType+"_"+MatrixType,
					});*/
			}


			this.paramScroller = new Scroller({
                element: this.divMapping,
            }).inject(this.contentDiv);

			
			
			var divAddMapping = UWA.createElement('div', {
				'class': 'AddMapping'//'font-3dsbold'
			}).inject(this.contentDiv);
			
			

			//this.selectMapping = MappingViewUtilities.createAddMappingToolBar.call(this, divAddMapping,  this.ShowAddMappingPanel.bind(this));


			Mask.unmask(this.contentDiv);
		},


		
		
		resetParams : function () {
			UWA.log("applyReset");
			var that=this;
			
			 Mask.mask(this.contentDiv);
			var url = URLHandler.getURL() + "/resources/MappingWS/mapping/resetmapping?tenant=" + URLHandler.getTenant();

			WAFData.authenticatedRequest(url, {
				timeout: 100000,
				method: 'POST',
				//data: JSON.stringify(datatoSend),
				type: 'json',
				//proxy: 'passport',

				headers: {
					'Content-Type' : 'application/json',
					'Accept' : 'application/json'
				},

				onFailure : function (json) {
					that.onResetFailure.call(that,json); 
				},

				onComplete: function(json) {
					that.onResetSuccess.call(that,json);
				}

			});


			//this.UpdateCommonParamsOnServer();
		},
		
		onResetFailure : function (json) {
			UWA.log(json);
			Mask.unmask(this.contentDiv);
			// Mask.unmask(this.contentDiv);//Rb0afx
			// this.userMessaging.add({ className: "error", message: ParamDataModelingNLS.deployFailureMsg });
			this.userMessaging.add({ className: "warning", message: MappingManagementNLS.ErrorReset });
			//ParamLayoutUtilities.updateIcon(false, theImageCell);
		},


		applyParams : function () {
			UWA.log("applyParams");
			var datatoSend, that=this;
			var mappingToSend = new Array();
			var attrMappingPartProduct = this.collection._models[0]._attributes.TypeRelMapping[0].AttributeMapping;
			var i=0;
			Mask.mask(this.contentDiv);
			var typeVPMInfo = this.listOfCustoVPMType.get("VPMReference");
			var typePartInfo = this.listOfCustoPartType.get("Part");
			
			var resultMappingToSend = MappingViewUtilities.BuildMappingToSend(attrMappingPartProduct);
			
			if( resultMappingToSend.isInvalidMapping)
			{
				Mask.unmask(this.contentDiv);
				this.userMessaging.add({ className: "error", message: MappingManagementNLS.InvalidMapping });
			}
			else
			{
				datatoSend = {
						AttributeMapping : resultMappingToSend.mappingToSend//this.collection._models[0]._attributes.TypeRelMapping
				};


				var url = URLHandler.getURL() + "/resources/MappingWS/mapping/postmapping?tenant=" + URLHandler.getTenant(),datatoSend;

				WAFData.authenticatedRequest(url, {
					timeout: 250000,
					method: 'POST',
					data: JSON.stringify(datatoSend),
					type: 'json',
					//proxy: 'passport',

					headers: {
						'Content-Type' : 'application/json',
						'Accept' : 'application/json'
					},

					onFailure : function (json) {
						that.onApplyFailure.call(that,json); 
					},

					onComplete: function(json) {
						that.onApplySuccess.call(that,json);
					}

				});
			}

			//this.UpdateCommonParamsOnServer();
		},

		onApplyFailure : function (json) {
			UWA.log(json);
			// Mask.unmask(this.contentDiv);//Rb0afx
			// this.userMessaging.add({ className: "error", message: ParamDataModelingNLS.deployFailureMsg });
			 Mask.unmask(this.contentDiv);
			this.userMessaging.add({ className: "error", message: MappingManagementNLS.applyErrorMessage });
			//ParamLayoutUtilities.updateIcon(false, theImageCell);
		},

		onApplySuccess : function (json) { //Rb0afx                      
		
			var cpt=0,cptAttr=0,item,title,line,cell,nbofLines,mappingElt,imgSpan, itemToRemove = new Array(), that=this, currDate, currTime, diffDate;
			 Mask.unmask(this.contentDiv);
			currDate = new Date();
			currTime = currDate.getTime();
			diffDate = currTime - this.lastAlertDate;
			this.lastAlertDate = currTime;
			
			this.lastAlertDate = currTime;
			if (diffDate >= 2000) {
                this.userMessaging.add({ className: "success", message: MappingManagementNLS.applySuccessMessage });
            }


			/*for(cpt=0;cpt<this.custoAccordion.items.length;cpt++)
			{
		
				item = this.custoAccordion.getItem(cpt);
				title = item.title.children[1];
				line = title.getElementsByTagName("tr");
				cell = line[0].cells[5];
				mappingElt=MappingViewUtilities.retrieveMappingEntry(line[0].cells[1].value,line[0].cells[3].value,that.listofTypeRelMapping);
				if(cell.value==="NewNotDeployed" ||cell.value === "StoredButNotDeployed")
				{
					cell.empty();
					cell.value="Deployed";
					imgSpan = ParametersLayoutViewUtilities.buildImgSpan('check', '1.5', 'green');
					imgSpan.inject(cell);
					if(mappingElt!=undefined)
						mappingElt.status="deployed";
				}
				else if(cell.value==="DeletedNotDeployed")
				{
					itemToRemove.push(item);
					MappingViewUtilities.removeMappingTypeOrRel(mappingElt,that.collection._models[0]._attributes.TypeRelMapping);
				}

				that.onApplySuccessForAttributes(mappingElt,item);

			};
			
			itemToRemove.forEach(function(itemAccordion){
				that.custoAccordion.removeItem(itemAccordion);
				var index = that.custoAccordion.items.indexOf(itemAccordion);
				if (index>-1) {
					that.custoAccordion.items.splice(index, 1);
				}
			});*/

			
			var attrTable = this.contentDiv.getElement(".attrstbodyMapping");
			var attrTableNew = this.contentDiv.getElement(".attrstbodyNewMapping");
			//for(cpt=0;cpt<this.baseAccordion.items.length;cpt++)
			 
			//{
				//item = this.baseAccordion.getItem(cpt);
				//title = item.title.children[1];
				//line = title.getElementsByTagName("tr");
				//cell = line[0].cells[5];
			//	mappingElt=MappingViewUtilities.retrieveMappingEntry(line[0].cells[1].value,line[0].cells[3].value,this.listofTypeRelMapping);
				mappingElt=this.listofTypeRelMapping[0];
				MappingViewUtilities.onApplySuccessForAttributes(mappingElt,attrTable/*item.elements.content.children[0]*/,attrTableNew);

		//	}
			
			while(this.listNewSelect.length > 0) {
				this.listNewSelect.pop();
			}
		},

		
		




		onResetSuccess : function () {
			
			var cpt=0,cptAttr=0,item,title,imgSpan,line,cell,mappingElt,mappingEltAttr,itemToRemove=new Array(),that=this;
			Mask.unmask(this.contentDiv);
			//Check type and attribute mapping for Custo accordion
			/*for(cpt=0;cpt<this.custoAccordion.items.length;cpt++)
			{
				item = this.custoAccordion.getItem(cpt);
				title = item.title.children[1];
				line = title.getElementsByTagName("tr");
				cell = line[0].cells[5];
				mappingElt=MappingViewUtilities.retrieveMappingEntry(line[0].cells[1].value,line[0].cells[3].value,this.listofTypeRelMapping);
				
				if(cell.value==="NewNotDeployed" ||cell.value === "StoredButNotDeployed")
				{
					MappingViewUtilities.removeMappingTypeOrRel(mappingElt,this.collection._models[0]._attributes.TypeRelMapping);
					itemToRemove.push(item);
				}
				else if(cell.value==="DeletedNotDeployed")
					MappingViewUtilities.unsetRemoveTypeRelLine.call(this,line[0],item,mappingElt);
				
				
				this.confirmationModalShowForAttributes.call(that,mappingElt,item);
			}
			
			itemToRemove.forEach(function(itemAccordion){
				that.custoAccordion.removeItem(itemAccordion);
				var index = that.custoAccordion.items.indexOf(itemAccordion);
				if (index>-1) {
					that.custoAccordion.items.splice(index, 1);
				}
			});*/
			
			//Check only attribute mapping for base Accordion
			//for(cpt=0;cpt<this.baseAccordion.items.length;cpt++)
			//{
				//item = this.baseAccordion.getItem(cpt);
				//title = item.title.children[1];
				//line = title.getElementsByTagName("tr");
				//cell = line[0].cells[5];
				//mappingElt=MappingViewUtilities.retrieveMappingEntry(line[0].cells[1].value,line[0].cells[3].value,this.listofTypeRelMapping);
				var attrTable = this.contentDiv.getElement(".attrstbodyMapping");
				var attrTableNew = this.contentDiv.getElement(".attrstbodyNewMapping");
				mappingElt=this.listofTypeRelMapping[0];
				MappingViewUtilities.resetForForAttributes.call(that,mappingElt,attrTable/*item.elements.content.children[0]*/,attrTableNew);
			
			//}
			

			while(this.listNewSelect.length > 0) {
				this.listNewSelect.pop();
			}
		},
		
		
	

	
		ShowAddMappingAttributePanel: function (typeMapping,parentSide,kindOfMapping,attrtbody)
		{
			
			var result = MappingViewUtilities.PopulateAddMappingAttributePanel.call(this,typeMapping,parentSide,kindOfMapping,attrtbody,this.listOfCustoVPMType,this.listOfCustoPartType,this.listofTypeRelMapping,this.wdthArrayAttr);
			result[0].inject(this.contentDiv);
			result[0].show();
		},
		
		
		AddNewAttributeMappingLine: function (typeMapping,kindOfMapping,/*attrtbodyNew,*/attrtbody)
		{
			var VPMTypeRelInfo = this.listOfCustoVPMType.get(typeMapping.VPMObject);
			

			var MatrixTypeRelInfo = this.listOfCustoPartType.get(typeMapping.MatrixObject);
			
			
			var lineAttr= MappingViewUtilities.addNewAttributeLine.call(this,VPMTypeRelInfo, MatrixTypeRelInfo,kindOfMapping /*,attrtbodyNew*/, attrtbody,typeMapping.AttributeMapping,this.wdthArrayAttr, this.listofTypeRelMapping);
			lineAttr.newline.inject(/*attrtbodyNew*/attrtbody);
		},
		
	


		/*ShowAddMappingPanel: function () {

			var i, addMappingSelection, addMappingChoice,addMappingTitle, labelVPM, labelENG, result,addMappingModal,selectVPM,selectMatrix,emptyListMessage,
			toggleVPM,divVPMMessage,VPMPopover,toggleENG,divENGMessage,ENGPopover,toggleBoth,divBothMessage,BothPopover,OkButton,CancelButton,typeMapping,
			typeRelMappingMap,typeRelMappingMapVPM,typeRelMappingMapMX, directionAvailableMap = new Map(),listOfVPMObject=[],listOfENGObject=[],
			sizeVPMObj,sizeMxObj, that=this ;

			addMappingSelection =  this.selectMapping.getSelection();
			addMappingChoice = addMappingSelection[0].value;

			if(addMappingChoice === "1")
			{
				addMappingTitle = "Add Mapping Custo Type";
				labelVPM = "select Custo VPM Type";
				labelENG = "select Custo Part Type";
				this.listOfCustoVPMType.forEach (function (value,key,map) { if(key !== "VPMReference") listOfVPMObject.push(key)});
				this.listOfCustoPartType.forEach (function (value,key,map) {if(key !== "Part") listOfENGObject.push(key)});
				typeMapping ="TYPE";
			}
			else if(addMappingChoice === "2")
			{
				addMappingTitle= "Add Mapping Custo Relation";
				labelVPM = "select Custo VPM Relation";
				labelENG = "select Custo ENG Relation";	
				this.listOfCustoVPMRel.forEach (function (value,key,map) {if(key !== "VPMInstance") listOfVPMObject.push(key)});
				this.listOfCustoEBOMRel.forEach (function (value,key,map) {if(key !== "EBOM") listOfENGObject.push(key)});
				typeMapping ="RELATION";
			}

			if(addMappingChoice != "")
			{
				sizeVPMObj = listOfVPMObject.length;
				sizeMxObj = listOfENGObject.length;
				if(sizeVPMObj===0 || sizeMxObj===0)
				{
					emptyListMessage="";
					if(sizeVPMObj===0)				
						emptyListMessage += "There is no derivative VPM "+ typeMapping.toLowerCase()+ " to map";
					else
						emptyListMessage += "There is no derivative Matrix "+ typeMapping.toLowerCase()+ " to map";
					new Alert({
						visible: true,
						messages: [
						           { message: emptyListMessage, className: "primary" },
						           ]
					}).inject(this.contentDiv);
				}

				else 
				{
					result = MappingViewUtilities.BuildAddMappingPanel( addMappingTitle, "select VPM "+typeMapping.toLowerCase(), "select Matrix "+typeMapping.toLowerCase(), labelVPM, labelENG);
					addMappingModal = result[0];
					selectVPM = result[1].selectVPM;
					selectMatrix = result[1].selectMatrix;
					toggleVPM = result[2].toggle;
					divVPMMessage = result[2].div;
					VPMPopover=  result[2].popover;
					toggleENG= result[3].toggle;
					divENGMessage = result[3].div;
					ENGPopover= result[3].popover;
					toggleBoth= result[4].toggle;
					divBothMessage = result[4].div;
					BothPopover = result[4].popover;
					OkButton = result[5].OKButton;
					CancelButton = result[5].CancelButton;

					for (i=0; i<listOfVPMObject.length;i++)
						selectVPM.addOption(listOfVPMObject[i]);

					for (i=0; i<listOfENGObject.length;i++)
						selectMatrix.addOption(listOfENGObject[i]);	

					typeRelMappingMap = MappingViewUtilities.buildTypeRelMappedWith(that.listofTypeRelMapping,typeMapping)
					typeRelMappingMapVPM = typeRelMappingMap.VPM;
					typeRelMappingMapMX = typeRelMappingMap.MX;


					selectVPM.addEvent("onChange", function (e) {
						if( (selectVPM.getSelection(false)).length!=0) 
						{
							selectMatrix.enable();
							MappingViewUtilities.enableMatrixTypeRelAccordingRules(selectVPM,selectMatrix,typeRelMappingMapVPM,typeRelMappingMapMX,directionAvailableMap);
						}
						else
						{
							selectMatrix.disable();
							selectMatrix.select(0,true);
						}
						MappingViewUtilities.modifyToggleAccordingAvailableDirection( selectVPM,selectMatrix,OkButton,toggleBoth,toggleVPM,toggleENG,directionAvailableMap,divBothMessage,BothPopover,divVPMMessage,VPMPopover,divENGMessage,ENGPopover);
					});


					selectMatrix.addEvent("onChange", function (e) {
						MappingViewUtilities.modifyToggleAccordingAvailableDirection( selectVPM,selectMatrix,OkButton,toggleBoth,toggleVPM,toggleENG,directionAvailableMap,divBothMessage,BothPopover,divVPMMessage,VPMPopover,divENGMessage,ENGPopover);
					});



					OkButton.addEvent("onClick", function (e) {

						var SelectedVPMTypeOpt, VPMType, SelectedPartTypeOpt, PartType,  lineMapping, type, VPMObject, MatrixObject, txtSide, side, attributesTable, deleteIcon,deleteAction, deleteSpan, removeLineMappingButton, removePropMappingButton, accordionName, newMappingElt,mappingTable;

						UWA.log(e);//that.onCancelCalled();
						SelectedVPMTypeOpt = selectVPM.getSelection();
						VPMType = SelectedVPMTypeOpt[0].value;

						SelectedPartTypeOpt = selectMatrix.getSelection();
						PartType = SelectedPartTypeOpt[0].value;

						txtSide;
						if(toggleBoth.isChecked())
							txtSide="BOTH";
						else if (toggleVPM.isChecked())
							txtSide="VPM_To_MX";
						else if (toggleENG.isChecked())
							txtSide="MX_To_VPM";
						else txtSide="BOTH";

						//Add new Mapping Line in the map
						newMappingElt = {AttributeMapping: Array(0), KindOfMapping: typeMapping, VPMObject: VPMType, MatrixObject: PartType, SynchDirection: txtSide, status:"NewNotDeployed",isBaseMapping:"false"};
						that.collection._models[0]._attributes.TypeRelMapping.push(newMappingElt);


						mappingTable = MappingViewUtilities.buildMappingLine.call(that,newMappingElt);


						var attributeMappingDiv = UWA.createElement('div', {
							'class': 'attributeMapping'
						});//table-bordered

						//attribute table
						var attributesTable = MappingViewUtilities.buildAttributeTable.call(that,VPMType,MatrixType,typeMapping,[],that.wdthArrayAttr);
						attributesTable.inject(attributeMappingDiv);

						var addAttributeMappingIcon = UWA.createElement('span', {
							'class': 'fonticon fonticon-1,5x fonticon-plus',
							'title': 'add attribute mapping',
							//'onclick': 'ShowAddMappingAttributePanel()'
						}).inject(attributeMappingDiv);//table-bordered

						addAttributeMappingIcon.addEvent('click', that.ShowAddMappingAttributePanel.bind(that,VPMType,PartType,txtSide,typeMapping,attributesTable.getElement(".attrstbodyMapping")));

						accordionName = VPMType+"_"+PartType;

						that.custoAccordion.addItem({
							title:  mappingTable,
							content: attributeMappingDiv,
							selected : false,
							name:accordionName,
						});

						addMappingModal.hide();
					});

					CancelButton.addEvent("onClick", function (e) {
						UWA.log(e);//that.onCancelCalled();
						addMappingModal.hide();
					});

					addMappingModal.inject(this.contentDiv);
					addMappingModal.show();



				}
			}
		},*/
		
		
		



		//show: function () {},
		destroy : function() {
			this.stopListening();
			this._parent.apply(this, arguments);
		}
	});

	return extendedView;
});

/*@fullReview  ZUR 15/07/24 2016xFD01*/
/*@quickReview ZUR 15/11/23 2017x Param Skeleton*/
/*global define*/
define(
    'DS/ParameterizationSkeleton/Utils/PropagationWebServices',
    [
        'UWA/Core',
        'DS/WAFData/WAFData',
        'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler'
    ],
    function(UWA, WAFData, URLHandler) {

        'use strict';

        var wsUtils = {

            findTypes : function (onSearchFailure, onSearchSuccess, onSearchTimeOut) {
                var sIndexAPIUrl = "";
                if(this.indexAPIUrl)
                    sIndexAPIUrl="?indexURL="+this.indexAPIUrl;
                var url = URLHandler.getURL() + "/resources/dictionary/typesExtensions" + sIndexAPIUrl;
                var that = this;
                UWA.log("PropagationWebServices::findTypes call");
                WAFData.authenticatedRequest(url, {
                    timeout: 180000,
                    method: 'GET',
                    type: 'json',
                    //proxy: 'passport',

                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                    },

                    onFailure : function (resError,Response,resHeaders) {
                        /*var message = Response.message;
                        if (data && typeof data === 'object') { // null = 'object'
                            if (data.error && data.error.message) {
                                message = data.error.message;
                            }
                            else if (data.message) {
                                message = data.message;
                            }
                        }
                        else if (typeof object === 'string') {
                            if (object.startsWith('NetworkError:')) {
                                if (object.endsWith('return ResponseCode with value "0".')) {
                                    message = "There is no Internet connection.";
                                }
                                else if (object.endsWith('return ResponseCode with value "401".') ||
                                        object.endsWith('return ResponseCode with value "403".')) {
                                    message = "You are unauthorized to access the resource, please refresh the webpage to login and try again.";
                                }
                                else {
                                    message = "An error is returned from web service.";
                                }
                            }
                            else if (object === 'null') {
                                message = "An error is returned from web service.";
                            }
                        }*/
                        onSearchFailure(that,resError);
                    },

                    onComplete: function(Response) {
                        onSearchSuccess(that, Response);
                    },
                    onTimeout: function() {
                        onSearchTimeOut(that);
                    }
                });
            },

            PropagAtt : function (payload, admin, onPropagFailure, onPropagSuccess, onPropagTimeOut) {
                var url = URLHandler.getURL() + "/resources/dictionary/propagateProperties?admin=" + admin;
                var that=this;
                UWA.log("PropagationWebServices::bindTypes call");
                WAFData.authenticatedRequest(url, {
                    timeout: 180000,
                    method: 'POST',
                    data: JSON.stringify(payload),
                    type: 'json',
                    //proxy: 'passport',

                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                    },

                    onFailure : function (resError,Response,resHeaders) {
                        /*var message = object;
                        if (data && typeof data === 'object') { // null = 'object'
                            if (data.error && data.error.message) {
                                message = data.error.message;
                            }
                            else if (data.message) {
                                message = data.message;
                            }
                        }
                        else if (typeof object === 'string') {
                            if (object.startsWith('NetworkError:')) {
                                if (object.endsWith('return ResponseCode with value "0".')) {
                                    message = "There is no Internet connection.";
                                }
                                else if (object.endsWith('return ResponseCode with value "401".') ||
                                        object.endsWith('return ResponseCode with value "403".')) {
                                    message = "You are unauthorized to access the resource, please refresh the webpage to login and try again.";
                                }
                                else {
                                    message = "An error is returned from web service.";
                                }
                            }
                            else if (object === 'null') {
                                message = "An error is returned from web service.";
                            }
                        }*/
                        onPropagFailure(that, resError);
                    },

                    onComplete: function(Response) {
                        onPropagSuccess(that, Response);
                    },
                    onTimeout: function() {
                        onPropagTimeOut(that);
                    }
                });
            }
        };

        return wsUtils;

    }
);

define('DS/ParameterizationSkeleton/Views/ParameterizationXEngineering/PartNumberingViewUtilities',
	[
		'UWA/Core',
		'DS/UIKIT/Input/Select',
		'DS/UIKIT/Modal',
		'DS/UIKIT/Input/Text',
		'DS/UIKIT/Input/Number',
		'DS/ParameterizationSkeleton/Views/ParametersLayoutViewUtilities',
		'DS/WAFData/WAFData',
		'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler',
		'DS/ParameterizationSkeleton/Views/ParameterizationXEngineering/ParameterizationXEngineerConstants',
		'DS/ParameterizationSkeleton/Views/ParameterizationXEngineering/XENGModal',
		'i18n!DS/ParameterizationSkeleton/assets/nls/XEngineeringNLS'
	],
	function (UWA,
		Select,
		Modal,
		Text,
		Number,
		ParametersLayoutViewUtilities,
		WAFData,
		URLHandler,
		ParameterizationXEngineerConstants,
		XENGModal,
		XEngineeringNLS) {

	'use strict';

	var LEFT_ALIGNMENT = 'left';
	var RIGHT_ALIGNMENT = 'right';
	var HTML_BOLD_FORMAT = 'h5';
	var HTML_PARAG_FORMAT = null;
	var partNumberTable = UWA.createElement('table', {
			'class': 'partNumberTableMapping table table-condensed'
		});
	var widthTable = ParameterizationXEngineerConstants.WIDTH_ARRAY;

	var physicalProductAttributesValues = {};
	var avoidDupCounterUserSelectionRequired = "";
	var strategySelectorCombobox = [{
			label: XEngineeringNLS.UserDefined,
			value: "UserDefined"
		}
		/*,{
		label: XEngineeringNLS.External,
		value: "External"
		}*/
	];

	var strategyCombobox;

	var partNumberView = {

		initVariable: function () {
			this.cellsIndex = {
				"name": 0,
				"order": 1,
				"type": 2,
				"value": 3,
				"action": 4,
				"counterUnicityIndex": 5,
				"deployFlag": 6,
			};
		},

		physicalProductAttributes: function (attributeMapping, avoidDupCounterValue) {
			physicalProductAttributesValues = attributeMapping;
			avoidDupCounterUserSelectionRequired = avoidDupCounterValue;
		},

		buildImgSpan: function (iconChoice, iconSize, iconColor, title) {
			var imgClass = 'fonticon fonticon-' + iconSize + 'x fonticon-' + iconChoice,
			imgSpan = UWA.createElement('span', {
					'class': imgClass,
					'title': title
				});

			imgSpan.setStyle("color", iconColor);
			return imgSpan;
		},

		buildTextTableCell: function (alignment, cellWidth, row, cellFormat, cellTest, colspan) {
			var colspanValue = (colspan) ? colspan : '1';
			var iCell = UWA.createElement('td', {
					'Align': alignment,
					'width': cellWidth,
					'colspan': colspanValue,
					'class': 'partNumberingField' // font-3dsbold
				}).inject(row);

			if (cellFormat) {
				UWA.createElement(cellFormat, {
					text: cellTest
				}).inject(iCell);
			} else {
				iCell.appendText(cellTest);
			}
			return iCell;
		},

		buildAttributeTable: function (data) {

			var pNFieldbody = UWA.createElement('tbody', {
					'class': 'partNumberFieldbody'
				}).inject(partNumberTable);

			var fieldInfo;
			/*fieldInfo = partNumberView.buildPNStrategyRow(data);
			fieldInfo.inject(pNFieldbody);*/

			fieldInfo = partNumberView.buildPNFormulaRow(data);
			fieldInfo.inject(pNFieldbody);

			fieldInfo = partNumberView.buildPNTableHeading();
			fieldInfo.inject(pNFieldbody);

			return partNumberTable;
		},

		/*buildStrategyCombombox: function(iCell, value) {
		var that = this;
		strategyCombobox = new Select({
		nativeSelect: true,
		placeholder: false,
		multiple: false,
		options: strategySelectorCombobox,
		});

		strategyCombobox.inject(iCell);

		strategyCombobox.setValue(value);
		strategyCombobox.addEvent("onChange", function(e) {
		partNumberView.updateStrategy(strategyCombobox.getValue()[0], ParameterizationXEngineerConstants.NEW_NOT_DEPLOYED);
		});
		},*/

		/*buildPNStrategyRow: function(data) {
		var fieldInfo = UWA.createElement('tr', {
		'class': 'partNumberStrategyMapping'
		});

		fieldInfo.value = (data[ParameterizationXEngineerConstants.STRATEGY_CELL] !== "") ? data[ParameterizationXEngineerConstants.STRATEGY_CELL] : "UserDefined";

		var iCell;

		partNumberView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.name], fieldInfo, HTML_PARAG_FORMAT, XEngineeringNLS.Strategy);


		iCell = UWA.createElement('td', {
		'width': widthTable[this.cellsIndex.order],
		'align': LEFT_ALIGNMENT,
		'class': 'partNumberingField font-3dslight'// font-3dsbold
		});

		var imgSpan = partNumberView.buildImgSpan('info', "2.5", "black", XEngineeringNLS.StrategyRelatedInfo);
		imgSpan.inject(iCell);

		iCell.inject(fieldInfo);


		partNumberView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.type], fieldInfo, HTML_PARAG_FORMAT, "");

		iCell = UWA.createElement('td', {
		'width': widthTable[this.cellsIndex.type].toString(),
		'align': LEFT_ALIGNMENT,
		'colpan': '2',
		'class': 'partNumberingField font-3dslight'// font-3dsbold
		});

		partNumberView.buildStrategyCombombox(iCell, data.Strategy, widthTable[this.cellsIndex.value])
		iCell.inject(fieldInfo);


		partNumberView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.action], fieldInfo, HTML_PARAG_FORMAT, "");

		iCell = UWA.createElement('td', {
		'width': widthTable[this.cellsIndex.deployFlag],
		'align': RIGHT_ALIGNMENT,
		'title': XEngineeringNLS.deployStatus,
		'class': 'partNumberingField font-3dslight'// font-3dsbold
		});

		var imgSpan = partNumberView.buildImgSpan('check', '2.5', 'green', XEngineeringNLS.Deployed);
		imgSpan.inject(iCell);
		iCell.value = "success";
		iCell.inject(fieldInfo);

		return fieldInfo;
		},*/

		buildPNFormulaRow: function (data) {
			var fieldInfo,iCell;

			fieldInfo = UWA.createElement('tr', {
					'class': 'partNumberFormulaMapping',
					'id': 'partNumberFormulaMapping'
				});

			fieldInfo.value = [];

			partNumberView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.name], fieldInfo, HTML_PARAG_FORMAT, XEngineeringNLS.Formula);

			var imgClass = 'fonticon fonticon-' + '2.5' + 'x  fonticon-info';

			if (data[ParameterizationXEngineerConstants.BUSINESS_LOGIC]) {

				iCell = UWA.createElement('td', {
						'Align': LEFT_ALIGNMENT,
						'width': widthTable[this.cellsIndex.order],
						'class': 'partNumberingField font-3dslight' // font-3dsbold
					}).inject(fieldInfo);

				UWA.createElement(HTML_PARAG_FORMAT, {
					'class': imgClass,
					'title': XEngineeringNLS.FormulaTooltip
				}).inject(iCell);

			} else {
				partNumberView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.name], fieldInfo, HTML_PARAG_FORMAT, "");
			}

			iCell = partNumberView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.type], fieldInfo, HTML_BOLD_FORMAT, "[" + XEngineeringNLS.freeValue + "]", "4");
			iCell.value = ParameterizationXEngineerConstants.FORMULA_CELL;

			iCell = UWA.createElement('td', {
					'width': widthTable[this.cellsIndex.deployFlag],
					'align': RIGHT_ALIGNMENT,
					'title': XEngineeringNLS.deployStatus,
					'class': 'partNumberingField font-3dslight' // font-3dsbold
				});

			var imgSpan = partNumberView.buildImgSpan('check', '2.5', 'green', XEngineeringNLS.Deployed);
			imgSpan.inject(iCell);
			iCell.value = "success";
			iCell.inject(fieldInfo);

			return fieldInfo;
		},

		buildPNTableHeading: function () {
			var fieldInfo;

			fieldInfo = UWA.createElement('tr', {
					'class': 'success'
				});

			partNumberView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.name], fieldInfo, HTML_BOLD_FORMAT, XEngineeringNLS.name);
			partNumberView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.order], fieldInfo, HTML_BOLD_FORMAT, XEngineeringNLS.order);
			partNumberView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.type], fieldInfo, HTML_BOLD_FORMAT, XEngineeringNLS.type);
			partNumberView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.value], fieldInfo, HTML_BOLD_FORMAT, XEngineeringNLS.value);
			partNumberView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.action], fieldInfo, HTML_BOLD_FORMAT, XEngineeringNLS.actions);
			partNumberView.buildTextTableCell(RIGHT_ALIGNMENT, widthTable[this.cellsIndex.counterUnicityIndex], fieldInfo, HTML_BOLD_FORMAT, XEngineeringNLS.counterUnicity);
			partNumberView.buildTextTableCell(RIGHT_ALIGNMENT, widthTable[this.cellsIndex.deployFlag], fieldInfo, HTML_BOLD_FORMAT, XEngineeringNLS.deployStatus);

			return fieldInfo;
		},

		addEditButtonToCellRow: function (iCell, fieldInfo) {
			var editElts = ParametersLayoutViewUtilities.createActionElements(XEngineeringNLS.editField, false);
			var editSpan = editElts[0];
			editSpan.setStyle("float", LEFT_ALIGNMENT);
			editSpan.setStyle("padding", "0px 8px");
			editSpan.inject(iCell);
			var editAttributeButton = editElts[1];
			var editPop = editElts[2];

			editAttributeButton.addEvent("onClick", function (event) {
				var fieldToEdit = event.currentTarget.getParent().getParent().getParent();
				partNumberView.editFieldDialog(fieldToEdit, physicalProductAttributesValues, avoidDupCounterUserSelectionRequired);

			});

			return editAttributeButton;
		},

		addRemoveButtonToCellRow: function (iCell, fieldInfo) {
			var removelts = ParametersLayoutViewUtilities.createActionElements(XEngineeringNLS.removeField, true);
			var deleteSpan = removelts[0];
			deleteSpan.setStyle("float", LEFT_ALIGNMENT);
			deleteSpan.setStyle("padding", "0px 8px");
			deleteSpan.inject(iCell);
			var removeAttributeButton = removelts[1];
			var removePop = removelts[2];

			removeAttributeButton.addEvent("onClick", function (e) {
				partNumberView.removefieldLineCallBack(fieldInfo);
			});

			return removeAttributeButton;
		},

		buildValueCellInPNTable: function (valueCell, name, order, type, value, attributeName, isDeployed) {

			var cellText = value;
			if (ParameterizationXEngineerConstants.FORMAT_ATTRIBUTE == type) {
				if (physicalProductAttributesValues && physicalProductAttributesValues[attributeName]) {
					cellText = physicalProductAttributesValues[attributeName];
				} else {
					cellText = attributeName;
				}

			}

			valueCell.setText((cellText) ? cellText : "");
			valueCell.value = value;

			partNumberView.updateFormulaTextFields(order, type, cellText, isDeployed);
		},

		buildPartNumberField: function (fieldInfo, name, order, type, value, attributeName, isCounterUnicitySet, isDeployed) {
			var that = this;
			var iCell;

			fieldInfo.value = isDeployed;

			partNumberView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.name], fieldInfo, HTML_PARAG_FORMAT, name);
			partNumberView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.order], fieldInfo, HTML_PARAG_FORMAT, order);
			partNumberView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.type], fieldInfo, HTML_PARAG_FORMAT, XEngineeringNLS[type]).value = type;
			partNumberView.buildValueCellInPNTable(partNumberView.buildTextTableCell(LEFT_ALIGNMENT, widthTable[this.cellsIndex.value], fieldInfo, HTML_PARAG_FORMAT, value), name, order, type, value, attributeName, isCounterUnicitySet, isDeployed);

			iCell = UWA.createElement('td', {
					'Align': LEFT_ALIGNMENT,
					'width': widthTable[4],
					'class': 'partNumberingField font-3dslight' // font-3dsbold
				}).inject(fieldInfo);

			var editAttributeButton = partNumberView.addEditButtonToCellRow(iCell, fieldInfo);
			var removeAttributeButton = partNumberView.addRemoveButtonToCellRow(iCell, fieldInfo);

			if ((type == ParameterizationXEngineerConstants.FORMAT_ATTRIBUTE) && ((isCounterUnicitySet == true)||(isCounterUnicitySet == "true"))) {
				iCell = UWA.createElement('td', {
						'Align': RIGHT_ALIGNMENT,
						'width': widthTable[5],
						'class': 'partNumberingField font-3dslight'
					}).inject(fieldInfo);
					var imgSpan = partNumberView.buildImgSpan('check', '2.5', 'green',  ParameterizationXEngineerConstants.COUNTER_UNICITY_VALUE);
					imgSpan.inject(iCell);
				iCell.inject(fieldInfo);
			}else{
				partNumberView.buildTextTableCell(RIGHT_ALIGNMENT, widthTable[this.cellsIndex.counterUnicityIndex], fieldInfo, HTML_PARAG_FORMAT, "").value = "";
			}

			iCell = UWA.createElement('td', {
					'Align': RIGHT_ALIGNMENT,
					'width': widthTable[6],
					'class': 'partNumberingField font-3dslight' // font-3dsbold
				}).inject(fieldInfo);

			if (isDeployed == ParameterizationXEngineerConstants.DEPOLOYED) {
				var imgSpan = partNumberView.buildImgSpan('check', '2.5', 'green', XEngineeringNLS.Deployed);
				imgSpan.inject(iCell);
			} else if (isDeployed === ParameterizationXEngineerConstants.NEW_NOT_DEPLOYED) {
				var imgSpan = partNumberView.buildImgSpan('cog', '2.5', 'orange', XEngineeringNLS.Modified);
				imgSpan.inject(iCell);
			}

			iCell.inject(fieldInfo);

			return fieldInfo;
		},

		buildsFieldJsonObject: function (fieldInfo) {
			var type = fieldInfo.cells[this.cellsIndex.type].value;
			var value = fieldInfo.cells[this.cellsIndex.value].getText();
			if (ParameterizationXEngineerConstants.FORMAT_ATTRIBUTE == type) {
				value = fieldInfo.cells[this.cellsIndex.value].value;
			}
			var obj = {};

			obj[ParameterizationXEngineerConstants.OPERATION] = fieldInfo.cells[this.cellsIndex.deployFlag].value;
			obj[ParameterizationXEngineerConstants.NAME] = fieldInfo.cells[this.cellsIndex.name].getText();
			obj[ParameterizationXEngineerConstants.TYPE] = fieldInfo.cells[this.cellsIndex.type].value;
			obj[ParameterizationXEngineerConstants.VALUE] = value;
			obj[ParameterizationXEngineerConstants.ORDER] = fieldInfo.cells[this.cellsIndex.order].getText();
			obj[ParameterizationXEngineerConstants.ATTRIBUTE] = fieldInfo.cells[this.cellsIndex.value][ParameterizationXEngineerConstants.ATTRIBUTE];
			obj[ParameterizationXEngineerConstants.COUNTER] = fieldInfo.cells[this.cellsIndex.value][ParameterizationXEngineerConstants.COUNTER];
			obj[ParameterizationXEngineerConstants.COUNTER_UNICITY] = fieldInfo.cells[this.cellsIndex.counterUnicityIndex].value;
			obj[ParameterizationXEngineerConstants.UPDATE_HIGHEST_COUNTER] = fieldInfo.cells[this.cellsIndex.counterUnicityIndex].updateHighestCounterValue;
			return obj;

		},

		buildJsonObjForPNField: function (operation, name, order, type, value, attributeName, counterSize, counterUnicityValue) {
			var obj = {};

			obj[ParameterizationXEngineerConstants.OPERATION] = operation;
			obj[ParameterizationXEngineerConstants.NAME] = name;
			obj[ParameterizationXEngineerConstants.TYPE] = type;
			obj[ParameterizationXEngineerConstants.VALUE] = value;
			obj[ParameterizationXEngineerConstants.ORDER] = order;
			obj[ParameterizationXEngineerConstants.ATTRIBUTE] = attributeName;
			obj[ParameterizationXEngineerConstants.COUNTER] = counterSize;

			if (type == ParameterizationXEngineerConstants.FORMAT_ATTRIBUTE) {
				obj[ParameterizationXEngineerConstants.COUNTER_UNICITY] = counterUnicityValue;
			}

			return obj;

		},

		buildNewPartNumberField: function (objParam, isDeployedStatus) {
			var fieldInfo;

			fieldInfo = UWA.createElement('tr', {
					'class': 'partNumberFieldMapping'
				});

			partNumberView.buildPartNumberField(fieldInfo, objParam.Name, objParam.Order, objParam.Type, objParam.Value, objParam[ParameterizationXEngineerConstants.ATTRIBUTE], objParam[ParameterizationXEngineerConstants.COUNTER_UNICITY], isDeployedStatus);
			fieldInfo.cells[this.cellsIndex.value][ParameterizationXEngineerConstants.ATTRIBUTE] = objParam[ParameterizationXEngineerConstants.ATTRIBUTE];
			fieldInfo.cells[this.cellsIndex.value][ParameterizationXEngineerConstants.COUNTER] = objParam[ParameterizationXEngineerConstants.COUNTER];
			fieldInfo.cells[this.cellsIndex.deployFlag].value = ParameterizationXEngineerConstants.ADD;
			fieldInfo.cells[this.cellsIndex.counterUnicityIndex].value = objParam[ParameterizationXEngineerConstants.COUNTER_UNICITY];
			fieldInfo.cells[this.cellsIndex.counterUnicityIndex].updateHighestCounterValue = objParam[ParameterizationXEngineerConstants.UPDATE_HIGHEST_COUNTER];
			return fieldInfo;
		},

		modifyPartNumberField: function (fieldInfo, objParam, isDeployedStatus) {
			fieldInfo.value = isDeployedStatus;

			var existOrder = fieldInfo.cells[this.cellsIndex.order].getText();
			if (objParam.Order != existOrder) {
				partNumberView.updateFormulaTextFields(existOrder, objParam.Type, null, ParameterizationXEngineerConstants.NEW_NOT_DEPLOYED);
			}

			fieldInfo.cells[this.cellsIndex.name].setText(objParam.Name);
			fieldInfo.cells[this.cellsIndex.order].setText(objParam.Order);
			fieldInfo.cells[this.cellsIndex.type].setText(XEngineeringNLS[objParam.Type]);
			fieldInfo.cells[this.cellsIndex.type].value = objParam.Type;
			fieldInfo.cells[this.cellsIndex.counterUnicityIndex].value = objParam[ParameterizationXEngineerConstants.COUNTER_UNICITY];
			fieldInfo.cells[this.cellsIndex.counterUnicityIndex].updateHighestCounterValue = objParam[ParameterizationXEngineerConstants.UPDATE_HIGHEST_COUNTER];

			partNumberView.buildValueCellInPNTable(fieldInfo.cells[this.cellsIndex.value], objParam.Name, objParam.Order, objParam.Type, (objParam.Value) ? objParam.Value : "", objParam[ParameterizationXEngineerConstants.ATTRIBUTE], isDeployedStatus);

			fieldInfo.cells[this.cellsIndex.value][ParameterizationXEngineerConstants.ATTRIBUTE] = objParam[ParameterizationXEngineerConstants.ATTRIBUTE];
			fieldInfo.cells[this.cellsIndex.value][ParameterizationXEngineerConstants.COUNTER] = objParam[ParameterizationXEngineerConstants.COUNTER];
			if(objParam[ParameterizationXEngineerConstants.COUNTER_UNICITY] == true){
				var counterUnicityCell = fieldInfo.cells[this.cellsIndex.counterUnicityIndex];
				counterUnicityCell.empty();
				var imgSpan = partNumberView.buildImgSpan('check', '2.5', 'green', ParameterizationXEngineerConstants.COUNTER_UNICITY_VALUE);
				imgSpan.inject(counterUnicityCell);
			} else {
		        fieldInfo.cells[this.cellsIndex.counterUnicityIndex].setText("");
			}
			fieldInfo.cells[this.cellsIndex.counterUnicityIndex][ParameterizationXEngineerConstants.COUNTER_UNICITY] = objParam[ParameterizationXEngineerConstants.COUNTER_UNICITY];
			/*}else{
				fieldInfo.cells[this.cellsIndex.counterUnicityIndex][ParameterizationXEngineerConstants.COUNTER_UNICITY] = objParam[ParameterizationXEngineerConstants.COUNTER_UNICITY];
			}*/

			var deploycell = fieldInfo.cells[this.cellsIndex.deployFlag];
			deploycell.empty();

			var imgSpan = partNumberView.buildImgSpan('cog', '2.5', 'orange', XEngineeringNLS.Modified);
			imgSpan.inject(deploycell);

			deploycell.value = ParameterizationXEngineerConstants.MODIFY;

			return fieldInfo;
		},

		updateFormulaTextFields: function (index, type, value, isDeployed) {
			var field = document.querySelector(".partNumberFormulaMapping");
			if (field) {
				var newVal = "";
				if (type) {
					if (type == ParameterizationXEngineerConstants.FORMAT_ATTRIBUTE && value) {
						newVal = "{" + value + "}";
					} else if (type == ParameterizationXEngineerConstants.FORMAT_COUNTER && value) {
						newVal = "&lt;" + XEngineeringNLS.counterValue + "&gt;";
					} else if (type == ParameterizationXEngineerConstants.FORMAT_FREE && (value != null)) {
						newVal = "[" + XEngineeringNLS.freeValue + "]";
					} else if (value) {
						newVal = value;
					}
				}

				field.value[index] = newVal;
				field.cells[this.cellsIndex.type].empty();
				field.cells[this.cellsIndex.type].setStyle("font-size", "21px");

				var newFormula = field.value.join("");
				var counterInfoCell = field.cells[this.cellsIndex.type];
				if (newFormula != "") {
					if (newFormula.indexOf(XEngineeringNLS.counterValue) == -1) {
						counterInfoCell.empty();
						var imgClass = 'fonticon fonticon-' + '1' + 'x  fonticon-attention';
						UWA.createElement(HTML_PARAG_FORMAT, {
							'class': imgClass,
							'title': XEngineeringNLS.counterTooltipAttention
						}).inject(counterInfoCell);
					} else {
						counterInfoCell.empty();
					}
				}
				if (!newFormula) {
					field.cells[this.cellsIndex.type].addContent("[" + XEngineeringNLS.freeValue + "]");
				}
				field.cells[this.cellsIndex.type].addContent(field.value.join(""));

				var iCell = field.cells[this.cellsIndex.value];
				if (isDeployed == ParameterizationXEngineerConstants.DEPOLOYED) {
					iCell.empty();
					var imgSpan = partNumberView.buildImgSpan('check', '2.5', 'green', XEngineeringNLS.Deployed);
					imgSpan.inject(iCell);
				} else if (isDeployed === ParameterizationXEngineerConstants.NEW_NOT_DEPLOYED) {
					iCell.empty();
					var imgSpan = partNumberView.buildImgSpan('cog', '2.5', 'orange', XEngineeringNLS.Modified); ;
					imgSpan.inject(iCell);
				}
			}
		},

		removefieldLineCallBack: function (fieldInfo) {

			if (fieldInfo != "undefined") {
				partNumberView.updateFormulaTextFields(fieldInfo.cells[this.cellsIndex.order].getText(), fieldInfo.cells[this.cellsIndex.type].value, null, ParameterizationXEngineerConstants.NEW_NOT_DEPLOYED);
				if (fieldInfo.value === ParameterizationXEngineerConstants.NEW_NOT_DEPLOYED) {
					fieldInfo.remove();
				} else {
					partNumberView.setForRemoveFieldLine(fieldInfo);
				}
			}
		},

		resetForAdd: function (fieldInfo) {
			partNumberView.updateFormulaTextFields(fieldInfo.cells[this.cellsIndex.order].getText(), fieldInfo.cells[this.cellsIndex.type].value, null, ParameterizationXEngineerConstants.DEPOLOYED);
		},

		resetForRemove: function (fieldInfo) {

			var cellValue = fieldInfo.cells[partNumberView.cellsIndex.deployFlag].value;
			var imgSpan = partNumberView.buildImgSpan('check', '2.5', 'green', XEngineeringNLS.Deployed);
			var actionCell = fieldInfo.cells[partNumberView.cellsIndex.action];
			var deploycell = fieldInfo.cells[partNumberView.cellsIndex.deployFlag];

			partNumberView.addEditButtonToCellRow(actionCell, fieldInfo);
			partNumberView.addRemoveButtonToCellRow(actionCell, fieldInfo);
			deploycell.empty();
			imgSpan.inject(deploycell);

			partNumberView.updateFormulaTextFields(fieldInfo.cells[this.cellsIndex.order].getText(), fieldInfo.cells[this.cellsIndex.type].value, fieldInfo.cells[this.cellsIndex.value].getText(), ParameterizationXEngineerConstants.DEPOLOYED);
		},

		resetForModify: function (fieldInfo, savedInfo) {

			var imgSpan = partNumberView.buildImgSpan('check', '2.5', 'green', XEngineeringNLS.Deployed);
			var actionCell = fieldInfo.cells[partNumberView.cellsIndex.action];
			var deploycell = fieldInfo.cells[partNumberView.cellsIndex.deployFlag];

			if (savedInfo) {
				var existOrder = fieldInfo.cells[this.cellsIndex.order].getText();
				if (savedInfo[ParameterizationXEngineerConstants.ORDER] != existOrder) {
					partNumberView.updateFormulaTextFields(existOrder, savedInfo[ParameterizationXEngineerConstants.TYPE], null, ParameterizationXEngineerConstants.NEW_NOT_DEPLOYED);
				}

				fieldInfo.cells[this.cellsIndex.name].setText(savedInfo[ParameterizationXEngineerConstants.NAME]);
				fieldInfo.cells[this.cellsIndex.type].setText(XEngineeringNLS[savedInfo[ParameterizationXEngineerConstants.TYPE]]);
				fieldInfo.cells[this.cellsIndex.type].value = savedInfo[ParameterizationXEngineerConstants.TYPE];
				fieldInfo.cells[this.cellsIndex.order].setText(savedInfo[ParameterizationXEngineerConstants.ORDER]);

				fieldInfo.cells[this.cellsIndex.counterUnicityIndex].value = (savedInfo[ParameterizationXEngineerConstants.COUNTER_UNICITY] == "true" || savedInfo[ParameterizationXEngineerConstants.COUNTER_UNICITY] == true);
				fieldInfo.cells[this.cellsIndex.counterUnicityIndex].updateHighestCounterValue =  savedInfo[ParameterizationXEngineerConstants.UPDATE_HIGHEST_COUNTER];
				if(savedInfo[ParameterizationXEngineerConstants.COUNTER_UNICITY]) {
					var counterUnicityCell = fieldInfo.cells[this.cellsIndex.counterUnicityIndex];
					counterUnicityCell.empty();
					var imgSpancounterUnicityCell = partNumberView.buildImgSpan('check', '2.5', 'green', ParameterizationXEngineerConstants.COUNTER_UNICITY_VALUE);
					imgSpancounterUnicityCell.inject(counterUnicityCell);
				} else {
					fieldInfo.cells[this.cellsIndex.counterUnicityIndex].setText("");
				}
				partNumberView.buildValueCellInPNTable(fieldInfo.cells[this.cellsIndex.value], savedInfo[ParameterizationXEngineerConstants.NAME], savedInfo[ParameterizationXEngineerConstants.ORDER], savedInfo[ParameterizationXEngineerConstants.TYPE], savedInfo[ParameterizationXEngineerConstants.VALUE], savedInfo[ParameterizationXEngineerConstants.ATTRIBUTE], ParameterizationXEngineerConstants.DEPOLOYED);
			}
			deploycell.empty();
			imgSpan.inject(deploycell);
		},

		resetForFieldLineChanges: function (fieldInfo, savedInfo) {

			if (fieldInfo.value == ParameterizationXEngineerConstants.NEW_NOT_DEPLOYED) {
				var cellValue = fieldInfo.cells[partNumberView.cellsIndex.deployFlag].value;
				if (cellValue == ParameterizationXEngineerConstants.ADD) {
					partNumberView.resetForAdd(fieldInfo);
					return fieldInfo;
				} else if (cellValue == ParameterizationXEngineerConstants.REMOVE) {
					partNumberView.resetForRemove(fieldInfo);

				} else if (cellValue == ParameterizationXEngineerConstants.MODIFY) {
					partNumberView.resetForModify(fieldInfo, savedInfo);
				}

				fieldInfo.value = ParameterizationXEngineerConstants.DEPOLOYED;
				fieldInfo.cells[partNumberView.cellsIndex.deployFlag].value = null;
			}

		},

		setForRemoveFieldLine: function (fieldInfo) {
			fieldInfo.value = ParameterizationXEngineerConstants.NEW_NOT_DEPLOYED;
			var arrayAction = fieldInfo.cells[partNumberView.cellsIndex.action].getElements('span');
			arrayAction.forEach(function (action) {
				action.hide();
			});

			var deploycell = fieldInfo.cells[partNumberView.cellsIndex.deployFlag];
			var imgSpan = partNumberView.buildImgSpan('trash', '1.5', 'red', XEngineeringNLS.removedField);

			deploycell.empty();

			deploycell.value = ParameterizationXEngineerConstants.REMOVE;

			imgSpan.inject(deploycell);
		},

		/*updateStrategy: function(selectedValue, isDeployed) {
		var strategyField = document.querySelector(".partNumberStrategyMapping");
		strategyField.value = selectedValue;

		strategyCombobox.setValue(selectedValue)

		var deployCell = strategyField.cells[this.cellsIndex.deployFlag];
		deployCell.empty();

		if (isDeployed == ParameterizationXEngineerConstants.DEPOLOYED) {
		var imgSpan = partNumberView.buildImgSpan('check', '2.5', 'green', XEngineeringNLS.Deployed);
		imgSpan.inject(deployCell);
		} else if (isDeployed === ParameterizationXEngineerConstants.NEW_NOT_DEPLOYED) {
		var imgSpan = partNumberView.buildImgSpan('cog', '2.5', 'orange', XEngineeringNLS.Modified);
		imgSpan.inject(deployCell);
		}

		},*/

		editFieldDialog: function (editField, result, avoidDupCounterUserValue) {

			var options = {
				className: "part-number-edit-modal",
				title: XEngineeringNLS.editField,
				AvoidDupCounterUserSelectionRequired : avoidDupCounterUserValue
			};

			var that = this;
			this.modal = new XENGModal(options);
			this.modal.attributes = result;

			function _getFooter() {
				return "<button type='button'  name='addButton' id='add-button' class='btn btn-primary'>" + XEngineeringNLS.add + "</button> " + "</button>" + "<button type='button' name='cancelButton' id='cancel-button' class='btn btn-default'>" + XEngineeringNLS.cancel + "</button>"
			}
			this.modal.modal.setFooter(_getFooter());
			this.modal.getModalBody();
			this.modal._bindFooterEvent();

			var editingField = editField;

			var rowsOfMappedFields = document.querySelectorAll(".partNumberFieldMapping");
			var successFields = document.querySelector('.success');
			var toCheckTheExistingRows = rowsOfMappedFields.length;

			var fetchedData = this.buildsFieldJsonObject(editField);

			this.modal.nameTextBox.setValue(fetchedData.Name);
			this.modal.numberOrderBox.setValue(fetchedData.Order);
			this.modal.partNumberTypeCombobox.select(fetchedData.Type, true);
			this.modal.nameTextBox.disable();

			var counterUnicityCheckboxValue = (fetchedData[ParameterizationXEngineerConstants.COUNTER_UNICITY] == "true" || fetchedData[ParameterizationXEngineerConstants.COUNTER_UNICITY] == true) ? true : false;

			if (fetchedData.Type == ParameterizationXEngineerConstants.FORMAT_STRING) {
				this.modal.valueTextBox.setValue(fetchedData.Value);
			} else if (fetchedData.Type == ParameterizationXEngineerConstants.FORMAT_ATTRIBUTE) {
				this.modal.partNumberAttributeCombobox.select(editingField.cells[this.cellsIndex.value][ParameterizationXEngineerConstants.ATTRIBUTE], true);
				this.modal.valueDynTextBox.setValue(fetchedData.Value);
				this.modal.counterCheckbox.setCheck(counterUnicityCheckboxValue);
			} else if (fetchedData.Type == ParameterizationXEngineerConstants.FORMAT_COUNTER) {
				var numberOfDigits = fetchedData.Value.length;
				this.modal.counterNumberBox.setValue(numberOfDigits);
			}

			this.tableWdthArray = ParameterizationXEngineerConstants.WIDTH_ARRAY

				this.modal.partNumberTypeCombobox.disable();

			this.modal.getContent().getElements('.btn').forEach(function (element) {

				if (element.name === 'addButton') {

					element.addEvent('click', function () {
						var userEditedFormat = that.modal.getUserEnteredValues();
						var duplicateData = {};
						var checkStatus = {};
						checkStatus.isSuccess = true;

						var toDisplayOver = that.modal.getContent().getElement('.enox-part-number-content');

						if (that.modal.validateEnteredNameValueNotNull()) {
							that.modal.displayAlertMessage(XEngineeringNLS.nameNullMessage, toDisplayOver);
						} else if (that.modal.validateEnteredOrderValueNotNull()) {
							that.modal.displayAlertMessage(XEngineeringNLS.orderNullMessage, toDisplayOver);
						} else if (that.modal.validatSelectedTypeFieldValueNotNull()) {
							that.modal.displayAlertMessage(XEngineeringNLS.selectTypeMessage, toDisplayOver);
						} else if (that.modal.validateSelectedAttributeFieldValueNotNull()) {
							that.modal.displayAlertMessage(XEngineeringNLS.selectAttributeMessage, toDisplayOver);
						} else if (that.modal.validateEnteredCounterFieldValueNotNull()) {
							that.modal.displayAlertMessage(XEngineeringNLS.counterIsEmptyMessage, toDisplayOver);
						} else if (that.modal.validateEnteredValueFieldValueNotNull()) {
							that.modal.displayAlertMessage(XEngineeringNLS.valueEmptyMessage, toDisplayOver);
						} else {
							if (!that.modal.validateEnteredNameValue("edit", editingField).isValid) {
								that.modal.displayAlertMessage(XEngineeringNLS.nameMessage + ' ' + XEngineeringNLS.alreadyExists, toDisplayOver);
							} else if (!that.modal.validateEnteredOrderValue("edit", editingField).isValid) {
								that.modal.displayAlertMessage(XEngineeringNLS.orderMessage + ' ' + XEngineeringNLS.alreadyExists, toDisplayOver);
							} else {
								var userSelectedFormat = that.modal.getUserEnteredValues();
								userEditedFormat[ParameterizationXEngineerConstants.OPERATION] = ParameterizationXEngineerConstants.MODIFY;
								var fieldInfo = partNumberView.modifyPartNumberField(editingField, userEditedFormat, ParameterizationXEngineerConstants.NEW_NOT_DEPLOYED);
								that.modal.destroy();
							}
						}
					});
				}
			});

			this.modal.show();

		}

	};
	partNumberView.initVariable();
	return partNumberView;
});

/*@fullReview  S63 17/03/03 2018xFD01 Param Widgetization NG*/
/*global define, widget, document, setTimeout, console*/
/*jslint plusplus: true*/
/*jslint nomen: true*/
define('DS/ParameterizationSkeleton/Views/PropagationLayoutViewUtilities',
    [
        'UWA/Core',
        'DS/UIKIT/Input/Button',
        'DS/UIKIT/Alert',
        'DS/UIKIT/Input/Toggle',
        'DS/UIKIT/Popover',
        'DS/UIKIT/Spinner',
        'DS/UIKIT/Mask',
        'DS/UIKIT/Modal',
        'DS/UIKIT/SuperModal',
        'DS/ParameterizationSkeleton/Utils/PropagationWebServices',
        'DS/ParameterizationSkeleton/Views/ParametersLayoutViewUtilities',
        'i18n!DS/ParameterizationSkeleton/assets/nls/ParamSkeletonNLS'
    ],
    function (UWA,
              Button,
              Alert, Toggle, Popover, Spinner, Mask,
              Modal,SuperModal,
              PropagationWebServices, ParamLayoutUtilities,
              ParamSkeletonNLS) {

        'use strict';

        var UIview = {

            buildPropagAttLine : function (wdthArray,content) {
                var buttonBindCell, cellBindText, cellInfo, bindBttn,
                    bindLine = UWA.createElement('tr'),
                    that = this,
                    admBtn, currUsrBtn, headertitle, bodyDiv,
                    admin=false;

                UWA.log("PropagationLayoutViewUtilities::buildBindAutoExtLine start");

                cellBindText = UWA.createElement('td', {
                    //'colspan': '2',
                    'width': wdthArray[0].toString() + '%',
                    'align': 'left'
                }).inject(bindLine);

                UWA.createElement('p', {
                    text: ParamSkeletonNLS.PropagationFirstLine,
                    'class': ''
                }).inject(cellBindText);

                cellInfo = UWA.createElement('td', {
                    'width': wdthArray[1].toString() + '%',
                    'align': 'left'
                }).inject(bindLine);

                ParamLayoutUtilities.buildPopoverSpan(cellInfo, ParamSkeletonNLS.PropagationInfo);

                UWA.createElement('td', {
                    'width': wdthArray[2].toString() + '%',
                    'align': 'left'
                }).inject(bindLine);

                buttonBindCell = UWA.createElement('td', {
                    'width'  : wdthArray[3].toString() + '%'
                }).inject(bindLine);

                bindBttn =  new Button({
                    className: 'primary',
                    id : 'bindButton',
                    icon: 'archive',
                    attributes: {
                        disabled: false,
                        //title: ParamSkeletonNLS.IndexationTooltip,
                        text : ParamSkeletonNLS.Search,
                        title: ParamSkeletonNLS.SearchInfo                    },
                    events: {
                        onClick: function () {
                            Mask.mask(content.contentDiv);
                            //that.contentDiv.destroy();
                            //var tbodyreflist = this.contentDiv.getElements('.fparamtbody'),
                            //tbodyref = tbodyreflist[2],
                            //iLines = tbodyref.children;

                           //iLines[2].hide();
                            //tbodyref.empty();
                            PropagationWebServices.findTypes.call(content, that.onSearchFailure.bind(that), that.onSearchSuccess.bind(that), that.onSearchTimeOut.bind(that));
                        }
                    }
                }).inject(buttonBindCell);
                bindBttn.getContent().setStyle("width", 150);

                if(content.adminModal == null) {
                    var tbodyreflist = content.contentDiv.getElements('.fparamtbody'),
                        tbodyref = tbodyreflist[2];
                    content.adminModal = new SuperModal({ renderTo: content.contentDiv });
                }

                UWA.log("PropagationLayoutViewUtilities::buildBindAutoExtLine end");

                return bindLine;
            },
            
            updateUIPropagAtt : function(json, content) {
                UWA.log("PropagationLayoutViewUtilities::updateUIPropagAtt start");
                var tbodyreflist = content.contentDiv.getElements('.fparamtbody'),
                iController, imgCell,
                tbodyref = tbodyreflist[2],
                listTypes=json.Result,
                resultJSON = content.payload,
               //noAccessObj=json.NoAccessObj,
                that=this,
                needAdminPropag=false;
                content.inputControls = [];
                content.propagTypesArray = [];
                tbodyref.empty();
                content.indexAPIUrl = json.url;

                //UWA.log("PropagationLayoutViewUtilities::updateUIPropagAtt start");


                //FirstLine ==============================================>
                var firstLine = UWA.createElement('tr').inject(tbodyref);

                var infoCell = UWA.createElement('td', {
                    'colspan': '15',
                    'width': '75%',
                    'align': 'left'
                }).inject(firstLine);
                UWA.createElement('p', {
                    text : ParamSkeletonNLS.PropagationReloadText,
                    'class': ''
                }).inject(infoCell);
                var buttonCell = UWA.createElement('td', {
                    'colspan': '5',
                    'width': '25%',
                    }).inject(firstLine);
                var reloadBttn =  new Button({
                    className: 'primary',
                    id : 'reloadButtonX',
                    icon: 'archive',
                    attributes: {
                        disabled: false,
                        //title: ParamSkeletonNLS.IndexationTooltip,
                        text : ParamSkeletonNLS.PropagationReloadButton,
                        'title' : ParamSkeletonNLS.PropagationReloadTitle
                    },
                    events: {
                        onClick: function () {
                            Mask.mask(content.contentDiv);
                            that.callFindTypes(content);
                            //PropagationWebServices.findTypes.call(content, that.onSearchFailure.bind(that), that.onSearchSuccess.bind(that));
                        }
                    }
                }).inject(buttonCell);
                reloadBttn.getContent().setStyle("width", 150);

                //Header ============================================>
                var header = UWA.createElement('tr', {
                    'class': 'active'
                }).inject(tbodyref);
                var cellAllCheck = UWA.createElement('td', {
                    'width'  : '5%',
                    'align': 'left'
                }).inject(header);
                iController = new Toggle({
                    type: "checkbox",
                    className: "primary",
                    value: "",
                    'name' : "AllExtensions",
                    id : "Extensions",
                    disabled: false,
                    events: {
                        onChange: function() {
                            //content.userMessaging.add({ className: "message", message: "CheckBox Checked" });
                            that.onToggleClick.call(that,content,this);
                        }
                    }
                }).inject(cellAllCheck);
                //UWA.createElement('td', {
                //    'width' : '5%',
                //    'align':'left'
                //}).inject(header);
                var cellHeaderObj = UWA.createElement('td', {
                    'colspan': '7',
                    'width'  : '35%',
                    'align': 'left'
                }).inject(header);
                UWA.createElement('p', {
                    text: ParamSkeletonNLS.TypesNames,
                    'class': ''
                }).inject(cellHeaderObj);

                var cellHeaderOwner = UWA.createElement('td', {
                    'colspan': '7',
                    'width': '35%',
                    'align': 'left'
                }).inject(header);
                UWA.createElement('p', {
                    text: ParamSkeletonNLS.AttributesInfo,
                    'class': ''
                }).inject(cellHeaderOwner);

                var cellHeaderNumber = UWA.createElement('td', {
                    'colspan': '4',
                    'width': '20%',
                    'align': 'left'
                }).inject(header);
                UWA.createElement('p', {
                    text: ParamSkeletonNLS.PropagationNumber,
                    'class': ''
                }).inject(cellHeaderNumber);
                UWA.createElement('td', {
                    'width' : '5%',
                    'align':'left'
                }).inject(header);

                //Extensions Lines ==============================================================>
                listTypes.sort(function(a, b) {
                    var x = a.NLS,
                        y = b.NLS;
                    return ((x < y) ? -1 : ((x > y) ? 1 : 0));
                });
                for (var i=0; i<listTypes.length; i++) {           
                    var result = listTypes[i];
                    content.propagTypesArray.push(result)
                    var extensions,check,
                    name = result.Name,
                    //owner = result.extOwners,
                    nls = result.NLS,
                    total = result.Total,
                    lAtts = result.Attributes,
                    toTreat = result.Objects,
                    lExtensions = result.Extensions,
                    objets = total - toTreat,
                    myLine = UWA.createElement('tr').inject(tbodyref),
                    treated, atts;

                    if(toTreat == 0) {
                        treated = true;
                    }
                    else {
                        treated = false;
                        //S63:IR-656210-3DEXPERIENCER2019x If there is remaining objects after the attributes propagation we need to executen it as super admin
                        if(resultJSON) {
                            resultJSON.Results.forEach(function(myObj) {
                                if(myObj.typeName===name) {
                                    needAdminPropag=true;
                                }
                            });
                        }
                    }

                    imgCell = ParamLayoutUtilities.buildDeployStsCell(check, '5%', '2', 'right');//5%
                    if(!treated) {
                        imgCell.firstChild.setStyle("color", 'orange');
                    }

                    for(var j=0; j<lAtts.length; j++) {
                        if(j==0) {
                            atts = lAtts[j];
                            //ownersNls = owner[j].nls;
                        }
                        else {
                            atts = atts + ', ' + lAtts[j];
                            //ownersNls = ownersNls + ', ' + owner[j].nls;
                        }
                    }

                    for(var j=0; j<lExtensions.length; j++) {
                        if(j==0) {
                            extensions = lExtensions[j];
                            //ownersNls = owner[j].nls;
                        }
                        else {
                            extensions = extensions + ', ' + lExtensions[j];
                            //ownersNls = ownersNls + ', ' + owner[j].nls;
                        }
                    }

                    var cellObj = UWA.createElement('td', {
                        'width'  : '5%',
                        'align': 'left'
                    }).inject(myLine);
                    iController = new Toggle({
                        type: "checkbox",
                        className: "primary",
                        value: "",
                        'name': name,
                        //text: "test2",
                        //label: "...",
                        id : "Type" + i,
                        disabled: treated
                    }).inject(cellObj);
                    content.inputControls.push(iController);


                    var cellType = UWA.createElement('td', {
                    'colspan': '7',
                    'width': '35%',
                    'style':"vertical-align:middle",
                    'align': 'left'
                    }).inject(myLine);
                    UWA.createElement('label', {
                        text: nls,
                        'for':"Type" + i,
                        //'title': atts
                    }).inject(cellType);
                    this.linkPopoverSpan(cellType, name);

                    var cellAtt = UWA.createElement('td', {
                        'colspan': '7',
                        'width': '35%',
                        'align': 'left'
                    }).inject(myLine);
                    ParamLayoutUtilities.buildPopoverSpan(cellAtt, atts);
                    //UWA.createElement('p', {
                    //    text: ownersNls,
                    //    'class': '',
                    //    //'title': owners
                    //}).inject(cellOwner);
                    //this.linkPopoverSpan(cellOwner, owners);

                    var cellNbObj = UWA.createElement('td', {
                        'colspan': '4',
                        'width': '20%',
                        'align': 'left'
                    }).inject(myLine);
                    UWA.createElement('p', {
                        text: objets + ' / ' + total,
                        'class': '',
                        //'title': toTreat + ' ' +ParamSkeletonNLS.Missing
                    }).inject(cellNbObj);
                    this.linkPopoverSpan(cellNbObj, toTreat + ' ' +ParamSkeletonNLS.Missing);

                    imgCell.inject(myLine);
                }

                //Last Line ============================================================>
                var lastLine = UWA.createElement('tr').inject(tbodyref);

                var infoCell2 = UWA.createElement('td', {
                    'colspan': '15',
                    'width': '75%',
                    'align': 'left'
                    }).inject(lastLine);
                UWA.createElement('p', {
                    text : ParamSkeletonNLS.PropagationlastLine,
                    'class': ''
                    }).inject(infoCell2);

                var buttonCell2 = UWA.createElement('td', {
                    'colspan': '5',
                    'width': '25%',
                    }).inject(lastLine);
                var bindBttn =  new Button({
                    className: 'primary',
                    id : 'propagButtonX',
                    icon: 'archive',
                    attributes: {
                        disabled: false,
                        //title: ParamSkeletonNLS.IndexationTooltip,
                        text : ParamSkeletonNLS.PropagationAttachButton
                    },
                    events: {
                        onClick: function () {
                             //FUN102019 21x FD03 : NZV : added new warning message
                            var data = {"theThat" : that, "content": content, "value" : false};
                            ParamLayoutUtilities.showContextualDeleteModal(widget.body, "delAttrModal", ParamSkeletonNLS.NewPropagateWrg+"\n"+ParamSkeletonNLS.NewPropagateWrgSec, 
                            ParamSkeletonNLS.YesText,  ParamSkeletonNLS.NoText, ParamSkeletonNLS.Warning+"!",that.propagateAtt, data);
                            
                            //that.propagateAtt(content, false);
                            //content.adminModal.show();
                        }
                    }
                }).inject(buttonCell2);
                bindBttn.getContent().setStyle("width", 150);

                //Last Line 2 ============================================================>
                //S63:IR-656210-3DEXPERIENCER2019x If we need super admin context to propagate attributes we add this button
                if(needAdminPropag) {
                    var lastLine2 = UWA.createElement('tr').inject(tbodyref);

                    var infoCell3 = UWA.createElement('td', {
                        'colspan': '8',
                        'width': '40%',
                        'align': 'left'
                        }).inject(lastLine2);
                    UWA.createElement('p', {
                        text : ParamSkeletonNLS.PropagationlastLine2,
                        'class': ''
                        }).inject(infoCell3);
                    var cellWarningInfo = UWA.createElement('td', {
                        'colspan': '7',
                        'width': '35%',
                        'align': 'left'
                    }).inject(lastLine2);
                    ParamLayoutUtilities.buildPopoverSpan(cellWarningInfo, ParamSkeletonNLS.PropagationWarningInfo);

                    var buttonCell3 = UWA.createElement('td', {
                        'colspan': '5',
                        'width': '25%',
                        }).inject(lastLine2);
                    var bindBttn2 =  new Button({
                        className: 'primary',
                        id : 'propagButtonX',
                        icon: 'archive',
                        attributes: {
                            disabled: false,
                            //title: ParamSkeletonNLS.IndexationTooltip,
                            text : ParamSkeletonNLS.PropagationAttachAllButton
                        },
                        events: {
                            onClick: function () {
                                //that.propagateAtt(content, true);
                                //content.adminModal.show();
                                //FUN102019 21x FD03 : NZV : added new warning message
                                var data = {"theThat" : that,"content": content, "value" : true};
                                ParamLayoutUtilities.showContextualDeleteModal(widget.body, "delAttrModal", ParamSkeletonNLS.NewPropagateWrg+"\n"+ParamSkeletonNLS.NewPropagateWrgSec, 
                                ParamSkeletonNLS.YesText,  ParamSkeletonNLS.NoText, ParamSkeletonNLS.Warning+"!",that.propagateAtt, data);
                            }
                        }
                    }).inject(buttonCell3);
                    bindBttn2.getContent().setStyle("width", 150);
                }

                UWA.log("PropagationLayoutViewUtilities::updateUIPropagAtt end");

            },

            propagateAtt : function(data) {
                UWA.log("PropagationLayoutViewUtilities::propagateAtt start");
                var name, content=data.content, admin = data.value,
                payload = [],
                that = data.theThat;
                content.inputControls.forEach(function (iInput) {
                    if (iInput.isChecked()==true){
                        name=iInput.elements.input.name;
                        content.propagTypesArray.forEach(function(myObj) {
                            if(myObj.Name===name) {
                                payload.push(myObj);
                            }

                        });
                    }
                });
                UWA.log(payload);
                Mask.mask(content.contentDiv);
                //ParameterizationWebServices.bindExt.call(this,payload,  //Appel du web service retournant les informations.
                //                this.onBindFailure.bind(this), this.onBindSuccess.bind(this));

                that.callPropagAtt(payload,content,admin);
                UWA.log("PropagationLayoutViewUtilities::propagateAtt end");

            },

            callPropagAtt : function (iData, content, admin) {
                PropagationWebServices.PropagAtt.call(content, iData, admin, this.onPropagFailure.bind(this), this.onPropagSuccess.bind(this), this.onPropagTimeOut.bind(this));
            },

            callFindTypes : function (content,json) {

                if(content.payload == null) {
                    content.payload = json;
                }

                PropagationWebServices.findTypes.call(content, this.onSearchFailure.bind(this), this.onSearchSuccess.bind(this), this.onSearchTimeOut.bind(this));
            },

            onSearchFailure : function (content,json) {
                UWA.log(">>Search Extension Fail");
                UWA.log(json);
                content.userMessaging.add({ className: "error", message: ParamSkeletonNLS.ExtensionsSearchFailure });
                Mask.unmask(content.contentDiv);
            },

            onSearchTimeOut: function (content) {
                UWA.log(">>Search Extension Fail");
                //UWA.log(json);
                content.userMessaging.add({ className: "error", message: ParamSkeletonNLS.ExtensionsSearchTimeOut });
                Mask.unmask(content.contentDiv);
            },

            onSearchSuccess : function (content, json) {
                UWA.log(">>Search Extension Success");
                UWA.log(json);
                this.updateUIPropagAtt(json, content);
                Mask.unmask(content.contentDiv);
                //this.userMessaging.add({ className: "success", message: "Succes"});
            },

            onPropagFailure : function (content, json) {
                UWA.log(">>Bind att Fail");
                UWA.log(json);

                this.callFindTypes(content);
                content.userMessaging.add({ className: "error", message: ParamSkeletonNLS.AttributesPropagationFailure });
                content.adminModal.alert(ParamSkeletonNLS.PropagationWarningMessage, function () {
                    UWA.log('A sample alert message callback');
                });
                //Mask.unmask(this.contentDiv);
            },

            onPropagSuccess : function (content, json) {
                UWA.log(">>Bind att Success");
                UWA.log(json);

                this.callFindTypes(content,json);
                content.userMessaging.add({ className: "warning", message: ParamSkeletonNLS.AttributesPropagationSuccess });
                /*content.adminModal.alert(ParamSkeletonNLS.AttributesPropagationSuccess, function () {
                    UWA.log('A sample alert message callback');
                });*/
            },

            onPropagTimeOut : function (content) {
                UWA.log(">>Bind att Success");
                //UWA.log(message);

                this.callFindTypes(content);
                content.userMessaging.add({ className: "error", message: ParamSkeletonNLS.AttributesPropagationTimeOut });
                /*content.adminModal.alert(ParamSkeletonNLS.AttributesPropagationSuccess, function () {
                    UWA.log('A sample alert message callback');
                });*/
            },

            linkPopoverSpan : function (iContainerSpan, tooltipNlsTxt) {
                var popoverTooltip = new Popover({
                    target   : iContainerSpan,
                    trigger  : "hover",
                    animate  : "true",
                    position : "top",
                    body     : tooltipNlsTxt,
                    title    : ''
                });
            },

            onToggleClick : function (content,toggle) {
                if(toggle.isChecked()){
                    this.checkAll(content);
                }
                else{
                    this.unCheckAll(content);
                }
            },

            checkAll : function (content) {
                content.inputControls.forEach(
                    function (iInput) {
                        if(iInput.isDisabled()==false){
                            if (iInput.isChecked()==false){
                                iInput.check();
                            }
                            //iInput.dispatchEvent('onChange', content);//onClick
                        }
                    }
                );
            },

            unCheckAll : function (content) {
                content.inputControls.forEach(
                    function (iInput) {
                        if(iInput.isDisabled()==false){
                            if (iInput.isChecked()==true){
                                iInput.uncheck();
                            }
                            //iInput.dispatchEvent('onChange', content);//onClick
                        }
                    }
                );
            }
        };

        return UIview;
    });

/*@QuickReview NZV 18/06/20  Fixed alignment issues IR-574318-3DEXPERIENCER2019x IR-574334-3DEXPERIENCER2019x */
/*@fullReview  NZV 18/05/28  IR-600551-3DEXPERIENCER2019x */
/*@fullReview  NZV 17/03/02  FUN066122 Added comboboxmultiselect */
/*@fullReview  ZUR 15/07/29 2016xFD01 Param Widgetization NG*/
/*global define, widget, document, setTimeout, console, clearTimeout, FileReader*/
/*jslint plusplus: true*/
/*jslint nomen: true*/
define('DS/ParameterizationSkeleton/Views/ParametersLayoutView',
    [
        'UWA/Core',
        'UWA/Class/View',
        'DS/UIKIT/Input/Button',
        'DS/UIKIT/Input/Select',
        'DS/UIKIT/Input/Text',
        'DS/UIKIT/Input/Toggle',
        'DS/UIKIT/Modal',
        'DS/UIKIT/Alert',
        'DS/UIKIT/Popover',
        'DS/UIKIT/Mask',
        'DS/UIKIT/Scroller',
        'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler',
        'DS/ParameterizationSkeleton/Utils/ParameterizationDataUtils',
        'DS/ParameterizationSkeleton/Utils/ParameterizationWebServices',
        'DS/ParameterizationSkeleton/Views/ParametersLayoutViewUtilities',
        'i18n!DS/ParameterizationSkeleton/assets/nls/ParamSkeletonNLS',
        'DS/ParameterizationSkeleton/Views/PropagationLayoutViewUtilities'
    ],
    function (UWA, View,
              Button, Select, Text, Toggle,
              Modal,
              Alert, Popover, Mask, Scroller,
              URLHandler, ParameterizationDataUtils, ParameterizationWebServices,
              ParamLayoutUtilities,
              ParamSkeletonNLS, PropagLayoutUtilities) {

        'use strict';

        var extendedView;

        extendedView = View.extend({
            tagName: 'div',
            className: 'generic-detail',

            init: function (options) {
                UWA.log('ParametersLayoutView::init');
                UWA.log(options);
                var initDate =  new Date(),
                    ConnectStruct = ParameterizationDataUtils.paramStructBuilder("domainName,tenantID,env_url");

                options = UWA.clone(options || {}, false);

                this._parent(options);
                this.wdgAccordion = null;
                this.contentDiv = null;
                this.inputControls = [];
                this.paramScroller = null;
                this.userMessaging = null;
                this.userDeployMessaging = null;
                this.lastAlertDate = initDate.getTime();
                this.resetModal = null;
                this.controlDiv = null;
                //NZV - IR-574318-3DEXPERIENCER2019x
                this.columnWidthArray = [60, 5, 25, 10];//[65, 20, 5, 10];
                this.columnLine = null;
                this.ArrayView = false;

                this.connectProps = new ConnectStruct();

                this.custoNamingsArray = [];//Naming
                this.forbiddenNamings = [];//Naming
                this.warnArrays = [];//Naming
                this.commonNamingElts = [];//Naming
                this.nbofShownParameters = 0;
                this.RevMsgTime = 0;
                this.handledFamily = "";
                this.custoAutoExtArray = [];
                this.propagTypesArray = [];
                this.adminModal = null;
                this.ErrorMsgPopup = null;
                this.resetIsCalled = false;////IR-728233-3DEXPERIENCER2020x\21x
                //FUN095483
                this.lstRevNamIconModified = [/*{id : idOfPolicy, inputElement : control, imageCell : imageCellVal}*/];

                //URLHandler.setURL("https://vdevpril807dsy.ux.dsone.3ds.com:443/3DSpace/");
                //URLHandler.setURL("https://dsdev034-euw1-18dna10916-space.3dexperience.3ds.com/enovia/");
            },

            setup: function(options) {
                UWA.log('ParametersLayoutView::setup!');
                UWA.log(options);
            },

            render: function () {
                UWA.log("ParametersLayoutView::render");
                var introDiv,
                    that = this,
                    activateApply = false;

                this.contentDiv =  UWA.createElement('div', {
                    'id': 'mainParamDiv'
                });

                Mask.mask(this.contentDiv);

                this.userMessaging = new Alert({
                    className : 'param-alert',
                    closable: true,
                    visible: true,
                    renderTo : document.body,
                    autoHide : true,
                    hideDelay : 2500,
                    messageClassName : 'warning'
                });

                this.userDeployMessaging = new Alert({
                    className : 'param-alert',
                    closable: true,
                    visible: true,
                    renderTo : document.body,
                    autoHide : true,
                    hideDelay : 5000,
                    messageClassName : 'warning'
                });

                introDiv = ParamLayoutUtilities.createInfoDiv(that.model.get("introduction"));
                introDiv.inject(this.contentDiv);
                //FUN095483
                if ("ObjectIdentifier" === this.model.get("familyid") || "VersionNaming" === this.model.get("familyid")) {
                    activateApply = true;
                }

                this.connectProps.domainName = this.model.get("domainid");
                this.connectProps.tenantID   = URLHandler.getTenant();
                this.connectProps.env_url    = URLHandler.getURL();

                //this.createApplyResetToolbar(this.contentDiv, activateApply);
                if ((this.model.get("domainid") !== "Deployment")) {
                    this.controlDiv = ParamLayoutUtilities.createApplyResetToolbar.call(this, this.contentDiv, activateApply,
                                                                  this.applyParams.bind(this), this.confirmationModalShow.bind(this));
                }

                this.container.setContent(this.contentDiv);

                this.listenTo(this.collection, {
                    onSync: that.onCompleteRequestParameters
                });

                /*if ((this.model.get("domainid") !== "Deployment")) {
                    UWA.log("Where do you think we are ?!");
                    this.listenTo(this.collection, {
                        onSync: that.onCompleteRequestParameters
                    });
                } else {
                    that.launchtest();
                }*/

                return this;
            },

            onCompleteRequestParameters : function() {
                UWA.log("onCompleteRequestParameters::");
                var i, iFamilies, nbofFamilies, iContent, paramsDIV, iParamAccordion,
                    familyposition = "mid";

                paramsDIV = ParamLayoutUtilities.createParamsContainerDiv();
                paramsDIV.inject(this.contentDiv);
                //
                UWA.log(this.collection._models[0]._attributes);

                if (this.model.get("domainid")  !== "Deployment") {

                    iFamilies = this.collection._models[0]._attributes.family;
                    nbofFamilies = iFamilies.length;

                    if (nbofFamilies === 1) {
                        iContent = this.buildFamilyItemContent(iFamilies[0], familyposition);
                        iContent.inject(paramsDIV);
                    } else {
                        iParamAccordion = ParamLayoutUtilities.createFamilyUIKITAccordion(paramsDIV);

                        for (i = 0; i < nbofFamilies; i++) {
                            familyposition = "mid";
                            if (i === 0) {
                                familyposition = "first";
                            } else if (i === nbofFamilies - 1) {
                                familyposition = "last";
                            }
                            iContent = this.buildFamilyItemContent(iFamilies[i], familyposition);
                            iParamAccordion.addItem({
                                title: iFamilies[i].nlsKey,
                                content: iContent,
                                selected : true,
                                name : iFamilies[i].id
                            });
							//IR-670134-3DEXPERIENCER2019x
							iParamAccordion.getItem(i).elements.content.setStyle('overflow-y','visible');
                        }
                    }

                    if (this.nbofShownParameters === 0) {
                        ParamLayoutUtilities.createParamMask(this.contentDiv, ParamSkeletonNLS.NoParamAvailabletxt);
                    }
                } else {
                    this.buildDeploymentTab();
                }

                this.paramScroller = new Scroller({
                    element: paramsDIV
                }).inject(this.contentDiv);

                UWA.log('unmask');
                Mask.unmask(this.contentDiv);
            },

            buildFamilyItemContent : function(iFamily, familyPosition) {
                var familyTable, ftbody;

                familyTable = UWA.createElement('table', {
                    'class': 'table table-hover',
                    'table-layout': 'fixed', //NZV-IR-574318-3DEXPERIENCER2019x
                    'id': iFamily.id + 'familytable'
                });

                ftbody =  UWA.createElement('tbody', {
                    'class': 'fparamtbody',
                    'id': iFamily.id + 'familytbody'
                }).inject(familyTable);

                if (iFamily.id == "ObjectIdentifier") {// NZV IR-548508-3DEXPERIENCER2018x\17x
                    iFamily.parameter.sort(ParamLayoutUtilities.compareContentNamingObject);
                    this.processIDFamily(iFamily, ftbody);
                } else {
                    this.buildParametersLayout(iFamily, ftbody, familyPosition);
                }

                return familyTable;
            },

            buildParametersLayout : function (iElements, familytbody, familyPosition) {

                var i, popoverPosition,
                    familyID = iElements.id,
                    listfofParams = iElements.parameter,
                    nbofRows = listfofParams.length;

                this.handledFamily = familyID;

                /*//ZUR Proto : Array view
                if ((iElements.column !== undefined)
                        && (iElements.column !== null)
                           && (iElements.column.length > 0)) {
                    //listofColumns = iElements.column;
                    this.columnWidthArray = ParamLayoutUtilities.computeColumnsWidths(iElements.column, this.columnWidthArray);
                    this.columnLine = ParamLayoutUtilities.buildColumnsTitleLine(iElements.column, this.columnWidthArray);//BuiltTitle
                    this.columnLine.inject(familytbody);
                    this.ArrayView = true;

                    for (i = 0; i < nbofRows; i++) {
                        popoverPosition = ParamLayoutUtilities.computePopoverPos(i, familyPosition, nbofRows);
                        this.buildParameterLineV2(listfofParams[i], familytbody, popoverPosition);
                        this.nbofShownParameters++;
                    } // of for
                }*/

                if (this.ArrayView === false) {
                    for (i = 0; i < nbofRows; i++) {
                        popoverPosition = ParamLayoutUtilities.computePopoverPos(i, familyPosition, nbofRows);
                        this.buildParameterLine(listfofParams[i], familyID, familytbody, popoverPosition);
                        this.nbofShownParameters++;
                    } // of for
                }

            },//of function

            onKeyDownTextField : function (event) {
               // ParamLayoutUtilities.beingModified(imgCell, ParamSkeletonNLS.ParamBeingModified, '2');
                UWA.log(event);
            },

            /* //ZUR : Proto : Arraw View
            buildParameterLineV2 : function (iParamObj, familytbody, popoverPosition) {

                var i, j, k, iArgument, newParamline, iArgumentList,
                    imgCell, ParamTextCell, imgInfoSpan, ParamInfoCell,
                    popoverTooltip, unit2Display, unitCell,
                    nbofValuesForArg, listofValues, isSelected, controlObjectCell,
                    isArgumentFound = false,
                    that = this,
                    //onChangeToggle, onChangetextfield,onKeyDownTextField, onChangeSelect,
                    iController;

                function onChangeToggle(iController, controlObjectCell, imgCell) {
                    var valuetoSend = iController.isChecked() ? "Enabled" : "Disabled";
                    ParamLayoutUtilities.beingDeployed(imgCell, ParamSkeletonNLS.ParamBeingModified);
                    that.updateParameterOnChange(valuetoSend, controlObjectCell, imgCell);
                }

                function onChangetextfield(iController, controlObjectCell, imgCell) {
                    ParamLayoutUtilities.beingModified(imgCell, ParamSkeletonNLS.ParamBeingModified, '2');
                    that.checkParameterValueOnChange(iController, controlObjectCell, imgCell);
                }

                function onChangeSelect(iController, controlObjectCell, imgCell) {
                    ParamLayoutUtilities.beingModified(imgCell, ParamSkeletonNLS.ParamBeingModified, '2');
                    that.updateRevisioningParameterOnChange(iController, controlObjectCell, imgCell);
                }

                newParamline = UWA.createElement('tr', {title: ''});//iParamObj.tooltipNlsKey

                imgCell = ParamLayoutUtilities.buildDeployStsCell(iParamObj.isDeployed, that.columnWidthArray[3].toString() + '%', '2', 'right');//5%

                ParamTextCell = UWA.createElement('td', {
                    'width' : that.columnWidthArray[0].toString() + '%',
                    'title' : ''
                });
                ParamTextCell.setStyle("vertical-align", "text-bottom");
                UWA.createElement('p', {text: iParamObj.nlsKey, 'class': ''}).inject(ParamTextCell);

                ParamInfoCell = UWA.createElement('td', {
                    'width' : that.columnWidthArray[1].toString() + '%',
                    'align' : 'left'
                });
                ParamInfoCell.setStyle("vertical-align", "text-bottom");

                imgInfoSpan = UWA.createElement('span', {
                    'class' : 'fonticon fonticon-info'
                }).inject(ParamInfoCell);

                imgInfoSpan.setStyle("color", "black");

                popoverTooltip = new Popover({
                    target   : imgInfoSpan,
                    trigger  : "hover",
                    animate  : "true",
                    position : popoverPosition,
                    body     : iParamObj.tooltipNlsKey,
                    title    : ''
                });

                iArgumentList = iParamObj.argument;
                isArgumentFound = false;

                ParamTextCell.inject(newParamline);
                ParamInfoCell.inject(newParamline);

                for (i = 2; i < this.columnLine.childNodes.length - 1; i++) {
                    isArgumentFound = false;
                    for (k = 0; k < iArgumentList.length; k++) {
                        iArgument = iParamObj.argument[k];
                        if (iArgument.id === this.columnLine.childNodes[i].id) {
                        //Add the td
                            UWA.log('id found!!');
                            isArgumentFound = true;
                            //iArgument = iParamObj.argument[0];

                            controlObjectCell = ParamLayoutUtilities.buildControlCell(iParamObj.id, iArgument, that.columnWidthArray[2].toString() + '%');
                            //controlObjectCell.push(tempCell);
                            //var currListLength = controlObjectCell.length;

                            if (iArgument.input === "checkbox") {
                                //NZV-IR-574334-3DEXPERIENCER2019x
                                controlObjectCell.setStyle("vertical-align", "middle");
                                controlObjectCell.setStyle("padding-top", "3px");
                                iController = new Toggle({
                                    type: "checkbox",
                                    className: "primary",
                                    value: "",
                                    //label: "...",
                                    id : iParamObj.id + iArgument.id,
                                    disabled: false,
                                    checked: iArgument.argValue == "Enabled" ? true : false
                                        //onChange: function() {} onClick
                                }).inject(controlObjectCell);
                                //iController.addEvent("onChange", onChangeToggle(iController, controlObjectCell, imgCell));
                                //iController[iController.length - 1].inject(controlObjectCell[currListLength - 1]);
                                /*var myEventListener = {
                                        myProperty : 'event listener',
                                        handleEvent : function (event) {
                                            //UWA.log('"this" is scoped to this ' + this.myProperty);
                                            onChangeToggle(iController, controlObjectCell, imgCell);
                                        }
                                };

                                iController.addEvent("onChange", myEventListener); +/

/*
                                iController.addEvent("onChange", function() {
                                    onChangeToggle(iController, controlObjectCell, imgCell);
                                });+/

                             //   iController.addEvent("onChange", onChangeToggle(iController, controlObjectCell, imgCell));

                            } else if (iArgument.input === "textfield") {
                                //controlObjectCell[currListLength - 1].setStyle("width", "20%");
                                //controlObjectCell.setStyle("width", "20%");
                                iController = new Text({
                                    className: "form-control",
                                    placeholder: "...",
                                    id : iParamObj.id + iArgument.id,
                                    attributes: {
                                        value: iArgument.argValue,
                                        multiline: false,
                                        disabled: false
                                    }
                                    /*events: {
                                        onChange: function () {
                                            ParamLayoutUtilities.beingModified(imgCell, ParamSkeletonNLS.ParamBeingModified, '2');
                                            that.checkParameterValueOnChange(this, controlObjectCell[currListLength - 1], imgCell);
                                        },
                                        onKeyDown: function () {
                                            ParamLayoutUtilities.beingModified(imgCell, ParamSkeletonNLS.ParamBeingModified, '2');
                                        }
                                    }+/
                                }).inject(controlObjectCell);

                               //iController.addEvent("onChange",  onChangetextfield(iController, controlObjectCell, imgCell));
                               // iController.addEvent("onKeyDown", that.onKeyDownTextField());

                                /* iController.addEvent("onKeyDown", function() {
                                    that.onKeyDownTextField(event, imgCell);
                                    });+/
                                //iController[iController.length - 1].inject(controlObjectCell[currListLength - 1]);

                                unit2Display = iParamObj.nlsKey;
                                unitCell = UWA.createElement('td', {
                                    'width': '25%',
                                    'align': 'left',
                                    'html' : unit2Display,
                                    'title': unit2Display
                                });
                                unitCell.setStyle("vertical-align", "text-bottom");
                            } else if (iArgument.input === "combobox") {
                                iController = new Select({
                                    placeholder: false,
                                    nativeSelect: true,
                                    attributes: {
                                        id : iParamObj.id + iArgument.id,
                                        name : iParamObj.id + iArgument.id,
                                        disabled: false
                                    }
                                }).inject(controlObjectCell);//of selectControler

                                iController.getContent().setStyle("width", "100%");
                                //controlObjectCell.set({'title' : iArgument.tooltipNlsKey});//  change it
                                listofValues = iArgument.value;
                                nbofValuesForArg = listofValues.length;
                                for (j = 0; j < nbofValuesForArg; j++) {
                                    isSelected = false;

                                    if (iArgument.argValue == listofValues[j].id) {
                                        isSelected = true;
                                    }

                                    iController.add([{
                                        label: listofValues[j].nlsKey,
                                        value: listofValues[j].id,
                                        selected: isSelected
                                    }], false);
                                }

                                /*iController.addEvent("onChange", function () {
                                    ParamLayoutUtilities.beingModified(imgCell, ParamSkeletonNLS.ParamBeingModified, '2');
                                    that.updateRevisioningParameterOnChange(this, controlObjectCell,imgCell);
                                });+/
                               // iController.addEvent("onChange", onChangeSelect(iController, controlObjectCell, imgCell));
                            } // of  else if (iArgument.input == "combobox")

                            this.inputControls.push(iController);
                            controlObjectCell.inject(newParamline);
                        }//of if arg.id == column.id
                    }

                    if (isArgumentFound === false) {
                        UWA.createElement('td', {
                            'width' : that.columnWidthArray[2].toString() + '%',
                            'align' : 'left'
                        }).inject(newParamline);
                    }
                }

                /*if (iArgument.input === "textfield") {
                    unitCell.inject(newParamline);
                }+/

                imgCell.inject(newParamline);
                newParamline.inject(familytbody);//familyparamtable
            },*/


            buildParameterLine : function (iParamObj, familyID, familytbody, popoverPosition) {

                var j, iArgument, newParamline,
                    imgCell, ParamTextCell, imgInfoSpan, ParamInfoCell, paramTxtToShow,
                    popoverTooltip, controlObjectCell, unit2Display = "", unitCell,
                    iController, nbofValuesForArg, listofValues, isSelected, valuetoSend,
                    bMultiple, bCustom, listOfArg, textfieldTbl, firstTDWidth, firstCol,
                    that = this;

                newParamline = UWA.createElement('tr', {title: ''});//iParamObj.tooltipNlsKey

                iArgument = iParamObj.argument[0];

                imgCell = ParamLayoutUtilities.buildDeployStsCell(iParamObj.isDeployed, that.columnWidthArray[3].toString() + '%', '2', 'right');//5%

                ParamTextCell = UWA.createElement('td', {
                    'width' : that.columnWidthArray[0].toString() + '%',
                    'title' : ''
                });
                ParamTextCell.setStyle("vertical-align", "text-bottom");//iParamObj iArgument

                paramTxtToShow = iArgument.nlsKey;

                if (iArgument.input === "combobox" || iArgument.input === "comboboxmultiselect") {
                    paramTxtToShow = iParamObj.nlsKey;
                }
                UWA.createElement('p', {text: paramTxtToShow,  'class': ''}).inject(ParamTextCell);

                ParamInfoCell = UWA.createElement('td', {
                    'width' : that.columnWidthArray[1].toString() + '%',
                    'align' : 'left'
                });
                ParamInfoCell.setStyle("vertical-align", "text-bottom");

                imgInfoSpan = UWA.createElement('span', {
                    'class' : 'fonticon fonticon-info'
                }).inject(ParamInfoCell);

                imgInfoSpan.setStyle("color", "black");

                popoverTooltip = new Popover({
                    target   : imgInfoSpan,
                    trigger  : "hover",
                    animate  : "true",
                    position : popoverPosition,
                    body     : iArgument.tooltipNlsKey,
                    title    : ''
                });

				//IR-865947-3DEXPERIENCER2022x : increase tooltip width.
				popoverTooltip.elements.container.setStyle("max-width", "400px");
                controlObjectCell = ParamLayoutUtilities.buildControlCell(iParamObj.id, iArgument, that.columnWidthArray[2].toString() + '%');

                if (iArgument.input === "checkbox") {
                     //NZV-IR-574334-3DEXPERIENCER2019x
                    controlObjectCell.setStyle("vertical-align", "middle");
                    controlObjectCell.setStyle("padding-top", "3px");
                    iController = new Toggle({
                        type: "checkbox",
                        className: "primary",
                        value: "",
                        //label: "...",
                        id : iParamObj.id,
                        disabled: false,
                        checked: iArgument.argValue == "Enabled" ? true : false,

                        events: {
                            onChange: function () {
                                ParamLayoutUtilities.beingDeployed(imgCell, ParamSkeletonNLS.ParamBeingModified);
                                valuetoSend = this.isChecked() ? "Enabled" : "Disabled";
                                that.updateParameterOnChange(valuetoSend, controlObjectCell, imgCell);
                            }
                            //onChange: function() {} onClick
                        }
                    }).inject(controlObjectCell);
                } else if (iArgument.input === "textfield") {
                    //NZV-IR-574318-3DEXPERIENCER2019
                    unit2Display = iParamObj.nlsKey;
                    textfieldTbl = UWA.createElement('table', {'title': ""
                            }).inject(controlObjectCell);
                    firstTDWidth = '100%';
                    if (unit2Display !== "") {
                        firstTDWidth = '90%';
                    }
                    firstCol = UWA.createElement('td', {
                        'width': firstTDWidth,
                        'align': 'right'
                    }).inject(textfieldTbl);
                    iController = new Text({
                        className: "form-control",
                        placeholder: "...",
                        id : iParamObj.id,
                        attributes: {
                            value: iArgument.argValue,
                            multiline: false,
                            disabled: false
                        },
                        events: {
                            onChange: function () {
                                ParamLayoutUtilities.beingModified(imgCell, ParamSkeletonNLS.ParamBeingModified, '2');
                                that.checkParameterValueOnChange(this, controlObjectCell, imgCell);
                            },
                            onKeyDown: function () {
                                ParamLayoutUtilities.beingModified(imgCell, ParamSkeletonNLS.ParamBeingModified, '2');
                            }
                        }
                    }).inject(firstCol);

                    unit2Display = iParamObj.nlsKey;
                    if (unit2Display !== "") {
                        unitCell = UWA.createElement('td', {
                            'width': '10%',
                            'align': 'left',
                            'html' : unit2Display,
                            'title': unit2Display
                        });
                        unitCell.setStyle("vertical-align", "text-bottom");
                        unitCell.setStyle("padding-left", "5px");
                    }
                } else if (iArgument.input === "combobox") {
                    iController = new Select({
                        placeholder: false,
                        nativeSelect: true,
                        attributes: {
                            id : iParamObj.id,
                            name : iParamObj.id,
                            disabled: false
                        }
                    });//of selectControler
                    iController.getContent().setStyle("width", "100%");//NZV-IR-574318-3DEXPERIENCER2019x
                    //controlObjectCell.set({'title' : iArgument.tooltipNlsKey});//  change it
                    listofValues = iArgument.value;
                    nbofValuesForArg = listofValues.length;
                    for (j = 0; j < nbofValuesForArg; j++) {
                        isSelected = false;

                        if (iArgument.argValue == listofValues[j].id) {
                            isSelected = true;
                        }

                        iController.add([{
                            label: listofValues[j].nlsKey,
                            value: listofValues[j].id,
                            selected: isSelected
                        }], false);
                    }

                    iController.addEvent("onChange", function () {
                        ParamLayoutUtilities.beingModified(imgCell, ParamSkeletonNLS.ParamBeingModified, '2');
                        //FUN095483
                        if (familyID === "VersionNaming") {
                            //[{id : this.elements.input.id, imageCell : imageCellVal, control : controlObjectCell}]
                            var elemAlreadyExist = false;
                            that.lstRevNamIconModified.forEach(function (elem) {
                                if (elem.id === controlObjectCell.getData('argumentNode').paramid) {
                                    elemAlreadyExist = true;
                                }
                            });
                            if(elemAlreadyExist === false) {
                                var objBeingModified = {
                                    "id" : controlObjectCell.getData('argumentNode').paramid, "imageCell" : imgCell, "inputElement" : this
                                };
                                that.lstRevNamIconModified.push(objBeingModified);
                            }
                            that.updateRevisioningParameterOnChange(this, controlObjectCell, imgCell);
                        } else {
                            that.updateComboParamOnChange(this, controlObjectCell, imgCell);
                        }
                    });

                    iController.inject(controlObjectCell);
                    // of  else if (iArgument.input == "combobox")
                } else if (iArgument.input === "comboboxmultiselect") {
                    bMultiple = true;
                    bCustom = true;
                    iController = new Select({
                        placeholder: false,
                        nativeSelect: true,
                        multiple: bMultiple,
                        custom: bCustom,
                        attributes: {
                            id : iParamObj.id,
                            name : iParamObj.id,
                            disabled: false
                        }
                    });//of selectControler
                    //NZV-IR-574318-3DEXPERIENCER2019x
                    iController.getContent().setStyle("width", "100%");
                    listofValues = iArgument.value;
                    listOfArg = null;
                    if (iArgument.argValue.indexOf(",") > 0) {
                        listOfArg = iArgument.argValue.split(",");
                    } else {
                        listOfArg = [iArgument.argValue];
                    }
                    nbofValuesForArg = listofValues.length;
                    for (j = 0; j < nbofValuesForArg; j++) {
                        isSelected = false;
                        if (listOfArg != null) {
                            listOfArg.forEach(function (item) {
                                if (item == listofValues[j].id) {
                                    isSelected = true;
                                }
                            });
                        }

                        iController.add([{
                            label: listofValues[j].nlsKey,
                            value: listofValues[j].id,
                            selected: isSelected
                        }], false);
                    }

                    iController.addEvent("onChange", function () {
                        ParamLayoutUtilities.beingModified(imgCell, ParamSkeletonNLS.ParamBeingModified, '2');
                        that.updateComboParamOnChange(this, controlObjectCell, imgCell);
                    });

                    iController.inject(controlObjectCell);
                }
             // of  else if (iArgument.input == "comboboxmultiselect")
                this.inputControls.push(iController);

                ParamTextCell.inject(newParamline);
                ParamInfoCell.inject(newParamline);
                controlObjectCell.inject(newParamline);

                if (iArgument.input === "textfield" && unit2Display !== "") {
                    unitCell.inject(textfieldTbl);
                }

                imgCell.inject(newParamline);
                newParamline.inject(familytbody);//familyparamtable
            },

            processIDFamily : function (iFamilyObject, ftbody) {
                var i, j, k, l,
                    iParam, iArg, iType, nbofctes, nbofArgs, nbofValuesForArg, currAppType, labelAffixcell,
                    affixvaluetoshow, iPrefixVal, iSuffixVal, iPrefixDefVal, iSuffixDefVal, internalType,
                    iFamilyToolTip = iFamilyObject.tooltipNlsKey,
                    nbofParamofNamings = iFamilyObject.parameter.length,
                    wdgDeployIndicator = true,
                    cellLabel, controlObjectCellPreview, controlObjectCell, labelSepcell, iVal, trsfVal,
                    lineParam, imgSpan, imgCell, initialPreview,
                    prefixField, suffixField, affixField, sepControler, finalformatinput, initPreftoShow, initSufftoShow,
                    selectControler, isSelected, iTypeNLS,
                    imgTitle = ParamSkeletonNLS.deployedParamtxt,
                    imgClass = 'fonticon fonticon-2x fonticon-check',
                    iconColor = "#57B847",//'green',//IR-772358-3DEXPERIENCER2021x
                    optionsSepArray = [],//new Array(); iFamilyNLS = iFamilyObject.nlsKey,
                    constantArray = [],
                    separatorValue = "-",
                    isCommonParamsDeployed = "true",
                    isNamingParamDeployed = "true",
                    sepElt = ParameterizationDataUtils.paramStructBuilder("id,nlsKey,value"),
                    CteElt = ParameterizationDataUtils.paramStructBuilder("id,value"),
                    NamingElement       = ParameterizationDataUtils.paramStructBuilder("namingID,initialValue,defaultValue,currentValue"),
                    CustoNamingElement  = ParameterizationDataUtils.paramStructBuilder("objTypeID,prefix,suffix,defprefix,defsuffix,appType,deploySts"),
                    WarningLabel = ParameterizationDataUtils.paramStructBuilder("warnID", "warnRaised"),
                    separatorContainer, affixContainer, timerconn,
                    jmin = -1, isTypeSelected = false,
                    popOver = null, imgInfoSpan = null, tooltipCell = null, preFixTooltipCell = null,
                    prefixPopOver = null, prefixImgInfoSpan = null,
                    that = this;

                //1st line : preview line
                lineParam = UWA.createElement('tr', {title: ''}).inject(ftbody);

                cellLabel = UWA.createElement('td', {'width': '30%', 'title': ''}).inject(lineParam);
                UWA.createElement('p', {text: ParamSkeletonNLS.PreviewTxt, 'class': ''}).inject(cellLabel);

                controlObjectCellPreview = UWA.createElement('td', {
                    'width' : '30%',
                    'title' : '',
                    'align' : 'left'
                }).inject(lineParam);

                imgCell = UWA.createElement('td', {
                    'width' : '40%',
                    'title' : '',
                    'id' : 'nameDeployIndicator',
                    align : 'left'
                }).inject(lineParam);

                //1st line bis : Formula Line
                lineParam = ParamLayoutUtilities.buildFormulaLine();
                lineParam.inject(ftbody);

                this.nbofShownParameters = nbofParamofNamings;

                for (j = 0; j < nbofParamofNamings; j++) {
                    iParam = iFamilyObject.parameter[j];

                    if (iParam.id === "IdentifierAffix") {
                        isCommonParamsDeployed = iParam.isDeployed;
                        //getconstants
                        nbofctes = iParam.constant.length;
                        for (l = 0; l < nbofctes; l++) {
                            constantArray[l] = new CteElt(iParam.constant[l].id, iParam.constant[l].value);
                        }

                        nbofArgs = iParam.argument.length;
                        for (k = 0; k < nbofArgs; k++) {
                            if ("AffixArg" === iParam.argument[k].id) {
                                iArg = iParam.argument[k];

                                affixContainer = new NamingElement("IdentifierAffix",
                                        iArg.argValue, iArg.defaultValue,
                                        iArg.argValue);
                                this.commonNamingElts.push(affixContainer);
                            } else if ("SeparatorArg" === iParam.argument[k].id) {
                                iArg = iParam.argument[k];
                                separatorValue = iArg.argValue;
                                nbofValuesForArg = iArg.value.length;

                                for (i = 0; i < nbofValuesForArg; i++) {
                                    iVal = iParam.argument[k].value[i];
                                    trsfVal = iVal.id;

                                    for (l = 0; l < nbofctes; l++) {
                                        if (constantArray[l].id == iVal.id) {
                                            trsfVal =   constantArray[l].value;
                                            break;
                                        }
                                    }

                                    optionsSepArray[i] = new sepElt(trsfVal, iVal.nlsKey, iVal.tooltipNlsKey);
                                    separatorContainer = new NamingElement("SeparatorArg",
                                            separatorValue,
                                            iArg.defaultValue,
                                            separatorValue);
                                    this.commonNamingElts.push(separatorContainer);
                                }//of for loop on the args
                            }//on the if else : iParam.argument[k].id
                        }//of the for loop on the number of args
                        break;
                    }//if (iParam.id == "IdentifierAffix")
                }//of the first loop on the naming params

                if (isCommonParamsDeployed == "false") { wdgDeployIndicator = false; }

                affixvaluetoshow = affixContainer.initialValue;
                if (affixvaluetoshow === "TBD") { affixvaluetoshow = ""; }

                //2nd line Select Object Type Line
                lineParam = UWA.createElement('tr', {title: ''}).inject(ftbody);
                cellLabel = UWA.createElement('td', {'width' : '30%', 'title' : ''}).inject(lineParam);
                UWA.createElement('p', {text: ParamSkeletonNLS.ObjectTypeTxt, 'class' : ''}).inject(cellLabel);
                controlObjectCell = UWA.createElement('td', {'width': '70%', 'colspan': '2', 'title': ''}).inject(lineParam);

                selectControler = new Select({
                    placeholder: false,
                    nativeSelect: true,
                    attributes: {
                        id       : 'iTypeSelect',
                        disabled : false
                    }
                });

                selectControler.getContent().setStyle("width", 300);
                this.inputControls.push(selectControler);

                for (j = 0; j < nbofParamofNamings; j++) {
                    iParam = iFamilyObject.parameter[j];
                    iType = iParam.id;
                    isTypeSelected = false;

                    if (iParam.id != "IdentifierAffix") {
                        isNamingParamDeployed = iParam.isDeployed;
                        iTypeNLS = iParam.nlsKey;

                        if (jmin === -1) {//ZUR
                            jmin = j;
                            isTypeSelected = true;//IR-559116-3DEXPERIENCER2018x
                        }

                        selectControler.add([{
                            label: iTypeNLS,
                            value: iType,
                            selected : isTypeSelected
                        }], false);

                        nbofArgs = iParam.argument.length;
                        if (nbofArgs === 2) {
                            for (l = 0; l < nbofArgs; l++) {
                                iArg = iParam.argument[l];
                                if ("PrefixArg" === iArg.id) {
                                    iPrefixVal = iArg.argValue;
                                    iPrefixDefVal = iArg.defaultValue;
                                } else if ("SuffixArg" === iArg.id) {
                                    iSuffixVal = iArg.argValue;
                                    iSuffixDefVal = iArg.defaultValue;
                                }
                            }//of for loop
                        //of if nbarg == 2
                        } else { UWA.log("Houston, we have a problem!"); }

                        nbofctes = iParam.constant.length;
                        currAppType = "VPM";

                        for (l = 0; l < nbofctes; l++) {
                            if (iParam.constant[l].id === "appType") {
                                currAppType = iParam.constant[l].value;
                            } else if (iParam.constant[l].id === "type") {
                                internalType = iParam.constant[l].value;
                            }
                        }
                        //iArgument.nlsKey,iParamObj.id,iArgument.tooltipNlsKey
                        this.custoNamingsArray.push(new CustoNamingElement(iType,
                                                                        iPrefixVal, iSuffixVal,
                                                                        iPrefixDefVal, iSuffixDefVal,
                                                                        currAppType,
                                                                        isNamingParamDeployed));

                        if (currAppType === "VPM") { this.forbiddenNamings.push(internalType); }

                        if (isTypeSelected === true) {//ZUR - IR-559116-3DEXPERIENCER2018x
                            initPreftoShow = iPrefixVal;
                            initSufftoShow = iSuffixVal;
                        }

                        if (isNamingParamDeployed == "false") { wdgDeployIndicator = false; }

                    }//of if (iParam.id != "IdentifierAffix")
                } //of the 2nd loop on the naming params
                selectControler.inject(controlObjectCell);

                selectControler.addEvent("onChange", function () {
                    that.selectedTypeChanged(this);
                });

                //3rd line : Prefix Line
                lineParam = UWA.createElement('tr', {title: ''}).inject(ftbody);
                cellLabel = UWA.createElement('td', {'width': '30%', 'title': ''}).inject(lineParam);
                UWA.createElement('p', {text: ParamSkeletonNLS.Prefix, 'class': ''}).inject(cellLabel);
                controlObjectCell = UWA.createElement('td', {'width': '30%', 'title': ''}).inject(lineParam);

                prefixField = new Text({
                    placeholder: ParamSkeletonNLS.EmptyValueNotAllowed,
                    attributes: {
                        id : 'prefixInput',
                        value: initPreftoShow,
                        multiline: false,
                        disabled: false
                    },
                    events: {
                        onKeyDown: function () {
                            if (timerconn) { clearTimeout(timerconn); }
                            timerconn = setTimeout(function() {
                                var typeSelector, currSelectedOpt, selectedTypeLabel, cNamingElt;
                                if ((prefixField.getValue()).trim() === "") {
                                    typeSelector = ParamLayoutUtilities.getNamingControlInput(that.inputControls, "iTypeSelect");
                                    currSelectedOpt = typeSelector.getSelection();
                                    selectedTypeLabel = currSelectedOpt[0].label;
                                    cNamingElt = ParamLayoutUtilities.getCustoNamingElement(that.custoNamingsArray, currSelectedOpt[0].value);
                                    prefixPopOver.setBody(ParamSkeletonNLS.EmptyPrefixForbidden + " (" + ParamSkeletonNLS.DefaultPrefixValueOfType + " " + cNamingElt.defprefix + ")");
                                    // if (prefixPopOver.isVisible) {
                                    //     setTimeout(function () {prefixPopOver.hide(); }, 3000);
                                    // }
                                } else {
                                    prefixPopOver.setBody(ParamSkeletonNLS.EmptyPrefixForbidden);
                                    prefixPopOver.hide();
                                }
                                that.testOnlineIdInput('prefixInput');
                            }, 20);
                        }
                    }
                }).inject(controlObjectCell);
                preFixTooltipCell = UWA.createElement('td', {
                    'width' : '40%',
                    'title' : '',
                    'id' : 'nameDeployxxxIndicator',
                    align : 'left'
                }).inject(lineParam);
                prefixImgInfoSpan = UWA.createElement('span', {
                    'class' : 'fonticon fonticon-info tooltipStyle' //IR-772352-3DEXPERIENCER2021x
                }).inject(preFixTooltipCell);

                prefixPopOver = new Popover({
                    target   : prefixImgInfoSpan,
                    trigger  : "hover",
                    animate  : "true",
                    position : 'top',
                    body     : ParamSkeletonNLS.EmptyPrefixForbidden,//ZUR IR-620497-3DEXPERIENCER2019x
                    title    : ''
                });
                prefixField.getContent().setStyle("width", 300);
                prefixField.getContent().set("maxLength", 170);
                this.inputControls.push(prefixField);

                //4th line
                lineParam = UWA.createElement('tr', {title: ''}).inject(ftbody);
                cellLabel = UWA.createElement('td', {'width': '30%', 'title': ''}).inject(lineParam);
                UWA.createElement('p', {text: ParamSkeletonNLS.Suffix, 'class': ''}).inject(cellLabel);

                controlObjectCell = UWA.createElement('td', {'width': '70%', 'colspan': '2', 'title': ''}).inject(lineParam);

                suffixField = new Text({
                    placeholder: "...",
                    attributes: {
                        id : 'suffixInput',
                        value: initSufftoShow,
                        multiline: false,
                        disabled: false
                    },
                    events: {
                        onKeyDown: function () {
                            if (timerconn) { clearTimeout(timerconn); }

                            timerconn = setTimeout(function() {
                                that.testOnlineIdInput('suffixInput');
                            }, 20);
                        }
                    }
                }).inject(controlObjectCell);
                suffixField.getContent().setStyle("width", 300);
                suffixField.getContent().set("maxLength", 170);
                this.inputControls.push(suffixField);

                //5th line : Affix Line
                //NZV - IR-529946-3DEXPERIENCER2017x/18x added tooltip to Affix Line
                lineParam = UWA.createElement('tr', {title: iFamilyToolTip}).inject(ftbody); //tableParameters
                labelAffixcell = UWA.createElement('td', {'width': '30%', 'title': ''}).inject(lineParam);//'class':'',
                UWA.createElement('p', {text: ParamSkeletonNLS.Interfix + ' (' + ParamSkeletonNLS.CommonParam + ') ', 'class': ''}).inject(labelAffixcell);

                controlObjectCell = UWA.createElement('td', {'width': '30%', 'title': ''}).inject(lineParam);

                affixField = new Text({
                    placeholder: "...",
                    attributes: {
                        id : 'sitenameinput',
                        value: affixvaluetoshow,
                        multiline: false,
                        disabled: false
                    },
                    events: {
                        onKeyDown: function () {
                            if (timerconn) { clearTimeout(timerconn); }
                            timerconn = setTimeout(function() {
                                that.testOnlineIdInput('sitenameinput');
                            }, 20);
                        }
                    }
                }).inject(controlObjectCell);
                tooltipCell = UWA.createElement('td', {
                    'width' : '40%',
                    'title' : '',
                    'id' : 'nameDeployxxxIndicator',
                    align : 'left'
                }).inject(lineParam);
                imgInfoSpan = UWA.createElement('span', {
                    'class' : 'fonticon fonticon-info tooltipStyle' //IR-772352-3DEXPERIENCER2021x
                }).inject(tooltipCell);


                popOver = new Popover({
                    target   : imgInfoSpan,
                    trigger  : "hover",
                    animate  : "true",
                    position : 'top',
                    body     : ParamSkeletonNLS.InterfixTooltip,
                    title    : ''
                });
                affixField.getContent().setStyle("width", 300);
                affixField.getContent().set("maxLength", 200);
                this.inputControls.push(affixField);

                //5th line bis : character selector
                lineParam = UWA.createElement('tr', {title: ''}).inject(ftbody);//tableParameters

                labelSepcell = UWA.createElement('td', {'width': '30%', 'title': ''}).inject(lineParam);//'class':'',
                UWA.createElement('p', {text: ParamSkeletonNLS.Separator + ' (' + ParamSkeletonNLS.CommonParam + ') ', 'class': ''}).inject(labelSepcell);
                controlObjectCell = UWA.createElement('td', {'width': '70%', 'colspan': '2', 'title': ''}).inject(lineParam);

                sepControler = new Select({
                    placeholder: false,
                    nativeSelect: true,
                    attributes: {
                        id : 'selectSeparator',
                        disabled: false
                    }
                });
                sepControler.getContent().setStyle("width", 300);

                for (i = 0; i < nbofValuesForArg; i++) {
                    isSelected = false;

                    if (optionsSepArray[i].id == separatorValue) {
                        isSelected = true;
                    }
                    sepControler.add([{
                        label: optionsSepArray[i].nlsKey,//iArgument.value[i].nlsKey,
                        value: optionsSepArray[i].id,//iArgument.value[i].id,
                        selected: isSelected
                    }], false);
                }
                sepControler.inject(controlObjectCell);

                sepControler.addEvent("onChange", function () {
                    that.testOnlineIdInput("sitenameinput");
                });

                this.inputControls.push(sepControler);

                /*//Intermediary Line
                UWA.createElement('tr',{html:  [{ tag: 'th', colspan: 3, html:"<br/><br/>" }] }).inject(ftbody);*/

                //Injecting the preview Input
                if (initSufftoShow === "") {
                    initialPreview = initPreftoShow + separatorValue + affixvaluetoshow + separatorValue + '<' + ParamSkeletonNLS.Counter + '>';
                } else {
                    initialPreview = initPreftoShow + separatorValue + affixvaluetoshow + separatorValue + '<' + ParamSkeletonNLS.Counter + '>' + separatorValue + initSufftoShow;
                }//NZV - IR-559116-3DEXPERIENCER2018x

                finalformatinput = new Text({
                    placeholder: "...",
                    attributes: {
                        id : 'finalformat',
                        value: initialPreview,
                        multiline: false,
                        disabled: false,
                        readonly: true,
                        title : initialPreview
                    }
                }).inject(controlObjectCellPreview);
                finalformatinput.getContent().setStyle("width", 360);
                this.inputControls.push(finalformatinput);

                if (wdgDeployIndicator == false) {
                    iconColor = "orange";
                    imgTitle = ParamSkeletonNLS.notdeployedParamtxt;
                    imgClass = 'fonticon fonticon-2x fonticon-cog';
                    //CommonUtilities.dispatchNeedDeployEvt(paramWidget);
                }
                imgSpan = UWA.createElement('span', {
                    'class' :  imgClass
                }).inject(imgCell);
                imgSpan.setStyle("color", iconColor);
                imgCell.set("Title", imgTitle);

                this.warnArrays[0] = new WarningLabel("sitenameinput", false);
                this.warnArrays[1] = new WarningLabel("prefixInput", false);
                this.warnArrays[2] = new WarningLabel("suffixInput", false);
            },

            selectedTypeChanged : function (iInput) {
                var cNamingElt, nInput, affixInput, separatorSelector,
                    typeSelector = ParamLayoutUtilities.getNamingControlInput(this.inputControls, "iTypeSelect"),
                    currSelectedOpt = typeSelector.getSelection(),
                    selectedTypeLabel = currSelectedOpt[0].label;

                cNamingElt = ParamLayoutUtilities.getCustoNamingElement(this.custoNamingsArray, currSelectedOpt[0].value);
                nInput = ParamLayoutUtilities.getNamingControlInput(this.inputControls, "prefixInput");
                nInput.setValue(cNamingElt.prefix);
                nInput = ParamLayoutUtilities.getNamingControlInput(this.inputControls, "suffixInput");
                nInput.setValue(cNamingElt.suffix);

                affixInput = ParamLayoutUtilities.getNamingControlInput(this.inputControls, "sitenameinput");
                separatorSelector = ParamLayoutUtilities.getNamingControlInput(this.inputControls, "selectSeparator");
                currSelectedOpt = separatorSelector.getSelection();

                ParamLayoutUtilities.UpdateFinalFormatOverView(cNamingElt.prefix, affixInput.getValue(), cNamingElt.suffix, currSelectedOpt[0].value,
                                                               cNamingElt.appType,
                                                                ParamLayoutUtilities.getNamingControlInput(this.inputControls, "finalformat"));
                typeSelector.elements.input.title = selectedTypeLabel;
            },

            testOnlineIdInput : function(inputID) {
                var i, iID, iAffixID, iWrn, imgCell, currSelectedOpt, currSelectedSepOpt, controlupdate, cSeparator, cNamingElt, selectedTypeLabel,
                    typeSelector = ParamLayoutUtilities.getNamingControlInput(this.inputControls, "iTypeSelect"),
                    separatorSelector = ParamLayoutUtilities.getNamingControlInput(this.inputControls, "selectSeparator"),
                    inputToTest =  ParamLayoutUtilities.getNamingControlInput(this.inputControls, inputID),//"sitenameinput"
                    inputValue = inputToTest.getValue(),
                    containsInternalTypeName = false,
                    containSpecialchars = false,
                    errInputMsg = ParamSkeletonNLS.SpecialCharMsg,
                    applyBttnPtr = this.controlDiv.getElements('.btn-primary')[0],
                    tbodyreflist = this.contentDiv.getElements('.fparamtbody'),
                    prefixElm = ParamLayoutUtilities.getNamingControlInput(this.inputControls, "prefixInput"),
                    suffixElm = ParamLayoutUtilities.getNamingControlInput(this.inputControls, "suffixInput"),
                    affixElm = ParamLayoutUtilities.getNamingControlInput(this.inputControls, "sitenameinput");

                imgCell = ParamLayoutUtilities.getNamingDeployCellSts(tbodyreflist);//"nameDeployIndicator"
                ParamLayoutUtilities.beingModified(imgCell, ParamSkeletonNLS.ParamBeingModified, '2');

                for (i = 0; i < this.warnArrays.length; i++) {
                    if (this.warnArrays[i].warnID === inputID) {
                        iWrn = i;
                        break;
                    }
                }
                containSpecialchars = ParamLayoutUtilities.testSpecialCharacters(inputValue);
                if ((inputID === "prefixInput") || (inputID === "suffixInput")) {
                    containsInternalTypeName = this.testInputForTypeIds(inputValue);
                }
                //NZV-IR-600551-3DEXPERIENCER2019x
                if ((containSpecialchars === true) || (containsInternalTypeName === true) ||
                        (inputValue === "" && (inputID === "prefixInput" || inputID === "sitenameinput"))) {
                    if ((ParamLayoutUtilities.testSpecialCharacters(inputValue) === true) || (containsInternalTypeName === true) ||
                            (inputValue === "" && inputID === "prefixInput")) {
                        applyBttnPtr.disabled = true;
                        typeSelector.elements.input.disabled = true;
                        separatorSelector.elements.input.disabled = true;
                        //block all except it
                        if (inputID === "prefixInput") {
                            suffixElm.elements.input.disabled = true;
                            affixElm.elements.input.disabled = true;
                        }
                        if (inputID === "suffixInput" && containSpecialchars === true) {
                            prefixElm.elements.input.disabled = true;
                            affixElm.elements.input.disabled = true;
                        }
                        if (inputID === "sitenameinput") {
                            prefixElm.elements.input.disabled = true;
                            suffixElm.elements.input.disabled = true;
                        }
                        if (inputValue === "" && inputID === "prefixInput") {
                            currSelectedOpt = typeSelector.getSelection();
                            cNamingElt = ParamLayoutUtilities.getCustoNamingElement(this.custoNamingsArray, currSelectedOpt[0].value);
                            errInputMsg = ParamSkeletonNLS.EmptyPrefixForbidden + " (" + ParamSkeletonNLS.DefaultPrefixValueOfType + " " + cNamingElt.defprefix + ")";
                        }
                        if (containsInternalTypeName === true) {
                            inputToTest.elements.input.style.color = 'red';
                            errInputMsg = ParamSkeletonNLS.typesForbiddenMessage;
                        }
                        if (containSpecialchars === true) {
                            inputToTest.elements.input.style.color = 'red';
                            errInputMsg = ParamSkeletonNLS.SpecialCharMsg;
                        }
                        this.ErrorMsgPopup = ParamLayoutUtilities.inputErrorCell(imgCell, errInputMsg, 'red', this.ErrorMsgPopup);
                        this.warnArrays[iWrn].warnRaised = true;
                    }
                    if (inputValue === "" && inputID === "sitenameinput") {
                        errInputMsg = ParamSkeletonNLS.InterfixTooltip;
                        this.ErrorMsgPopup = ParamLayoutUtilities.inputErrorCell(imgCell, errInputMsg, 'orange', this.ErrorMsgPopup);
                        typeSelector.elements.input.disabled = false;
                        separatorSelector.elements.input.disabled = false;
                        applyBttnPtr.disabled = false;
                        prefixElm.elements.input.disabled = false;
                        suffixElm.elements.input.disabled = false;
                    }
                    //IR-685759-3DEXPERIENCER2020x : updating Preview even in case error or warning
                    currSelectedOpt = typeSelector.getSelection();
                    cNamingElt = ParamLayoutUtilities.getCustoNamingElement(this.custoNamingsArray, currSelectedOpt[0].value);
                    ParamLayoutUtilities.UpdateFinalFormatOverView(cNamingElt.prefix, affixElm.getValue(), cNamingElt.suffix,
                                                                  (separatorSelector.getSelection())[0].value, cNamingElt.appType,
                                                                   ParamLayoutUtilities.getNamingControlInput(this.inputControls, "finalformat"));
                    inputToTest.focus();
                } else {
                    this.warnArrays[iWrn].warnRaised = false;
                    controlupdate = ParamLayoutUtilities.getNamingControlInput(this.inputControls, this.warnArrays[iWrn].warnID);
                    controlupdate.elements.input.style.color = "#555555";//070E14 color: #555;

                    iAffixID = ParamLayoutUtilities.getCommonNamingElementItr(this.commonNamingElts, "IdentifierAffix");

                    if ("sitenameinput" ===  inputID) {
                        this.commonNamingElts[iAffixID].currentValue = inputValue;
                    } else {
                        currSelectedOpt = typeSelector.getSelection();
                        iID = ParamLayoutUtilities.getIndexInNamingArray(this.custoNamingsArray, currSelectedOpt[0].value);

                        if (inputID === "prefixInput") {
                            this.custoNamingsArray[iID].prefix = inputValue;
                        } else if (inputID === "suffixInput") {
                            this.custoNamingsArray[iID].suffix = inputValue;
                        }
                    }

                    currSelectedSepOpt = separatorSelector.getSelection();
                    cSeparator = currSelectedSepOpt[0].value;

                    currSelectedOpt = typeSelector.getSelection();
                    selectedTypeLabel = currSelectedOpt[0].label;
                    cNamingElt = ParamLayoutUtilities.getCustoNamingElement(this.custoNamingsArray, currSelectedOpt[0].value);

                    ParamLayoutUtilities.UpdateFinalFormatOverView(cNamingElt.prefix, affixElm.getValue(), suffixElm.getValue(),
                                                                   cSeparator, cNamingElt.appType,
                                                                   ParamLayoutUtilities.getNamingControlInput(this.inputControls, "finalformat"));

                    if (ParamLayoutUtilities.CheckforRaisedWarnings(this.warnArrays) === "OK") {
                        if (this.ErrorMsgPopup  != null) {
                            if (this.ErrorMsgPopup.isVisible) {this.ErrorMsgPopup.hide(); }
                        }
                        ParamLayoutUtilities.beingModified(imgCell, ParamSkeletonNLS.ParamBeingModified, '2');

                        for (i = 0; i < this.warnArrays.length; i++) {
                            controlupdate = ParamLayoutUtilities.getNamingControlInput(this.inputControls, this.warnArrays[i].warnID);
                            controlupdate.elements.input.style.color = "#555555";//070E14 color: #555;
                        }

                        typeSelector.elements.input.disabled = false;
                        separatorSelector.elements.input.disabled = false;
                        applyBttnPtr.disabled = false;
                        prefixElm.elements.input.disabled = false;
                        suffixElm.elements.input.disabled = false;
                        affixElm.elements.input.disabled = false;

                        /*if (tSiteName == "")//IR-207199V6R2014 {
                            //document.getElementById("labelwarning").innerHTML="<affixDefineTooltip>";} else */
                    }
                }

            },//of function testonlineinputname

            testInputForTypeIds : function (iInputString) {
                var i,
                    typeSelector = ParamLayoutUtilities.getNamingControlInput(this.inputControls, "iTypeSelect"),
                    currSelectedOpt = typeSelector.getSelection(),
                    currNamingElt = ParamLayoutUtilities.getCustoNamingElement(this.custoNamingsArray, currSelectedOpt[0].value),
                    currAppType = currNamingElt.appType;

                if (currAppType === "VPM") {
                    for (i = 0; i < this.forbiddenNamings.length; i++) {
                        if (iInputString.indexOf(this.forbiddenNamings[i]) !== -1) {
                            return true;
                        }
                    }
                }
                return false;
            },

            UpdateCommonParamsOnServer : function () {
                var iParam, imgCell,
                    jsonArr = [],
                    ArgArr = [],
                    affixInput = ParamLayoutUtilities.getNamingControlInput(this.inputControls, "sitenameinput"),
                    separatorSelector = ParamLayoutUtilities.getNamingControlInput(this.inputControls, "selectSeparator"),
                    currSelectedOpt = separatorSelector.getSelection(),
                    separatorVal = currSelectedOpt[0].value,
                    AffixValue = affixInput.getValue(),
                    tbodyreflist = this.contentDiv.getElements('.fparamtbody');

                if (AffixValue === "") { AffixValue = "TBD"; }

                Mask.mask(this.contentDiv);

                ArgArr.push({id: "AffixArg", value: AffixValue});
                ArgArr.push({id: "SeparatorArg", value: separatorVal});

                iParam = {
                    domain: this.model.get("domainid"),
                    id: "IdentifierAffix",
                    argument : ArgArr
                };

                imgCell = ParamLayoutUtilities.getNamingDeployCellSts(tbodyreflist);

                jsonArr.push(iParam);
                /*var func2 = func1.bind(this); func2(params);*/
                ParameterizationWebServices.postParamsArrOnServer.call(this, this.connectProps, jsonArr, imgCell,
                    this.onApplyFailure.bind(this), this.postNamingParams.bind(this));
            },//of function UpdateCommonParamsOnServer

            postNamingParams : function(json, theImageCell) {
                UWA.log("postNamingParams");

                var i, ArgArr, iParam,
                    jsonArr = [];

                for (i = 0; i < this.custoNamingsArray.length; i++) {
                    ArgArr = [];
                    ArgArr.push({id: "PrefixArg", value: this.custoNamingsArray[i].prefix});
                    ArgArr.push({id: "SuffixArg", value: this.custoNamingsArray[i].suffix});

                    iParam = {
                        domain : this.model.get("domainid"),
                        id : this.custoNamingsArray[i].objTypeID,
                        argument : ArgArr
                    };
                    jsonArr.push(iParam);
                }

                ParameterizationWebServices.postParamsArrOnServer.call(this, this.connectProps, jsonArr, theImageCell,
                    this.onApplyFailure.bind(this), this.onApplySuccess.bind(this));
            },

            ResetNamingParams : function() {
                var i, iID, imgCell, tbodyreflist, affixInput, sepControler, optionValue, prefixElm,
                    suffixElm, affixElm, typeSelector, separatorSelector, applyBttnPtr;

                iID = ParamLayoutUtilities.getCommonNamingElementItr(this.commonNamingElts, "IdentifierAffix");
                this.commonNamingElts[iID].currentValue = URLHandler.getTenant();//this.commonNamingElts[iID].defaultValue;
                iID = ParamLayoutUtilities.getCommonNamingElementItr(this.commonNamingElts, "SeparatorArg");
                this.commonNamingElts[iID].currentValue = this.commonNamingElts[iID].defaultValue;

                affixInput = ParamLayoutUtilities.getNamingControlInput(this.inputControls, "sitenameinput");
                affixInput.setValue(URLHandler.getTenant());//this.connectProps.tenantID affixContainer.defaultValue;

                sepControler = ParamLayoutUtilities.getNamingControlInput(this.inputControls, "selectSeparator");

                for (i = 0; i < sepControler.elements.input.length; i++) {
                    optionValue = sepControler.elements.input[i].value;

                    if (optionValue == this.commonNamingElts[iID].defaultValue) {
                        sepControler.select(i, true, false);
                        break;
                    }
                }//of for elements
                //clear warning array
                //NZV-IR-600551-3DEXPERIENCER2019x
                for (i = 0; i < this.warnArrays.length; i++) {
                    this.warnArrays[i].warnRaised = false;
                }
                 //enable all inputs
                prefixElm = ParamLayoutUtilities.getNamingControlInput(this.inputControls, "prefixInput");
                suffixElm = ParamLayoutUtilities.getNamingControlInput(this.inputControls, "suffixInput");
                affixElm = ParamLayoutUtilities.getNamingControlInput(this.inputControls, "sitenameinput");
                typeSelector = ParamLayoutUtilities.getNamingControlInput(this.inputControls, "iTypeSelect");
                separatorSelector = ParamLayoutUtilities.getNamingControlInput(this.inputControls, "selectSeparator");
                applyBttnPtr = this.controlDiv.getElements('.btn-primary')[0];
                typeSelector.elements.input.disabled = false;
                separatorSelector.elements.input.disabled = false;
                applyBttnPtr.disabled = false;
                prefixElm.elements.input.disabled = false;
                suffixElm.elements.input.disabled = false;
                affixElm.elements.input.disabled = false;
                //Prefixes and Suffixes
                for (i = 0; i < this.custoNamingsArray.length; i++) {
                    this.custoNamingsArray[i].prefix = this.custoNamingsArray[i].defprefix;
                    this.custoNamingsArray[i].suffix = this.custoNamingsArray[i].defsuffix;
                }

                this.selectedTypeChanged();//Updating View

                tbodyreflist = this.contentDiv.getElements('.fparamtbody');
                imgCell = ParamLayoutUtilities.getNamingDeployCellSts(tbodyreflist);//Deploy Indicator
                ParamLayoutUtilities.beingModified(imgCell, ParamSkeletonNLS.ParamBeingModified, '2');

                this.applyParams();
            },

            buildDeploymentTab : function () {
                var tableImport, deploytbody, iDeployAccordion, tableUtilities, globalDeplDiv,
                    lineExport, cellExportText, buttonExportCell, exportBttn, cellInfo,
                    lineImport, cellImportContainer, cellImportText, fileController,
                    importBttnCell, importBttnGrp,
                    lineDeployButton, ApplyBttnCell, ApplyBttn, cellDeployText, FamilyDeploySts, ParameterDeploySts,
                    indexLine, reloadCacheLine, exportCATNLSLine,
                    tablePropagAtt, propagAttLine,
                    dplWdthArr = [40, 10, 25, 25, 190], //NZV :here last value(190) of array is width of all buttons
                    that = this; //NZV:IR-628784-3DEXPERIENCER2019x

                globalDeplDiv = ParamLayoutUtilities.createParamsContainerDiv();
                globalDeplDiv.inject(this.contentDiv);

                iDeployAccordion = ParamLayoutUtilities.createFamilyUIKITAccordion(globalDeplDiv);

                tableImport = UWA.createElement('table', {
                    'class': 'table table-hover',//'tableImportExport',
                    'id': ''
                });

                deploytbody =  UWA.createElement('tbody', {
                    'class': 'fparamtbody',
                    'id': ''
                }).inject(tableImport);

                //intermediaryLine = ParamLayoutUtilities.buildSeparationLine('Import and Export Utilities');

                lineExport = UWA.createElement('tr').inject(deploytbody);

                cellExportText = UWA.createElement('td', {
                    //'colspan': '2',
                    'width': dplWdthArr[0].toString() + '%',
                    'align': 'left'
                }).inject(lineExport);

                UWA.createElement('p', {
                    text: ParamSkeletonNLS.ExportConfiguration,
                    'class': ''
                }).inject(cellExportText);

                cellInfo = UWA.createElement('td', {
                    'width': dplWdthArr[1].toString() + '%',
                    'align': 'left'
                }).inject(lineExport);

                ParamLayoutUtilities.buildPopoverSpan(cellInfo, ParamSkeletonNLS.ExportTooltip);

                UWA.createElement('td', {
                    'width': dplWdthArr[2].toString() + '%',
                    'align': 'left'
                }).inject(lineExport);

                buttonExportCell = UWA.createElement('td', {
                    'width'  :  dplWdthArr[3].toString() + '%'
                }).inject(lineExport);

                exportBttn =  new Button({
                    className: 'primary',
                    id : 'buttonExport',
                    icon: 'export',//'download'//value: 'Button',
                    attributes: {
                        disabled: false,
                        //title: ParamSkeletonNLS.ExportTxt,
                        text : ParamSkeletonNLS.ExportTxt
                    },
                    events: {
                        onClick: function () {
                            that.launchFilesExport("Parameterization_Export");
                        }
                    }
                }).inject(buttonExportCell);
                exportBttn.getContent().setStyle("width", dplWdthArr[4]);

                lineImport = UWA.createElement('tr').inject(deploytbody);//tbody

                cellImportText = UWA.createElement('td', {
                    'width': dplWdthArr[0].toString() + '%',
                    'align': 'left'
                }).inject(lineImport);

                UWA.createElement('p', {
                    text: ParamSkeletonNLS.SelectImportFile,
                    'class': ''
                }).inject(cellImportText);

                cellInfo = UWA.createElement('td', {
                    'width': dplWdthArr[1].toString() + '%',
                    'align': 'left'
                }).inject(lineImport);

                ParamLayoutUtilities.buildPopoverSpan(cellInfo, ParamSkeletonNLS.ImportFileTooltip);

                cellImportContainer = UWA.createElement('td', {
                    'width': dplWdthArr[2].toString() + '%',
                    'align': 'left',
                    'title': ''
                });

                fileController = new UWA.Controls.Input.File({
                    attributes: {
                        'id': 'ImportFileInput'
                    },
                    className: 'xml-file-input'
                }).inject(cellImportContainer);

                fileController.getContent().setStyle("width", 250);

                importBttnCell = UWA.createElement('td', {
                    'width': dplWdthArr[3].toString() + '%',
                    'align': 'left'
                });

                importBttnGrp = new Button({
                    value: ParamSkeletonNLS.ImportBttnTxt,
                    className: 'primary',
                    icon: 'fonticon-upload',
                    attributes: {
                        title: ParamSkeletonNLS.ImportFile
                    },
                    dropdown: {
                        items: [
                            { text: ParamSkeletonNLS.ImportBttnTxt, name : 'Import', title : ParamSkeletonNLS.ImportNoApplytooltip },
                            { text: ParamSkeletonNLS.ImportAndApply, name : 'importNdeploy', title : ParamSkeletonNLS.ImportApplytooltip }
                        ]
                    }
                }).inject(importBttnCell);

                importBttnGrp.addEvent('onDropdownClick', function (e, item) {
                    that.onXMLFileSelected(item.name);
                });

                importBttnGrp.getContent().setStyle("width", dplWdthArr[4]);

                /*cellSpinnerContainer = UWA.createElement('td', {
                    'width': dplWdthArr[3].toString() + '%',
                    'align': 'center',
                    'title': ''
                });*/

                //cellImportText.inject(lineImport);
                cellImportContainer.inject(lineImport);
                importBttnCell.inject(lineImport);
                lineImport.inject(deploytbody);

                FamilyDeploySts = this.collection._models[0]._attributes.family;
                ParameterDeploySts = FamilyDeploySts[0].parameter;

                lineDeployButton = UWA.createElement('tr');

                if (ParameterDeploySts[0].isDeployed == "true") {
                    lineDeployButton.hide();
                }

                cellDeployText = UWA.createElement('td', {
                    'width': dplWdthArr[0].toString() + '%',
                    'align': 'left'
                    //'title': ParamSkeletonNLS.ApplyNonDeployed
                }).inject(lineDeployButton);

                UWA.createElement('p', {
                    text: ParamSkeletonNLS.ApplyNonDeployed,
                    'class': ''
                }).inject(cellDeployText);

                cellInfo = UWA.createElement('td', {
                    'width': dplWdthArr[1].toString() + '%',
                    'align': 'left'
                }).inject(lineDeployButton);

                ParamLayoutUtilities.buildPopoverSpan(cellInfo, ParamSkeletonNLS.ApplyNonDeployed);

                UWA.createElement('td', {
                    'width': dplWdthArr[2].toString() + '%',
                    'align': 'left'
                }).inject(lineDeployButton);

                ApplyBttnCell = UWA.createElement('td', {
                    //'colspan': '2',
                    'width': dplWdthArr[3].toString() + '%',
                    'align': 'left',
                    'title': ''
                }).inject(lineDeployButton);

                ApplyBttn = new Button({
                    id : 'buttonImport',
                    className: 'primary',
                    icon: 'fonticon-forward',
                    value: ParamSkeletonNLS.Apply,
                    attributes: {
                        //title: ParamSkeletonNLS.Apply,
                        text : ParamSkeletonNLS.Apply
                    },
                    events: {
                        onClick: function () {
                            Mask.mask(that.contentDiv);
                            ParameterizationWebServices.deployParamsOnServer.call(that,
                                that.onDeployFailure.bind(that), that.onDeploySuccess.bind(that));
                        }
                    }
                }).inject(ApplyBttnCell);

                ApplyBttn.getContent().setStyle("width", dplWdthArr[4]);
                lineDeployButton.inject(deploytbody);

                iDeployAccordion.addItem({
                    title: ParamSkeletonNLS.ImportExportConfigTxt,
                    content: tableImport,
                    selected : true,
                    name : 'ImpExpid'
                });

                tableUtilities = UWA.createElement('table', {
                    'class': 'table table-hover',//'tableImportExport',
                    'id': ''
                });

                deploytbody =  UWA.createElement('tbody', {
                    'class': 'fparamtbody',
                    'id': ''
                }).inject(tableUtilities);

                /*intermediaryLine = ParamLayoutUtilities.buildSeparationLine(ParamSkeletonNLS.DeploymentUtilitiesTxt);*/

                indexLine = this.buildIndexationLine(dplWdthArr);
                indexLine.inject(deploytbody);

                reloadCacheLine = this.buildReloadCacheLine(dplWdthArr);
                reloadCacheLine.inject(deploytbody);

                exportCATNLSLine = this.buildExportLine(dplWdthArr, 'ParameterizationCATNls',
                    ParamSkeletonNLS.DownloadTxt, ParamSkeletonNLS.DownloadTooltip,
                    ParamSkeletonNLS.DownloadCATNLSTxt);

                exportCATNLSLine.inject(deploytbody);

                iDeployAccordion.addItem({
                    title: ParamSkeletonNLS.DeploymentUtilitiesTxt,
                    content: tableUtilities,
                    selected : true,
                    name : 'Utilitiesid'
                });

                tablePropagAtt = UWA.createElement('table', {
                    'class': 'table table-hover',//table deployment auto ext
                    'id': 'PropagAtt'
                });

                deploytbody =  UWA.createElement('tbody', {
                    'class': 'fparamtbody',
                    'id': ''
                }).inject(tablePropagAtt);

                propagAttLine = PropagLayoutUtilities.buildPropagAttLine(dplWdthArr, this);
                propagAttLine.inject(deploytbody);

                iDeployAccordion.addItem({
                    title: ParamSkeletonNLS.PropagationTitle,
                    content: tablePropagAtt,
                    selected : false,
                    name : 'PropagAttid'
                });

                this.paramScroller = new Scroller({
                    element: globalDeplDiv
                }).inject(this.contentDiv);

            },

            onXMLFileSelected : function (currAction) {
                //console.log(' File {0} has been selected', this._ FilePath); //fileobject as entry
                var fileInput = document.getElementById('ImportFileInput');
                var that = this;
                if (fileInput.files.length === 1) { //FUN102019 21x FD03
                    var dataInfo = { "about": "checkConfigAvailiability"}
                    var data = {"theThat":that, "File" :fileInput.files[0], "iAction" : currAction };
                    ParameterizationWebServices.getRquestOnParamService("integrity/getParamInfo", dataInfo, function (result,dataelem) {
                    if (result.infoValue == "true") {
                            console.log("XParameter(s) are found");
                            ParamLayoutUtilities.showContextualDeleteModal(widget.body, "delAttrModal", ParamSkeletonNLS.ImportWarning+"\n"+ParamSkeletonNLS.ImportWarningSec+"\n"+ParamSkeletonNLS.ImportWarningThird,
                            ParamSkeletonNLS.YesText,  ParamSkeletonNLS.NoText, ParamSkeletonNLS.Warning+"!",that.launchImportProcess, data);
                        } else {
                            console.log("No XParameter found");
                            that.launchImportProcess(data);
                        }
                   }, function (result, dataelem) {console.log("Failed : "+"getParamInfo request");console.log ("Failed : "+ result);})
                   // currAction.theThat.launchImportProcess(fileInput.files[0], currAction.name);
                } else {
                    that.userMessaging.add({ className: "warning", message: ParamSkeletonNLS.NotSelectedMsg });
                }
            },

            buildIndexationLine : function (wdthArray) {
                var buttonIndexCell, cellExportText, cellInfo, indexBttn,
                    indexLine = UWA.createElement('tr'),
                    that = this;

                cellExportText = UWA.createElement('td', {
                    //'colspan': '2',
                    'width': wdthArray[0].toString() + '%',
                    'align': 'left'
                }).inject(indexLine);

                UWA.createElement('p', {
                    text: ParamSkeletonNLS.IndexationTxt,
                    'class': ''
                }).inject(cellExportText);

                cellInfo = UWA.createElement('td', {
                    'width': wdthArray[1].toString() + '%',
                    'align': 'left'
                }).inject(indexLine);

                ParamLayoutUtilities.buildPopoverSpan(cellInfo, ParamSkeletonNLS.IndexationTooltip);

                UWA.createElement('td', {
                    'width': wdthArray[2].toString() + '%',
                    'align': 'left'
                }).inject(indexLine);

                buttonIndexCell = UWA.createElement('td', {
                    'width'  : wdthArray[3].toString() + '%'
                }).inject(indexLine);

                indexBttn =  new Button({
                    className: 'primary',
                    id : 'buttonIndex',
                    icon: 'archive',
                    attributes: {
                        disabled: false,
                       // title: ParamSkeletonNLS.IndexationBtnTxt,
                        text : ParamSkeletonNLS.IndexationBtnTxt
                    },
                    events: {
                        onClick: function () {
                            ParameterizationWebServices.launchServiceOnServer.call(that, 'datamodel/launchIndex',
                                that.onIndexLaunchFailure.bind(that), that.onIndexLaunchSuccess.bind(that));
                            that.userDeployMessaging.add({ className: "info", message: ParamSkeletonNLS.IndexationInfo});
                        }
                    }
                }).inject(buttonIndexCell);
                indexBttn.getContent().setStyle("width", wdthArray[4]);

                return indexLine;
            },

            buildReloadCacheLine : function (wdthArray) {
                var buttonCacheCell, cellInfo, cellCacheText, relCacheBttn,
                    reloadCacheLine = UWA.createElement('tr'),
                    that = this;

                cellCacheText = UWA.createElement('td', {
                    'width': wdthArray[0].toString() + '%',
                    'align': 'left',
                    'title': ''
                }).inject(reloadCacheLine);

                UWA.createElement('p', {
                    text: ParamSkeletonNLS.ReloadCacheTxt,
                    'class': ''
                }).inject(cellCacheText);

                cellInfo = UWA.createElement('td', {
                    'width': wdthArray[1].toString() + '%',
                    'align': 'left'
                }).inject(reloadCacheLine);

                ParamLayoutUtilities.buildPopoverSpan(cellInfo, ParamSkeletonNLS.ReloadCacheTooltip);

                UWA.createElement('td', {
                    'width': wdthArray[2].toString() + '%',
                    'align': 'left'
                }).inject(reloadCacheLine);

                buttonCacheCell = UWA.createElement('td', {
                    'width'  : wdthArray[3].toString() + '%'
                }).inject(reloadCacheLine);

                relCacheBttn =  new Button({
                    className: 'primary',
                    id : 'buttonReloadCache',
                    icon: 'picture',
                    attributes: {
                        disabled: false,
                        //title: ParamSkeletonNLS.ReloadCacheBttn,
                        text : ParamSkeletonNLS.ReloadCacheBttn
                    },
                    events: {
                        onClick: function () {
                            ParameterizationWebServices.launchServiceOnServer.call(that, 'access/reloadcache',
                                that.onReloadCacheSuccess.bind(that), that.onReloadCacheFailure.bind(that));
                            Mask.mask(that.contentDiv);
                            //that.userDeployMessaging.add({ className: "info", message: ''});
                        }
                    }
                }).inject(buttonCacheCell);
                relCacheBttn.getContent().setStyle("width", wdthArray[4]);

                return reloadCacheLine;
            },

            buildExportLine : function (dplWdthArr, iFileID, exportBtntext, exportBtnTooltip, exportCellText) {

                var cellExportText, exportBttn, buttonExportCell, cellInfo,
                    lineExport = UWA.createElement('tr'),
                    that = this;

                cellExportText = UWA.createElement('td', {
                    //'colspan': '2',
                    'width': dplWdthArr[0].toString() + '%',
                    'align': 'left',
                    'title': exportCellText
                }).inject(lineExport);

                UWA.createElement('p', {
                    text: exportCellText,
                    'class': ''
                }).inject(cellExportText);

                cellInfo = UWA.createElement('td', {
                    'width': dplWdthArr[1].toString() + '%',
                    'align': 'left'
                }).inject(lineExport);

                ParamLayoutUtilities.buildPopoverSpan(cellInfo, exportBtnTooltip);

                UWA.createElement('td', {
                    'width': dplWdthArr[2].toString() + '%',
                    'align': 'left'
                }).inject(lineExport);

                buttonExportCell = UWA.createElement('td', {
                    'width'  : dplWdthArr[3].toString() + '%'
                }).inject(lineExport);

                exportBttn =  new Button({
                    className: 'primary',
                    id : 'buttonExport' + iFileID,
                    icon: 'export',//'download'//value: 'Button',
                    attributes: {
                        disabled: false,
                       // title: exportBtntext,
                        text : exportBtntext
                    },
                    events: {
                        onClick: function () {
                            that.launchFilesExport(iFileID);
                        }
                    }
                }).inject(buttonExportCell);
                exportBttn.getContent().setStyle("width", dplWdthArr[4]);

                return lineExport;
            },

            onIndexLaunchFailure : function (iRes) {
                UWA.log("Failure");
                UWA.log(iRes);
            },

            onIndexLaunchSuccess : function (iRes) {
                UWA.log("Success");
                UWA.log(iRes);
            },

            onReloadCacheFailure : function (iRes) {
                UWA.log("timeout");
                Mask.unmask(this.contentDiv);
                this.userDeployMessaging.add({ className: "info", message: ParamSkeletonNLS.ReloadCacheTimeout});
                UWA.log(iRes);
            },

            onReloadCacheSuccess : function (iRes) {
                UWA.log("onReloadCacheSuccess::");
                Mask.unmask(this.contentDiv);
                this.userMessaging.add({ className: "success", message: ParamSkeletonNLS.ReloadCacheSuccessMsg});
                UWA.log(iRes);
            },

            //FUN102019 21x FD03 : change input argument
            launchImportProcess : function (data) {
                var reader, importerrmsg, unabletoreadfile,
                    textType = /text.*/,
                    that = data.theThat, File = data.File, iAction = data.iAction;
                UWA.log("File.type = " + File.type);

                if (File.type.match(textType)) {
                    Mask.mask(data.theThat.contentDiv);
                    reader = new FileReader();
                    reader.onload = function(e) {
                        ParameterizationWebServices.ImportParamToServer.call(that, reader.result, iAction,
                            that.importFailure.bind(that), that.importSuccess.bind(that));
                    };
                    reader.readAsText(File);//DEACTIVATE ??

                    reader.onerror = function() {
                        unabletoreadfile = ParamSkeletonNLS.UnabletoReadMsg + ' ' + File.fileName;
                        that.userMessaging.add({ className: "error", message: unabletoreadfile });
                        Mask.unmask(data.theThat.contentDiv);
                    };
                    reader.onloadend = function() {
                        UWA.log("onloadend !!");//need to do something ?
                    };
                } else {
                    importerrmsg = ParamSkeletonNLS.NotAnXMLMsg;
                    that.userMessaging.add({ className: "error", message: importerrmsg }); //File not supported!
                    Mask.unmask(data.theThat.contentDiv);
                }
            },

            importFailure : function (json) {
                UWA.log(json);
                Mask.unmask(this.contentDiv);
                //R-929388-3DEXPERIENCER2022x/23x
                if (json.message != undefined && json.message.includes("timedout")) {
                  UWA.log("import Time out :"+ json.message);
                  this.userMessaging.add({ className: "warning", message: ParamSkeletonNLS.ImportTimeOut });
                } else {
                  UWA.log("import Failure !!!");
                  this.userMessaging.add({ className: "error", message: ParamSkeletonNLS.ImportFailureMsg });
                }
            },

            importSuccess : function (json, iAction) {
                UWA.log(json);
                Mask.unmask(this.contentDiv);
                var jsParsed = JSON.parse(json);
                /* globalParamWidget.socket.dispatchEvent('onPlatformChange', {selectedTenant:globalParamWidget.tenantID,
                url3DSpace: globalParamWidget.env_url});*/

                if (jsParsed.deployStatus === "S_OK") {
                    this.userMessaging.add({ className: "success", message: ParamSkeletonNLS.ImportSuccessMsg});
                    if ("importNdeploy" === iAction) {
                        this.hideApplylines();
                    } else {
                        this.showApplylines();
                    }
                } else {
                    this.importFailure();
                }
            },

            onDeployFailure : function (json) {
                UWA.log(json);
                this.userMessaging.add({ className: "error", message: ParamSkeletonNLS.ParametersDeplFail });
                Mask.unmask(this.contentDiv);
            },

            onDeploySuccess : function (jsonObj) {
                UWA.log(jsonObj);
                Mask.unmask(this.contentDiv);
                /* globalParamWidget.socket.dispatchEvent('onPlatformChange', {selectedTenant:globalParamWidget.tenantID,
                        url3DSpace:globalParamWidget.env_url});*/
                if (jsonObj.deployStatus === "S_OK") {
                    this.hideApplylines();
                    this.userMessaging.add({ className: "success", message: ParamSkeletonNLS.ParametersDeplSucc});
                } else {
                    this.onDeployFailure(jsonObj);
                }
            },

            hideApplylines : function () {
                var tbodyreflist = this.contentDiv.getElements('.fparamtbody'),
                    tbodyref = tbodyreflist[0],
                    iLines = tbodyref.children;

                iLines[2].hide();
            },

            showApplylines : function () {
                var tbodyreflist = this.contentDiv.getElements('.fparamtbody'),
                    tbodyref = tbodyreflist[0],
                    iLines = tbodyref.children;

                iLines[2].show();
            },

            launchFilesExport : function (iFile) {
                Mask.mask(this.contentDiv);//"ParameterizationCATNls" "Parameterization_Export"
                ParameterizationWebServices.GetTicketForDownload.call(this, iFile,
                    this.onCompleteRequestFCSTicket.bind(this), this.onFailureRequestFCSTicket.bind(this));
            },

            onCompleteRequestFCSTicket : function (responseObjectJson, iFileID) {
                UWA.log("We have our ticket ... Let's fly... Up, up here we go, go");
                this.postCallFCS(responseObjectJson);
				//NZV : IR-632818-3DEXPERIENCER2019x
                if (iFileID === "Parameterization_Export") {//IR-684310-3DEXPERIENCER2019x
                    this.userMessaging.add({ className: "info", message: ParamSkeletonNLS.ExportXMLWarning});
                }
			},

            onFailureRequestFCSTicket : function (resp, iFileID) {
                UWA.log("Failure to Get a F***** Ticket"+ resp);// Why?
                Mask.unmask(this.contentDiv);
                //IR-684310-3DEXPERIENCER2019x
                if (iFileID === "Parameterization_Export") {
                    this.userMessaging.add({ className: "error", message: ParamSkeletonNLS.ExportParamFail});
                } else {
                    this.userMessaging.add({ className: "error", message: ParamSkeletonNLS.DownloadParamFail});
                }
            },

            postCallFCS : function (responseObjectJson) {
                //Content-Disposition: attachment
                var form = UWA.createElement('form', {
                        'class': 'form-wrapper hidden',
                        action: responseObjectJson.fcsxmlurl,
                        method: 'POST',
                        enctype: 'application/x-www-form-urlencoded',
                        //target: Utils.detectOs() === 'ios' ||  Utils.detectOs() === 'macos' ? '_blank' : 'uploadFrame' + that.id,
                        //target blank for ios download*
                        target: document.body,//'_blank'
                        //WARNING CHANGE target regarding to file
                        //target: '_blank',//new
                        html: [{
                            tag: 'input',
                            type: 'hidden',
                            name: '__fcs__jobTicket',
                            id: '__fcs__jobTicket',
                            value: responseObjectJson.fcsxmljobTicket
                        }]
                    });
                form.inject(this.contentDiv);//that.getBody()
                form.submit();
                Mask.unmask(this.contentDiv);

                setTimeout(function () {
                    form.remove();//Clean up
                }, 5000);
            },

            confirmationModalShow : function () {
                var headertitle, OKBtn, CancelBtn,
                    bodyDiv,
                    that = this;

                if (this.resetModal !== null) {
                    this.resetModal.show();//Modal already exists
                } else {
                    headertitle = UWA.createElement('h4', {
                        text   : ParamSkeletonNLS.confirmResetTitle,
                        'class': 'font-3dslight' // font-3dsbold
                    });

                    OKBtn = new Button({
                        value : ParamSkeletonNLS.OKButton,
                        className : 'btn primary',
                        events : {
                            'onClick' : function() {
                                UWA.log("DoSomething");
                                that.resetAndDeloyParams();
                            }
                        }
                    });
                    CancelBtn = new Button({
                        value : ParamSkeletonNLS.CancelButton,
                        className : 'btn default',
                        events : {
                            'onClick' : function(e) {
                                UWA.log("Cancel");
                            }
                        }
                    });
                    bodyDiv = UWA.createElement('div', {
                        'id': 'resetContentDiv',
                        'width' : '100%',
                        'height': '100%'
                    });
                    UWA.createElement('p', {
                        text   :  ParamSkeletonNLS.confirmResetMsg,
                        'class': 'font-3dslight'// font-3dsbold
                    }).inject(bodyDiv);

                    this.resetModal = new Modal({
                        className: "reset-confirm-modal",
                        closable: true,
                        header: headertitle,
                        body:   bodyDiv,
                        footer: [ OKBtn, CancelBtn ]
                    }).inject(this.contentDiv);
                    this.resetModal.getContent().setStyle("padding-top", 1);
                    this.resetModal.show();

                    this.resetModal.getContent().getElements(".btn").forEach(function (element) {
                        element.addEvent("click", function () {
                            that.resetModal.hide();
                        });
                    });
                }
            },

            //Rb0afx
            resetAndDeloyParams : function () {
                Mask.mask(this.contentDiv);
                var i, j, datacell, dataStruct, tbodyref, iLines,
                    tbodyreflist = this.contentDiv.getElements('.fparamtbody'),
                    nboffamilies = tbodyreflist.length,
                    wasAParamModified = false,
                    wasmodified = true;

                if ("ObjectIdentifier" === this.model.get("familyid")) {
                    this.ResetNamingParams();
                } else {
                    for (i = 0; i < nboffamilies; i++) {
                        tbodyref = tbodyreflist[i];
                        iLines = tbodyref.children;
                        for (j = 0; j < iLines.length; j++) {
                            datacell = iLines[j].cells[2];
                            dataStruct = datacell.getData('argumentNode');
                            wasmodified = this.resetInput(dataStruct);

                            if (wasmodified) { wasAParamModified = true; }
                        }
                    }
                    //FUN095483
                    if ("VersionNaming" === this.model.get("familyid")) {
                        if (!wasAParamModified) {
                            this.userMessaging.add({ className: "warning", message: ParamSkeletonNLS.NoChangeFound});
                        }
                        Mask.unmask(this.contentDiv);
                    } else {
                        if (!wasAParamModified) {//noparamReset, the current vals are basically the OOTB ones
                            Mask.unmask(this.contentDiv);
                            this.userMessaging.add({ className: "success", message: ParamSkeletonNLS.deploySuccessMsg});
                        }
                    }
                }//of else
            },

            //Rb0afx
            resetInput : function (idataStruct) {
                var j, optionValue, currSelectedOpt, currSelectedValue,
                    defaultvallist,
                    defaultval = idataStruct.defaultval,
                    paramID = idataStruct.paramid,
                    inputType = idataStruct.inputtype,
                    currSelectedList = [],
                    paramModified = true, that = this;
                    this.resetIsCalled = true;//IR-728233-3DEXPERIENCER2020x\21x
                this.inputControls.forEach(function (iInput) {
                    if (iInput.elements.input.id === paramID) {
                        if (inputType === "checkbox") {
                            if (defaultval == "Enabled") {
                                iInput.check();
                            } else {
                                iInput.uncheck();
                            }
                            iInput.dispatchEvent('onChange', this);//onClick
                        } else if (inputType === "combobox") {
                            //IR-728233-3DEXPERIENCER2020x\21x: Now it is not required.
                            //if (paramID !== "VNaming_DevelopmentPart") {
                            currSelectedOpt = iInput.getSelection();
                            currSelectedValue = currSelectedOpt[0].value;
                            if (defaultval == currSelectedValue) {
                                paramModified = false;
                                that.resetIsCalled = false;
                            }
                            for (j = 0; j < iInput.elements.input.length; j++) {
                                optionValue = iInput.elements.input[j].value;

                                if (optionValue === defaultval) {
                                    iInput.select(j, true, false);
                                }
                            }//of for elements
                            // }
                            // else { //VNaming_DevelopmentPart
                            //     paramModified = false;
                            // }
                        } else if (inputType === "comboboxmultiselect") {

                            currSelectedOpt = iInput.getSelection();
                            defaultvallist = null;
                            if (defaultval.indexOf(",")) {
                                defaultvallist = defaultval.split(",");
                            } else {
                                defaultvallist = [defaultval];
                            }

                            currSelectedOpt.forEach(function(item) {
                                currSelectedList.push(item.value);
                            });
                            //check if detaul value & selected value are same
                            if (ParamLayoutUtilities.compareArray(defaultvallist, currSelectedList)) {
                                paramModified = false;
                            }
                            if (paramModified) {
                                //clear user selection
                                iInput.clear(true);
                                for (j = 0; j < iInput.elements.input.length; j++) {
                                    optionValue = iInput.elements.input[j].value;

                                    defaultvallist.forEach(function (item) {
                                        if (optionValue === item) {
                                            iInput.select(j, true, true);
                                        }
                                    });
                                }//for loop
                                iInput.dispatchEvent('onChange');
                            }
                         // comboboxmultiselect
                        } else {
                            //textfield
                            iInput.setValue(defaultval);
                            paramModified = true;
                            iInput.dispatchEvent('onChange');
                        }
                    }
                });
                return paramModified;
            },

            checkParameterValueOnChange : function (inputElement, ctrlObjectCell, imageCell) {
                var errorMsg, dataStruct, datatype,
                    inputVal = inputElement.getValue();

                dataStruct = ctrlObjectCell.getData('argumentNode');
                datatype = dataStruct.argtype;

                if (ParamLayoutUtilities.testDataType(inputVal, datatype)) {
                    //All is good Send the POST Request
                    this.updateParameterOnChange(inputVal, ctrlObjectCell, imageCell);
                } else {
                    errorMsg = ParamLayoutUtilities.getTypeErrorMsgNLS(datatype);
                    this.ErrorMsgPopup = ParamLayoutUtilities.inputErrorCell(imageCell, errorMsg, 'red', this.ErrorMsgPopup);
                    this.userMessaging.add({ className: "error", message: errorMsg });
                }
            },

            //FUN095483
            updateRevisioningForPartRule : function(inputElement, ctrlObjectCell, imageCell) {
                var i, j, currSelOpt, currSelectedValue, optionValue,
                    ParamID = ctrlObjectCell.getData('argumentNode').paramid,
                    SetValueArray = inputElement.getValue(),
                    currSetValue =  SetValueArray[0],
                    toChangeValue = "NumericalRev",
                    ParamToTest = "VNaming_DevelopmentPart";

                if (currSetValue === "NumericalRev") { toChangeValue = "AlphabeticalRev"; }
                if (ParamID === "VNaming_DevelopmentPart") { ParamToTest = "VNaming_ProductionPart"; }

                if (("VNaming_DevelopmentPart" === ParamID) ||
                        ("VNaming_ProductionPart" === ParamID)) {
                    for (i = 0; i < this.inputControls.length; i++) {
                        if (this.inputControls[i].elements.input.id == ParamToTest) {
                            //Find the Selected option/value for other policy to Change (currSelectedValue)
                            currSelOpt = this.inputControls[i].getSelection();
                            currSelectedValue = currSelOpt[0].value;
                            //if this option matches the new value set () for
                            if (currSelectedValue == currSetValue) {
                                for (j = 0; j < this.inputControls[i].elements.input.length; j++) {
                                    optionValue = this.inputControls[i].elements.input[j].value;
                                    if (optionValue == toChangeValue) {
                                        this.inputControls[i].select(j, true, false);
                                        this.userMessaging.add({ className: "info", message: ParamSkeletonNLS.partSameSequence});
                                        break;
                                    }
                                }
                                break;
                            }//of  (currSelectedValue == currSetValue)
                        }
                    }//of for  this.inputControls
                }//of VNaming_DevelopmentPart == VNaming_ProductionPart

              //  this.updateParameterOnChange(currSetValue, ctrlObjectCell, imageCell);
            },

            updateRevisioningParameterOnChange : function(inputElement, ctrlObjectCell, imageCell) {
                var i, j, currSelOpt, currSelectedValue, optionValue,//currDate, currTime, diffDate,
                    currentPlatform = this.connectProps.tenantID,
                    ParamID = ctrlObjectCell.getData('argumentNode').paramid,
                    SetValueArray = inputElement.getValue(),
                    currSetValue =  SetValueArray[0];
                    //FUN095483 : apply Part rule
                    this.updateRevisioningForPartRule(inputElement, ctrlObjectCell, imageCell);
                    //hasAnInputChanged = false;
                this.resetIsCalled = false;
                //FUN095483 : Stop immediate deployment
                //this.updateParameterOnChange(currSetValue, ctrlObjectCell, imageCell);
            },

            updateComboMultiSelectParamOnChange : function(inputElement, ctrlObjectCell, imageCell) {
                //NZV : No need to separate funciton can be combined with function updateComboParamOnChange
                var SetValueArray = inputElement.getValue(),
                    currSetValue = null;

                if ((Array.isArray(SetValueArray) == true)) {
                    currSetValue = SetValueArray.join(",");
                }
                this.updateParameterOnChange(currSetValue, ctrlObjectCell, imageCell);
            },

            updateComboParamOnChange : function(inputElement, ctrlObjectCell, imageCell) {
                var SetValueArray = inputElement.getValue(),
                    currSetValue = SetValueArray.join(",");
                this.updateParameterOnChange(currSetValue, ctrlObjectCell, imageCell);
            },

            updateParameterOnChange : function(iValue, ctrlObjectCell, imageCell) {
                var iParam,
                    imageTXT = ParamSkeletonNLS.Under_Deploy,
                    ParamID = ctrlObjectCell.getData('argumentNode').paramid,
                    argID = ctrlObjectCell.getData('argumentNode').argumentid,
                    jsonArr = [],
                    ArgArr = [];
                    this.resetIsCalled = false;//IR-728233-3DEXPERIENCER2020x\21x : resetting flag
                ParamLayoutUtilities.beingDeployed(imageCell, imageTXT);

                ArgArr.push({id: argID, value: iValue});
                iParam = {
                    domain   : this.connectProps.domainName,
                    id       : ParamID,
                    argument : ArgArr
                };
                jsonArr.push(iParam);
                ParameterizationWebServices.postParamsArrOnServer.call(this, this.connectProps, jsonArr, imageCell,
                    this.onApplyFailure.bind(this), this.onApplySuccess.bind(this));
            },
            //FUN095483
            updateRevisionNaming : function (that) {
                var imgCell,
                    listOfNamingRules = [];

                const existingList  = that.collection._models[0]._attributes.family[0].parameter;
                for (let i = 0; i < that.inputControls.length; i++) {
                    var deployedValue = "";
                    for (let j=0; j < existingList.length; j++) {
                        if (that.inputControls[i].options.attributes.id === existingList[j].id) {
                            deployedValue = existingList[j].argument[0].argValue;
                            const currSelOpt = that.inputControls[i].getSelection();
                            const currSelectedValue = currSelOpt[0].value;
                            if(deployedValue !== currSelectedValue) {
                                var paramItem = {"domain": "ObjectIdentification", "id": "","argument":[]};

                                paramItem.id = that.inputControls[i].options.attributes.name;
                                var valObj = {"id":"Argument","value": currSelectedValue};
                                paramItem.argument.push(valObj);
                                listOfNamingRules.push(paramItem);
                            }
                            break;
                        }
                    }
                }
                console.log(listOfNamingRules);

                if (listOfNamingRules.length > 0) {
                    Mask.mask(that.contentDiv);
                    //if (that.collection.genPostParamsArrOnServer)
                    //    that.collection.genPostParamsArrOnServer(that.connectProps, "postparamsreturnrespforeach", listOfNamingRules, imgCell, that.onApplyFailure.bind(that), that.onApplySuccess.bind(that), that.collection._models[0]._attributes);
                    //else
                    ParameterizationWebServices.genPostParamsArrOnServer.call(that, that.connectProps, "postparamsreturnrespforeach", listOfNamingRules, imgCell, that.onApplyFailure.bind(that), that.onApplySuccess.bind(that));
                 } else {
                    if (that.lstRevNamIconModified.length  > 0) {
                        that.lstRevNamIconModified.forEach(function (elem) { ParamLayoutUtilities.updateIcon(true, elem.imageCell);});
                        that.lstRevNamIconModified.length = 0;
                    }
                    that.userMessaging.add({ className: "warning", message: ParamSkeletonNLS.NoChangeFound });
                 }
            },

            onApplyFailure : function (json, theImageCell) {
                var existingList, statusList, deployedValue, currSelOpt, currSelectedValue, i, j, k, arrSizeChange = false;
                UWA.log(json);
                //FUN095483
                if ((this.handledFamily === "VersionNaming")) {
                    statusList = JSON.parse(json.complementary);
                    if (statusList.length > 0) {
                        existingList  = this.collection._models[0]._attributes.family[0].parameter;
                        for (i = 0; i < this.lstRevNamIconModified.length; ) {
                            arrSizeChange = false
                            for (j = 0 ; j < statusList.length; j++ ) {
                                if (this.lstRevNamIconModified[i].id === statusList[j].id) {
                                    if (statusList[j].deployStatus  === "S_OK") {
                                        ParamLayoutUtilities.updateIcon(true, this.lstRevNamIconModified[i].imageCell);
                                        for (k=0; k < existingList.length; k++) {
                                            if (this.lstRevNamIconModified[i].id === existingList[k].id) {
                                                    deployedValue = existingList[k].argument[0].argValue;
                                                    currSelOpt = this.lstRevNamIconModified[i].inputElement.getSelection();
                                                    currSelectedValue = currSelOpt[0].value;
                                                    if (deployedValue !== currSelectedValue) {
                                                        existingList[k].argument[0].argValue = currSelectedValue;
                                                    }
                                                break;
                                            }
                                        }
                                        this.lstRevNamIconModified.splice(i,1);
                                        arrSizeChange = true;
                                    } else {
                                        ParamLayoutUtilities.updateIcon(false, this.lstRevNamIconModified[i].imageCell);
                                    }
                                    break;
                                }
                            }
                            if(arrSizeChange === false) { i++; }
                        }
                    }
                    Mask.unmask(this.contentDiv);//Rb0afx
                    this.userMessaging.add({ className: "error", message: ParamSkeletonNLS.deployPartiallyFailureMsg });

                 } else {
                    Mask.unmask(this.contentDiv);//Rb0afx
                    this.userMessaging.add({ className: "error", message: ParamSkeletonNLS.deployFailureMsg });
                    ParamLayoutUtilities.updateIcon(false, theImageCell);
                }
            },

            onApplySuccess : function (json, theImageCell) { //Rb0afx
                var currDate, currTime, diffDate,
                    successmsg = ParamSkeletonNLS.deploySuccessMsg, i, j, currSelOpt, currSelectedValue;// + ' - ' + new Date();
                Mask.unmask(this.contentDiv);
                UWA.log(json);

                currDate = new Date();
                currTime = currDate.getTime();
                diffDate = currTime - this.lastAlertDate;
                this.lastAlertDate = currTime;
                //IR-496432-3DEXPERIENCER2017x
                if (json.deployStatus === "S_OK") {
                    //FUN095483
                    if ((this.handledFamily === "VersionNaming")) {

                        for (i = 0; i < this.inputControls.length; i++) {
                            var existingList  = this.collection._models[0]._attributes.family[0].parameter;
                            var deployedValue = "";
                            for (j=0; j < existingList.length; j++) {
                                if (this.inputControls[i].options.attributes.id === existingList[j].id) {
                                        deployedValue = existingList[j].argument[0].argValue;
                                        currSelOpt = this.inputControls[i].getSelection();
                                        currSelectedValue = currSelOpt[0].value;
                                        if(deployedValue !== currSelectedValue) {
                                            existingList[j].argument[0].argValue = currSelectedValue;
                                        }
                                        break;
                                    }

                            }
                        }
                    }
                    if (diffDate >= 2000) {
                        this.userMessaging.add({ className: "success", message: successmsg });
                    }
                    //FUN095483
                    if (this.handledFamily === "VersionNaming") {
                        this.lstRevNamIconModified.forEach(function (elem) { ParamLayoutUtilities.updateIcon(true, elem.imageCell);});
                        this.lstRevNamIconModified.length = 0;
                    } else {
                        ParamLayoutUtilities.updateIcon(true, theImageCell);
                    }
                } else {
                    this.onApplyFailure(json, theImageCell);
                }

            },

            applyParams : function () {
                UWA.log("applyParams");
                //FUN095483
                if ("VersionNaming" !== this.model.get("familyid")) {
                    this.UpdateCommonParamsOnServer();
                } else {

                    //AttrUtilsView.showContextualDeleteModal(widget.body, lineAttr, removePop);
                    //IR-689657-3DEXPERIENCER2019x/20x : function signature changed
                    //FUN095483
                    ParamLayoutUtilities.showContextualDeleteModal(widget.body, "delAttrModal", ParamSkeletonNLS.RevNamingRuleWarning,
                        ParamSkeletonNLS.YesText,  ParamSkeletonNLS.NoText, ParamSkeletonNLS.Warning+"!", this.updateRevisionNaming, this);
                }
            },

            //show: function () {},
            destroy : function() {
                this.stopListening();
                this._parent.apply(this, arguments);
            }

        });

        return extendedView;
    });

define('DS/ParameterizationSkeleton/Views/ParameterizationFLWeb/CompanyIdentificationLayoutView', [
	'UWA/Core',
	'UWA/Class/View',
	'DS/UIKIT/Mask',
	'DS/UIKIT/Scroller',
	'DS/WAFData/WAFData',
	'DS/ParameterizationSkeleton/Views/ParametersLayoutViewUtilities',
	'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler',
	'DS/ParameterizationSkeleton/Views/ParameterizationFLWeb/CompanyIDViewUtilities',
	'DS/ParameterizationSkeleton/Views/ParameterizationFLWeb/ParameterizationFLWebConstants',
	'DS/ParameterizationSkeleton/Views/ParameterizationFLWeb/FLWebModal',
	'DS/UIKIT/Input/Button',
	'DS/UIKIT/Alert',
	'DS/ParameterizationSkeleton/Views/ParametersLayoutView',
	'i18n!DS/ParameterizationSkeleton/assets/nls/FLWebNLS',
	],
	function(UWA,
			View,
			Mask,
			Scroller,
			WAFData,
			ParametersLayoutViewUtilities,
			URLHandler,
			CompanyIDViewUtilities,
			ParameterizationFLWebConstants,
			FLWebModal,
			Button,
			Alert,
			ParametersLayoutView,
			FLWebNLS) {

	'use strict';

	var extendedView;

	extendedView = View.extend({
		tagName: 'div',
		className: 'generic-detail',

		init: function(options) {
			var initDate = new Date();
			options = UWA.clone(options || {}, false);
			this._parent(options);
			this.options = options;
			this.contentDiv = null;
			this.paramScroller = null;
			this.paramAltSubScroller = null; //paramUnicitySubScroller
			this.userMessaging = null;
			this.lastAlertDate = initDate.getTime();
			this.controlDiv = null;
      this.cellsIndexForArchNumCollab = {
          "name": 0,
          "value": 1,
          "action": 2,
          "deployFlag": 3
      };
		},

		setup: function(options) {
			UWA.log('Architect Layout::setup!');
			UWA.log(options);
		},

		render: function() {
			UWA.log("Architect LayoutView::render");
			var introDiv,
			mappingDiv,
			that = this;

			this.contentDiv = UWA.createElement('div', {
				'id': 'typeMainDiv'
			});
			Mask.mask(this.contentDiv);

			introDiv = UWA.createElement('div', {
				'class': 'information-arch'
			}).inject(this.contentDiv);

			UWA.createElement('p', {
				text: FLWebNLS.intro,
				'class': 'font-3dslight'
			}).inject(introDiv);

			this.parentView = new ParametersLayoutView(this.options);

			this.controlDiv = ParametersLayoutViewUtilities.createApplyResetToolbar.call(this, this.contentDiv, true, this.applyParams.bind(this), this.resetParams.bind(this));

			this.container.setContent(this.contentDiv);
			this.listenTo(this.collection, {
				onSync: that.onCompleteRequestMapping
			});

			return this;
		},

		onCompleteRequestMapping: function() {
			var that = this;
			UWA.log('Architecture Layout::Complete rendering!');
			var collection = this.collection._models[0]._attributes;
			CompanyIDViewUtilities.physicalProductAttributes(collection.PhysicalProductAttributes);
			var fields = collection.ExpressionList;
			var nosOfFields = (fields) ? fields.length : 0;
			this.divPartNumbering = UWA.createElement('div', {
				'class': 'architectureNumberingDivScroll',
			}).inject(this.contentDiv);
			this.baseAccordion = ParametersLayoutViewUtilities.createFamilyUIKITAccordion(this.divPartNumbering);
			var partNumberingParentDiv = UWA.createElement('div', {'class': 'architectureNumberingContent'});
			var partNumberingDiv = UWA.createElement('div', {'class': 'architectureNumbering'});
			var partNumberTable = CompanyIDViewUtilities.buildAttributeTable(collection);
			partNumberTable.inject(partNumberingDiv);
			var AddMappingButton = new Button({
				className: 'AddPartNumberFieldButton',
				icon: 'plus-circled',
				attributes: {
					disabled: false,
					'aria-hidden': 'true',
					title: FLWebNLS.AddFieldMappingTooltip,
				},
				events: {
					onClick: function(e) {
						that.ShowAddNewFieldPanel(that, partNumberTable.getElement(".partNumberFieldbody"));
					}
				}
			}).inject(partNumberingDiv);
			partNumberingParentDiv.appendChild(partNumberingDiv);
			this.baseAccordion.addItem({
				title: FLWebNLS.label_ANFormatConfigAccrdTitle,
				content: partNumberingParentDiv,
				selected: true,
				name: FLWebNLS.BaseName,
			});
			partNumberingDiv.appendChild(this.controlDiv);
			for (var i = 0; i < nosOfFields; i++) {
				var field = fields[i];
				var deployedStatus = (field.Deployed && field.Deployed=="True")? ParameterizationFLWebConstants.DEPOLOYED : ParameterizationFLWebConstants.NEW_NOT_DEPLOYED;
				var fieldInfo = CompanyIDViewUtilities.buildNewPartNumberField(
						CompanyIDViewUtilities.buildJsonObjForPNField(ParameterizationFLWebConstants.ADD, field.Name, field.Order, field.Type, field.Value, field[ParameterizationFLWebConstants.ATTRIBUTE]?field[ParameterizationFLWebConstants.ATTRIBUTE]:'', field[ParameterizationFLWebConstants.COUNTER]?field[ParameterizationFLWebConstants.COUNTER]:'', field.Label, field.Default),
						deployedStatus);
				fieldInfo.inject(partNumberTable.getElement(".partNumberFieldbody"));
			}

			this.paramScroller = new Scroller({
				element: partNumberingDiv
			}).inject(partNumberingParentDiv);

			var url = URLHandler.getURL() + "/resources/v1/SystemsArchitectureDefinitionParam/getCollaborativeSpaceGrouping?tenant=" + URLHandler.getTenant() /*+ "&domainid=SystemsArchitectureDefinition"*/;
			WAFData.authenticatedRequest(url, {
				timeout: 250000,
				method: 'GET',
				type: 'json',
				headers: {
					'Content-Type': 'application/json',
					'Accept': 'application/json',
				},

				onFailure: function (result) {
					Mask.unmask(that.contentDiv);
					that.getAlertMessage(/*FLWebNLS.*/'Unable to fetch Architecture Number CollabSpace Grouping details', 'error', this.contentDiv);
				},
				onComplete: function (result) {
					that.buildArchNumColabUnicitySection(result);
					that.sysArcDefOtbParameterAccordean()
				}
			});
			Mask.unmask(this.contentDiv);
		},

		buildArchNumColabUnicitySection: function(collection){
			var that = this;
			localStorage.setItem('csList', JSON.stringify(collection.csList));
			var archNumCollabUnicityContainer = UWA.createElement('div', {'class': 'archNumCollabUnicityContainer'});
			var archNumCollabTableContainer = UWA.createElement('div', {'class': 'arhNumCollabTableMainContainer'}); //css: architectureNumberingContent
			var archNumCollabTableSubContainer = UWA.createElement('div', {'class': 'arhNumCollabTableSubContainer'}); //css: architectureNumbering
			var archNumCollabTable = CompanyIDViewUtilities.buildArchNumCollabUnicitySecTable();
			archNumCollabTable.inject(archNumCollabTableSubContainer);
			archNumCollabTableContainer.appendChild(archNumCollabTableSubContainer);

			var AddMappingButton = new Button({
				className: 'AddPartNumberFieldButton',
				icon: 'plus-circled',
				attributes: {
					disabled: false,
					'aria-hidden': 'true',
					title: FLWebNLS.label_CSgroupingButtonTooltip,
				},
				events: {
					onClick: function(e) {
						that.createCollabUnicitySecAddFieldModal(archNumCollabTable.getElement("#archNumCollabUnicityTableBody"));
					}
				}
			}).inject(archNumCollabTableContainer);

			archNumCollabTableContainer.inject(archNumCollabUnicityContainer);
			var footer = ParametersLayoutViewUtilities.createApplyResetToolbar.call(this, archNumCollabUnicityContainer, true,
					this.applyArchNumCollabUnicity.bind(this),
					this.resetArchNumCollabUnicity.bind(this));
			var collabArchNumUnicityCheckDiv = UWA.createElement('div', {'class': 'architectureNumberingContent'});
			this.collabArchNumUnicityCheckAccrdn = ParametersLayoutViewUtilities.createFamilyUIKITAccordion(this.divPartNumbering);
			this.collabArchNumUnicityCheckAccrdn.addItem({
				title: FLWebNLS.label_CSgroupingAccrdTitle,
				content: archNumCollabUnicityContainer,
				selected: false,
				name: 'Architecture_Number_Collabspace_Unicity'
			});
			var groups = collection && collection.csGroups ? collection.csGroups : '';
			for (var groupName in groups) {
				var csListString = '';
				for(var i = 0; i < groups[groupName].length-1; i++){
					csListString += groups[groupName][i] + ',';
				}
				csListString += groups[groupName][i]
				//csListString = csListString.substring(0, csListString.length-2);
				var fieldInfo = CompanyIDViewUtilities.buildNewArchNumCollabField({Name:groupName, Value:csListString}, ParameterizationFLWebConstants.DEPOLOYED);
				//CompanyIDViewUtilities.buildJsonObjForPNField(ParameterizationFLWebConstants.ADD, field.Order, field.Type, field.Value),deployedStatus);
				fieldInfo.inject(archNumCollabTable.getElement("#archNumCollabUnicityTableBody"));
			}
			// this.paramScroller = new Scroller({
			//     element: archNumCollabTableSubContainer
			// }).inject(archNumCollabTableContainer);
		},

		sysArcDefOtbParameterAccordean : function(){
			var that = this;
			var that =this;
			var url = URLHandler.getURL() + "/resources/ParamWS/access/DomainElements?tenant=" + URLHandler.getTenant() + "&domainid=SystemsArchitectureDefinitionOtbParameter";
			WAFData.authenticatedRequest(url, {
				timeout: 250000,
				method: 'GET',
				type: 'json',
				headers: {
					'Content-Type': 'application/json',
					'Accept': 'application/json',
				},

				onFailure: function (result) {
					Mask.unmask(that.contentDiv);
					that.getAlertMessage(FLWebNLS.unicityCheckSubParamError, 'error', this.contentDiv);
				},

				onComplete: function (result) {
					for(let i=0; i < result.family.length; i++){
						var paramFamily = result.family[i];
						that.getSysArcDefOtbParameterProperties(paramFamily, that.paramAltSubScroller);
					}
				}
			});
		},

		getSysArcDefOtbParameterProperties : function(otbParamFamily){
			var that = this;
			try{
				that.paramAccordean = ParametersLayoutViewUtilities.createFamilyUIKITAccordion(that.divPartNumbering);
				var nbParam = otbParamFamily.parameter && otbParamFamily.parameter.length? otbParamFamily.parameter.length : 0;
				var accordeanContentDiv = UWA.createElement('div', {    'class': 'unicitySubContent'    });
				var paramTableDiv = UWA.createElement('div', {  'class': 'unicitySubstitute', 'styles':{'height': 60*nbParam+'px'}});
				that.model.set("introduction", "");
				that.parentView = that._updateParentViewWithNewDomain(that.parentView,"SystemsArchitectureDefinitionOtbParameter");
				that.parentView.render();
				var tableContent = this.parentView.buildFamilyItemContent(otbParamFamily, null);
				that.paramAccordean.addItem({
					title: otbParamFamily.nlsKey,
					content: accordeanContentDiv,
					selected: false,
					name: otbParamFamily.id
				});

				paramTableDiv.appendChild(tableContent);
				new Scroller({
					element: paramTableDiv
				}).inject(accordeanContentDiv);
			}catch(error) {
			}	finally {
				that.parentView = that._updateParentViewWithNewDomain(that.parentView,"SystemsArchitectureDefinitionOtbParameter");
			}
		},

		resetParams: function(){
			var fieldsToBeRemoved = new Array();
			var rowsOfMappedFields = this.contentDiv.getElementsByClassName("partNumberFieldMapping");
			for (var i = 0; i < rowsOfMappedFields.length; i++) {
				if (rowsOfMappedFields[i].value == ParameterizationFLWebConstants.NEW_NOT_DEPLOYED) {
					fieldsToBeRemoved.push(CompanyIDViewUtilities.resetForFieldLineChanges(rowsOfMappedFields[i]));
				}
			}
			fieldsToBeRemoved.forEach(function(attrMapping) {
				if (attrMapping) {
					attrMapping.remove();
				}
			});
			CompanyIDViewUtilities.updateFormulaTextFields(ParameterizationFLWebConstants.MAX_ROWS + 1, null, null, ParameterizationFLWebConstants.DEPOLOYED);
		},

		resetArchNumCollabUnicity: function(){
			var fieldsToBeRemoved = new Array();
			var rowsOfMappedFields = this.contentDiv.querySelectorAll('#archNumCollabTableRow');
			for (var i = 0; i < rowsOfMappedFields.length; i++) {
				if (rowsOfMappedFields[i].value == ParameterizationFLWebConstants.NEW_NOT_DEPLOYED) {
					fieldsToBeRemoved.push(CompanyIDViewUtilities.resetForFieldLineChangesArchNumGrouping(rowsOfMappedFields[i]));
				}
			}
			fieldsToBeRemoved.forEach(function(attrMapping) {
				if (attrMapping) {
					attrMapping.remove();
				}
			});
		},

		applyParams: function() {
			var that = this;
			var rowsOfMappedFields = this.contentDiv.getElementsByClassName("partNumberFieldMapping");
			var payloadToSend = {};
			Mask.mask(this.contentDiv);
			payloadToSend.ParameterExpressionList = [];
			for (var i = 0; i < rowsOfMappedFields.length; i++) {
				//if (rowsOfMappedFields[i].value == ParameterizationFLWebConstants.NEW_NOT_DEPLOYED) {
				var value = CompanyIDViewUtilities.buildsFieldJsonObject(rowsOfMappedFields[i]);
				value.Label = value.Name;
				payloadToSend.ParameterExpressionList.push(value);
				//}
		}
			// payloadToSend['UnicityCheck'] = localStorage.getItem('arch_number_unicity');
			var url = URLHandler.getURL() + "/resources/v1/SystemsArchitectureDefinitionParam/setParamArchitectureNumberExpressions?tenant=" + URLHandler.getTenant(),payloadToSend;
			WAFData.authenticatedRequest(url, {
				timeout: 250000,
				method: 'POST',
				data: JSON.stringify(payloadToSend),
				type: 'json',
				headers: {
					'Content-Type': 'application/json',
					'Accept': 'application/json'
				},
				onFailure: function(json) {
					Mask.unmask(that.contentDiv);
					that.onApplyFailure(FLWebNLS.ApplyError);
				},
				onComplete: function(json) {
					if (json.ParameterExpressionList/*.length > 0*/) {
						that.onApplySuccess();
						Mask.unmask(that.contentDiv);
						that.getAlertMessage(FLWebNLS.ApplySuccess, 'success', that.contentDiv);

					} else {
						Mask.unmask(that.contentDiv);
						that.onApplyFailure(json.message);
					}
				}

			});
		},

		applyArchNumCollabUnicity: function() {
			var that = this;
			var rowsOfMappedFields = this.contentDiv.querySelectorAll('#archNumCollabTableRow');
			var payloadToSend = {};
			payloadToSend['CollaborativeSpacesGroupList'] = [];
			var tableFieldObj;
			Mask.mask(this.contentDiv);
			for (var i = 0; i < rowsOfMappedFields.length; i++) {
				if (rowsOfMappedFields[i].cells[this.cellsIndexForArchNumCollab.deployFlag].value != ParameterizationFLWebConstants.REMOVE){//ParameterizationFLWebConstants.NEW_NOT_DEPLOYED) {
  				tableFieldObj = CompanyIDViewUtilities.buildsFieldJsonObjectForArchNUmCollab(rowsOfMappedFields[i]);
  				payloadToSend.CollaborativeSpacesGroupList.push({
  					name: tableFieldObj.Name,
  					csList: tableFieldObj.Value.trim().split(',')
  				})
				}
			}

			var url = URLHandler.getURL() + "/resources/v1/SystemsArchitectureDefinitionParam/setCollaborativeSpaceGrouping?tenant=" + URLHandler.getTenant();
			WAFData.authenticatedRequest(url, {
				timeout: 250000,
				method: 'POST',
				data: JSON.stringify(payloadToSend),
				type: 'json',

				headers: {
					'Content-Type': 'application/json',
					'Accept': 'application/json'
				},

				onFailure: function(json) {
					Mask.unmask(that.contentDiv);
					that.onApplyFailure(FLWebNLS.ApplyError);
				},

				onComplete: function(json) {
					//  if (json.ParameterExpressionList/*.length > 0*/) {
					that.archNumCollabGroupingApplySuccess();
					Mask.unmask(that.contentDiv);
					that.getAlertMessage(FLWebNLS.msg_CSgroupingFieldsUpdated, 'success', that.contentDiv);

					//  }
					// else {
					//     Mask.unmask(that.contentDiv);
					//     that.onApplyFailure(json.message);
					// }
				}

			});
		},

		onApplyFailure: function(message) {
			this.getAlertMessage(message, 'error', this.contentDiv);
		},

		onApplySuccess: function() {
			var fieldsToBeRemoved = new Array();
			var rowsOfMappedFields = this.contentDiv.getElementsByClassName("partNumberFieldMapping");
			for (var i = 0; i < rowsOfMappedFields.length; i++) {
				if (rowsOfMappedFields[i].value == ParameterizationFLWebConstants.NEW_NOT_DEPLOYED) {
					var statusCell = rowsOfMappedFields[i].cells[5];
					if (statusCell.value == ParameterizationFLWebConstants.ADD || statusCell.value == ParameterizationFLWebConstants.MODIFY) {
						rowsOfMappedFields[i].cells[5].empty();
						rowsOfMappedFields[i].value = ParameterizationFLWebConstants.DEPOLOYED;
						var imgSpan = CompanyIDViewUtilities.buildImgSpan('check', '1.5', 'green', FLWebNLS.Deployed);
						imgSpan.inject(rowsOfMappedFields[i].cells[5]);
					}
					if (rowsOfMappedFields[i].cells[5].value == ParameterizationFLWebConstants.REMOVE) {
						fieldsToBeRemoved.push(rowsOfMappedFields[i]);
					}
				}
			}
			fieldsToBeRemoved.forEach(function(attrMapping) {
				attrMapping.remove();
			});
			var formulaField = document.querySelector(".partNumberFormulaMapping");
			formulaField.cells[3].empty();
			var imgSpan = ParametersLayoutViewUtilities.buildImgSpan('check', '1.5', 'green', FLWebNLS.Deployed);
			imgSpan.inject(formulaField.cells[3]);
		},

		archNumCollabGroupingApplySuccess: function() {
			//CompanyIDViewUtilities.updateStrategy(strategyValue, ParameterizationFLWebConstants.DEPOLOYED);
			var fieldsToBeRemoved = new Array();
			var rowsOfMappedFields = this.contentDiv.querySelectorAll('#archNumCollabTableRow')
			for (var i = 0; i < rowsOfMappedFields.length; i++) {
				if (rowsOfMappedFields[i].value == ParameterizationFLWebConstants.NEW_NOT_DEPLOYED) {
					var statusCell = rowsOfMappedFields[i].cells[3];
					if (statusCell.value == ParameterizationFLWebConstants.ADD || statusCell.value == ParameterizationFLWebConstants.MODIFY) {
						rowsOfMappedFields[i].cells[3].empty();
						rowsOfMappedFields[i].value = ParameterizationFLWebConstants.DEPOLOYED;
						var imgSpan = CompanyIDViewUtilities.buildImgSpan('check', '1.5', 'green', FLWebNLS.Deployed);
						imgSpan.inject(rowsOfMappedFields[i].cells[3]);
					}
					if (rowsOfMappedFields[i].cells[3].value == ParameterizationFLWebConstants.REMOVE) {
						fieldsToBeRemoved.push(rowsOfMappedFields[i]);
					}
				}
			}
			fieldsToBeRemoved.forEach(function(attrMapping) {
				attrMapping.remove();
			});
		},

		ShowAddNewFieldPanel: function(attrtbody) {
			this.createPartNumberingDialogBox(attrtbody);
			var isDeployed = ParameterizationFLWebConstants.NEW_NOT_DEPLOYED;
		},

		createPartNumberingDialogBox: function(attrtbody) {
			var that = this;
			var attributes = (this.collection._models[0]._attributes && this.collection._models[0]._attributes.PhysicalProductAttributes);
			var options = {
					className: "part-number-modal",
					title: "Add Field"
			}
			this.modal = new FLWebModal(options);
			this.modal.getAttributes(attributes);
			if (this.modal.getTotalFormatRows() == ParameterizationFLWebConstants.MAX_ROWS) {
				var alert = that.modal.displayAlertMessage(FLWebNLS.maxLimitOfRows, document.querySelector('#typeMainDiv').getChildren()[0]);
			} else {
				function _getFooter() {
					return "<button type='button'  name='addButton' id='add-button' class='btn btn-primary'>" + FLWebNLS.add + "</button> " + "</button>" + "<button type='button' name='cancelButton' id='cancel-button' class='btn btn-default'>" + FLWebNLS.cancel + "</button>"
				}
				this.modal.modal.setFooter(_getFooter());
				this.modal.getModalBody();
				this.modal._bindFooterEvent();
				this.modal.getContent().getElements('.btn').forEach(function(element) {
					if (that.modal.isCounterExists(ParameterizationFLWebConstants.TYPE)) {
						that.modal.partNumberTypeCombobox.disable(ParameterizationFLWebConstants.FORMAT_COUNTER);
					}

					if (element.name === 'cancelButton') {
						element.addEvent('click', function() {
							that.modal.destroy();

						});
					} else if (element.name === 'addButton') {

						element.addEvent('click', function() {

							var toDisplayOver = that.modal.getContent().getElement('.enox-arch-number-content');

							if (that.modal.validateEnteredNameValueNotNull()) {
								that.modal.displayAlertMessage(FLWebNLS.nameNullMessage, toDisplayOver);
							} else if (that.modal.validateEnteredOrderValueNotNull()) {
								that.modal.displayAlertMessage(FLWebNLS.orderNullMessage, toDisplayOver);
							} else if (that.modal.validatSelectedTypeFieldValueNotNull()) {
								that.modal.displayAlertMessage(FLWebNLS.selectTypeMessage, toDisplayOver);
							} else if (that.modal.validateSelectedAttributeFieldValueNotNull()) {
								that.modal.displayAlertMessage(FLWebNLS.selectAttributeMessage, toDisplayOver);
							}else if (that.modal.validateEnteredCounterFieldValueNotNull()) {
								that.modal.displayAlertMessage(FLWebNLS.counterIsEmptyMessage, toDisplayOver);
							}else if (that.modal.validateEnteredValueFieldValueNotNull()) {
								that.modal.displayAlertMessage(FLWebNLS.valueEmptyMessage, toDisplayOver);
							} else {
								if (!that.modal.validateEnteredNameValue().isValid) {
									that.modal.displayAlertMessage(FLWebNLS.nameMessage +  ' ' + FLWebNLS.alreadyExists, toDisplayOver);
								} else if (!that.modal.validateEnteredOrderValue().isValid) {
									that.modal.displayAlertMessage(FLWebNLS.orderMessage +  ' ' + FLWebNLS.alreadyExists, toDisplayOver);
								} else {
									var userSelectedFormat = that.modal.getUserEnteredValues();

									userSelectedFormat[ParameterizationFLWebConstants.OPERATION] = ParameterizationFLWebConstants.ADD;
									var fieldInfo = CompanyIDViewUtilities.buildNewPartNumberField(userSelectedFormat, ParameterizationFLWebConstants.NEW_NOT_DEPLOYED);
									fieldInfo.inject(attrtbody.getElement(".partNumberFieldbody"));
									that.modal.destroy();
								}
							}
						});
					};
				});

				that.modal.show();
			}
		},

		createCollabUnicitySecAddFieldModal: function(tableBody) {
			var that = this;
			var options = {
					className: "part-number-modal",
					title: FLWebNLS.label_CSgroupingModalTitle
			}
			this.modal = new FLWebModal(options);
			if (this.modal.getTotalFormatRows() == ParameterizationFLWebConstants.MAX_ROWS) {
				var alert = that.modal.displayAlertMessage(FLWebNLS.maxLimitOfRows, document.querySelector('#typeMainDiv').getChildren()[0]);
			} else {
				function _getFooter() {
					return "<button type='button'  name='addButton' id='add-button' class='btn btn-primary'>" + FLWebNLS.add + "</button> " + "</button>" + "<button type='button' name='cancelButton' id='cancel-button' class='btn btn-default'>" + FLWebNLS.cancel + "</button>"
				}
				this.modal.modal.setFooter(_getFooter());
				this.modal.createCollabUnicitySecAddFieldModalBody();
				this.modal._bindFooterEvent();
				this.modal.getContent().getElements('.btn').forEach(function(element) {
					if (element.name === 'cancelButton') {
						element.addEvent('click', function() {
							that.modal.destroy();
						});
					} else if (element.name === 'addButton') {
						element.addEvent('click', function() {
							var toDisplayOver = that.modal.getContent().getElement('.enox-arch-number-content');
							if (that.modal.validateEnteredGroupNameValueNotNull()) {
								that.modal.displayAlertMessage(FLWebNLS.nameNullMessage, toDisplayOver);
							} else if (that.modal.validateEnteredCollabListValueNotNull()) {
								that.modal.displayAlertMessage(FLWebNLS.msg_CSFieldBlankAlert, toDisplayOver);
							}
							else {
								if (!that.modal.validateEnteredGroupNameValue().isValid) {
									that.modal.displayAlertMessage(FLWebNLS.nameMessage +  ' ' + FLWebNLS.alreadyExists, toDisplayOver);
								} else {
									var userSelectedFormat = that.modal.getUserEnteredValuesForArchNumCollabUnicity();
									userSelectedFormat[ParameterizationFLWebConstants.OPERATION] = ParameterizationFLWebConstants.ADD;
									var fieldInfo = CompanyIDViewUtilities.buildNewArchNumCollabField(userSelectedFormat, ParameterizationFLWebConstants.NEW_NOT_DEPLOYED);
									fieldInfo.inject(tableBody);
									that.modal.destroy();
								}
							}
						});
					};
				});

				that.modal.show();
			}
		},

		getAlertMessage: function (message, className, toDisplayOn) {

			this.alertOptions = {
					visible: true,
					className: 'param-alert',
					messageClassName: className,
					closable: true,
					renderTo: toDisplayOn,
					autoHide: true,
					hideDelay: 2000
			};

			var alert = new Alert(this.alertOptions);
			alert.add({
				message: message,
			});

		},

		destroy: function() {
			this.stopListening();
			this._parent.apply(this, arguments);
		},
		_updateParentViewWithNewDomain : function(view, domainId){
			view.options.domainid = domainId;
			view.model.id = domainId;
			view.model._attributes.domainid = domainId;
			view.model._attributes.id = domainId;
			return view;
		},
	});

	return extendedView;
});

define('DS/ParameterizationSkeleton/Views/ParameterizationMSF/MSFGCOConfigurationLayoutView', [
	'UWA/Core',
	'UWA/Class/View',
	'DS/UIKIT/Mask',
	'DS/UIKIT/Scroller',
	'DS/UIKIT/Input/Text',
	'DS/UIKIT/Popover',
	'DS/UIKIT/Modal',
	'DS/UIKIT/Input/Select',
	'DS/WAFData/WAFData',
	'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler',
	'DS/ParameterizationSkeleton/Views/ParametersLayoutViewUtilities',
	'DS/UIKIT/Input/Button',
	'DS/ParameterizationSkeleton/Views/ParametersLayoutView',
	'DS/ParameterizationSkeleton/Views/ParameterizationMSF/MSFGCOMappingView',
	'DS/ParameterizationSkeleton/Views/ParameterizationMSF/MSFGCOMappingViewUtilities',
	'i18n!DS/ParameterizationSkeleton/assets/nls/MSFContentMgmtNLS'
	],
	function (UWA,
			View,
			Mask,
			Scroller,
			Text,
			Popover,
			Modal,
			Select,
			WAFData,
			URLHandler,
			ParametersLayoutViewUtilities,
			Button,
			ParametersLayoutView,
			MSFGCOMappingView,
			MSFGCOMappingViewUtilities,
			MSFContentMgmtNLS) {

	'use strict';

	var extendedView;

	extendedView = View.extend({
		tagName: 'div',
		className: 'generic-detail',

		init: function (options) {
			options = UWA.clone(options || {}, false);
			this._parent(options);

			this.options = options;
			this.contentDiv = null;
			this.paramScroller = null;
			this.paramBasicScroller = null;
			this.controlDiv = null;
		},

		setup: function (options) {
			UWA.log('MSFGCOConfiguration Layout::setup!');
			UWA.log(options);
		},

		render: function () {
			UWA.log("MSFGCOConfiguration LayoutView::render");
			var introDiv,
			that = this;

			this.contentDiv = UWA.createElement('div', {
				'id': 'typeMainDiv'
			});

			introDiv = UWA.createElement('div', {
				'class': 'information'
			}).inject(this.contentDiv);

			UWA.createElement('p', {
				text: MSFContentMgmtNLS.intro
			}).inject(introDiv);

			this.parentView = new ParametersLayoutView(this.options);

			this.controlDiv = ParametersLayoutViewUtilities.createApplyResetToolbar.call(this, this.contentDiv, true,
					this.applyParams.bind(this), this.resetParams.bind(this));

			this.container.setContent(this.contentDiv);
			this.listenTo(this.collection, {
				onSync: that.onCompleteRequestMapping
			});

			return this;
		},

		onCompleteRequestMapping: function () {

			var that = this;
			UWA.log('MSFGCOConfigurationLayoutView :: onCompleteRequestMapping!');

			var collection = this.collection._models[0]._attributes;
			var fields = collection.ExpressionList;
			var nosOfFields = (fields) ? fields.length : 0;

			this.paramsDIV = UWA.createElement('div', {
				'class': 'customTypeDivScroll',
			}).inject(this.contentDiv);

			this.baseAccordion = ParametersLayoutViewUtilities.createFamilyUIKITAccordion(this.paramsDIV);

			var gcoParentDiv = UWA.createElement('div', {
				'class': 'customTypeParentDiv'
			});

			var gcoContentDiv = UWA.createElement('div', {
				'class': 'customTypeContentDiv'
			});

			var customTypeTableContent = this.buildTableContent();
			customTypeTableContent.inject(gcoContentDiv);

			var addMappingButton = new Button({
				className: 'AddFieldButton',
				icon: 'plus-circled',
				attributes: {
					id : 'btnCustomTypeMapping',
					disabled: false,
					'aria-hidden': 'true',
					title: MSFContentMgmtNLS.AddMappingTooltip,
				},
				events: {
					onClick: function (e) {
						MSFGCOMappingView.ShowMappingModelDialog('btnCustomTypeMapping', that.contentDiv);
					}
				}
			}).inject(gcoContentDiv); 

			gcoParentDiv.appendChild(gcoContentDiv);

			this.baseAccordion.addItem({
				title: MSFContentMgmtNLS.CustomTypeTitle,
				content: gcoParentDiv,
				selected: true,
				name: "gcoconfig",
			});

			gcoContentDiv.appendChild(this.controlDiv);

			//If tab is changed then show the deployed rows
			for (var i = 0; i < nosOfFields; i++) {
				var field = fields[i];
				var deployedStatus = (field.Deployed && field.Deployed == "True") ? "Deployed" : "NewNotDeployed";
				var rowInfo = MSFGCOMappingView.buildMappingRow(field.InternalType, field.OfficeType, field.Policy,
						field.Format, field.Relationship, deployedStatus);
				rowInfo.IsDeployed = deployedStatus;
				rowInfo.inject(that.contentDiv.getElement(".msfgcofamilytable"));
			}

			this.paramScroller = new Scroller({
				element: gcoContentDiv
			}).inject(gcoParentDiv);

			this.getOtherDomainDetails();
			Mask.unmask(this.contentDiv);
		},

		buildTableContent : function() {

			var that = this;
			var familyTable, ftbody;

			familyTable = UWA.createElement('table', {
				'class': 'table table-hover',
				'table-layout': 'fixed', 
				class: 'msfgcofamilytable table table-condensed'
			});

			ftbody =  UWA.createElement('tbody', {
				'class': 'fparamtbody',
				'id': 'msfgcofamilytablebody'
			}).inject(familyTable);

			var fieldRow = MSFGCOMappingView.buildTableHeadingRow();
			fieldRow.inject(ftbody);
			return familyTable;
		},

		getOtherDomainDetails: function () {
			var that = this;
			var url = URLHandler.getURL() + "/resources/ParamWS/access/DomainElements?tenant=" + URLHandler.getTenant() + "&domainid=MSFConfigurationParameterization";
			WAFData.authenticatedRequest(url, {
				timeout: 250000,
				method: 'GET',
				type: 'json',

				headers: {
					'Content-Type': 'application/json',
					'Accept': 'application/json',
					'Accept-Language' : widget.lang
				},

				onFailure: function (result) {
					Mask.unmask(that.contentDiv);
					MSFGCOMappingViewUtilities.getAlertMessage(MSFContentMgmtNLS.BasicParamError, 'error', this.contentDiv);
				},

				onComplete: function (result) {
					var familyArray = [];

					result.family.forEach(function(family) {
						familyArray.push(family);
					});

					that.loadOtherDomainDetails(familyArray);
				}
			}); 
		},

		loadOtherDomainDetails: function (result) {
			var that = this;
			try{
				that.divBasicConfig = UWA.createElement('div', {
					'class': 'basicDivScroll'
				}).inject(that.contentDiv);
				that.altSubAccordean = ParametersLayoutViewUtilities.createFamilyUIKITAccordion(that.paramsDIV);

				var basicConfigParentDiv = UWA.createElement('div', {
					'class': 'basicParentDiv'
				});
				var basicConfigDiv = UWA.createElement('div', {
					'class': 'basicConfigDiv'
				});
				basicConfigParentDiv.appendChild(basicConfigDiv);
				that.model.set("introduction", "");

				that.parentView = that._updateParentViewWithNewDomain(that.parentView,"MSFConfigurationParameterization");

				that.parentView.render();
				that.collection._models[0]._attributes.family = result;
				that.parentView.onCompleteRequestParameters();

				that.altSubAccordean.addItem({
					title: MSFContentMgmtNLS.BasicDomainTitle,
					content: basicConfigParentDiv,
					selected: true,
					name: result.nlsKey
				});

				basicConfigDiv.appendChild(that.parentView.contentDiv);

				paramBasicScroller = new Scroller({
					element: basicConfigDiv
				}).inject(basicConfigParentDiv);
			}	catch(error) {
			}
		},

		_updateParentViewWithNewDomain : function(view, domainId){
			view.options.domainid = domainId;
			view.model.id = domainId;
			view.model._attributes.domainid = domainId;
			view.model._attributes.id = domainId;
			return view;
		},

		applyParams: function () {
			var that = this;
			var rowsOfMappedFields = this.contentDiv.getElementsByClassName("customTypeMappingRow");
			var payloadToSend = {};
			Mask.mask(this.contentDiv);
			payloadToSend.ExpressionList = [];
			for (var i = 0; i < rowsOfMappedFields.length; i++) {
				if (rowsOfMappedFields[i].IsDeployed == "NewNotDeployed") {
					var value = MSFGCOMappingViewUtilities.buildJsonObjectFromTableRow(rowsOfMappedFields[i]);
					payloadToSend.ExpressionList.push(value);
				}
			}

			var url = URLHandler.getURL() + "/resources/v1/msfParameterization/setCustomTypeMappings?tenant=" + URLHandler.getTenant();
			WAFData.authenticatedRequest(url, {
				timeout: 250000,
				method: 'POST',
				data: JSON.stringify(payloadToSend),
				type: 'json',
				headers: {
					'Content-Type': 'application/json',
					'Accept': 'application/json'
				},

				onFailure: function (json) {
					Mask.unmask(that.contentDiv);
					MSFGCOMappingViewUtilities.getAlertMessage(MSFContentMgmtNLS.ApplyError, 'error', that.contentDiv);
				},

				onComplete: function (json) {
					Mask.unmask(that.contentDiv);
					if (json.Action == "Success") {
						that.onApplySuccess();
						MSFGCOMappingViewUtilities.getAlertMessage(MSFContentMgmtNLS.ApplySuccess, 'success', that.contentDiv);
					} else {
						MSFGCOMappingViewUtilities.getAlertMessage(json.message, 'error', that.contentDiv);
					}
				}
			});
		},

		resetParams: function () {
			this.onResetSuccess();
			Mask.unmask(this.contentDiv);
			MSFGCOMappingViewUtilities.getAlertMessage(MSFContentMgmtNLS.ResetSuccess, 'success', this.contentDiv);
		},

		onApplySuccess: function () {

			var fieldsToBeRemoved = new Array();

			var rowsOfMappedFields = this.contentDiv.getElementsByClassName("customTypeMappingRow");
			for (var i = 0; i < rowsOfMappedFields.length; i++) {
				if (rowsOfMappedFields[i].IsDeployed == "NewNotDeployed") {
					var statusCell = rowsOfMappedFields[i].cells[6];
					if (statusCell.UserOperation == "Add") {
						rowsOfMappedFields[i].cells[6].empty();
						rowsOfMappedFields[i].IsDeployed = "Deployed";
						var imgSpan = MSFGCOMappingViewUtilities.buildImgSpan('check', '1.5', 'green', MSFContentMgmtNLS.Deployed);
						imgSpan.inject(rowsOfMappedFields[i].cells[6]);
					}
					if (rowsOfMappedFields[i].cells[6].UserOperation == "Remove") {
						fieldsToBeRemoved.push(rowsOfMappedFields[i]);
					}
				}
			}

			fieldsToBeRemoved.forEach(function (attrMapping) {
				attrMapping.remove();
			});
		},

		onResetSuccess: function (json) {

			var that = this;
			var fieldsToBeRemoved = new Array();
			var rowsOfMappedFields = this.contentDiv.getElementsByClassName("customTypeMappingRow");
			for (var i = 0; i < rowsOfMappedFields.length; i++) {
				if (rowsOfMappedFields[i].IsDeployed == "NewNotDeployed") {
					fieldsToBeRemoved.push(MSFGCOMappingViewUtilities.resetForFieldLineChanges(rowsOfMappedFields[i]));
				}
			}
			fieldsToBeRemoved.forEach(function (attrMapping) {
				if (attrMapping) {
					attrMapping.remove();
				}
			});
		},

		destroy: function () {
			this.stopListening();
			this._parent.apply(this, arguments);
		}
	});

	return extendedView;
});

define('DS/ParameterizationSkeleton/Views/PPRSynchronizationLifeCycle/PPRSynchroMBOMLayoutView', [
		'UWA/Core',
		'UWA/Class/View',
		'DS/UIKIT/Mask',
		'DS/UIKIT/Scroller',
		'DS/UIKIT/Input/Select',
		'DS/WAFData/WAFData',
		'DS/ParameterizationSkeleton/Views/ParametersLayoutViewUtilities',
		'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler',
		'DS/ParameterizationSkeleton/Views/PPRSynchronizationLifeCycle/PPRSynchroViewUtilities',
		'DS/ParameterizationSkeleton/Views/PPRSynchronizationLifeCycle/PPRSynchroViewConstants',
		'DS/ParameterizationSkeleton/Views/PPRSynchronizationLifeCycle/PPRSynchroAddLineDialog',
		'DS/UIKIT/Input/Button',
		'DS/UIKIT/Alert',
		'DS/ParameterizationSkeleton/Views/ParametersLayoutView',
		'i18n!DS/ParameterizationSkeleton/assets/nls/PPRSynchroLifeCycleNLS'
	],
	function (UWA,
		View,
		Mask,
		Scroller,
		Select,
		WAFData,
		ParametersLayoutViewUtilities,
		URLHandler,
		PPRSynchroViewUtilities,
		PPRSynchroViewConstants,
		PPRSynchroAddLineDialog,
		Button,
		Alert,
		ParametersLayoutView,
		PPRSynchroLifeCycleNLS) {

	'use strict';

	var extendedView;

	extendedView = View.extend({
			tagName: 'div',
			className: 'generic-detail',

			init: function (options) {
				var initDate = new Date();
				options = UWA.clone(options || {}, false);
				this._parent(options);

				this.options = options;
				this.contentDiv = null;
				this.paramScroller = null;
				this.paramAltSubScroller = null;
				this.userMessaging = null;
				this.lastAlertDate = initDate.getTime();
				this.controlDiv = null;
				this._pprRulesTable = null;
				this.paramsDiv = null;
			},

			setup: function (options) {
				UWA.log('PPR Synchro Layout::setup!');
				UWA.log(options);
			},

			render: function () {
				UWA.log("PPR Synchro LayoutView::render");
				var introDiv,
				mappingDiv,
					that = this;

				//contentDiv is the main container
				this.contentDiv = UWA.createElement('div', {
						'id': 'typeMainDiv'
					});

				introDiv = UWA.createElement('div', {
						'class': 'information'
					}).inject(this.contentDiv);

				UWA.createElement('p', {
					text: PPRSynchroLifeCycleNLS.intro,
					'class': 'font-3dslight'
				}).inject(introDiv);


				//Reset & Apply Toolbar are linked with main container (content.div)
				this.controlDiv = ParametersLayoutViewUtilities.createApplyResetToolbar.call(this, this.contentDiv, true,
						this.applyParams.bind(this), this.resetParams.bind(this));

				this.container.setContent(this.contentDiv);

				this.parentView = new ParametersLayoutView(this.options);

				this.listenTo(this.collection, {
					onSync: that.onCompleteRequestPPRSynchroMBOM,
					onError: that.onCompleteRequestPPRSynchroMBOM
				});

				return this;
		},


			onCompleteRequestPPRSynchroMBOM: function (collection, response, options) {
				var that = this;
				UWA.log('PPR Synchro Layout::Complete rendering!');
				//Fix IR-945140 - Handling error returned by webservice. When there is no Page exist in database, call set on collection to initialize empty table in UI
				if( response.success != undefined && response.success == false && response.message != undefined && response.message.includes('Page does not exist')){
									this.collection.set(response, options);
								}
				//get value returned by Webservice
				var collection = this.collection._models[0]._attributes;

				//paramsDIV = container of the Table containing the rules
				this.paramsDIV = ParametersLayoutViewUtilities.createParamsContainerDiv();

				//The container of rules table
				this.divPPRSynchroRules = UWA.createElement('div', {
						'class': 'PPRSynchroRulesDivScroll',
				}).inject(this.paramsDIV);

				//Convert collection (returned by webservice)
				//to the fields structure displayed in Cell
				var fields = PPRSynchroViewUtilities.convertFormatWebServiceToTable(collection.ExpressionsList);
				var nosOfFields = (fields) ? fields.length : 0;

				//buildAttributeTable creates the Title (Formula + heading Colum + Table of rules)
				this._pprRulesTable = PPRSynchroViewUtilities.buildAttributeTable(fields);
				this._pprRulesTable.inject(this.divPPRSynchroRules);

				// + Button is linked with main container
				//at bottom of Table, it will disappear
				var AddMappingButton = new Button({
						className: 'AddPartNumberFieldButton',
						icon: 'plus-circled',
						attributes: {
							disabled: false,
							'aria-hidden': 'true',
							title: PPRSynchroLifeCycleNLS.TitleModal,
						},
						events: {
							onClick: function (e) {
								that.ShowAddNewFieldPanel(that, that._pprRulesTable.getElement(".PPRSynchroFieldbody"));
							}
						}
				}).inject(this.contentDiv);

				//inject the table as child of paramsDIV
				this.divPPRSynchroRules.inject(this.paramsDIV);
				//this.divPPRSynchroRules.appendChild(this.paramsDIV);


				for (var i = 0; i < nosOfFields; i++) {
					var field = fields[i];
					var deployedStatus = PPRSynchroViewConstants.DEPLOYED;
					field[PPRSynchroViewConstants.OPERATION] = PPRSynchroViewConstants.ADD;
					//Build every line stored in the Table
					var fieldInfo = PPRSynchroViewUtilities.buildNewRuleField(field, deployedStatus);
					fieldInfo.inject(this._pprRulesTable.getElement(".PPRSynchroFieldbody"));
				}
				//contentDiv == Main container
				this.paramsDIV.inject(this.contentDiv);

				this.paramScroller = new Scroller({
					element: this.paramsDIV
				}).inject(this.contentDiv);

				Mask.unmask(this.contentDiv);
			},


			_updateParentViewWithNewDomain : function(view, domainId){
				view.options.domainid = domainId;
				view.model.id = domainId;
				view.model._attributes.domainid = domainId;
				view.model._attributes.id = domainId;
				return view;
			},

			resetParams: function () {
				var that = this;
				Mask.mask(this.contentDiv);
				var url = URLHandler.getURL() + "/resources/DELLifecycleParametrization/lifecycle/options?modelerKey=DELLifecycleCouplingParam_MBOM";

				//var url = URLHandler.getURL() + "/resources/delmia/lifecycleOptions"; // + URLHandler.getTenant();
				WAFData.authenticatedRequest(url, {
					timeout: 250000,
					method: 'GET',
					type: 'json',

					headers: {
						'Content-Type': 'application/json',
						'Accept': 'application/json',
					},

					onFailure: function (json) {
						Mask.unmask(that.contentDiv);
						that.onResetFailure(PPRSynchroLifeCycleNLS.ResetError);
					},

					onComplete: function (json) {
						that.onResetSuccess(json);
						Mask.unmask(that.contentDiv);
						that.getAlertMessage(PPRSynchroLifeCycleNLS.ResetSuccess, 'success', that.contentDiv);
					}

				});
			},

		onResetSuccess: function (json) {

			//returned by the Reset Service
			var savedInfo = json.result.parameters;
			var i = 0;
			//Get the lines of the current Table
			var listofcurrentLines = this.paramsDIV.getElementsByClassName("PPRLifeCycleRulesMapping");

			//Reset => Remove all the lines
			i = listofcurrentLines.length -1;
			while (i >= 0) {
				listofcurrentLines[i].remove();
				i--;
			}

			//Add the lines retreived on the server
			var fields = PPRSynchroViewUtilities.convertFormatWebServiceToTable(savedInfo);
			var nosOfFields = (fields) ? fields.length : 0;

			for (i = 0; i < nosOfFields; i++) {
				var field = fields[i];
				field[PPRSynchroViewConstants.OPERATION] = PPRSynchroViewConstants.ADD;
					var deployedStatus = PPRSynchroViewConstants.DEPLOYED;

					//Build every line returned on the server
					var fieldInfo = PPRSynchroViewUtilities.buildNewRuleField(field,deployedStatus);
					fieldInfo.inject(this._pprRulesTable.getElement(".PPRSynchroFieldbody"));
			}
			//green at Top
			PPRSynchroViewUtilities.updateFormulaTextFields(PPRSynchroViewConstants.DEPLOYED);
		},

		onResetFailure: function (message) {
				this.getAlertMessage(message, 'error', this.contentDiv);
			},

		applyParams: function () {
				var that = this;
				var rowsOfMappedFields = this.contentDiv.getElementsByClassName("PPRLifeCycleRulesMapping");
				var TableRules = [];

				Mask.mask(this.contentDiv);

				//Conversion rows displayed to Table
				var row;
				for (var i = 0; i < rowsOfMappedFields.length; i++) {
					//This flag is set for lines already deployed on server
					//In this case, the rule should removed
					//So it is not copied on the Table
					row = rowsOfMappedFields[i];
					if (row.cells[PPRSynchroViewUtilities.cellsIndex.deployFlag].value != PPRSynchroViewConstants.REMOVE) {
						var value = PPRSynchroViewUtilities.buildObjectFromRow(row);
						TableRules.push(value);
					}
				}
				//conversion Table to a rule on the right format for Webservice called
				var collection = PPRSynchroViewUtilities.convertTableToFormatWebservice(TableRules);

				var url = URLHandler.getURL() + "/resources/DELLifecycleParametrization/lifecycle/options?modelerKey=DELLifecycleCouplingParam_MBOM";
				WAFData.authenticatedRequest(url, {
					timeout: 250000,
					method: 'PUT',
					data: JSON.stringify(collection),
					type: 'json',

					headers: {
						'Content-Type': 'application/json',
						'Accept': 'application/json'
					},

					onFailure: function (json) {
						Mask.unmask(that.contentDiv);
						that.onApplyFailure(PPRSynchroLifeCycleNLS.ApplyError);
					},

					onComplete: function (json) {
							that.onApplySuccess( );
							Mask.unmask(that.contentDiv);
							that.getAlertMessage(PPRSynchroLifeCycleNLS.ApplySuccess, 'success', that.contentDiv);
					}

				});
			},

			onApplyFailure: function (message) {
				this.getAlertMessage(message, 'error', this.contentDiv);
			},

			onApplySuccess: function () {
				var fieldsToBeRemoved = new Array();
				var rowsOfMappedFields = this.contentDiv.getElementsByClassName("PPRLifeCycleRulesMapping");
				var i, length = rowsOfMappedFields.length;

				for (i = length - 1; i >= 0; i--) {
				var line = rowsOfMappedFields[i];

				var deploycell = line.cells[PPRSynchroViewUtilities.cellsIndex.deployFlag];
					var value = deploycell.value;
				//remove the deployed rules on server set as deleted
				if (value == PPRSynchroViewConstants.REMOVE)
					line.remove();
				else {
					//To set a green icon (check) at the end of line
					//because every line is deployed
					PPRSynchroViewUtilities.setDeployedStatusFieldLine(line, PPRSynchroViewConstants.DEPLOYED);
				}
			}
			//At Top
			//we modify the Icon status
			PPRSynchroViewUtilities.updateFormulaTextFields(PPRSynchroViewConstants.DEPLOYED);
		},
		ShowAddNewFieldPanel: function (attrtbody) {
				this.createNewRuleDialogBox(attrtbody);
				var isDeployed = PPRSynchroViewConstants.NEW_NOT_DEPLOYED;
			},
		buildSelectOptionsComboBoxType: function () {
			var i,
				formatTypeComboBox = new Select({
					placeholder: PPRSynchroLifeCycleNLS.selectType,
					multiple: true,
					custom: false
				});
			var tableRules = this.contentDiv.getElementsByClassName("PPRLifeCycleRulesMapping");
			var nRows = tableRules.length;


			var tableTypeAlreadySet = PPRSynchroViewUtilities.getTypeArrayAlradySetInview(tableRules);
			var valueoftype;
			var labeloftype;

			valueoftype = PPRSynchroViewConstants.Provide;
			labeloftype = PPRSynchroViewUtilities.getLabelTypeFromTypeValue(valueoftype);
			if (tableTypeAlreadySet.indexOf(valueoftype) == -1) {
				formatTypeComboBox.add([{
					label: labeloftype,
					value: valueoftype
				}], false);
			}

			valueoftype = PPRSynchroViewConstants.CreateAssembly;
			labeloftype = PPRSynchroViewUtilities.getLabelTypeFromTypeValue(valueoftype);
			if (tableTypeAlreadySet.indexOf(valueoftype) == -1) {
				formatTypeComboBox.add([{
					label: labeloftype,
					value: valueoftype
				}], false);
			}

			valueoftype = PPRSynchroViewConstants.ElementaryEndItem;
			labeloftype = PPRSynchroViewUtilities.getLabelTypeFromTypeValue(valueoftype);
			if (tableTypeAlreadySet.indexOf(valueoftype) == -1) {
				formatTypeComboBox.add([{
					label: labeloftype,
					value: valueoftype
				}], false);
			}

			valueoftype = PPRSynchroViewConstants.Fasten;
			labeloftype = PPRSynchroViewUtilities.getLabelTypeFromTypeValue(valueoftype);
			if (tableTypeAlreadySet.indexOf(valueoftype) == -1) {
				formatTypeComboBox.add([{
					label: labeloftype,
					value: valueoftype
				}], false);
			}


			valueoftype = PPRSynchroViewConstants.RemoveMaterial;
			labeloftype = PPRSynchroViewUtilities.getLabelTypeFromTypeValue(valueoftype);
			if (tableTypeAlreadySet.indexOf(valueoftype) == -1) {
				formatTypeComboBox.add([{
					label: labeloftype,
					value: valueoftype
				}], false);
			}


			valueoftype = PPRSynchroViewConstants.Predrill;
			labeloftype = PPRSynchroViewUtilities.getLabelTypeFromTypeValue(valueoftype);
			if (tableTypeAlreadySet.indexOf(valueoftype) == -1) {
				formatTypeComboBox.add([{
					label: labeloftype,
					value: valueoftype
				}], false);
			}

			valueoftype = PPRSynchroViewConstants.Drill;
			labeloftype = PPRSynchroViewUtilities.getLabelTypeFromTypeValue(valueoftype);
			if (tableTypeAlreadySet.indexOf(valueoftype) == -1) {
				formatTypeComboBox.add([{
					label: labeloftype,
					value: valueoftype
				}], false);
			}

			valueoftype = PPRSynchroViewConstants.NoDrill;
			labeloftype = PPRSynchroViewUtilities.getLabelTypeFromTypeValue(valueoftype);
			if (tableTypeAlreadySet.indexOf(valueoftype) == -1) {
				formatTypeComboBox.add([{
					label: labeloftype,
					value: valueoftype
				}], false);
			}

			valueoftype = PPRSynchroViewConstants.ContinuousProcessProvide;
			labeloftype = PPRSynchroViewUtilities.getLabelTypeFromTypeValue(valueoftype);
			if (tableTypeAlreadySet.indexOf(valueoftype) == -1) {
				formatTypeComboBox.add([{
					label: labeloftype,
					value: valueoftype
				}], false);
			}


			valueoftype = PPRSynchroViewConstants.ContinuousProcessCreateMaterial;
			labeloftype = PPRSynchroViewUtilities.getLabelTypeFromTypeValue(valueoftype);
			if (tableTypeAlreadySet.indexOf(valueoftype) == -1) {
				formatTypeComboBox.add([{
					label: labeloftype,
					value: valueoftype
				}], false);
			}

			valueoftype = PPRSynchroViewConstants.Transform;
			labeloftype = PPRSynchroViewUtilities.getLabelTypeFromTypeValue(valueoftype);
			if (tableTypeAlreadySet.indexOf(valueoftype) == -1) {
				formatTypeComboBox.add([{
					label: labeloftype,
					value: valueoftype
				}], false);
			}

			valueoftype = PPRSynchroViewConstants.CreateKit;
			labeloftype = PPRSynchroViewUtilities.getLabelTypeFromTypeValue(valueoftype);
			if (tableTypeAlreadySet.indexOf(valueoftype) == -1) {
				formatTypeComboBox.add([{
					label: labeloftype,
					value: valueoftype
				}], false);
			}

			valueoftype = PPRSynchroViewConstants.Installation;
			labeloftype = PPRSynchroViewUtilities.getLabelTypeFromTypeValue(valueoftype);
			if (tableTypeAlreadySet.indexOf(valueoftype) == -1) {
				formatTypeComboBox.add([{
					label: labeloftype,
					value: valueoftype
				}], false);
			}

			valueoftype = PPRSynchroViewConstants.ServicePart;
			labeloftype = PPRSynchroViewUtilities.getLabelTypeFromTypeValue(valueoftype);
			if (tableTypeAlreadySet.indexOf(valueoftype) == -1) {
				formatTypeComboBox.add([{
					label: labeloftype,
					value: valueoftype
				}], false);
			}


			valueoftype = PPRSynchroViewConstants.ServiceKit;
			labeloftype = PPRSynchroViewUtilities.getLabelTypeFromTypeValue(valueoftype);
			if (tableTypeAlreadySet.indexOf(valueoftype) == -1) {
				formatTypeComboBox.add([{
					label: labeloftype,
					value: valueoftype
				}], false);
			}


			valueoftype = PPRSynchroViewConstants.ServiceAssembly;
			labeloftype = PPRSynchroViewUtilities.getLabelTypeFromTypeValue(valueoftype);
			if (tableTypeAlreadySet.indexOf(valueoftype) == -1) {
				formatTypeComboBox.add([{
					label: labeloftype,
					value: valueoftype
				}], false);
			}


			valueoftype = PPRSynchroViewConstants.Machining;
			labeloftype = PPRSynchroViewUtilities.getLabelTypeFromTypeValue(valueoftype);
			if (tableTypeAlreadySet.indexOf(valueoftype) == -1) {
				formatTypeComboBox.add([{
					label: labeloftype,
					value: valueoftype
				}], false);
			}

			valueoftype = PPRSynchroViewConstants.Marking;
			labeloftype = PPRSynchroViewUtilities.getLabelTypeFromTypeValue(valueoftype);
			if (tableTypeAlreadySet.indexOf(valueoftype) == -1) {
				formatTypeComboBox.add([{
					label: labeloftype,
					value: valueoftype
				}], false);
			}

			valueoftype = PPRSynchroViewConstants.Split;
			labeloftype = PPRSynchroViewUtilities.getLabelTypeFromTypeValue(valueoftype);
			if (tableTypeAlreadySet.indexOf(valueoftype) == -1) {
				formatTypeComboBox.add([{
					label: labeloftype,
					value: valueoftype
				}], false);
			}

			valueoftype = PPRSynchroViewConstants.Beveling;
			labeloftype = PPRSynchroViewUtilities.getLabelTypeFromTypeValue(valueoftype);
			if (tableTypeAlreadySet.indexOf(valueoftype) == -1) {
				formatTypeComboBox.add([{
					label: labeloftype,
					value: valueoftype
				}], false);
			}

			valueoftype = PPRSynchroViewConstants.Cutting;
			labeloftype = PPRSynchroViewUtilities.getLabelTypeFromTypeValue(valueoftype);
			if (tableTypeAlreadySet.indexOf(valueoftype) == -1) {
				formatTypeComboBox.add([{
					label: labeloftype,
					value: valueoftype
				}], false);
			}

			valueoftype = PPRSynchroViewConstants.Grinding;
			labeloftype = PPRSynchroViewUtilities.getLabelTypeFromTypeValue(valueoftype);
			if (tableTypeAlreadySet.indexOf(valueoftype) == -1) {
				formatTypeComboBox.add([{
					label: labeloftype,
					value: valueoftype
				}], false);
			}


			valueoftype = PPRSynchroViewConstants.DetailedFasten;
			labeloftype = PPRSynchroViewUtilities.getLabelTypeFromTypeValue(valueoftype);
			if (tableTypeAlreadySet.indexOf(valueoftype) == -1) {
				formatTypeComboBox.add([{
					label: labeloftype,
					value: valueoftype
				}], false);
			}

			return formatTypeComboBox;
		},
		createNewRuleDialogBox: function (attrtbody) {
				var that = this;
				var attributes = (this.collection._models[0]._attributes && this.collection._models[0]._attributes.lifeCycleRulesAttributes);
				var options = {
					className: "lifecycle-rules-modal",
					title: PPRSynchroLifeCycleNLS.TitleModal,
					[PPRSynchroViewConstants.AVOID_DUP_COUNTER] : this.collection._models[0]._attributes[PPRSynchroViewConstants.AVOID_DUP_COUNTER]
				}

				this.modal = new PPRSynchroAddLineDialog(options);

				this.modal.storeAttributes(attributes);

			//This case should not happened
				if (this.modal.getTotalFormatRows() == PPRSynchroViewConstants.MAX_ROWS) {
					var alert = that.modal.displayAlertMessage(PPRSynchroLifeCycleNLS.maxLimitOfRows, document.querySelector('#typeMainDiv').getChildren()[0]);
				} else {
					function _getFooter() {
						return "<button type='button'  name='addButton' id='add-button' class='btn btn-primary'>" + PPRSynchroLifeCycleNLS.add + "</button> " + "</button>" + "<button type='button' name='cancelButton' id='cancel-button' class='btn btn-default'>" + PPRSynchroLifeCycleNLS.cancel + "</button>"
					}

					this.modal.modal.setFooter(_getFooter());

					var selectComboOptions = this.buildSelectOptionsComboBoxType();

					this.modal.getModalBody(selectComboOptions);

					this.modal._bindFooterEvent();

					//pattern to disable ComboBOX
					this.modal.getContent().getElements('.btn').forEach(function (element) {

						if (element.name === 'cancelButton') {
							element.addEvent('click', function () {
								that.modal.destroy();

							});
						} else if (element.name === 'addButton') {

							element.addEvent('click', function () {

								var toDisplayOver = that.modal.getContent().getElement('.ppr-lifecycling-rules-content');
								//at least one type should be selected
								if (that.modal.typeSelectionNotValid()) {
									 that.modal.displayAlertMessage(PPRSynchroLifeCycleNLS.selectTypeMessage, toDisplayOver);
								}
								//at least one rule should be selected
								else if (that.modal.lifeCycleRulesSelectionNotValid()) {
									that.modal.displayAlertMessage(PPRSynchroLifeCycleNLS.selectrulesMessage, toDisplayOver);
								}
							    //at least one command should be selected
								else if (that.modal.commandSelectionNotValid()) {
									that.modal.displayAlertMessage(PPRSynchroLifeCycleNLS.selectcommandsMessage, toDisplayOver);
								}
								else {
										//At top mentions there is a modification
										PPRSynchroViewUtilities.updateFormulaTextFields(PPRSynchroViewConstants.NEW_NOT_DEPLOYED);

										var userSelectedMultiTypes = that.modal.getUserEnteredValues();
										var listTypesSelected = userSelectedMultiTypes[PPRSynchroViewConstants.TYPE];
										//loop on every type in list
										for (var ii = 0; ii < listTypesSelected.length; ii++) {
											var userSelectedFormat = {};

											userSelectedFormat[PPRSynchroViewConstants.TYPE] = listTypesSelected[ii];
											userSelectedFormat[PPRSynchroViewConstants.COMPUTED_RESULTING_PRODUCT] = userSelectedMultiTypes[PPRSynchroViewConstants.COMPUTED_RESULTING_PRODUCT];
											//SPEC_DOC commented asked by Paul IR926203
											//userSelectedFormat[PPRSynchroViewConstants.SPEC_DOC] = userSelectedMultiTypes[PPRSynchroViewConstants.SPEC_DOC];
											userSelectedFormat[PPRSynchroViewConstants.CHILD_TRANSFORMATION_TYPES] = userSelectedMultiTypes[PPRSynchroViewConstants.CHILD_TRANSFORMATION_TYPES];

											userSelectedFormat[PPRSynchroViewConstants.NEW_REVISION] = userSelectedMultiTypes[PPRSynchroViewConstants.NEW_REVISION];
											userSelectedFormat[PPRSynchroViewConstants.NEW_BRANCH] = userSelectedMultiTypes[PPRSynchroViewConstants.NEW_BRANCH];
											userSelectedFormat[PPRSynchroViewConstants.DUPLICATE] = userSelectedMultiTypes[PPRSynchroViewConstants.DUPLICATE];
											userSelectedFormat[PPRSynchroViewConstants.DELETE] = userSelectedMultiTypes[PPRSynchroViewConstants.DELETE];
											userSelectedFormat[PPRSynchroViewConstants.TRANSFER_OWNERSHIP] = userSelectedMultiTypes[PPRSynchroViewConstants.TRANSFER_OWNERSHIP];
											userSelectedFormat[PPRSynchroViewConstants.CHANGE_MATURIY] = userSelectedMultiTypes[PPRSynchroViewConstants.CHANGE_MATURIY];

											userSelectedFormat[PPRSynchroViewConstants.LOCK] = userSelectedMultiTypes[PPRSynchroViewConstants.LOCK];
											userSelectedFormat[PPRSynchroViewConstants.CHANGE_CONTROL] = userSelectedMultiTypes[PPRSynchroViewConstants.CHANGE_CONTROL];
											userSelectedFormat[PPRSynchroViewConstants.TRANSFER] = userSelectedMultiTypes[PPRSynchroViewConstants.TRANSFER];
											userSelectedFormat[PPRSynchroViewConstants.SHARE] = userSelectedMultiTypes[PPRSynchroViewConstants.SHARE];


											var fieldInfo = PPRSynchroViewUtilities.buildNewRuleField(userSelectedFormat, PPRSynchroViewConstants.NEW_NOT_DEPLOYED);
											fieldInfo.inject(attrtbody.getElement(".PPRSynchroFieldbody"));
										}
										that.modal.destroy();
								}
							});
						};
					});

					that.modal.show();
				}
			},

			getAlertMessage: function (message, className, toDisplayOn) {

				this.alertOptions = {
					visible: true,
					className: 'param-alert',
					messageClassName: className,
					closable: true,
					renderTo: toDisplayOn,
					autoHide: true,
					hideDelay: 2000
				};

				var alert = new Alert(this.alertOptions);
				alert.add({
					message: message,
				});

			},

			destroy: function () {
				this.stopListening();
				this._parent.apply(this, arguments);
			}
		});

	return extendedView;
});

define('DS/ParameterizationSkeleton/Views/ParameterizationSystemsSafety/SystemsSafetyLayoutView', [
    'UWA/Core',
    'UWA/Class/View',
    'DS/UIKIT/Mask',
    'DS/UIKIT/Scroller',

    'DS/WAFData/WAFData',
    'DS/ParameterizationSkeleton/Views/ParametersLayoutViewUtilities',
    'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler',
    'DS/ParameterizationSkeleton/Views/ParameterizationSystemsSafety/SystemsSafetyViewUtilities',
    'DS/ParameterizationSkeleton/Views/ParameterizationSystemsSafety/SystemsSafetyViewPartnerUtilities',
    'DS/ParameterizationSkeleton/Views/ParameterizationSystemsSafety/SystemsSafetyViewStructureTreePatternUtilities',
    'DS/ParameterizationSkeleton/Views/ParameterizationSystemsSafety/ParameterizationSystemsSafetyConstants',
    'DS/ParameterizationSkeleton/Views/ParameterizationSystemsSafety/SystemsSafetyModalPartner',
    'DS/ParameterizationSkeleton/Views/ParameterizationSystemsSafety/SystemsSafetyModalStructureTreePattern',
    'DS/UIKIT/Input/Button',
    'DS/UIKIT/Alert',
    'DS/ParameterizationSkeleton/Views/ParametersLayoutView',

    'i18n!DS/ParameterizationSkeleton/assets/nls/ParamSkeletonNLS',
    'i18n!DS/ParameterizationSkeleton/assets/nls/SystemsSafetyNLS'
], function(
    UWA,
    View,
    Mask,
    Scroller,

    WAFData,
    ParametersLayoutViewUtilities,
    URLHandler,
    SystemsSafetyViewCommonUtilities,
    SystemsSafetyViewPartnerUtilities,
    SystemsSafetyViewStructureTreePatternUtilities,
    ParameterizationSystemsSafetyConstants,
    SystemsSafetyModalPartner,
    SystemsSafetyModalStructureTreePattern,
    Button,
    Alert,
    ParametersLayoutView,

    ParamSkeletonNLS,
    SystemsSafetyNLS
) {

    'use strict';

    var extendedView;

    var plmTypesCache;

    var isA = function(dictionary, typeName, rootTypeName) {
        var currentTypeName = typeName;
        if (!rootTypeName) {
            return false;
        } else if (typeName === rootTypeName) {
            return true;
        }
        do {
            var parentType = dictionary.Types[currentTypeName] || dictionary.Relationships[currentTypeName];
            currentTypeName = null;
            if (parentType) {
                if (parentType.Parent === rootTypeName) {
                    return true;
                }
                currentTypeName = parentType.Parent;
            }
        } while (currentTypeName);
        return false;
    };

    var isOneOf = function(dictionary, typeName, rootTypeNames) {
        if (Array.isArray(rootTypeNames)) {
            for (var iTypeName = 0; iTypeName < rootTypeNames.length; ++iTypeName) {
                if (isA(dictionary, typeName, rootTypeNames[iTypeName])) {
                    return true;
                }
            }
        }
        return false;
    };

    extendedView = View.extend({
        tagName: 'div',
        className: 'generic-detail',

        init: function(options) {
            var initDate = new Date();

            options = UWA.clone(options || {}, false);
            this._parent(options);

            this.options = options;
            this.contentDiv = null;
            this.paramScroller = null;
            this.userMessaging = null;
            this.lastAlertDate = initDate.getTime();
        },

        setup: function(options) {
            UWA.log('LayoutView::setup');
            UWA.log(options);
            this.fetchPLMTypes([
                // Architecture references
                'RFLPLMFunctionalReference', 'RFLVPMLogicalReference', 'VPMReference', 'RFLPLMFlowReference', 'RFLVPMSystemTypeReference',
                // Architecture instances
                'RFLPLMFunctionalInstance', 'RFLVPMLogicalInstance', 'VPMInstance', 'RFLPLMFlowExpositionInstance', 'RFLVPMSystemTypeExpositionInstance',
                // Safety types
                'FailureModesEffectsAnalysis', 'FallibleReference', 'FailureMode'
            ]);
        },

        render: function() {
            UWA.log('LayoutView::render');
            var introDiv;

            this.contentDiv = UWA.createElement('div', {
                'id': 'systemsSafetyMainDiv'
            });
            Mask.mask(this.contentDiv);

            introDiv = UWA.createElement('div', {
                'class': 'information-arch'
            }).inject(this.contentDiv);

            UWA.createElement('p', {
                text: SystemsSafetyNLS.intro,
                'class': 'font-3dslight'
            }).inject(introDiv);

            this.parentView = new ParametersLayoutView(this.options);

            this.container.setContent(this.contentDiv);
            var syncPromise = new Promise(function(resolve, reject) {
                this.listenTo(this.collection, {
                    onSync: resolve,
                    onError: reject
                });
            }.bind(this));
            Promise.all([this._fetchPLMTypesPromise, syncPromise]).then(function() {
                this.onCompleteRequestMapping();
            }.bind(this)).catch(function() {
                // SQA role not available
                Mask.unmask(this.contentDiv);
                ParametersLayoutViewUtilities.createParamMask(this.contentDiv, ParamSkeletonNLS.NoParamAvailabletxt);
            }.bind(this));

            return this;
        },

        _createFamilyStructureTreePatterns: function(accordion, structureTreePatterns) {
            var partNumberingParentDiv = UWA.createElement('div', {
                'class': 'architectureNumberingContent'
            });
            partNumberingParentDiv.style.height = '300px';

            var partNumberingDiv = UWA.createElement('div', {
                'class': 'architectureNumbering'
            });

            var partNumberTable = SystemsSafetyViewStructureTreePatternUtilities.buildTable();
            partNumberTable.inject(partNumberingDiv);

            new Button({
                className: 'AddPartNumberFieldButton',
                icon: 'plus-circled',
                attributes: {
                    disabled: false,
                    'aria-hidden': 'true',
                    title: SystemsSafetyNLS.addPatternTooltip
                },
                events: {
                    onClick: function() {
                        this.createStructureTreePatternDialogBox();
                    }.bind(this)
                }
            }).inject(partNumberingDiv);

            partNumberingParentDiv.appendChild(partNumberingDiv);

            accordion.addItem({
                title: SystemsSafetyNLS.patternsAccordionTitle,
                content: partNumberingParentDiv,
                selected: true,
                name: SystemsSafetyNLS.patternsAccordionName
            });

            // eslint-disable-next-line max-len
            var controlDiv = ParametersLayoutViewUtilities.createApplyResetToolbar.call(this, this.contentDiv, true, this.applyStructureTreePatternParams.bind(this), this.resetStructureTreePatternParams.bind(this));
            partNumberingDiv.appendChild(controlDiv);

            for (var i = 0; i < structureTreePatterns.length; i++) {
                var field = structureTreePatterns[i];
                var deployedStatus = field.deployed ? ParameterizationSystemsSafetyConstants.DEPLOYED : ParameterizationSystemsSafetyConstants.NEW_NOT_DEPLOYED;
                var nlsType = field.type;
                for (var iType = 0; iType < this._plmTypes.length; ++iType) {
                    if (this._plmTypes[iType].Name === field.type) {
                        nlsType = this._plmTypes[iType].nLSValue;
                    }
                }
                var fieldInfo = SystemsSafetyViewStructureTreePatternUtilities.buildNewField({
                        action: ParameterizationSystemsSafetyConstants.ADD,
                        typeLabel: field.type !== nlsType ? nlsType + ' (' + field.type + ')' : field.type,
                        type: field.type,
                        pattern: field.pattern
                    },
                    deployedStatus);
                fieldInfo.inject(partNumberTable.getElement(".structureTreePatternFieldbody"));
            }

            this.paramScroller = new Scroller({
                element: partNumberingDiv
            }).inject(partNumberingParentDiv);
        },

        _createFamilyPartners: function(accordion, partners) {
            var partNumberingParentDiv = UWA.createElement('div', {
                'class': 'architectureNumberingContent'
            });
            partNumberingParentDiv.style.height = '300px';

            var partNumberingDiv = UWA.createElement('div', {
                'class': 'architectureNumbering'
            });

            var partNumberTable = SystemsSafetyViewPartnerUtilities.buildTable();
            partNumberTable.inject(partNumberingDiv);

            new Button({
                className: 'AddPartNumberFieldButton',
                icon: 'plus-circled',
                attributes: {
                    disabled: false,
                    'aria-hidden': 'true',
                    title: SystemsSafetyNLS.addPartnerTooltip
                },
                events: {
                    onClick: function() {
                        this.createPartnerDialogBox();
                    }.bind(this)
                }
            }).inject(partNumberingDiv);

            partNumberingParentDiv.appendChild(partNumberingDiv);

            accordion.addItem({
                title: SystemsSafetyNLS.partnersAccordionTitle,
                content: partNumberingParentDiv,
                selected: false,
                name: SystemsSafetyNLS.partnersAccordionName
            });

            // eslint-disable-next-line max-len
            var controlDiv = ParametersLayoutViewUtilities.createApplyResetToolbar.call(this, this.contentDiv, true, this.applyPartnerParams.bind(this), this.resetPartnerParams.bind(this));
            partNumberingDiv.appendChild(controlDiv);

            for (var i = 0; i < partners.length; i++) {
                var field = partners[i];
                var deployedStatus = field.deployed ? ParameterizationSystemsSafetyConstants.DEPLOYED : ParameterizationSystemsSafetyConstants.NEW_NOT_DEPLOYED;
                var fieldInfo = SystemsSafetyViewPartnerUtilities.buildNewField({
                        action: ParameterizationSystemsSafetyConstants.ADD,
                        name: field.name,
                        url: field.url
                    },
                    deployedStatus);
                fieldInfo.inject(partNumberTable.getElement(".partnerFieldbody"));
            }

            this.paramScroller = new Scroller({
                element: partNumberingDiv
            }).inject(partNumberingParentDiv);
        },

        onCompleteRequestMapping: function() {
            UWA.log('LayoutView::Complete rendering!');

            var collection = this.collection._models[0]._attributes;

            var structureTreePatterns = [];
            var partners = [];
            for (var iParameter = 0; iParameter < collection.parameters.length; ++iParameter) {
                var parameter = collection.parameters[iParameter];
                if (parameter.parameterType === 'structureTreePattern') {
                    structureTreePatterns.push(parameter);
                } else if (parameter.parameterType === 'partnerUrl') {
                    partners.push(parameter);
                }
            }

            var pageContainer = UWA.createElement('div', {
                'class': 'architectureNumberingDivScroll'
            }).inject(this.contentDiv);

            var accordion = ParametersLayoutViewUtilities.createFamilyUIKITAccordion(pageContainer);
            this._createFamilyStructureTreePatterns(accordion, structureTreePatterns);
            this._createFamilyPartners(accordion, partners);

            Mask.unmask(this.contentDiv);
        },

        fetchPLMTypes: function(rootTypes) {
            if (plmTypesCache) {
                this._plmTypes = plmTypesCache;
                this._fetchPLMTypesPromise = Promise.resolve(this._plmTypes);
            } else {
                this._plmTypes = [];
                this._fetchPLMTypesPromise = new Promise(function(resolveFetch, rejectFetch) {
                    var dictionaryPromise = new Promise(function(resolve, reject) {
                        WAFData.authenticatedRequest(URLHandler.getURL() + '/resources/dictionary/Dictionary', {
                            timeout: 250000,
                            method: 'GET',
                            type: 'json',
                            headers: {
                                'Accept': 'application/json'
                            },
                            onFailure: function(e) {
                                UWA.log(e);
                                reject(e);
                            },
                            onComplete: function(json) {
                                resolve(json.Dictionary);
                            }
                        });
                    });
                    var dictionaryNLSPromise = new Promise(function(resolve, reject) {
                        WAFData.authenticatedRequest(URLHandler.getURL() + '/resources/dictionary/DictionaryNLS', {
                            timeout: 250000,
                            method: 'GET',
                            type: 'json',
                            headers: {
                                'Accept': 'application/json'
                            },
                            onFailure: function(e) {
                                UWA.log(e);
                                reject(e);
                            },
                            onComplete: function(json) {
                                resolve(json.DictionaryNLS);
                            }
                        });
                    });
                    Promise.all([dictionaryPromise, dictionaryNLSPromise]).then(function(results) {
                        var dictionary = results[0];
                        var dictionaryNLS = results[1];
                        for (var typeName in dictionary.Types) {
                            if (isOneOf(dictionary, typeName, rootTypes)) {
                                this._plmTypes.push({
                                    Name: typeName,
                                    nLSValue: dictionaryNLS['Type.' + typeName] || typeName
                                });
                            }
                        }
                        for (var relationshipName in dictionary.Relationships) {
                            if (isOneOf(dictionary, relationshipName, rootTypes)) {
                                this._plmTypes.push({
                                    Name: relationshipName,
                                    nLSValue: dictionaryNLS['Relationship.' + relationshipName] || relationshipName
                                });
                            }
                        }
                        plmTypesCache = this._plmTypes;
                        resolveFetch(this._plmTypes);
                    }.bind(this)).catch(rejectFetch);
                }.bind(this));
            }
        },

        resetStructureTreePatternParams: function() {
            var fieldsToBeRemoved = [];
            var rowsOfMappedFields = this.contentDiv.getElementsByClassName("structureTreePatternFieldMapping");
            for (var i = 0; i < rowsOfMappedFields.length; i++) {
                if (rowsOfMappedFields[i].value === ParameterizationSystemsSafetyConstants.NEW_NOT_DEPLOYED) {
                    fieldsToBeRemoved.push(SystemsSafetyViewStructureTreePatternUtilities.resetForFieldLineChanges(rowsOfMappedFields[i]));
                }
            }
            fieldsToBeRemoved.forEach(function(attrMapping) {
                if (attrMapping) {
                    attrMapping.remove();
                }
            });
        },

        resetPartnerParams: function() {
            var fieldsToBeRemoved = [];
            var rowsOfMappedFields = this.contentDiv.getElementsByClassName("partnerFieldMapping");
            for (var i = 0; i < rowsOfMappedFields.length; i++) {
                if (rowsOfMappedFields[i].value === ParameterizationSystemsSafetyConstants.NEW_NOT_DEPLOYED) {
                    fieldsToBeRemoved.push(SystemsSafetyViewPartnerUtilities.resetForFieldLineChanges(rowsOfMappedFields[i]));
                }
            }
            fieldsToBeRemoved.forEach(function(attrMapping) {
                if (attrMapping) {
                    attrMapping.remove();
                }
            });
        },

        applyStructureTreePatternParams: function() {
            var that = this;
            var rowsOfMappedFields = this.contentDiv.getElementsByClassName('structureTreePatternFieldMapping');
            var payloadToSend = {};
            Mask.mask(this.contentDiv);
            payloadToSend.parameters = [];
            for (var i = 0; i < rowsOfMappedFields.length; i++) {
                var value = SystemsSafetyViewStructureTreePatternUtilities.buildsFieldJsonObject(rowsOfMappedFields[i]);
                payloadToSend.parameters.push(value);
            }

            var url = URLHandler.getURL() + '/resources/sfy/parameters/?tenant=' + URLHandler.getTenant() + '&parameterType=structureTreePattern';
            WAFData.authenticatedRequest(url, {
                timeout: 250000,
                method: 'POST',
                data: JSON.stringify(payloadToSend),
                type: 'json',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                onFailure: function() {
                    Mask.unmask(that.contentDiv);
                    that.onApplyFailure(SystemsSafetyNLS.applyError);
                },
                onComplete: function(json) {
                    if (json.parameters) {
                        that.onApplyStructureTreePatternSuccess();
                        Mask.unmask(that.contentDiv);
                        that.getAlertMessage(SystemsSafetyNLS.applySuccess, 'success', that.contentDiv);
                    } else {
                        Mask.unmask(that.contentDiv);
                        that.onApplyFailure(json.message);
                    }
                }
            });
        },

        applyPartnerParams: function() {
            var that = this;
            var rowsOfMappedFields = this.contentDiv.getElementsByClassName('partnerFieldMapping');
            var payloadToSend = {};
            Mask.mask(this.contentDiv);
            payloadToSend.parameters = [];
            for (var i = 0; i < rowsOfMappedFields.length; i++) {
                var value = SystemsSafetyViewPartnerUtilities.buildsFieldJsonObject(rowsOfMappedFields[i]);
                payloadToSend.parameters.push(value);
            }

            var url = URLHandler.getURL() + '/resources/sfy/parameters/?tenant=' + URLHandler.getTenant() + '&parameterType=partnerUrl';
            WAFData.authenticatedRequest(url, {
                timeout: 250000,
                method: 'POST',
                data: JSON.stringify(payloadToSend),
                type: 'json',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                onFailure: function() {
                    Mask.unmask(that.contentDiv);
                    that.onApplyFailure(SystemsSafetyNLS.applyError);
                },
                onComplete: function(json) {
                    if (json.parameters) {
                        that.onApplyPartnerSuccess();
                        Mask.unmask(that.contentDiv);
                        that.getAlertMessage(SystemsSafetyNLS.applySuccess, 'success', that.contentDiv);
                    } else {
                        Mask.unmask(that.contentDiv);
                        that.onApplyFailure(json.message);
                    }
                }
            });
        },

        onApplyFailure: function(message) {
            this.getAlertMessage(message, 'error', this.contentDiv);
        },

        onApplyStructureTreePatternSuccess: function() {
            var fieldsToBeRemoved = [];

            var rowsOfMappedFields = this.contentDiv.getElementsByClassName('structureTreePatternFieldMapping');
            for (var i = 0; i < rowsOfMappedFields.length; i++) {
                if (rowsOfMappedFields[i].value === ParameterizationSystemsSafetyConstants.NEW_NOT_DEPLOYED) {
                    var statusCell = rowsOfMappedFields[i].cells[rowsOfMappedFields[i].cells.length - 1];
                    if (statusCell.value === ParameterizationSystemsSafetyConstants.ADD || statusCell.value === ParameterizationSystemsSafetyConstants.MODIFY) {
                        statusCell.empty();
                        rowsOfMappedFields[i].value = ParameterizationSystemsSafetyConstants.DEPLOYED;
                        var imgSpan = SystemsSafetyViewCommonUtilities.buildImgSpan('check', '1.5', 'green', SystemsSafetyNLS.deployed);
                        imgSpan.inject(statusCell);
                    }
                    if (statusCell.value === ParameterizationSystemsSafetyConstants.REMOVE) {
                        fieldsToBeRemoved.push(rowsOfMappedFields[i]);
                    }
                }
            }

            fieldsToBeRemoved.forEach(function(attrMapping) {
                attrMapping.remove();
            });

            var formulaField = document.querySelector('#structureTreePatternsStatusRow');
            formulaField.cells[formulaField.cells.length - 1].empty();
            SystemsSafetyViewCommonUtilities.buildImgSpan('check', '1.5', 'green', SystemsSafetyNLS.deployed).inject(formulaField.cells[formulaField.cells.length - 1]);
        },

        onApplyPartnerSuccess: function() {
            var fieldsToBeRemoved = [];

            var rowsOfMappedFields = this.contentDiv.getElementsByClassName('partnerFieldMapping');
            for (var i = 0; i < rowsOfMappedFields.length; i++) {
                if (rowsOfMappedFields[i].value === ParameterizationSystemsSafetyConstants.NEW_NOT_DEPLOYED) {
                    var statusCell = rowsOfMappedFields[i].cells[rowsOfMappedFields[i].cells.length - 1];
                    if (statusCell.value === ParameterizationSystemsSafetyConstants.ADD || statusCell.value === ParameterizationSystemsSafetyConstants.MODIFY) {
                        statusCell.empty();
                        rowsOfMappedFields[i].value = ParameterizationSystemsSafetyConstants.DEPLOYED;
                        var imgSpan = SystemsSafetyViewCommonUtilities.buildImgSpan('check', '1.5', 'green', SystemsSafetyNLS.deployed);
                        imgSpan.inject(statusCell);
                    }
                    if (statusCell.value === ParameterizationSystemsSafetyConstants.REMOVE) {
                        fieldsToBeRemoved.push(rowsOfMappedFields[i]);
                    }
                }
            }

            fieldsToBeRemoved.forEach(function(attrMapping) {
                attrMapping.remove();
            });

            var formulaField = document.querySelector('#partnersStatusRow');
            formulaField.cells[formulaField.cells.length - 1].empty();
            SystemsSafetyViewCommonUtilities.buildImgSpan('check', '1.5', 'green', SystemsSafetyNLS.deployed).inject(formulaField.cells[formulaField.cells.length - 1]);
        },

        createStructureTreePatternDialogBox: function() {
            var that = this;
            var options = {
                className: 'part-number-modal',
                title: SystemsSafetyNLS.addPattern
            };

            var alreadyDefinedTypes = [];
            var rowsOfMappedFields = this.contentDiv.getElementsByClassName('structureTreePatternFieldMapping');
            for (var i = 0; i < rowsOfMappedFields.length; i++) {
                alreadyDefinedTypes.push(SystemsSafetyViewStructureTreePatternUtilities.buildsFieldJsonObject(rowsOfMappedFields[i]).type);
            }

            this.modal = new SystemsSafetyModalStructureTreePattern(options);
            this.modal.modal.setFooter("<button type='button' name='addButton' id='add-button' class='btn btn-primary'>" + SystemsSafetyNLS.add + "</button> " + "</button>" + "<button type='button' name='cancelButton' id='cancel-button' class='btn btn-default'>" + SystemsSafetyNLS.cancel + "</button>");
            this.modal.getModalBody(this._plmTypes, alreadyDefinedTypes);
            this.modal._bindFooterEvent();
            this.modal.getContent().getElements('.btn').forEach(function(element) {
                if (element.name === 'cancelButton') {
                    element.addEvent('click', function() {
                        that.modal.destroy();
                    });
                } else if (element.name === 'addButton') {
                    element.addEvent('click', function() {
                        var toDisplayOver = that.modal.getContent().getElement('.enox-arch-number-content');
                        var userSelectedFormat = that.modal.getUserEnteredValues();

                        if (userSelectedFormat.type === '') {
                            that.modal.displayAlertMessage(SystemsSafetyNLS.typeNullMessage, toDisplayOver);
                        } else if (userSelectedFormat.pattern === '') {
                            that.modal.displayAlertMessage(SystemsSafetyNLS.patternNullMessage, toDisplayOver);
                        } else {
                            userSelectedFormat.action = ParameterizationSystemsSafetyConstants.ADD;
                            var fieldInfo = SystemsSafetyViewStructureTreePatternUtilities.buildNewField(userSelectedFormat, ParameterizationSystemsSafetyConstants.NEW_NOT_DEPLOYED);
                            fieldInfo.inject(that.getElement(".structureTreePatternFieldbody"));
                            that.modal.destroy();
                        }
                    });
                }
            });

            this.modal.show();
        },

        createPartnerDialogBox: function() {
            var that = this;
            var options = {
                className: 'part-number-modal',
                title: SystemsSafetyNLS.addPartner
            };

            this.modal = new SystemsSafetyModalPartner(options);
            this.modal.modal.setFooter("<button type='button' name='addButton' id='add-button' class='btn btn-primary'>" + SystemsSafetyNLS.add + "</button> " + "</button>" + "<button type='button' name='cancelButton' id='cancel-button' class='btn btn-default'>" + SystemsSafetyNLS.cancel + "</button>");
            this.modal.getModalBody();
            this.modal._bindFooterEvent();
            this.modal.getContent().getElements('.btn').forEach(function(element) {
                if (element.name === 'cancelButton') {
                    element.addEvent('click', function() {
                        that.modal.destroy();
                    });
                } else if (element.name === 'addButton') {
                    element.addEvent('click', function() {
                        var toDisplayOver = that.modal.getContent().getElement('.enox-arch-number-content');
                        var userSelectedFormat = that.modal.getUserEnteredValues();

                        if (userSelectedFormat.name === '') {
                            that.modal.displayAlertMessage(SystemsSafetyNLS.nameNullMessage, toDisplayOver);
                        } else if (userSelectedFormat.url === '') {
                            that.modal.displayAlertMessage(SystemsSafetyNLS.urlNullMessage, toDisplayOver);
                        } else {
                            userSelectedFormat.action = ParameterizationSystemsSafetyConstants.ADD;
                            var fieldInfo = SystemsSafetyViewPartnerUtilities.buildNewField(userSelectedFormat, ParameterizationSystemsSafetyConstants.NEW_NOT_DEPLOYED);
                            fieldInfo.inject(that.getElement(".partnerFieldbody"));
                            that.modal.destroy();
                        }
                    });
                }
            });

            this.modal.show();
        },

        getAlertMessage: function(message, className, toDisplayOn) {
            var alert = new Alert({
                visible: true,
                className: 'param-alert',
                messageClassName: className,
                closable: true,
                renderTo: toDisplayOn,
                autoHide: true,
                hideDelay: 2000
            });
            alert.add({
                message: message
            });

        },

        destroy: function() {
            this.stopListening();
            this._parent.apply(this, arguments);
        },

        _updateParentViewWithNewDomain: function(view, domainId) {
            view.options.domainid = domainId;
            view.model.id = domainId;
            view.model._attributes.domainid = domainId;
            view.model._attributes.id = domainId;
            return view;
        }
    });

    return extendedView;
});

define('DS/ParameterizationSkeleton/Views/ParameterizationFSX/FasteningLayoutView', [
	'UWA/Core',
	'UWA/Class/View',
	'DS/UIKIT/Mask',
	'DS/UIKIT/Scroller',
	'DS/UIKIT/Popover',
	'DS/UIKIT/Input/Select',
	'DS/UIKIT/Autocomplete',
	'DS/ParameterizationSkeleton/Views/ParametersLayoutViewUtilities',
	'DS/ParameterizationSkeleton/Views/ParametersLayoutView',
	'DS/ParameterizationSkeleton/Utils/ParameterizationFSX/ParameterizationFSXWebServices',
	'i18n!DS/ParameterizationSkeleton/assets/nls/ParamSkeletonNLS',
	'i18n!DS/ParameterizationSkeleton/assets/nls/FasteningNLS'
],
	function (UWA,
		View,
		Mask,
		Scroller,
		Popover,
		Select,
		Autocomplete,
		ParametersLayoutViewUtilities,
		ParametersLayoutView,
		ParameterizationFSXWebServices,
		ParamSkeletonNLS,
		FasteningNLS) {

		'use strict';

		const extendedView = View.extend({
			tagName: 'div',
			className: 'generic-detail',

			init: function (options) {
				options = UWA.clone(options || {}, false);
				this._parent(options);
				this.columnWidthArray = [60, 5, 25, 10];//[65, 20, 5, 10];
				this.options = options;
				this.contentDiv = null;
				this.paramScroller = null;
				this.controlDiv = null;
				this.inputControls = [];
				this.imgCells = [];
				this.userMessaging = ParametersLayoutViewUtilities.createWdgAlert();;
				this.lastAlertDate = new Date().getTime();
			},


			setup: function (options) {
				UWA.log('FasteningLayoutView ::setup!');
				UWA.log(options);
				this.initAutoComplete();
			},
						

			initAutoComplete: function () {
				var that = this;
				this.dataSetConfig = {
					//onError: function (data) 					
					dataParser: function (dataset, resultFromFedSearch) {
						//Format auto-complete items from fedsearch users
						let autoCompleteItems = resultFromFedSearch.results.map(res => {
							let itemLabel = res.attributes.find(item => item.name === 'ds6w:label');
							let itemName = res.attributes.find(item => item.name === 'name');
							return (itemLabel && itemName) ? { label: itemLabel.value, value: itemName.value } : { label: 'not found', value: 'not found' };
						})
						return autoCompleteItems;
					},
					remoteSearchEngine: function (dataset, text) {
						//call fedsearch to retrieve users corresponding to typed text
						//then format for auto-complete
						return new Promise(function (resolve, reject) {
							return ParameterizationFSXWebServices.searchUser({user: text, organization:() => that.fsxOrganization})
								.then(function (resultFromFedSearch) {
									let results = {
										matchingItems: [],
										dataset: dataset
									};
									results.matchingItems = dataset.dataParser(dataset, resultFromFedSearch);
									resolve(results);
								}).catch(function (err) {
									let results = {
										type: 'error',
										dataset: dataset,
										error: err
									};
									reject(results);
								});
						});
					}
				};
			},

			render: function () {
				UWA.log("FasteningLayoutView::render");

				this.contentDiv = UWA.createElement('div', {
					'id': 'mainParamDiv'
				});
				Mask.mask(this.contentDiv);

				let introDiv = ParametersLayoutViewUtilities.createInfoDiv(this.model.get("introduction"));
				introDiv.inject(this.contentDiv);

				this.parentView = new ParametersLayoutView(this.options);

				var activateApply = true;
				this.controlDiv = ParametersLayoutViewUtilities.createApplyResetToolbar.call(this, this.contentDiv, activateApply,
					this.applyParams.bind(this), this.resetParams.bind(this));

				this.container.setContent(this.contentDiv);

				this.listenTo(this.collection, {
					onSync: this.onCompleteRequestMapping
				});

				return this;
			},

			onCompleteRequestMapping: function () {
				UWA.log('FasteningLayoutView :: onCompleteRequestMapping!');

				let ownership = this.collection._models[0]._attributes;
				this.fsxProject = ownership.fsxProject;
				this.fsxOrganization = ownership.fsxOrganization;
				this.fsxPerson = ownership.fsxPerson;
				let family = {
					id: "fastenerparam",
					parameter: [
						{
							isDeployed: false,
							argument: [
								{
									id: "Argument",
									defaultValue: "",
									type: "string",
									input: "combobox",
									value: ownership.fsxProject //fsxProject, fsxOrganization, fsxPerson
								}
							],
							nlsKey: FasteningNLS.FasteningProjTitle,
							tooltipNlsKey: FasteningNLS.FasteningProjTooltip,
							id: "projects"
						},
						{
							isDeployed: false,
							argument: [
								{
									id: "Argument",
									defaultValue: "",
									type: "string",
									input: "combobox",
									value: ownership.fsxOrganization //fsxProject, fsxOrganization, fsxPerson
								}
							],
							nlsKey: FasteningNLS.FasteningOrgTitle,
							tooltipNlsKey: FasteningNLS.FasteningOrgTooltip,
							id: "organization"
						},
						{
							isDeployed: false,
							argument: [
								{
									id: "Argument",
									defaultValue: "",
									type: "string",
									input: "combobox",
									value: ownership.fsxPerson //fsxProject, fsxOrganization, fsxPerson
								}
							],
							nlsKey: FasteningNLS.FasteningPersonTitle,
							tooltipNlsKey: FasteningNLS.FasteningPersonTooltip,
							id: "person"
						}
					]
				};

				this.paramsDIV = ParametersLayoutViewUtilities.createParamsContainerDiv();
				this.paramsDIV.inject(this.contentDiv);

				let tableContent = this.buildTableContent(family);
				tableContent.inject(this.paramsDIV);

				this.paramScroller = new Scroller({
					element: this.paramsDIV
				}).inject(this.contentDiv);

				UWA.log('unmask');
				Mask.unmask(this.contentDiv);
			},

			buildTableContent: function (iFamily) {

				let familyTable = UWA.createElement('table', {
					'class': 'table table-hover',
					'table-layout': 'fixed',
					'id': iFamily.id + 'familytable'
				});

				let ftbody = UWA.createElement('tbody', {
					'class': 'fparamtbody',
					'id': iFamily.id + 'familytbody'
				}).inject(familyTable);

				this.buildParametersLayout(iFamily, ftbody);

				return familyTable;
			},

			buildParametersLayout: function (iElements, familytbody) {
				this.buildComboParam(iElements.parameter[0], familytbody);
				this.buildComboParam(iElements.parameter[1], familytbody);
				this.buildAutoComboParam(iElements.parameter[2], familytbody);
			},

			buildComboParam: function (param, familytbody) {
				var that = this;
				let popoverPosition = ParametersLayoutViewUtilities.computePopoverPos(0, "mid", 1);

				let newParamline = UWA.createElement('tr', { title: '' });
				let iArgument = param.argument[0];
				let imgCell = ParametersLayoutViewUtilities.buildDeployStsCell(param.isDeployed, this.columnWidthArray[3].toString() + '%', '2', 'right');//5%
				let paramTextCell = UWA.createElement('td', {
					'width': this.columnWidthArray[0].toString() + '%',
					'title': ''
				});
				paramTextCell.setStyle("vertical-align", "text-bottom");
				UWA.createElement('p', { text: param.nlsKey, 'class': '' }).inject(paramTextCell);
				let paramInfoCell = UWA.createElement('td', {
					'width': this.columnWidthArray[1].toString() + '%',
					'align': 'left'
				});
				paramInfoCell.setStyle("vertical-align", "text-bottom");
				let imgInfoSpan = UWA.createElement('span', {
					'class': 'fonticon fonticon-info'
				}).inject(paramInfoCell);
				imgInfoSpan.setStyle("color", "black");

				let popoverTooltip = new Popover({
					target: imgInfoSpan,
					trigger: "hover",
					animate: "true",
					position: popoverPosition,
					body: param.tooltipNlsKey,
					title: ''
				});

				popoverTooltip.elements.container.setStyle("max-width", "400px");
				let controlObjectCell = ParametersLayoutViewUtilities.buildControlCell(param.id, iArgument, this.columnWidthArray[2].toString() + '%');
				let iController = new Select({
					placeholder: false,
					multiple: false,
					attributes: {
						id: param.id,
						name: param.id,
						disabled: false
					}
				});
				iController.getContent().setStyle("width", "100%");
				iController.getContent().setStyle("text-align", "left");
				this.fillComboBox(iController, param.id, iArgument.value).then(function () {
					iController.addEvent("onChange", function () {
						ParametersLayoutViewUtilities.beingModified(imgCell, ParamSkeletonNLS.ParamBeingModified, '2');
						let valueArray = this.getValue();	
						let value = valueArray === undefined || !Array.isArray(valueArray)	? '' : valueArray[0];
						if (param.id === 'projects') {
							that.fsxProject = value;
						} else if (param.id === 'organization') {
							that.fsxOrganization = value;
						}
						//unselect and clean the cache
						that.inputControls[2].cleanDataset(that.inputControls[2].datasets[0].id);
						//that.updateParameterOnChange(currentValue, controlObjectCell, imgCell);
					});
				});

				iController.inject(controlObjectCell);
				this.inputControls.push(iController);
				this.imgCells.push(imgCell)
				paramTextCell.inject(newParamline);
				paramInfoCell.inject(newParamline);
				controlObjectCell.inject(newParamline);

				imgCell.inject(newParamline);
				newParamline.inject(familytbody);//familyparamtable
			},

			buildAutoComboParam: function (param, familytbody) {
				var that = this;
				let iArgument = param.argument[0];
				let popoverPosition = ParametersLayoutViewUtilities.computePopoverPos(0, "mid", 1);

				let newParamline = UWA.createElement('tr', { title: '' });
				let imgCell = ParametersLayoutViewUtilities.buildDeployStsCell(param.isDeployed, this.columnWidthArray[3].toString() + '%', '2', 'right');//5%
				let paramTextCell = UWA.createElement('td', {
					'width': this.columnWidthArray[0].toString() + '%',
					'title': ''
				});
				paramTextCell.setStyle("vertical-align", "text-bottom");
				UWA.createElement('p', { text: param.nlsKey, 'class': '' }).inject(paramTextCell);
				let paramInfoCell = UWA.createElement('td', {
					'width': this.columnWidthArray[1].toString() + '%',
					'align': 'left'
				});
				paramInfoCell.setStyle("vertical-align", "text-bottom");
				let imgInfoSpan = UWA.createElement('span', {
					'class': 'fonticon fonticon-info'
				}).inject(paramInfoCell);
				imgInfoSpan.setStyle("color", "black");

				let popoverTooltip = new Popover({
					target: imgInfoSpan,
					trigger: "hover",
					animate: "true",
					position: popoverPosition,
					body: param.tooltipNlsKey,
					title: ''
				});

				popoverTooltip.elements.container.setStyle("max-width", "400px");
				let controlObjectCell = ParametersLayoutViewUtilities.buildControlCell(param.id, iArgument, this.columnWidthArray[2].toString() + '%');
				let dynamicController = new Autocomplete({
					placeholder: FasteningNLS.FasteningPersonPlaceholder,
					showSuggestsOnFocus: false,
					minLengthBeforeSearch: 2,
					allowFreeInput: false,
					events: {
						onSelect: function (item) {
							if (that.fsxPerson !== item.value) {
								ParametersLayoutViewUtilities.beingModified(imgCell, ParamSkeletonNLS.ParamBeingModified, '2');								
								that.fsxPerson = item.value;
							}
						},
						onUnselect: function (item) {							
							ParametersLayoutViewUtilities.beingModified(imgCell, ParamSkeletonNLS.ParamBeingModified, '2');
							that.fsxPerson = item.value;
						}
					}
				});

				dynamicController.disable();
				ParameterizationFSXWebServices.searchUser({user: iArgument.value, organization: () => that.fsxOrganization})
					.then(function (resultFromFedSearch) {
						let userItem = resultFromFedSearch.results.map(res => {
							let itemLabel = res.attributes.find(item => item.name === 'ds6w:label');
							let itemName = res.attributes.find(item => item.name === 'name');
							return (itemLabel && itemName) ? { label: itemLabel.value, value: itemName.value, selected: true } : {};
						})
						dynamicController.addDataset({ items: userItem }, that.dataSetConfig);
						dynamicController.enable();
					}).catch(function (err) {
						console.log("user not found !");
						dynamicController.addDataset([], that.dataSetConfig);
						dynamicController.enable();
					});


				dynamicController.getContent().setStyle("width", "100%");
				dynamicController.getContent().setStyle("text-align", "left");

				dynamicController.inject(controlObjectCell);
				this.inputControls.push(dynamicController);
				this.imgCells.push(imgCell)
				paramTextCell.inject(newParamline);
				paramInfoCell.inject(newParamline);
				controlObjectCell.inject(newParamline);

				imgCell.inject(newParamline);
				newParamline.inject(familytbody);//familyparamtable
			},

			updateParameterOnChange: function (iValue, ctrlObjectCell, imageCell) {
				let imageTXT = ParamSkeletonNLS.Under_Deploy;
				let ParamID = ctrlObjectCell.getData('argumentNode').paramid;
				let argID = ctrlObjectCell.getData('argumentNode').argumentid;
				let jsonArr = [];
				let ArgArr = [];
				this.resetIsCalled = false;
				ParametersLayoutViewUtilities.beingDeployed(imageCell, imageTXT);

				ArgArr.push({ id: argID, value: iValue });
				let iParam = {
					domain: this.model.get("domainid"),
					id: ParamID,
					argument: ArgArr
				};
				jsonArr.push(iParam);
				return ParameterizationFSXWebServices.setStandardFsxOwnership(jsonArr).then(function (result) {
					return this.onApplySuccess(result, imageCell);
				}.bind(this))
					.catch(function (err) {
						return this.onApplyFailure(err, imageCell);
					}.bind(this));

			},

			onApplyFailure: function (json) {
				UWA.log(json);
				Mask.unmask(this.contentDiv);
				this.userMessaging.add({ className: "error", message: ParamSkeletonNLS.deployFailureMsg });
				this.userMessaging.inject(this.paramsDIV);
				ParametersLayoutViewUtilities.updateIcon(false, this.imgCells[0]);
				ParametersLayoutViewUtilities.updateIcon(false, this.imgCells[1]);
				ParametersLayoutViewUtilities.updateIcon(false, this.imgCells[2]);
			},

			onApplySuccess: function (json) {
				const successmsg = ParamSkeletonNLS.deploySuccessMsg;
				Mask.unmask(this.contentDiv);
				UWA.log(json);

				let currDate = new Date();
				let currTime = currDate.getTime();
				let diffDate = currTime - this.lastAlertDate;
				this.lastAlertDate = currTime;

				if (json.status === "success") {
					if (diffDate >= 2000) {
						this.userMessaging.add({ className: "success", message: successmsg });
						this.userMessaging.inject(this.paramsDIV);
					}
					ParametersLayoutViewUtilities.updateIcon(true, this.imgCells[0]);
					ParametersLayoutViewUtilities.updateIcon(true, this.imgCells[1]);
					ParametersLayoutViewUtilities.updateIcon(true, this.imgCells[2]);
				} else {
					this.onApplyFailure(json);
				}

			},

			fillComboBox: function (controller, key, selectedValue) {
				const getAllProjAndOrg = new Promise(function (resolve, reject) {
					if (this.projAndOrg == null || this.projAndOrg == undefined) {
						return ParameterizationFSXWebServices.getAllProjAndOrg().then(function (result) {
							this.projAndOrg = result;
							resolve(this.projAndOrg);
						}.bind(this));
					} else {
						resolve(this.projAndOrg);
					}
				}.bind(this));

				return getAllProjAndOrg.then(function (projAndOrg) {
					if (projAndOrg) {
						let optionsList = projAndOrg[key].map(function (item) {
							return {
								label: item,
								value: item,
								selected: (selectedValue === item)
							};
						});
						optionsList.unshift({
							label: "",
							value: "",
							selected: false
						})
						controller.add(optionsList);
						return controller;
					}
				}).catch(function (err) {
					console.warn(err.message);
				});

			},

			applyParams: function () {
				let inputProject = this.inputControls[0];
				let inputOrg = this.inputControls[1];
				let inputPerson = this.inputControls[2];
				let valueProject = inputProject.getValue();
				let valueOrg = inputOrg.getValue();
				let valuePerson = inputPerson.getValue();
				let ctrlObjectCell = inputProject.getContent().getParent();
				let ParamID = ctrlObjectCell.getData('argumentNode').paramid;
				let argID = ctrlObjectCell.getData('argumentNode').argumentid;
				let jsonArr = [];
				let ArgArr = [];
				this.resetIsCalled = false;
				ParametersLayoutViewUtilities.beingDeployed(this.imgCells[0], ParamSkeletonNLS.Under_Deploy);
				ParametersLayoutViewUtilities.beingDeployed(this.imgCells[1], ParamSkeletonNLS.Under_Deploy);
				ParametersLayoutViewUtilities.beingDeployed(this.imgCells[2], ParamSkeletonNLS.Under_Deploy);
				let strValue = valueProject + ',' + valueOrg + ',' + valuePerson;
				ArgArr.push({ id: argID, value: strValue });
				let iParam = {
					domain: this.model.get("domainid"),
					id: ParamID,
					argument: ArgArr
				};
				jsonArr.push(iParam);
				return ParameterizationFSXWebServices.setStandardFsxOwnership(jsonArr).then(function (result) {
					return this.onApplySuccess(result);
				}.bind(this))
					.catch(function (err) {
						return this.onApplyFailure(err);
					}.bind(this));

			},

			resetParams: function () {
				this.onResetSuccess();
				Mask.unmask(this.contentDiv);
			},

			onResetSuccess: function (json) {
			},

			destroy: function () {
				this.stopListening();
				this._parent.apply(this, arguments);
			}
		});

		return extendedView;
	});

define('DS/ParameterizationSkeleton/Views/ParameterizationFLWeb/ParamSAXOtbView', [
	'UWA/Core',
	'UWA/Class/View',
	'DS/UIKIT/Mask',
	'DS/UIKIT/Scroller',
	'DS/WAFData/WAFData',
	'DS/ParameterizationSkeleton/Views/ParametersLayoutViewUtilities',
	'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler',
	'DS/ParameterizationSkeleton/Views/ParameterizationFLWeb/CompanyIDViewUtilities',
	'DS/ParameterizationSkeleton/Views/ParameterizationFLWeb/ParameterizationFLWebConstants',
	'DS/UIKIT/Input/Button',
	'DS/UIKIT/Alert',
	'DS/ParameterizationSkeleton/Views/ParametersLayoutView',
	'i18n!DS/ParameterizationSkeleton/assets/nls/FLWebNLS',
	],
	function(UWA,
			View,
			Mask,
			Scroller,
			WAFData,
			ParametersLayoutViewUtilities,
			URLHandler,
			CompanyIDViewUtilities,
			ParameterizationFLWebConstants,
			Button,
			Alert,
			ParametersLayoutView,
			FLWebNLS) {

	'use strict';

	var extendedView;

	extendedView = View.extend({
		tagName: 'div',
		className: 'generic-detail',

		init: function(options) {
			var initDate = new Date();
			options = UWA.clone(options || {}, false);
			this._parent(options);
			this.options = options;
			this.contentDiv = null;
			this.lastAlertDate = initDate.getTime();
		},

		setup: function(options) {
			UWA.log('Architect Layout::setup!');
			UWA.log(options);
		},

		render: function() {
			UWA.log("Architect LayoutView::render");
			var introDiv,
			mappingDiv,
			that = this;

			this.contentDiv = UWA.createElement('div', {
				'id': 'typeMainDiv'
			});
			Mask.mask(this.contentDiv);
			this.parentView = new ParametersLayoutView(this.options);
			this.container.setContent(this.contentDiv);
			this.listenTo(this.collection, {
				onSync: that.onCompleteRequestMapping
			});
			return this;
		},

		onCompleteRequestMapping: function() {
      const otbView = this.parentView.buildFamilyItemContent(this.collection._models[0]._attributes.family[0], null);
      this.contentDiv.appendChild(otbView);
      Mask.unmask(this.contentDiv);
    //  this.parentView = this._updateParentViewWithNewDomain(this.parentView,"SystemsArchitectureDefinitionOtbParameter");
      this.parentView.render();
		}
	});

	return extendedView;
});

define('DS/ParameterizationSkeleton/Views/ParameterizationFLWeb/ParamSAXUncityView', [
	'UWA/Core',
	'UWA/Class/View',
	'DS/UIKIT/Mask',
	'DS/UIKIT/Scroller',
	'DS/WAFData/WAFData',
	'DS/ParameterizationSkeleton/Views/ParametersLayoutViewUtilities',
	'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler',
	'DS/ParameterizationSkeleton/Views/ParameterizationFLWeb/CompanyIDViewUtilities',
	'DS/ParameterizationSkeleton/Views/ParameterizationFLWeb/ParameterizationFLWebConstants',
	'DS/ParameterizationSkeleton/Views/ParameterizationFLWeb/FLWebModal',
	'DS/UIKIT/Input/Button',
	'DS/UIKIT/Alert',
	'DS/ParameterizationSkeleton/Views/ParametersLayoutView',
	'i18n!DS/ParameterizationSkeleton/assets/nls/FLWebNLS',
	],
	function(UWA,
			View,
			Mask,
			Scroller,
			WAFData,
			ParametersLayoutViewUtilities,
			URLHandler,
			CompanyIDViewUtilities,
			ParameterizationFLWebConstants,
			FLWebModal,
			Button,
			Alert,
			ParametersLayoutView,
			FLWebNLS) {

	'use strict';

	var extendedView;

	extendedView = View.extend({
		tagName: 'div',
		className: 'generic-detail',

		init: function(options) {
			var initDate = new Date();
			options = UWA.clone(options || {}, false);
			this._parent(options);
			this.options = options;
			this.contentDiv = null;
			this.paramScroller = null;
			this.paramAltSubScroller = null; //paramUnicitySubScroller
			this.userMessaging = null;
			this.lastAlertDate = initDate.getTime();
			this.controlDiv = null;
      this.cellsIndexForArchNumCollab = {
          "name": 0,
          "value": 1,
          "action": 2,
          "deployFlag": 3
      };
		},

		setup: function(options) {
			UWA.log('Architect Layout::setup!');
			UWA.log(options);
		},

		render: function() {
			UWA.log("Architect LayoutView::render");
			var introDiv,
			mappingDiv,
			that = this;

			this.contentDiv = UWA.createElement('div', {
				'id': 'typeMainDiv'
			});
			Mask.mask(this.contentDiv);

			// introDiv = UWA.createElement('div', {
			// 	'class': 'information-arch'
			// }).inject(this.contentDiv);
			//
			// UWA.createElement('p', {
			// 	text: FLWebNLS.intro,
			// 	'class': 'font-3dslight'
			// }).inject(introDiv);

			this.parentView = new ParametersLayoutView(this.options);

		//	this.controlDiv = ParametersLayoutViewUtilities.createApplyResetToolbar.call(this, this.contentDiv, true, this.applyParams.bind(this), this.resetParams.bind(this));

			this.container.setContent(this.contentDiv);
			this.listenTo(this.collection, {
				onSync: that.onCompleteRequestMapping
			});

			return this;
		},

		onCompleteRequestMapping: function(){
			this.divPartNumbering = UWA.createElement('div', {
					'class': 'architectureNumberingDivScroll',
			});
			this.buildArchNumColabUnicitySection(this.collection._models[0]._attributes);
			Mask.unmask(this.contentDiv);
		},

		buildArchNumColabUnicitySection: function(collection){
			var that = this;
			localStorage.setItem('csList', JSON.stringify(collection.csList));
			var archNumCollabUnicityContainer = UWA.createElement('div', {'class': 'archNumCollabUnicityContainer'});
			var archNumCollabTableContainer = UWA.createElement('div', {'class': 'arhNumCollabTableMainContainer'}); //css: architectureNumberingContent
			var archNumCollabTableSubContainer = UWA.createElement('div', {'class': 'arhNumCollabTableSubContainer'}); //css: architectureNumbering
			var archNumCollabTable = CompanyIDViewUtilities.buildArchNumCollabUnicitySecTable();
			archNumCollabTable.inject(archNumCollabTableSubContainer);
			archNumCollabTableContainer.appendChild(archNumCollabTableSubContainer);

			var AddMappingButton = new Button({
				className: 'AddPartNumberFieldButton',
				icon: 'plus-circled',
				attributes: {
					disabled: false,
					'aria-hidden': 'true',
					title: FLWebNLS.label_CSgroupingButtonTooltip,
				},
				events: {
					onClick: function(e) {
						that.createCollabUnicitySecAddFieldModal(archNumCollabTable.getElement("#archNumCollabUnicityTableBody"));
					}
				}
			}).inject(archNumCollabTableContainer);

			archNumCollabTableContainer.inject(archNumCollabUnicityContainer);
			// var footer = ParametersLayoutViewUtilities.createApplyResetToolbar.call(this, archNumCollabUnicityContainer, true,
			// 		this.applyArchNumCollabUnicity.bind(this),
			// 		this.resetArchNumCollabUnicity.bind(this));
			//var collabArchNumUnicityCheckDiv = UWA.createElement('div', {'class': 'architectureNumberingContent'});
			// this.collabArchNumUnicityCheckAccrdn = ParametersLayoutViewUtilities.createFamilyUIKITAccordion(this.divPartNumbering);
			// this.collabArchNumUnicityCheckAccrdn.addItem({
			// 	title: FLWebNLS.label_CSgroupingAccrdTitle,
			// 	content: archNumCollabUnicityContainer,
			// 	selected: false,
			// 	name: 'Architecture_Number_Collabspace_Unicity'
			// });
			archNumCollabUnicityContainer.inject(this.divPartNumbering);
			ParametersLayoutViewUtilities.createApplyResetToolbar.call(this, this.divPartNumbering, true,
					this.applyArchNumCollabUnicity.bind(this),
					this.resetArchNumCollabUnicity.bind(this));
			this.divPartNumbering.inject(this.contentDiv)
			var groups = collection && collection.csGroups ? collection.csGroups : '';
			for (var groupName in groups) {
				var csListString = '';
				for(var i = 0; i < groups[groupName].length-1; i++){
					csListString += groups[groupName][i] + ',';
				}
				csListString += groups[groupName][i]
				//csListString = csListString.substring(0, csListString.length-2);
				var fieldInfo = CompanyIDViewUtilities.buildNewArchNumCollabField({Name:groupName, Value:csListString}, ParameterizationFLWebConstants.DEPOLOYED);
				//CompanyIDViewUtilities.buildJsonObjForPNField(ParameterizationFLWebConstants.ADD, field.Order, field.Type, field.Value),deployedStatus);
				fieldInfo.inject(archNumCollabTable.getElement("#archNumCollabUnicityTableBody"));
			}
			// this.paramScroller = new Scroller({
			//     element: archNumCollabTableSubContainer
			// }).inject(archNumCollabTableContainer);
		},


		resetParams: function(){
			var fieldsToBeRemoved = new Array();
			var rowsOfMappedFields = this.contentDiv.getElementsByClassName("partNumberFieldMapping");
			for (var i = 0; i < rowsOfMappedFields.length; i++) {
				if (rowsOfMappedFields[i].value == ParameterizationFLWebConstants.NEW_NOT_DEPLOYED) {
					fieldsToBeRemoved.push(CompanyIDViewUtilities.resetForFieldLineChanges(rowsOfMappedFields[i]));
				}
			}
			fieldsToBeRemoved.forEach(function(attrMapping) {
				if (attrMapping) {
					attrMapping.remove();
				}
			});
			CompanyIDViewUtilities.updateFormulaTextFields(ParameterizationFLWebConstants.MAX_ROWS + 1, null, null, ParameterizationFLWebConstants.DEPOLOYED);
		},

		resetArchNumCollabUnicity: function(){
			var fieldsToBeRemoved = new Array();
			var rowsOfMappedFields = this.contentDiv.querySelectorAll('#archNumCollabTableRow');
			for (var i = 0; i < rowsOfMappedFields.length; i++) {
				if (rowsOfMappedFields[i].value == ParameterizationFLWebConstants.NEW_NOT_DEPLOYED) {
					fieldsToBeRemoved.push(CompanyIDViewUtilities.resetForFieldLineChangesArchNumGrouping(rowsOfMappedFields[i]));
				}
			}
			fieldsToBeRemoved.forEach(function(attrMapping) {
				if (attrMapping) {
					attrMapping.remove();
				}
			});
		},

		applyParams: function() {
			var that = this;
			var rowsOfMappedFields = this.contentDiv.getElementsByClassName("partNumberFieldMapping");
			var payloadToSend = {};
			Mask.mask(this.contentDiv);
			payloadToSend.ParameterExpressionList = [];
			for (var i = 0; i < rowsOfMappedFields.length; i++) {
				//if (rowsOfMappedFields[i].value == ParameterizationFLWebConstants.NEW_NOT_DEPLOYED) {
				var value = CompanyIDViewUtilities.buildsFieldJsonObject(rowsOfMappedFields[i]);
				value.Label = value.Name;
				payloadToSend.ParameterExpressionList.push(value);
				//}
		}
			// payloadToSend['UnicityCheck'] = localStorage.getItem('arch_number_unicity');
			var url = URLHandler.getURL() + "/resources/v1/SystemsArchitectureDefinitionParam/setParamArchitectureNumberExpressions?tenant=" + URLHandler.getTenant(),payloadToSend;
			WAFData.authenticatedRequest(url, {
				timeout: 250000,
				method: 'POST',
				data: JSON.stringify(payloadToSend),
				type: 'json',
				headers: {
					'Content-Type': 'application/json',
					'Accept': 'application/json'
				},
				onFailure: function(json) {
					Mask.unmask(that.contentDiv);
					that.onApplyFailure(FLWebNLS.ApplyError);
				},
				onComplete: function(json) {
					if (json.ParameterExpressionList/*.length > 0*/) {
						that.onApplySuccess();
						Mask.unmask(that.contentDiv);
						that.getAlertMessage(FLWebNLS.ApplySuccess, 'success', that.contentDiv);

					} else {
						Mask.unmask(that.contentDiv);
						that.onApplyFailure(json.message);
					}
				}

			});
		},

		applyArchNumCollabUnicity: function() {
			var that = this;
			var rowsOfMappedFields = this.contentDiv.querySelectorAll('#archNumCollabTableRow');
			var payloadToSend = {};
			payloadToSend['CollaborativeSpacesGroupList'] = [];
			var tableFieldObj;
			Mask.mask(this.contentDiv);
			for (var i = 0; i < rowsOfMappedFields.length; i++) {
				if (rowsOfMappedFields[i].cells[this.cellsIndexForArchNumCollab.deployFlag].value != ParameterizationFLWebConstants.REMOVE){//ParameterizationFLWebConstants.NEW_NOT_DEPLOYED) {
  				tableFieldObj = CompanyIDViewUtilities.buildsFieldJsonObjectForArchNUmCollab(rowsOfMappedFields[i]);
  				payloadToSend.CollaborativeSpacesGroupList.push({
  					name: tableFieldObj.Name,
  					csList: tableFieldObj.Value.trim().split(',')
  				})
				}
			}

			var url = URLHandler.getURL() + "/resources/v1/SystemsArchitectureDefinitionParam/setCollaborativeSpaceGrouping?tenant=" + URLHandler.getTenant();
			WAFData.authenticatedRequest(url, {
				timeout: 250000,
				method: 'POST',
				data: JSON.stringify(payloadToSend),
				type: 'json',

				headers: {
					'Content-Type': 'application/json',
					'Accept': 'application/json'
				},

				onFailure: function(json) {
					Mask.unmask(that.contentDiv);
					that.onApplyFailure(FLWebNLS.ApplyError);
				},

				onComplete: function(json) {
					//  if (json.ParameterExpressionList/*.length > 0*/) {
					that.archNumCollabGroupingApplySuccess();
					Mask.unmask(that.contentDiv);
					that.getAlertMessage(FLWebNLS.msg_CSgroupingFieldsUpdated, 'success', that.contentDiv);

					//  }
					// else {
					//     Mask.unmask(that.contentDiv);
					//     that.onApplyFailure(json.message);
					// }
				}

			});
		},

		onApplyFailure: function(message) {
			this.getAlertMessage(message, 'error', this.contentDiv);
		},

		onApplySuccess: function() {
			var fieldsToBeRemoved = new Array();
			var rowsOfMappedFields = this.contentDiv.getElementsByClassName("partNumberFieldMapping");
			for (var i = 0; i < rowsOfMappedFields.length; i++) {
				if (rowsOfMappedFields[i].value == ParameterizationFLWebConstants.NEW_NOT_DEPLOYED) {
					var statusCell = rowsOfMappedFields[i].cells[5];
					if (statusCell.value == ParameterizationFLWebConstants.ADD || statusCell.value == ParameterizationFLWebConstants.MODIFY) {
						rowsOfMappedFields[i].cells[5].empty();
						rowsOfMappedFields[i].value = ParameterizationFLWebConstants.DEPOLOYED;
						var imgSpan = CompanyIDViewUtilities.buildImgSpan('check', '1.5', 'green', FLWebNLS.Deployed);
						imgSpan.inject(rowsOfMappedFields[i].cells[5]);
					}
					if (rowsOfMappedFields[i].cells[5].value == ParameterizationFLWebConstants.REMOVE) {
						fieldsToBeRemoved.push(rowsOfMappedFields[i]);
					}
				}
			}
			fieldsToBeRemoved.forEach(function(attrMapping) {
				attrMapping.remove();
			});
			var formulaField = document.querySelector(".partNumberFormulaMapping");
			formulaField.cells[3].empty();
			var imgSpan = ParametersLayoutViewUtilities.buildImgSpan('check', '1.5', 'green', FLWebNLS.Deployed);
			imgSpan.inject(formulaField.cells[3]);
		},

		archNumCollabGroupingApplySuccess: function() {
			//CompanyIDViewUtilities.updateStrategy(strategyValue, ParameterizationFLWebConstants.DEPOLOYED);
			var fieldsToBeRemoved = new Array();
			var rowsOfMappedFields = this.contentDiv.querySelectorAll('#archNumCollabTableRow')
			for (var i = 0; i < rowsOfMappedFields.length; i++) {
				if (rowsOfMappedFields[i].value == ParameterizationFLWebConstants.NEW_NOT_DEPLOYED) {
					var statusCell = rowsOfMappedFields[i].cells[3];
					if (statusCell.value == ParameterizationFLWebConstants.ADD || statusCell.value == ParameterizationFLWebConstants.MODIFY) {
						rowsOfMappedFields[i].cells[3].empty();
						rowsOfMappedFields[i].value = ParameterizationFLWebConstants.DEPOLOYED;
						var imgSpan = CompanyIDViewUtilities.buildImgSpan('check', '1.5', 'green', FLWebNLS.Deployed);
						imgSpan.inject(rowsOfMappedFields[i].cells[3]);
					}
					if (rowsOfMappedFields[i].cells[3].value == ParameterizationFLWebConstants.REMOVE) {
						fieldsToBeRemoved.push(rowsOfMappedFields[i]);
					}
				}
			}
			fieldsToBeRemoved.forEach(function(attrMapping) {
				attrMapping.remove();
			});
		},

		ShowAddNewFieldPanel: function(attrtbody) {
			this.createPartNumberingDialogBox(attrtbody);
			var isDeployed = ParameterizationFLWebConstants.NEW_NOT_DEPLOYED;
		},

		createPartNumberingDialogBox: function(attrtbody) {
			var that = this;
			var attributes = (this.collection._models[0]._attributes && this.collection._models[0]._attributes.PhysicalProductAttributes);
			var options = {
					className: "part-number-modal",
					title: "Add Field"
			}
			this.modal = new FLWebModal(options);
			this.modal.getAttributes(attributes);
			if (this.modal.getTotalFormatRows() == ParameterizationFLWebConstants.MAX_ROWS) {
				var alert = that.modal.displayAlertMessage(FLWebNLS.maxLimitOfRows, document.querySelector('#typeMainDiv').getChildren()[0]);
			} else {
				function _getFooter() {
					return "<button type='button'  name='addButton' id='add-button' class='btn btn-primary'>" + FLWebNLS.add + "</button> " + "</button>" + "<button type='button' name='cancelButton' id='cancel-button' class='btn btn-default'>" + FLWebNLS.cancel + "</button>"
				}
				this.modal.modal.setFooter(_getFooter());
				this.modal.getModalBody();
				this.modal._bindFooterEvent();
				this.modal.getContent().getElements('.btn').forEach(function(element) {
					if (that.modal.isCounterExists(ParameterizationFLWebConstants.TYPE)) {
						that.modal.partNumberTypeCombobox.disable(ParameterizationFLWebConstants.FORMAT_COUNTER);
					}

					if (element.name === 'cancelButton') {
						element.addEvent('click', function() {
							that.modal.destroy();

						});
					} else if (element.name === 'addButton') {

						element.addEvent('click', function() {

							var toDisplayOver = that.modal.getContent().getElement('.enox-arch-number-content');

							if (that.modal.validateEnteredNameValueNotNull()) {
								that.modal.displayAlertMessage(FLWebNLS.nameNullMessage, toDisplayOver);
							} else if (that.modal.validateEnteredOrderValueNotNull()) {
								that.modal.displayAlertMessage(FLWebNLS.orderNullMessage, toDisplayOver);
							} else if (that.modal.validatSelectedTypeFieldValueNotNull()) {
								that.modal.displayAlertMessage(FLWebNLS.selectTypeMessage, toDisplayOver);
							} else if (that.modal.validateSelectedAttributeFieldValueNotNull()) {
								that.modal.displayAlertMessage(FLWebNLS.selectAttributeMessage, toDisplayOver);
							}else if (that.modal.validateEnteredCounterFieldValueNotNull()) {
								that.modal.displayAlertMessage(FLWebNLS.counterIsEmptyMessage, toDisplayOver);
							}else if (that.modal.validateEnteredValueFieldValueNotNull()) {
								that.modal.displayAlertMessage(FLWebNLS.valueEmptyMessage, toDisplayOver);
							} else {
								if (!that.modal.validateEnteredNameValue().isValid) {
									that.modal.displayAlertMessage(FLWebNLS.nameMessage +  ' ' + FLWebNLS.alreadyExists, toDisplayOver);
								} else if (!that.modal.validateEnteredOrderValue().isValid) {
									that.modal.displayAlertMessage(FLWebNLS.orderMessage +  ' ' + FLWebNLS.alreadyExists, toDisplayOver);
								} else {
									var userSelectedFormat = that.modal.getUserEnteredValues();

									userSelectedFormat[ParameterizationFLWebConstants.OPERATION] = ParameterizationFLWebConstants.ADD;
									var fieldInfo = CompanyIDViewUtilities.buildNewPartNumberField(userSelectedFormat, ParameterizationFLWebConstants.NEW_NOT_DEPLOYED);
									fieldInfo.inject(attrtbody.getElement(".partNumberFieldbody"));
									that.modal.destroy();
								}
							}
						});
					};
				});

				that.modal.show();
			}
		},

		createCollabUnicitySecAddFieldModal: function(tableBody) {
			var that = this;
			var options = {
					className: "part-number-modal",
					title: FLWebNLS.label_CSgroupingModalTitle
			}
			this.modal = new FLWebModal(options);
			if (this.modal.getTotalFormatRows() == ParameterizationFLWebConstants.MAX_ROWS) {
				var alert = that.modal.displayAlertMessage(FLWebNLS.maxLimitOfRows, document.querySelector('#typeMainDiv').getChildren()[0]);
			} else {
				function _getFooter() {
					return "<button type='button'  name='addButton' id='add-button' class='btn btn-primary'>" + FLWebNLS.add + "</button> " + "</button>" + "<button type='button' name='cancelButton' id='cancel-button' class='btn btn-default'>" + FLWebNLS.cancel + "</button>"
				}
				this.modal.modal.setFooter(_getFooter());
				this.modal.createCollabUnicitySecAddFieldModalBody();
				this.modal._bindFooterEvent();
				this.modal.getContent().getElements('.btn').forEach(function(element) {
					if (element.name === 'cancelButton') {
						element.addEvent('click', function() {
							that.modal.destroy();
						});
					} else if (element.name === 'addButton') {
						element.addEvent('click', function() {
							var toDisplayOver = that.modal.getContent().getElement('.enox-arch-number-content');
							if (that.modal.validateEnteredGroupNameValueNotNull()) {
								that.modal.displayAlertMessage(FLWebNLS.nameNullMessage, toDisplayOver);
							} else if (that.modal.validateEnteredCollabListValueNotNull()) {
								that.modal.displayAlertMessage(FLWebNLS.msg_CSFieldBlankAlert, toDisplayOver);
							}
							else {
								if (!that.modal.validateEnteredGroupNameValue().isValid) {
									that.modal.displayAlertMessage(FLWebNLS.nameMessage +  ' ' + FLWebNLS.alreadyExists, toDisplayOver);
								} else {
									var userSelectedFormat = that.modal.getUserEnteredValuesForArchNumCollabUnicity();
									userSelectedFormat[ParameterizationFLWebConstants.OPERATION] = ParameterizationFLWebConstants.ADD;
									var fieldInfo = CompanyIDViewUtilities.buildNewArchNumCollabField(userSelectedFormat, ParameterizationFLWebConstants.NEW_NOT_DEPLOYED);
									fieldInfo.inject(tableBody);
									that.modal.destroy();
								}
							}
						});
					};
				});

				that.modal.show();
			}
		},

		getAlertMessage: function (message, className, toDisplayOn) {

			this.alertOptions = {
					visible: true,
					className: 'param-alert',
					messageClassName: className,
					closable: true,
					renderTo: toDisplayOn,
					autoHide: true,
					hideDelay: 2000
			};

			var alert = new Alert(this.alertOptions);
			alert.add({
				message: message,
			});

		},

		destroy: function() {
			this.stopListening();
			this._parent.apply(this, arguments);
		},
		_updateParentViewWithNewDomain : function(view, domainId){
			view.options.domainid = domainId;
			view.model.id = domainId;
			view.model._attributes.domainid = domainId;
			view.model._attributes.id = domainId;
			return view;
		},
	});

	return extendedView;
});

define('DS/ParameterizationSkeleton/Views/VersionNaming1/VersionNamingLayoutView', [
	'UWA/Core',
	'UWA/Class/View',
	'DS/UIKIT/Mask',
	'DS/UIKIT/Scroller',
	'DS/WAFData/WAFData',
	'DS/ParameterizationSkeleton/Views/ParametersLayoutViewUtilities',
	'DS/ParameterizationSkeleton/Views/ParametersLayoutView',
    'i18n!DS/ParameterizationSkeleton/assets/nls/ParamSkeletonNLS',
	],
	function (UWA,
			View,
			Mask,
			Scroller,
			WAFData,
			ParametersLayoutViewUtilities,
			ParametersLayoutView,
            ParamSkeletonNLS) {

	'use strict';

	var extendedView;

	extendedView = View.extend({
		tagName: 'div',
		className: 'generic-detail',

		init: function (options) {
			options = UWA.clone(options || {}, false);
			this._parent(options);

			this.options = options;
            this.contentMainDiv = null;
		},

		setup: function (options) {
			console.log('VersionNamingView Layout::setup');
		},

		render: function () {
			console.log("VersionNamingView LayoutView::render");
			var that = this;

			this.contentMainDiv = UWA.createElement('div', {
                styles: {
                    height: '100%'
                }
			});
			
            if (this.parentView) this.parentView.remove();
            this.parentView = new ParametersLayoutView(this.options);
            this.parentView.render();

            this.parentView.contentDiv.inject(this.contentMainDiv);

			this.container.setContent(this.contentMainDiv);
            
            this.listenTo(this.collection, {
				onSync: that.onCompleteRequestParameters,
                onRequest: that.onRequestCB,
			});

			return this;
		},

        onRequestCB: function() {
            Mask.mask(this.parentView.contentDiv);
        },

		onCompleteRequestParameters: function () {

            var pdivs = this.parentView.contentDiv.getElements("#parametersDiv");
            if (pdivs && pdivs.length > 1)
                pdivs[0].remove();

            Mask.unmask(this.parentView.contentDiv);
		},

	});

	return extendedView;
});

define('DS/ParameterizationSkeleton/Views/ParameterizationXEngineering/PartNumberingLayoutView', [
		'UWA/Core',
		'UWA/Class/View',
		'DS/UIKIT/Mask',
		'DS/UIKIT/Scroller',
		'DS/WAFData/WAFData',
		'DS/ParameterizationSkeleton/Views/ParametersLayoutViewUtilities',
		'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler',
		'DS/ParameterizationSkeleton/Views/ParameterizationXEngineering/PartNumberingViewUtilities',
		'DS/ParameterizationSkeleton/Views/ParameterizationXEngineering/ParameterizationXEngineerConstants',
		'DS/ParameterizationSkeleton/Views/ParameterizationXEngineering/XENGModal',
		'DS/UIKIT/Input/Button',
		'DS/UIKIT/Alert',
		'DS/ParameterizationSkeleton/Views/ParametersLayoutView',
		'i18n!DS/ParameterizationSkeleton/assets/nls/XEngineeringNLS'
	],
	function (UWA,
		View,
		Mask,
		Scroller,
		WAFData,
		ParametersLayoutViewUtilities,
		URLHandler,
		PartNumberingViewUtilities,
		ParameterizationXEngineerConstants,
		XENGModal,
		Button,
		Alert,
		ParametersLayoutView,
		XEngineeringNLS) {

	'use strict';

	var extendedView;

	extendedView = View.extend({
			tagName: 'div',
			className: 'generic-detail',

			init: function (options) {
				var initDate = new Date();
				options = UWA.clone(options || {}, false);
				this._parent(options);

				this.options = options;
				this.contentDiv = null;
				this.paramScroller = null;
				this.paramAltSubScroller = null;
				this.userMessaging = null;
				this.lastAlertDate = initDate.getTime();
				this.controlDiv = null;
			},

			setup: function (options) {
				UWA.log('XEngineering Layout::setup!');
				UWA.log(options);
			},

			render: function () {
				UWA.log("XEngineering LayoutView::render");
				var introDiv,
				mappingDiv,
				that = this;

				this.contentDiv = UWA.createElement('div', {
						'id': 'typeMainDiv'
					});

				introDiv = UWA.createElement('div', {
						'class': 'information'
					}).inject(this.contentDiv);

				UWA.createElement('p', {
					text: XEngineeringNLS.intro,
					'class': 'font-3dslight'
				}).inject(introDiv);
				this.parentView = new ParametersLayoutView(this.options);

				this.controlDiv = ParametersLayoutViewUtilities.createApplyResetToolbar.call(this, this.contentDiv, true,
						this.applyParams.bind(this), this.resetParams.bind(this));

				this.container.setContent(this.contentDiv);
				this.listenTo(this.collection, {
					onSync: that.onCompleteRequestMapping
				});

				return this;
			},

			onCompleteRequestMapping: function () {
				var that = this;
				UWA.log('XEngineering Layout::Complete rendering!');

				var collection = this.collection._models[0]._attributes;

				PartNumberingViewUtilities.physicalProductAttributes(collection.PhysicalProductAttributes, collection[ParameterizationXEngineerConstants.AVOID_DUP_COUNTER]);

				var fields = collection.ExpressionList;
				var nosOfFields = (fields) ? fields.length : 0;

				this.divPartNumbering = UWA.createElement('div', {
						'class': 'partNumberingDivScroll',
					}).inject(this.contentDiv);

				this.baseAccordion = ParametersLayoutViewUtilities.createFamilyUIKITAccordion(this.divPartNumbering);

				var partNumberingParentDiv = UWA.createElement('div', {
						'class': 'partNumberingContent'
					});

				var partNumberingDiv = UWA.createElement('div', {
						'class': 'partNumbering'
					});

				var partNumberTable = PartNumberingViewUtilities.buildAttributeTable(collection);
				partNumberTable.inject(partNumberingDiv);

				var AddMappingButton = new Button({
						className: 'AddPartNumberFieldButton',
						icon: 'plus-circled',
						attributes: {
							disabled: false,
							'aria-hidden': 'true',
							title: XEngineeringNLS.AddFieldMappingTooltip,
						},
						events: {
							onClick: function (e) {
								that.ShowAddNewFieldPanel(that, partNumberTable.getElement(".partNumberFieldbody"));
							}
						}
					}).inject(partNumberingDiv);

				partNumberingParentDiv.appendChild(partNumberingDiv);

				this.baseAccordion.addItem({
					title: XEngineeringNLS.BaseTitle,
					content: partNumberingParentDiv,
					selected: true,
					name: XEngineeringNLS.BaseName,
				});

				partNumberingDiv.appendChild(this.controlDiv);

				for (var i = 0; i < nosOfFields; i++) {
					var field = fields[i];
					var deployedStatus = (field.Deployed && field.Deployed == "True") ? ParameterizationXEngineerConstants.DEPOLOYED : ParameterizationXEngineerConstants.NEW_NOT_DEPLOYED;
					var counterUnicityValue = field[ParameterizationXEngineerConstants.COUNTER_UNICITY] ? field[ParameterizationXEngineerConstants.COUNTER_UNICITY] : false;
					var fieldInfo = PartNumberingViewUtilities.buildNewPartNumberField(
							PartNumberingViewUtilities.buildJsonObjForPNField(ParameterizationXEngineerConstants.ADD, field.Name, field.Order, field.Type, field.Value, field[ParameterizationXEngineerConstants.ATTRIBUTE], field[ParameterizationXEngineerConstants.COUNTER], counterUnicityValue),
							deployedStatus);
					fieldInfo.inject(partNumberTable.getElement(".partNumberFieldbody"));
				}

				this.paramScroller = new Scroller({
						element: partNumberingDiv
					}).inject(partNumberingParentDiv);

				this.fetchXMLConfig();

				Mask.unmask(this.contentDiv);
			},

			fetchXMLConfig: function () {
				var that = this;
				var url = URLHandler.getURL() + "/resources/ParamWS/access/DomainElements?tenant=" + URLHandler.getTenant() + "&domainid=ENGDefinationManagement";
				WAFData.authenticatedRequest(url, {
					timeout: 250000,
					method: 'GET',
					type: 'json',

					headers: {
						'Content-Type': 'application/json',
						'Accept': 'application/json',
					  'Accept-Language' : widget.lang
					},

					onFailure: function (result) {
						Mask.unmask(that.contentDiv);
						that.getAlertMessage(XEngineeringNLS.AltSubParamError, 'error', this.contentDiv);
					},

					onComplete: function (result) {
						var familyArray = [];

						result.family.forEach(function(family) {
							if (family.id != "PartNumberMapping")
								familyArray.push(family);
						});

						that.getNotPartNumberProperties(familyArray, that.paramScroller);
					}

				});
			},

			getNotPartNumberProperties: function (result, paramAltSubScroller) {
				var that = this;
				try{
					that.divAltSub = UWA.createElement('div', {
							'class': 'altSubDivScroll'
						}).inject(that.contentDiv);
					that.altSubAccordean = ParametersLayoutViewUtilities.createFamilyUIKITAccordion(that.divPartNumbering);
	
					var altSubParentDiv = UWA.createElement('div', {
							'class': 'altSubContent'
						});
					var altSubDiv = UWA.createElement('div', {
							'class': 'alternateSubstitute'
						});
					altSubParentDiv.appendChild(altSubDiv);
					that.model.set("introduction", "");
	
					that.parentView = that._updateParentViewWithNewDomain(that.parentView,"ENGDefinationManagement");
					
					that.parentView.render();
					that.collection._models[0]._attributes.family = result;
					that.parentView.onCompleteRequestParameters();
	
					that.altSubAccordean.addItem({
						title: result.nlsKey,
						content: altSubParentDiv,
						selected: true,
						name: result.nlsKey
					});
	
					altSubDiv.appendChild(that.parentView.contentDiv);
	
					paramAltSubScroller = new Scroller({
							element: altSubDiv
						}).inject(altSubParentDiv);
				}	catch(error) {
				}	finally {
					that.parentView = that._updateParentViewWithNewDomain(that.parentView,"XENManagement");
				}

			},

			_updateParentViewWithNewDomain : function(view, domainId){
				view.options.domainid = domainId;
				view.model.id = domainId;
				view.model._attributes.domainid = domainId;
				view.model._attributes.id = domainId;
				return view;
			},
			
			resetParams: function () {
				var that = this;
				Mask.mask(this.contentDiv);
				var url = URLHandler.getURL() + "/resources/v1/xENGParameterization/resetAdminPartNumberProperties?tenant=" + URLHandler.getTenant();
				WAFData.authenticatedRequest(url, {
					timeout: 250000,
					method: 'GET',
					type: 'json',

					headers: {
						'Content-Type': 'application/json',
						'Accept': 'application/json',
					},

					onFailure: function (json) {
						Mask.unmask(that.contentDiv);
						that.onResetFailure(XEngineeringNLS.ResetError);
					},

					onComplete: function (json) {
						if (json && json.ExpressionList) {
							json.ExpressionList.sort(function (a, b) {
								if (a.Order && b.Order) {
									return a.Order - b.Order;
								}
							});
						}
						that.onResetSuccess(json);
						Mask.unmask(that.contentDiv);
						that.getAlertMessage(XEngineeringNLS.ResetSuccess, 'success', that.contentDiv);
					}

				});

			},

			onResetSuccess: function (json) {
				var savedInfo = json.ExpressionList;
				var that = this;
				var fieldsToBeRemoved = new Array();
				var rowsOfMappedFields = this.contentDiv.getElementsByClassName("partNumberFieldMapping");
				for (var i = 0; i < rowsOfMappedFields.length; i++) {
					if (rowsOfMappedFields[i].value == ParameterizationXEngineerConstants.NEW_NOT_DEPLOYED) {
						if ((savedInfo && savedInfo[i])) {
							var fieldInfo = (that.collection._models[0]._attributes.ExpressionList && that.collection._models[0]._attributes.ExpressionList[i]) ? that.collection._models[0]._attributes.ExpressionList[i] : savedInfo[i];
							fieldsToBeRemoved.push(PartNumberingViewUtilities.resetForFieldLineChanges(rowsOfMappedFields[i], fieldInfo));
						} else {
							fieldsToBeRemoved.push(PartNumberingViewUtilities.resetForFieldLineChanges(rowsOfMappedFields[i]));
						}
					}
				}
				fieldsToBeRemoved.forEach(function (attrMapping) {
					if (attrMapping) {
						attrMapping.remove();
					}
				});
				//PartNumberingViewUtilities.updateStrategy(json.Strategy, ParameterizationXEngineerConstants.DEPOLOYED);
				PartNumberingViewUtilities.updateFormulaTextFields(ParameterizationXEngineerConstants.MAX_ROWS + 1, null, null, ParameterizationXEngineerConstants.DEPOLOYED);
			},

			onResetFailure: function (message) {
				this.getAlertMessage(message, 'error', this.contentDiv);

			},

			applyParams: function () {
				var that = this;
				var rowsOfMappedFields = this.contentDiv.getElementsByClassName("partNumberFieldMapping");
				var payloadToSend = {};
				//                payloadToSend.Strategy = document.querySelector(".partNumberStrategyMapping").value;
				Mask.mask(this.contentDiv);
				payloadToSend.ExpressionList = [];
				for (var i = 0; i < rowsOfMappedFields.length; i++) {
					if (rowsOfMappedFields[i].value == ParameterizationXEngineerConstants.NEW_NOT_DEPLOYED) {
						var value = PartNumberingViewUtilities.buildsFieldJsonObject(rowsOfMappedFields[i]);
						payloadToSend.ExpressionList.push(value);
					}
				}

				var url = URLHandler.getURL() + "/resources/v1/xENGParameterization/setAdminPartNumberProperties?tenant=" + URLHandler.getTenant(),payloadToSend;
				WAFData.authenticatedRequest(url, {
					timeout: 250000,
					method: 'POST',
					data: JSON.stringify(payloadToSend),
					type: 'json',

					headers: {
						'Content-Type': 'application/json',
						'Accept': 'application/json'
					},

					onFailure: function (json) {
						Mask.unmask(that.contentDiv);
						that.onApplyFailure(XEngineeringNLS.ApplyError);
					},

					onComplete: function (json) {
						if (json.Action == "Success") {
							that.onApplySuccess(payloadToSend.Strategy);
							Mask.unmask(that.contentDiv);
							that.getAlertMessage(XEngineeringNLS.ApplySuccess, 'success', that.contentDiv);

						} else {
							Mask.unmask(that.contentDiv);
							that.onApplyFailure(json.message);
						}
					}

				});
			},

			onApplyFailure: function (message) {
				this.getAlertMessage(message, 'error', this.contentDiv);
			},

			onApplySuccess: function (strategyValue) {

				//PartNumberingViewUtilities.updateStrategy(strategyValue, ParameterizationXEngineerConstants.DEPOLOYED);
				var fieldsToBeRemoved = new Array();

				var rowsOfMappedFields = this.contentDiv.getElementsByClassName("partNumberFieldMapping");
				for (var i = 0; i < rowsOfMappedFields.length; i++) {
					if (rowsOfMappedFields[i].value == ParameterizationXEngineerConstants.NEW_NOT_DEPLOYED) {
						var statusCell = rowsOfMappedFields[i].cells[6];
						if (statusCell.value == ParameterizationXEngineerConstants.ADD || statusCell.value == ParameterizationXEngineerConstants.MODIFY) {
							rowsOfMappedFields[i].cells[6].empty();
							rowsOfMappedFields[i].value = ParameterizationXEngineerConstants.DEPOLOYED;
							var imgSpan = PartNumberingViewUtilities.buildImgSpan('check', '1.5', 'green', XEngineeringNLS.Deployed);
							imgSpan.inject(rowsOfMappedFields[i].cells[6]);
						}
						if (rowsOfMappedFields[i].cells[6].value == ParameterizationXEngineerConstants.REMOVE) {
							fieldsToBeRemoved.push(rowsOfMappedFields[i]);
						}
					}
				}

				fieldsToBeRemoved.forEach(function (attrMapping) {
					attrMapping.remove();
				});

				var formulaField = document.querySelector(".partNumberFormulaMapping");
				formulaField.cells[3].empty();
				var imgSpan = ParametersLayoutViewUtilities.buildImgSpan('check', '1.5', 'green', XEngineeringNLS.Deployed);
				imgSpan.inject(formulaField.cells[3]);

			},

			ShowAddNewFieldPanel: function (attrtbody) {
				this.createPartNumberingDialogBox(attrtbody);
				var isDeployed = ParameterizationXEngineerConstants.NEW_NOT_DEPLOYED;
			},

			createPartNumberingDialogBox: function (attrtbody) {
				var that = this;
				var attributes = (this.collection._models[0]._attributes && this.collection._models[0]._attributes.PhysicalProductAttributes);
				var options = {
					className: "part-number-modal",
					title: XEngineeringNLS.AddFieldMappingTooltip,
					[ParameterizationXEngineerConstants.AVOID_DUP_COUNTER] : this.collection._models[0]._attributes[ParameterizationXEngineerConstants.AVOID_DUP_COUNTER]
				}

				this.modal = new XENGModal(options);

				this.modal.getAttributes(attributes);

				if (this.modal.getTotalFormatRows() == ParameterizationXEngineerConstants.MAX_ROWS) {
					var alert = that.modal.displayAlertMessage(XEngineeringNLS.maxLimitOfRows, document.querySelector('#typeMainDiv').getChildren()[0]);
				} else {
					function _getFooter() {
						return "<button type='button'  name='addButton' id='add-button' class='btn btn-primary'>" + XEngineeringNLS.add + "</button> " + "</button>" + "<button type='button' name='cancelButton' id='cancel-button' class='btn btn-default'>" + XEngineeringNLS.cancel + "</button>"
					}

					this.modal.modal.setFooter(_getFooter());
					this.modal.getModalBody();
					this.modal._bindFooterEvent();
					this.modal.getContent().getElements('.btn').forEach(function (element) {
						if (that.modal.isCounterExists(ParameterizationXEngineerConstants.TYPE)) {
							that.modal.partNumberTypeCombobox.disable(ParameterizationXEngineerConstants.FORMAT_COUNTER);
						}

						if (element.name === 'cancelButton') {
							element.addEvent('click', function () {
								that.modal.destroy();

							});
						} else if (element.name === 'addButton') {

							element.addEvent('click', function () {

								var toDisplayOver = that.modal.getContent().getElement('.enox-part-number-content');

								if (that.modal.validateEnteredNameValueNotNull()) {
									that.modal.displayAlertMessage(XEngineeringNLS.nameNullMessage, toDisplayOver);
								} else if (that.modal.validateEnteredOrderValueNotNull()) {
									that.modal.displayAlertMessage(XEngineeringNLS.orderNullMessage, toDisplayOver);
								} else if (that.modal.validatSelectedTypeFieldValueNotNull()) {
									that.modal.displayAlertMessage(XEngineeringNLS.selectTypeMessage, toDisplayOver);
								} else if (that.modal.validateSelectedAttributeFieldValueNotNull()) {
									that.modal.displayAlertMessage(XEngineeringNLS.selectAttributeMessage, toDisplayOver);
								} else if (that.modal.validateEnteredCounterFieldValueNotNull()) {
									that.modal.displayAlertMessage(XEngineeringNLS.counterIsEmptyMessage, toDisplayOver);
								} else if (that.modal.validateEnteredValueFieldValueNotNull()) {
									that.modal.displayAlertMessage(XEngineeringNLS.valueEmptyMessage, toDisplayOver);
								} else {
									if (!that.modal.validateEnteredNameValue().isValid) {
										that.modal.displayAlertMessage(XEngineeringNLS.nameMessage + ' ' + XEngineeringNLS.alreadyExists, toDisplayOver);
									} else if (!that.modal.validateEnteredOrderValue().isValid) {
										that.modal.displayAlertMessage(XEngineeringNLS.orderMessage + ' ' + XEngineeringNLS.alreadyExists, toDisplayOver);
									} else {
										var userSelectedFormat = that.modal.getUserEnteredValues();

										userSelectedFormat[ParameterizationXEngineerConstants.OPERATION] = ParameterizationXEngineerConstants.ADD;
										var fieldInfo = PartNumberingViewUtilities.buildNewPartNumberField(userSelectedFormat, ParameterizationXEngineerConstants.NEW_NOT_DEPLOYED);
										fieldInfo.inject(attrtbody.getElement(".partNumberFieldbody"));
										that.modal.destroy();
									}
								}
							});
						};
					});

					that.modal.show();
				}
			},

			getAlertMessage: function (message, className, toDisplayOn) {

				this.alertOptions = {
					visible: true,
					className: 'param-alert',
					messageClassName: className,
					closable: true,
					renderTo: toDisplayOn,
					autoHide: true,
					hideDelay: 2000
				};

				var alert = new Alert(this.alertOptions);
				alert.add({
					message: message,
				});

			},

			destroy: function () {
				this.stopListening();
				this._parent.apply(this, arguments);
			}
		});

	return extendedView;
});

/*@fullReview  ZUR 15/11/23 2017x Param Skeleton*/
/*global define, widget*/
define('DS/ParameterizationSkeleton/Views/ParametersParentView',
    [
        'UWA/Core',
        'UWA/Class/View',
        'DS/ParameterizationSkeleton/Views/ParametersLayoutView',
        'DS/W3DXComponents/Views/Layout/ListView',
        'DS/ParameterizationSkeleton/Views/ParamItemsListView'
    ], function (UWA, View, ParametersLayoutView, ListView, ParamItemsListView) {

        'use strict';

        return View.extend({

            defaultOptions: {
                type: 'default'
            },

            /* setup : function () {
            //muter via un extend ?
            //appeler le setup  / options / propertymodel
            //tester le type d'instance de ce model with instanceof
            },*/

            init : function (options) {
                UWA.log("ParametersParentView::init");
                UWA.log(options);
                this.options = options;
                this.childView = null;
            },

        // The ‘options’ object is passed via the ‘viewOptions’ specified in the Renderer at the Skeleton instantiation
            render: function () {
                //options = options || {options = {}};
                //options = UWA.clone(options || {}, false);
                var options = this.options,
                    myView = this.getViewFromDomainID(options);

                if (myView !== null) {
                     //myView.init();
                    this.childView = myView;
                    return myView.render();
                }

                return null;//defaultView.render();

            },

            getViewFromDomainID : function (options) {
                var i,
                    AppIntItemsDomainViewList = ["AttributeDef", "LifecycleTopology", "XCADParameterization"];

                for (i = 0; i < AppIntItemsDomainViewList.length; i++) {
                    if (options.domainid === AppIntItemsDomainViewList[i]) {
                        return new ParamItemsListView(options);
                    }
                }
                return new ParametersLayoutView(options);
            },

            /*getViewFromDomainID : function (options) {
                var i,
                    AppIntExchangeDomainList = ["Iteration", "DataAccessRight", "ObjectIdentification", "EngineeringCentral", "Deployment", "ParamDev", "EngineeringWorkspace"];

                for (i = 0; i < AppIntExchangeDomainList.length; i++) {
                    if (options.domainid === AppIntExchangeDomainList[i]) {
                        return new ParametersLayoutView(options);
                    }
                }
                return new ParamItemsListView(options);
            },*/

            destroy : function() {
                this.childView.destroy();
                this.stopListening();
                this._parent.apply(this, arguments);
            }

        });
    });

/**
* @quickreview  KB9 21:10:25 creation
*/

define('DS/ParameterizationSkeleton/Views/DELConfigurationParameterization/DELConfigurationLayoutView',
    [
    'UWA/Core',
    'DS/ParameterizationSkeleton/Views/ParametersLayoutView',
    'DS/ParameterizationSkeleton/Views/DELConfigurationParameterization/DELConfigurationFamilyView',
    'DS/ParameterizationSkeleton/Utils/DELConfigurationParameterization/DELConfigurationParameterizationResourceServices',
    'DS/ParameterizationSkeleton/Utils/DELConfigurationParameterization/DELConfigurationParameterizationWebServices',
    'i18n!DS/ParameterizationSkeleton/assets/nls/ParamSkeletonNLS',
    'i18n!DS/ParameterizationSkeleton/assets/nls/DELConfigurationLayoutView',
    'css!DS/ParameterizationSkeleton/ParameterizationSkeleton',
    'css!DS/ParameterizationSkeleton/assets/css/DELConfigurationLayoutView'
    ],
    function (
      UWA,
      ParametersLayoutView,
      DELConfigurationFamilyView,
      DELConfigurationParameterizationResourceServices,
      DELConfigurationParameterizationWebServices,
      ParamSkeletonNLS,
      Nls
    )
  {

  'use strict';

  var DELConfigurationLayoutView = ParametersLayoutView.extend({

    /*
    * init
    */
    init : function init(options)
    {
      this._parent(options);

      this._domainID = options.domainid;
      this._xmlNls = null;
      this._listOfFamilyViews = [];
      this._mapFamily = new Map();
    },

    /*
    * destroy
    */
    destroy : function destroy()
    {
      var that = this;
      that._parent();

      if (that._familyView)
        that._familyView.destroy();
      return that;
    },

    /*
    * render
    */
    render : function render()
    {
      var that = this;
      this._parent();

      return this;
    },

    /*
    * buildParameterLine
    */
    buildParameterLine : function (iParamObj, familyID, familytbody, popoverPosition) {

      var that = this;
      if (that._mapFamily)
        that._mapFamily.set(iParamObj.id, familyID);

      var args = iParamObj.argument;
      for (var i=0;i<args.length;i++)
      {
        var arg = args[i];
        if (arg && arg.defaultValue === "DELConfigurationTreeListView")
        {
          //that.nbofShownParameters++;
          var newParamline = UWA.createElement('tr', {title: ''});//iParamObj.tooltipNlsKey
          var paramTreeListViewCell = UWA.createElement('td', {
              'width' : '100%',
              'title' : '',
              'colspan' : '4'
          });
          paramTreeListViewCell.setStyle("vertical-align", "text-bottom");

          var contentTreeView = UWA.createElement('div');
          contentTreeView.className = "treeListView";

          var options = {};
          options.xmlDoc = that._xmlMap.get(arg.id);
          options.domainid = that._domainID;
          options.familyid = familyID;
          options.parameterid = iParamObj.id;
          options.argid = arg.id;

          if (that._xmlNls.get(arg.id)[0])
            options.treeListViewNls = that._xmlNls.get(arg.id)[0];
          if (that._xmlNls.get(arg.id)[1])
            options.modalViewNls = that._xmlNls.get(arg.id)[1];
          if (that._xmlNls.get(arg.id)[2])
            options.nodeTreeViewNls = that._xmlNls.get(arg.id)[2];

          //var familyView = new DELConfigurationFamilyView(options);
          that._familyView = new DELConfigurationFamilyView(options);
          that._listOfFamilyViews.push(that._familyView);
          var familyViewContent = that._familyView.buildFamilyContent();

          familyViewContent.inject(contentTreeView);
          contentTreeView.inject(paramTreeListViewCell);
          paramTreeListViewCell.inject(newParamline);
          newParamline.inject(familytbody);

          //return contentTreeView;
        }
        else
          this._parent(iParamObj, familyID, familytbody, popoverPosition);
      }
    },

    /*
    * updateParameterOnChange
    */
    updateParameterOnChange : function(iValue, ctrlObjectCell, imageCell) {

      var that = this;
      var objNode = {
        value: iValue
      };

      var paramID = ctrlObjectCell.getData('argumentNode').paramid;
      var argID = ctrlObjectCell.getData('argumentNode').argumentid;
      var familyID = that._mapFamily.get(paramID);


      DELConfigurationParameterizationWebServices.deleteParameter(that._domainID, familyID, paramID, argID, null, {
        onSuccess : function(deleteParam)
        {
          DELConfigurationParameterizationWebServices.setParameters(that._domainID, familyID, paramID, argID, objNode, {
              onSuccess : function(dataParams)
              {
                DELConfigurationParameterizationWebServices.isDeployed(that._domainID, familyID, paramID, argID, objNode, {
                    onSuccess : function(dataIsDeployed)
                    {
                      var json = {};
                      json.deployStatus = "S_OK";
                      that.onApplySuccess(json, imageCell);
                    },
                    onFailure : function (deleteError)
                    {
                      var json = {};
                      json.deployStatus = "E_FAIL";
                      that.onApplyFailure(json, imageCell);
                    }
                  });
              },
              onFailure : function (deleteError)
              {
                var json = {};
                json.deployStatus = "E_FAIL";
                that.onApplyFailure(json, imageCell);
              }
            });
          },
          onFailure : function (deleteError)
          {
            var json = {};
            json.deployStatus = "E_FAIL";
            that.onApplyFailure(json, imageCell);
          }
      });
    },

    /*
    * buildFamilyItemContent
    */
    /*buildFamilyItemContent : function buildFamilyItemContent(iFamily, familyPosition) {
      var that = this;

      if (that._xmlMap.get(iFamily.id))
      {
        that.nbofShownParameters++;
        var contentTreeView = UWA.createElement('div');

        var options = {};
        options.xmlDoc = that._xmlMap.get(iFamily.id);
        options.domainid = that._domainID;
        options.treeListViewNls = that._xmlNls.get(iFamily.id)[0];
        options.modalViewNls = that._xmlNls.get(iFamily.id)[1];


        var contentParentView = ParametersLayoutView.prototype.buildFamilyItemContent.call(that, iFamily, familyPosition);// this._parent(iFamily, familyPosition);
        contentParentView.inject(contentTreeView);

        var familyView = new DELConfigurationFamilyView(options);
        familyView = familyView.buildFamilyContent(iFamily, familyPosition);
        familyView.inject(contentTreeView);

        return contentTreeView;
      }
      else
        return this._parent(iFamily, familyPosition);
    },*/

    /*
    * mapNls
    */
    mapNls : function mapNls(key, treelistnls, modalnls, nodetreenls, resolveMapNls, rejectMapNls)
    {
      var that = this;
      try
      {
        require(['i18n!DS/ParameterizationSkeleton/assets/nls/' + treelistnls,
                'i18n!DS/ParameterizationSkeleton/assets/nls/' + modalnls,
                'i18n!DS/ParameterizationSkeleton/assets/nls/' + nodetreenls],
        function(treelistnls, modalnls, nodetreenls)
        {
          that._xmlNls.set(key,[treelistnls,modalnls,nodetreenls]);
          resolveMapNls();
        });
      }
      catch(error)
      {
        rejectMapNls();
      }
    },

    /*
    * onCompleteRequestParameters
    */
    onCompleteRequestParameters : function onCompleteRequestParameters() {
        var that = this;

        //that._parent();

        var promise = new Promise(function (resolve, reject){
          DELConfigurationParameterizationResourceServices.initAttributeModal(that._domainID, {
            onSuccess : function(xmlMap)
            {
              that._xmlMap = xmlMap;

              var promiseMapTab = [];
              var keys = Array.from(that._xmlMap.keys());
              var keysLength = keys.length;
              for (var i=0;i<keysLength;i++)
              {
                var key = keys[i];
                var xmlDoc = that._xmlMap.get(key);//iFamily.id);
                xmlDoc = xmlDoc.getElementsByTagName('ui');
                if (xmlDoc != null && xmlDoc.length)
                {
                  if (that._xmlNls === null)
                    that._xmlNls = new Map();

                  xmlDoc = xmlDoc[0];
                  var treelistnls = "";
                  if (xmlDoc.attributes.treelistnls)
                    treelistnls = xmlDoc.attributes.treelistnls.value;

                  var modalnls = "";
                  if (xmlDoc.attributes.modalnls)
                    modalnls = xmlDoc.attributes.modalnls.value;

                  var nodetreenls = "";
                  if (xmlDoc.attributes.nodetreenls)
                    nodetreenls = xmlDoc.attributes.nodetreenls.value;

                  var promiseMap = new Promise(function (resolveMapNls, rejectMapNls){
                    that.mapNls(key, treelistnls, modalnls, nodetreenls, resolveMapNls, rejectMapNls);
                  });
                  promiseMapTab.push(promiseMap);
                }
              }

              UWA.Promise.all(promiseMapTab).then(function() {
                resolve();
              });
            }
          });
        });

        UWA.Promise.all([promise]).then(function() {
          //removeApply Reset div
          var eltUI = document.getElementById("ApplyResetDiv");
          if (eltUI)
          {
              var parentNode = eltUI.getParent();
              parentNode.removeChild(eltUI);
          }

          ParametersLayoutView.prototype.onCompleteRequestParameters.call(that);
        });
    }

  });

  return DELConfigurationLayoutView;
});

/**
* @quickreview  KB9 21:10:25 creation
*/

define('DS/ParameterizationSkeleton/Views/DELConfigurationParameterization/DELConfigurationParentView',
		[
	 'UWA/Core',
	 'DS/ParameterizationSkeleton/Views/ParametersParentView',
	 'DS/ParameterizationSkeleton/Views/DELConfigurationParameterization/DELConfigurationLayoutView'
	 ],
	 function (
		 UWA,
		 ParametersParentView,
		 DELConfigurationLayoutView
		)
{

	'use strict';


	var DELConfigurationParentView = ParametersParentView.extend({

		init: function (options) {
			options = UWA.clone(options || {}, false);
			this._domainID = options.domainid;
			this._layoutView = null;
			this._parent(options);
		},

		setup: function (options) {
			UWA.log('DELConfigurationParentView Layout::setup!');
			UWA.log(options);

		},

		destroy : function()
		{
			var that = this;
			that._parent();

			if (that._layoutView)
			that._layoutView.destroy();
		},


		render : function()
		{
			var that = this;
			var options = this.options;

		  //var layoutView = new DELConfigurationLayoutView(options);
			//return layoutView.render();
			that._layoutView = new DELConfigurationLayoutView(options);
			return that._layoutView.render();
		}
	});

	return DELConfigurationParentView;
});

define('DS/ParameterizationSkeleton/Views/ParameterizationFLWeb/ParamSAXFormulaTable', [
	'UWA/Core',
	'UWA/Class/View',
	'DS/UIKIT/Mask',
	'DS/UIKIT/Scroller',
	'DS/WAFData/WAFData',
	'DS/WebappsUtils/WebappsUtils',
	'DS/ParameterizationSkeleton/Views/ParametersLayoutViewUtilities',
	'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler',
	'DS/ParameterizationSkeleton/Views/ParameterizationFLWeb/CompanyIDViewUtilities',
	'DS/ParameterizationSkeleton/Views/ParameterizationFLWeb/ParameterizationFLWebConstants',
	'DS/ParameterizationSkeleton/Views/ParameterizationFLWeb/FLWebModalSlideIn',
	'DS/UIKIT/Input/Button',
	'DS/UIKIT/Alert',
	'DS/ParameterizationSkeleton/Views/ParametersLayoutView',
	"DS/Skeleton/SkeletonLayout",
	'DS/CoreEvents/ModelEvents',
	'i18n!DS/ParameterizationSkeleton/assets/nls/FLWebNLS',
	],
	function(UWA,
			View,
			Mask,
			Scroller,
			WAFData,
			WebappsUtils,
			ParametersLayoutViewUtilities,
			URLHandler,
			CompanyIDViewUtilities,
			ParameterizationFLWebConstants,
			FLWebModal,
			Button,
			Alert,
			ParametersLayoutView,
			SkeletonLayout,
			ModelEvents,
			FLWebNLS) {

	'use strict';

	var saxFormulaTableView;

	saxFormulaTableView = {
		setANFormulaView: function(collection, contentDiv, modelEvent, createNewModelObj){
			this.collection = collection;
			const that = this, collectionCurate = this.collection._models[0]._attributes;;
			this.contentDiv = contentDiv;
			CompanyIDViewUtilities.physicalProductAttributes(collectionCurate.PhysicalProductAttributes);
			var fields = collectionCurate.ExpressionList;
			// this.divPartNumbering = UWA.createElement('div', {
			// 	'class': 'architectureNumberingDivScroll',
			// });

			var nosOfFields = (fields) ? fields.length : 0;
		//	this.baseAccordion = ParametersLayoutViewUtilities.createFamilyUIKITAccordion(this.divPartNumbering);
			var partNumberingParentDiv = UWA.createElement('div', {'class': 'architectureNumberingContent'});
			var partNumberingDiv = UWA.createElement('div', {'class': 'architectureNumbering'});
			const rightSidePanel = UWA.createElement('div', {'class': 'side-panel-editANField'});
			var partNumberTable = CompanyIDViewUtilities.buildAttributeTable(collectionCurate);
			partNumberTable.inject(partNumberingDiv);
			var AddMappingButton = new Button({
				className: 'AddPartNumberFieldButton',
				icon: 'plus-circled',
				attributes: {
					disabled: false,
					'aria-hidden': 'true',
					title: FLWebNLS.AddFieldMappingTooltip,
				},
				events: {
					onClick: function(e) {
						that.ShowAddNewFieldPanel(partNumberTable.getElement(".partNumberFieldbody"));
						//that.mySkeletonlayout.setCollapseFlagFromUIInteraction("right", !that.mySkeletonlayout.rightContainerCollapsedFlag);
					}
				}
			}).inject(partNumberingDiv);

		partNumberingParentDiv.appendChild(partNumberingDiv);
		ParametersLayoutViewUtilities.createApplyResetToolbar.call(this, partNumberingParentDiv, true, this.applyParams.bind(this,modelEvent, createNewModelObj), this.resetParams.bind(this));
		this.mySkeletonlayout = new SkeletonLayout(
			{
				centerContainerContent: partNumberingParentDiv,
				rightContainerContent: rightSidePanel,
				navigationContainerHeight: 0,
				statusContainerHeight: 0,
				idCardContainerHeight: 0,
			}
		);
		this.mySkeletonlayout.inject(this.contentDiv);

			for (var i = 0; i < nosOfFields; i++) {
				var field = fields[i];
				var deployedStatus = (field.Deployed && field.Deployed=="True")? ParameterizationFLWebConstants.DEPOLOYED : ParameterizationFLWebConstants.NEW_NOT_DEPLOYED;
				var fieldInfo = CompanyIDViewUtilities.buildNewPartNumberField(
						CompanyIDViewUtilities.buildJsonObjForPNField(ParameterizationFLWebConstants.ADD, field.Name, field.Order, field.Type, field.Value, field[ParameterizationFLWebConstants.ATTRIBUTE]?field[ParameterizationFLWebConstants.ATTRIBUTE]:'', field[ParameterizationFLWebConstants.COUNTER]?field[ParameterizationFLWebConstants.COUNTER]:'', field.Label, field.Default),
						deployedStatus, this.mySkeletonlayout);
				fieldInfo.inject(partNumberTable.getElement(".partNumberFieldbody"));
			}
			Mask.unmask(this.contentDiv);
		},

		resetParams: function(){
			var fieldsToBeRemoved = new Array();
			var rowsOfMappedFields = this.contentDiv.getElementsByClassName("partNumberFieldMapping");
			for (var i = 0; i < rowsOfMappedFields.length; i++) {
				if (rowsOfMappedFields[i].value == ParameterizationFLWebConstants.NEW_NOT_DEPLOYED) {
					fieldsToBeRemoved.push(CompanyIDViewUtilities.resetForFieldLineChanges(rowsOfMappedFields[i]));
				}
			}
			fieldsToBeRemoved.forEach(function(attrMapping) {
				if (attrMapping) {
					attrMapping.remove();
				}
			});
			CompanyIDViewUtilities.updateFormulaTextFields(ParameterizationFLWebConstants.MAX_ROWS + 1, null, null, ParameterizationFLWebConstants.DEPOLOYED);
		},

		applyParams: function(modelEvent, createNewModelObj) {
			var that = this;
			var rowsOfMappedFields = this.contentDiv.getElementsByClassName("partNumberFieldMapping");
			var payloadToSend = {};
			Mask.mask(this.contentDiv);
			payloadToSend.ParameterExpressionList = [];
			for (var i = 0; i < rowsOfMappedFields.length; i++) {
				//if (rowsOfMappedFields[i].value == ParameterizationFLWebConstants.NEW_NOT_DEPLOYED) {
				var value = CompanyIDViewUtilities.buildsFieldJsonObject(rowsOfMappedFields[i]);
				value.Label = value.Name;
				payloadToSend.ParameterExpressionList.push(value);
				//}
			}
			// payloadToSend['UnicityCheck'] = localStorage.getItem('arch_number_unicity');
			let url = URLHandler.getURL() + "/resources/v1/SystemsArchitectureDefinitionParam/setParamArchitectureNumberExpressions?tenant=" + URLHandler.getTenant();
			if(modelEvent &&
				(modelEvent.name == 'Edit_ExistingSubType_Formula' /*|| modelEvent.name == 'New_SubType_Formula'*/)){
				payloadToSend.flpType= modelEvent.data.typeName;
			}
			WAFData.authenticatedRequest(url, {
				timeout: 250000,
				method: 'POST',
				data: JSON.stringify(payloadToSend),
				type: 'json',
				headers: {
					'Content-Type': 'application/json',
					'Accept': 'application/json'
				},
				onFailure: function(json) {
					Mask.unmask(that.contentDiv);
					that.onApplyFailure(FLWebNLS.ApplyError);
				},
				onComplete: function(json) {
					if (json.ParameterExpressionList/*.length > 0*/) {
						that.onApplySuccess();
						Mask.unmask(that.contentDiv);
						that.getAlertMessage(FLWebNLS.ApplySuccess, 'success', widget.body/*that.contentDiv*/);
						if(createNewModelObj){
							modelEvent.eventObj.publish(createNewModelObj)
						}
						if(modelEvent){
							modelEvent.data.formulaValue = json.anFormat;
							modelEvent.eventObj.publish({event:modelEvent.name, data:modelEvent.data})
						}
					} else {
						Mask.unmask(that.contentDiv);
						that.onApplyFailure(json.message);
					}
					if(document.getElementById('sax-formula-modal-immersiveFrame'))
						document.getElementById('sax-formula-modal-immersiveFrame').destroy();
				}

			});
		},

		onApplyFailure: function(message) {
			this.getAlertMessage(message, 'error', this.contentDiv);
		},

		onApplySuccess: function() {
			var fieldsToBeRemoved = new Array();
			var rowsOfMappedFields = this.contentDiv.getElementsByClassName("partNumberFieldMapping");
			for (var i = 0; i < rowsOfMappedFields.length; i++) {
				if (rowsOfMappedFields[i].value == ParameterizationFLWebConstants.NEW_NOT_DEPLOYED) {
					var statusCell = rowsOfMappedFields[i].cells[5];
					if (statusCell.value == ParameterizationFLWebConstants.ADD || statusCell.value == ParameterizationFLWebConstants.MODIFY) {
						rowsOfMappedFields[i].cells[5].empty();
						rowsOfMappedFields[i].value = ParameterizationFLWebConstants.DEPOLOYED;
						var imgSpan = CompanyIDViewUtilities.buildImgSpan('check', '1.5', 'green', FLWebNLS.Deployed);
						imgSpan.inject(rowsOfMappedFields[i].cells[5]);
					}
					if (rowsOfMappedFields[i].cells[5].value == ParameterizationFLWebConstants.REMOVE) {
						fieldsToBeRemoved.push(rowsOfMappedFields[i]);
					}
				}
			}
			fieldsToBeRemoved.forEach(function(attrMapping) {
				attrMapping.remove();
			});
			var formulaField = document.querySelector(".partNumberFormulaMapping");
			formulaField.cells[3].empty();
			var imgSpan = ParametersLayoutViewUtilities.buildImgSpan('check', '1.5', 'green', FLWebNLS.Deployed);
			imgSpan.inject(formulaField.cells[3]);
		},

		ShowAddNewFieldPanel: function(attrtbody) {
			this.createPartNumberingDialogBox(attrtbody);
			var isDeployed = ParameterizationFLWebConstants.NEW_NOT_DEPLOYED;
		},

		createPartNumberingDialogBox: function(attrtbody) {
			var that = this;
			var attributes = (this.collection._models[0]._attributes && this.collection._models[0]._attributes.PhysicalProductAttributes);
			var options = {
					className: "part-number-modal",
					title: "Add Field",
					skeletonView: this.mySkeletonlayout,
					isadd: true
			}
			this.modal = new FLWebModal(options);
			this.modal.getAttributes(attributes);
			if (this.modal.getTotalFormatRows() == ParameterizationFLWebConstants.MAX_ROWS) {
				var alert = that.modal.displayAlertMessage(FLWebNLS.maxLimitOfRows, document.querySelector('#typeMainDiv').getChildren()[0]);
			} else {
				function _getFooter() {
					return "<button type='button'  name='addButton' id='add-button' class='btn btn-primary'>" + FLWebNLS.add + "</button> " + "</button>" + "<button type='button' name='cancelButton' id='cancel-button' class='btn btn-default'>" + FLWebNLS.cancel + "</button>"
				}
				this.modal.setFooter(_getFooter());
				this.modal.getModalBody();
				this.modal._bindFooterEvent();
				if(this.mySkeletonlayout.rightContainerCollapsedFlag)
					this.mySkeletonlayout.setCollapseFlagFromUIInteraction("right", !this.mySkeletonlayout.rightContainerCollapsedFlag);
				this.modal.getContent().getElements('.btn').forEach(function(element) {
					if (that.modal.isCounterExists(ParameterizationFLWebConstants.TYPE)) {
						that.modal.partNumberTypeCombobox.disable(ParameterizationFLWebConstants.FORMAT_COUNTER);
					}

					// if (element.name === 'cancelButton') {
					// 	element.addEvent('click', function() {
					// 		that.skeletonView.setCollapseFlagFromUIInteraction("right", !that.skeletonView.rightContainerCollapsedFlag);
					// 		that.modal.destroy();
					// 	});
					// } else
					if (element.name === 'addButton') {

						element.addEvent('click', function() {

							var toDisplayOver = that.modal.getContent().getElement('.enox-arch-number-content');

							if (that.modal.validateEnteredNameValueNotNull()) {
								that.modal.displayAlertMessage(FLWebNLS.nameNullMessage, toDisplayOver);
							} else if (that.modal.validateEnteredOrderValueNotNull()) {
								that.modal.displayAlertMessage(FLWebNLS.orderNullMessage, toDisplayOver);
							} else if (that.modal.validatSelectedTypeFieldValueNotNull()) {
								that.modal.displayAlertMessage(FLWebNLS.selectTypeMessage, toDisplayOver);
							} else if (that.modal.validateSelectedAttributeFieldValueNotNull()) {
								that.modal.displayAlertMessage(FLWebNLS.selectAttributeMessage, toDisplayOver);
							}else if (that.modal.validateEnteredCounterFieldValueNotNull()) {
								that.modal.displayAlertMessage(FLWebNLS.counterIsEmptyMessage, toDisplayOver);
							}else if (that.modal.validateEnteredValueFieldValueNotNull()) {
								that.modal.displayAlertMessage(FLWebNLS.valueEmptyMessage, toDisplayOver);
							} else {
								if (!that.modal.validateEnteredNameValue().isValid) {
									that.modal.displayAlertMessage(FLWebNLS.nameMessage +  ' ' + FLWebNLS.alreadyExists, toDisplayOver);
								} else if (!that.modal.validateEnteredOrderValue().isValid) {
									that.modal.displayAlertMessage(FLWebNLS.orderMessage +  ' ' + FLWebNLS.alreadyExists, toDisplayOver);
								} else {
									var userSelectedFormat = that.modal.getUserEnteredValues();

									userSelectedFormat[ParameterizationFLWebConstants.OPERATION] = ParameterizationFLWebConstants.ADD;
									var fieldInfo = CompanyIDViewUtilities.buildNewPartNumberField(userSelectedFormat, ParameterizationFLWebConstants.NEW_NOT_DEPLOYED, that.mySkeletonlayout);
									fieldInfo.inject(attrtbody);
									that.modal.destroy();
									that.mySkeletonlayout.setCollapseFlagFromUIInteraction("right", !that.mySkeletonlayout.rightContainerCollapsedFlag);
								}
							}
						});
					};
				});

				//that.modal.show();
			}
		},

		getAlertMessage: function (message, className, toDisplayOn) {

			this.alertOptions = {
					visible: true,
					className: 'param-alert',
					messageClassName: className,
					closable: true,
					renderTo: toDisplayOn,
					autoHide: true,
					hideDelay: 2000
			};

			var alert = new Alert(this.alertOptions);
			alert.add({
				message: message,
			});

		},

		destroy: function() {
			this.stopListening();
			this._parent.apply(this, arguments);
		},

		//Saving code back up in case of any potential issues
		// _updateParentViewWithNewDomain : function(view, domainId){
		// 	view.options.domainid = domainId;
		// 	view.model.id = domainId;
		// 	view.model._attributes.domainid = domainId;
		// 	view.model._attributes.id = domainId;
		// 	return view;
		// },
	}

	return saxFormulaTableView;
});


define('DS/ParameterizationSkeleton/Views/ParameterizationXCAD/XCADViewUtilities',
[
 'UWA/Core',
 'UWA/Controls/Accordion',
 'DS/UIKIT/Accordion',
 'DS/UIKIT/Input/Button',
 'DS/UIKIT/Input/Select',
 'DS/UIKIT/Input/Toggle',
 'DS/UIKIT/Input/Text',
 'DS/UIKIT/Modal',
 'DS/UIKIT/Alert',
 'DS/UIKIT/Popover',
 'DS/UIKIT/Tooltip',
 'DS/UIKIT/Spinner',
 'DS/ParameterizationSkeleton/Views/ParametersLayoutViewUtilities',
 'i18n!DS/ParameterizationSkeleton/assets/nls/XCADMappingNLS',
 'i18n!DS/ParameterizationSkeleton/assets/nls/ParamSkeletonNLS',
'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler',
 'DS/WAFData/WAFData',
'DS/UIKIT/Mask'
 ],
 function (UWA,
           UWAccordion, Accordion,
           Button, Select, Toggle, Text,
           Modal,
           Alert, Popover,Tooltip, Spinner, ParametersLayoutViewUtilities,
           XCADMappingNLS,
           ParamSkeletonNLS,
 		   URLHandler, WAFData,Mask) {

'use strict';

var UIview = {

  init : function () {
    this.cellsAttrIndex = [];
    this.cellsIndex = [];


  },

  initVariable : function () {
    this.cellsIndex = {
        "Connector" : 0,
        "VPMObject" : 1,
        "CADType" : 2,
        "action" : 3,
        "deployFlag" : 4,
        "Indexed" : 5,
    };
    this.cellsAttrIndex = {
        "VPMAttr" : 0,
        "side" : 1,
        "CADAttr" : 2,
        "action" : 3,
        "deployFlag" : 4,
    };

    this.direction =  {
        "BOTH" : "<=>",
        "VPM_To_CAD" : "=>",
        "CAD_To_VPM" : "<=",
    };

  },

  createApplyResetToolbar : function (insertdivID, activateApplyBtn, applyParams, confirmationModalShow) {
    var applyDiv, tableButtons, lineButtons, buttonApplyCell, applyBttn,
    buttonResetCell, resetBbttn;
    //that = this;
    //resetwidth = '100%';
    
    applyDiv =  UWA.createElement('div', {
      'id': 'ApplyResetDiv'
    }).inject(insertdivID);
    //                            
    tableButtons = UWA.createElement('table', {
      'class' : '',
      'id' : '',
      'width' : '100%'
    }).inject(applyDiv);
    
    lineButtons = UWA.createElement('tr').inject(tableButtons);//tbody
    
    if (activateApplyBtn === true) {
      buttonApplyCell = UWA.createElement('td', {
        'width' : '50%',
        'Align' : 'center'
      }).inject(lineButtons);
      
                    applyBttn =  new Button({
                      className: 'primary',
                      id : 'buttonExport',
                      icon : 'export',//'download'//value: 'Button',          
                      attributes: {
                        disabled: false,
                        title: XCADMappingNLS.ApplyMappingtooltip,
                        text : ParamSkeletonNLS.Apply
                      },
                      events: {
                        onClick: function () {
                          applyParams();
                        }
                      }
                    }).inject(buttonApplyCell);
      applyBttn.getContent().setStyle("width", 110);
    }
    
    buttonResetCell = UWA.createElement('td', {
      'width' : '50%',
      'Align' : 'center'//center
    }).inject(lineButtons);
    
    resetBbttn = new Button({
      className: 'warning',
      icon: 'loop',
      attributes: {
        disabled: false,
        title: ParamSkeletonNLS.ResetOnServertooltip,
        text : ParamSkeletonNLS.Reset
      },
      events: {
        onClick: function () {
          //that.resetParamsinSession();//testPreviewBlock();                               
          confirmationModalShow();
        }
      }
    }).inject(buttonResetCell);
    
    resetBbttn.getContent().setStyle("width", 110);
    return applyDiv;
  },
  

  buildAttributeLine : function (attributeList, attributeMapping,widthTable) {
    var iCell, removeAttributeButton, deleteSpan, removePop,position;
    var that = this;

    var actionButton = [];
    var lineAttr = UWA.createElement('tr', {'class': 'AttrLineXCADMapping'});

    // VPM info
    var itfVPM= attributeMapping.Extension;
    var attrVPM=attributeMapping.Name;
    var attrVPMName = attributeMapping.Name;

    if (!attributeMapping.nlsName) {
      if (attrVPM == "V_Name") attrVPMName = "Title"
      else if (attrVPM == "V_description") attrVPMName = "Description";
    } else {
      attrVPMName = attributeMapping.nlsName;
    }


    var side=attributeMapping.Sync;

    // CAD Info
    var attrCAD=attributeMapping.cadName;
    var attrCADName=attributeMapping.cadName;
    var status=attributeMapping.status;
    var isDefault = attributeMapping["default"];

    UIview.initVariable();

    iCell = UWA.createElement('td', {
      'Align'  : 'left',
      'width'  : widthTable[0],
      'value'  : attrVPM,
      'class': 'attributeXCADMappingField font-3dslight'// font-3dsbold
    }).inject(lineAttr);

    UWA.createElement('p', {
      text   : attrVPMName,
      value  : attrVPM,
    }).inject(iCell);

    var txtSide = XCADMappingNLS.both;
    var valueSide = "<=>";
    if(side==0) {
      valueSide = "<=>";
      txtSide = XCADMappingNLS.both;
    } else if (side<0) {
      valueSide = "=>";
      txtSide =XCADMappingNLS.unilateralDirection.format("Physical Product","CAD");
    } else if (side>0) {
      valueSide = "<=";
      txtSide =XCADMappingNLS.unilateralDirection.format("CAD","Physical Product");
    }
 
    iCell = UWA.createElement('td', {
      'Align' : 'left',
      'width' :widthTable[1],
      'title' : txtSide,
      'value' : valueSide,
      'class': 'attributeXCADMappingField font-3dslight'// font-3dsbold
    }).inject(lineAttr);

   var imgSpanRight = UWA.createElement('span', {
      'class' : 'fonticon fonticon-expand-right'
    })
    
    var imgSpanLeft = UWA.createElement('span', {
      'class' : 'fonticon fonticon-expand-left'
    })
    
    if(side==0) {
      imgSpanLeft.inject(iCell);
      imgSpanRight.inject(iCell);		
    } else if (side<0) {
      imgSpanRight.inject(iCell);
    } else if (side>0) {
      imgSpanLeft.inject(iCell);
    }

    iCell.setStyle("vertical-align", "text-bottom");
 
 
    iCell = UWA.createElement('td', {
      'Align'  : 'left',
      'width'  : widthTable[2],
      'value'  : attrCAD,
      'class': 'attributeXCADMappingField font-3dslight'// font-3dsbold
    }).inject(lineAttr);

    UWA.createElement('p', {
      text   : attrCADName,
      value  : attrCAD,
    }).inject(iCell);


    iCell = UWA.createElement('td', {
      'Align' : 'left',
      'width' : widthTable[3],
      'class': 'attributeXCADMappingField font-3dslight'// font-3dsbold
    }).inject(lineAttr);

    if(!isDefault)
    {
      actionButton = UIview.createDeleteModifyActionsIcon(iCell);


      actionButton.addEvent("onClick", function (e) {
        UIview.removeAttrLineCallBack(lineAttr,attributeMapping, attributeList);

      });
    }

    var isDeployed ;
    if(status==="New") isDeployed ="NewNotDeployed";
    else
    isDeployed = (status==="Deployed")? 'true':'false';


    var invalidStoredMapping = false;
    var messageInvalidStoredMapping = "";

    if (isDeployed === "false")
    {
      if(attributeMapping.VPMAttributeNotDeployed)
      {
        invalidStoredMapping = true;
        messageInvalidStoredMapping = XCADMappingNLS.NonDeployedAttribute;
      }

    }

    var imgSpan,
    imgTitle = XCADMappingNLS.deployedParamtxt,
    imgClass = 'fonticon fonticon-' + '1.5' + 'x fonticon-check',
    iconColor = 'green',
    iconSize = '1.5';

    if (isDeployed === "false") {
      imgClass = 'fonticon fonticon-' + iconSize + 'x fonticon-cog';
      if(!invalidStoredMapping)
      {
        imgTitle =  XCADMappingNLS.notdeployedParamtxt;
        iconColor = 'orange';
      }
      else
      {
        imgTitle = messageInvalidStoredMapping;
        iconColor = 'red';
        attributeMapping.status = "InvalidStored";
      }
    } else if (isDeployed === "NewNotDeployed") {
      imgClass = 'fonticon fonticon-' + iconSize + 'x fonticon-cog';
      imgTitle =  XCADMappingNLS.newNotdeployedParam;
      iconColor = 'black';
    }

    iCell = UWA.createElement('td', {
      'width' : widthTable[4],
      'align' : 'center',
      'title' : imgTitle
    });

    imgSpan = UWA.createElement('span', {
      'class' : imgClass
    }).inject(iCell);

    imgSpan.setStyle("color", iconColor);
    iCell.setStyle("vertical-align", "text-bottom");

    iCell.value = status;
    iCell.inject(lineAttr);

    if(status==="RemovedbyImport")
      UIview.setToRemoveAttrLine(lineAttr);

    if(status==="Removed")
      UIview.setToRemoveAttrLine(lineAttr);

    return lineAttr;
  },


  buildAttributeTableHeading : function (widthTable) {
    var lineTitle,iCell;

    lineTitle = UWA.createElement('tr', {
      'class' : 'success'
    });

    iCell = UWA.createElement('td', {
      'Align' : 'left',
      'width' : widthTable[0],
    }).inject(lineTitle);

    UWA.createElement('h5', {
      text   : XCADMappingNLS.ProductAttr
        //'class': 'font-3dslight'// font-3dsbold
    }).inject(iCell);


    iCell = UWA.createElement('td', {
      'Align' : 'left',
      'width' : widthTable[1],
    }).inject(lineTitle);

    UWA.createElement('h5', {
      text   : XCADMappingNLS.side
    }).inject(iCell);

    iCell = UWA.createElement('td', {
      'Align' : 'left',
      'width' : widthTable[2],
    }).inject(lineTitle);

    UWA.createElement('h5', {
      text   : XCADMappingNLS.CADAttr
    }).inject(iCell);

    iCell = UWA.createElement('td', {
      'Align' : 'left',
      'width' : widthTable[3],
    }).inject(lineTitle);

    UWA.createElement('h5', {
      text   : XCADMappingNLS.actions
        //'class': 'font-3dslight'// font-3dsbold
    }).inject(iCell);

    iCell = UWA.createElement('td', {
      'Align' : 'left',
      'width' : widthTable[4],
    }).inject(lineTitle);

    UWA.createElement('h5', {
      text   : XCADMappingNLS.deployStatus
        //'class': 'font-3dslight'// font-3dsbold
    }).inject(iCell);

    return lineTitle;
  },


  buildMappingLine : function (eltmapping)
  {
    var that=this;

    var CADType,VPMType, CADTypeName, VPMTypeName, ParentVPMType;
    var side,status ,mappingTable,lineMapping,txtSide,iCell,deleteIcon,deleteAction,deleteSpan;
    var removeLineMappingButton,removePropMappingButton,attributeMappingDiv;
    var attributesTable,mappingTable,actionCol,modifySpan,modifyAttributeButton,modifyPop,modifySpan;
    UIview.initVariable();

    CADType = eltmapping.cadType;
    VPMType = eltmapping.Type;
    if(eltmapping.hasOwnProperty('ParentType'))
    	ParentVPMType = eltmapping.ParentType;
    CADTypeName = XCADMappingNLS[eltmapping.cadType] ?  XCADMappingNLS[eltmapping.cadType]: eltmapping.cadType;
    VPMTypeName = eltmapping.VPMObjectName;

    // Filtre sur les VPMReference .. 
    if ((VPMType != 'VPMReference') && (VPMType != 'XCADModelRepReference') && (VPMType != 'Drawing') && (VPMType != 'XCADNonPSBaseRepReference') && (ParentVPMType != 'VPMReference'  && VPMType.startsWith('Aec')) )return undefined;

    // Filtre solid works .. pas de virtual
    if (CADType == 'virtualComponentInstance')  return undefined;
    if (CADType == 'virtualAssemblyInstance')  return undefined;

    side  = "BOTH";
    txtSide="<=>";
    
    status = eltmapping.status;
    mappingTable = UWA.createElement('table', {
      'class': 'tableXCADMapping'
    });//table-bordered

    lineMapping = UWA.createElement('tr', {
      'class' : 'lineXCADMapping'
    }).inject(mappingTable);

    UWA.createElement('td', {'class': 'colXCADMappingType', 'text': "", 'value':""}).inject(lineMapping);

    UWA.createElement('td', {'class': 'colXCADMappingVPMObject', 'text':VPMTypeName, 'value':VPMType}).inject(lineMapping);

    side = UWA.createElement('td', {'class': 'colXCADMappingSide', 'text':txtSide, 'value':side}).inject(lineMapping);

    UWA.createElement('td', {'class': 'colXCADMappingCADType', 'text':CADTypeName, 'value':CADType}).inject(lineMapping);


    // Edition du mapping de type .. plus tard !
    // livr� desactiv�
    if (false)
    {
      actionCol = UWA.createElement('td', {'class': 'colXCADMappingDeleteAction'}).inject(lineMapping);

      deleteAction = ParametersLayoutViewUtilities.createDeleteActionElements("delete line mapping");
      deleteSpan = deleteAction[0];
      removeLineMappingButton = deleteAction[1];
      removePropMappingButton = deleteAction[2];
      deleteSpan.inject(actionCol);


      modifySpan = UWA.createElement('span');

      modifyAttributeButton = new Button({
        className: 'close',
        icon: 'fonticon fonticon-pencil fonticon-1.5x',//value: 'Button', //fonticon-cancel  fonticon-minus-circled
        attributes: {
          disabled: false,
          'aria-hidden' : 'true'
        }
      }).inject(modifySpan);

      modifyPop = new Popover({
        //class: 'parampopover',
        target: modifySpan,//iCell,
        trigger : "hover",
        animate: "true",
        position: "top",
        body: "modify direction",
        title: ''//iParamObj.nlsKey
      });

      modifySpan.inject(actionCol);

      removeLineMappingButton.addEvent("onClick", function (e) {
        UIview.removeTypeMappingLineCallBack.call(this,lineMapping,eltmapping);
      }.bind(that));

    }

    var isDeployed = 'true'; // (status==="deployed")? 'true':'false';

    iCell = UWA.createElement('td', {'class': 'colXCADMappingType', 'text': "", 'value':"deployed"}).inject(lineMapping);

    return mappingTable;

  },



  buildAttributeTable : function (listofAttributesMapping,widthTable) {
    var attributesTable, attrtbody, iCell,lineTitle, lineAttribute,j;


    attributesTable = UWA.createElement('table', {
      'class': 'attrTableXCADMapping table table-condensed'
    });//table-bordered

    attrtbody =  UWA.createElement('tbody', {
      'class': 'attrstbodyXCADMapping'
    }).inject(attributesTable);


    lineTitle = UIview.buildAttributeTableHeading(widthTable);
    lineTitle.inject(attrtbody);

    for (j = 0; j < listofAttributesMapping.length; j++) {
      lineAttribute = UIview.buildAttributeLine.call(this, listofAttributesMapping, listofAttributesMapping[j],widthTable);
      lineAttribute.inject(attrtbody);
    }

    return attributesTable;
  },

  retrieveMappingEntry : function (vpmtype, cadtype,collectionMapping) {
    var EltMapping, foundElt=false, cpt=0;

    while (!foundElt && cpt <collectionMapping.length)
    {
      EltMapping = collectionMapping[cpt];
      if(EltMapping!=undefined)
      {
        if(vpmtype ===EltMapping.Type &&  cadtype === EltMapping.cadType)
          foundElt=true;
        else cpt++
      }

    }
    if (!foundElt) return undefined;
    else return EltMapping;
  },

  retrieveMappingAttrEntry : function (itfVPM, VPMAttr,cadAttr,attributeMappingList) {
    var EltAttrMapping, foundElt=false, cpt=0, VPMAttrName=VPMAttr, cadAttrName=cadAttr;

    while (!foundElt && cpt <attributeMappingList.length)
    {
      EltAttrMapping = attributeMappingList[cpt];
      if(EltAttrMapping!=undefined)
      {
        if( itfVPM === EltAttrMapping.Extension && VPMAttrName ===EltAttrMapping.Name &&  cadAttrName === EltAttrMapping.cadName)
          foundElt=true; 
        else if( itfVPM === undefined && VPMAttrName ===EltAttrMapping.Name &&  cadAttrName === EltAttrMapping.cadName)
          foundElt=true; 
        else cpt++
      }

    }
    if (!foundElt) return undefined;
    else return EltAttrMapping;
  },

  //Change mapping in Deployed  state to remove State
  setToRemoveAttrLine : function (attrLine) {
    var deployAttrcell,imgAttrSpan,i,arrayAction;

    deployAttrcell=attrLine.cells[UIview.cellsAttrIndex.deployFlag];
    
    UIview.setDeletedCellStyle(attrLine.cells[UIview.cellsAttrIndex.VPMAttr]);
    UIview.setDeletedCellStyle(attrLine.cells[UIview.cellsAttrIndex.CADAttr]);
    
    var iconsSide = attrLine.cells[UIview.cellsAttrIndex.side].getElements('span');
    iconsSide.forEach(function(icon){
      icon.setStyle("color", "grey");
    });

    arrayAction = attrLine.cells[UIview.cellsAttrIndex.action].getElements('span');
    arrayAction.forEach(function(action){
      action.hide();
    });

    if(deployAttrcell.value === "Stored" || deployAttrcell.value === "InvalidStored")
    {
      imgAttrSpan = ParametersLayoutViewUtilities.buildImgSpan('trash', '1.5', 'orange');
      deployAttrcell.title = XCADMappingNLS.DeletedStoredNotApplied;
    }
    else
    {
      imgAttrSpan = ParametersLayoutViewUtilities.buildImgSpan('trash', '1.5', 'red');
      deployAttrcell.title = XCADMappingNLS.DeletedNotApplied;
    }

    deployAttrcell.empty();
    deployAttrcell.value = "Removed";

    imgAttrSpan.inject(deployAttrcell);

    //}
  },


  removeAttrLineCallBack : function (attrLine,attributeMapping,listofAttributesMapping) {
    var /*lineAttrMapping = UWA.Event.findElement(e, '.AttrLineMapping'),*/deployAttrcell;
    if(attrLine!="undefined")
    {
      deployAttrcell=attrLine.cells[UIview.cellsAttrIndex.deployFlag];
      //If mapping in New state, delete the line
      if(deployAttrcell.value==="New")
        attrLine.remove();
      else
        //If mapping in deployed state, change the state and the UI to removed
        UIview.setToRemoveAttrLine(attrLine);
    }
    //Update mapping model
    UIview.removeMappingAttr(attributeMapping,listofAttributesMapping);
    //removePop.destroy();
  },


  createDeleteModifyActionsIcon: function(actionCell)
  {
    var deleteSpan, deleteButton, deletePop, modifySpan, modifyButton, modifyPop  ;

    deleteSpan = UWA.createElement('span');
    deleteButton = new Button({
      className: 'close',
      icon: 'fonticon fonticon-trash fonticon-1.5x',//value: 'Button', //fonticon-cancel  fonticon-minus-circled
      attributes: {
        disabled: false,
        'aria-hidden' : 'true'
      }
    }).inject(deleteSpan);
    deletePop = new Popover({
      //class: 'parampopover',
      target: deleteSpan,//iCell,
      trigger : "hover",
      animate: "true",
      position: "top",
      body: XCADMappingNLS.deleteAttrMapping,
      title: ''//iParamObj.nlsKey
    });
    deleteSpan.inject(actionCell);

    return deleteButton;
  },

  removeMappingAttr : function (eltAttrMapping, listOfAttributeMapping) {
    var index;
    if(eltAttrMapping.status==="New" )
    {
      //listOfAttributeMapping.remove(eltAttrMapping);
      index = listOfAttributeMapping.indexOf(eltAttrMapping);
      if(index!=-1)
        listOfAttributeMapping.splice(index,1);
    }
    else if(eltAttrMapping.status==="Stored" || eltAttrMapping.status==="InvalidStored")
      eltAttrMapping.status="RemovedStored";
    else
      eltAttrMapping.status="RemovedDeployed";
  },

  CheckRulesToAddAttrMapping: function(VPMTypeRelInfo,VPMAttrInfo,MxTypeRelInfo,MxAttrInfo, parentSide,VPMObjMappedAttr, MXObjMappedAttr,messageSuffix)
  {

    var VPMArrayVPMToMx=new Array(),VPMArrayMxToVPM=new Array(),VPMArrayBoth=new Array(),MXArrayVPMToMx=new Array(),MXArrayMxToVPM=new Array(),MXArrayBoth=new Array(),result,resultRule1,resultRule2,resultRule3,resultRule4,resultRule5,resultRule6,VPMAttrInfo, MxAttrInfo,VPMAttrRange="",MxAttrRange="";
    result={VPM_To_CAD:true,CAD_To_VPM:true,BOTH:true,message:{VPM_To_CAD:new Array(), CAD_To_VPM:new Array(),BOTH:new Array()}};

    if(VPMObjMappedAttr!=undefined)
    {
      VPMArrayVPMToMx=VPMObjMappedAttr.get("VPM_To_CAD");
      VPMArrayMxToVPM = VPMObjMappedAttr.get("CAD_To_VPM");
      VPMArrayBoth = VPMObjMappedAttr.get("BOTH");
    }
    if(MXObjMappedAttr!=undefined)
    {
      MXArrayVPMToMx=MXObjMappedAttr.get("VPM_To_CAD");
      MXArrayMxToVPM = MXObjMappedAttr.get("CAD_To_VPM");
      MXArrayBoth = MXObjMappedAttr.get("BOTH");
    }

    resultRule1 = UIview.CheckIsNotAlreadyMapped(MXArrayVPMToMx,MXArrayMxToVPM,MXArrayBoth);

    //VPMAttrInfo = UIview.retrieveAttributeInfo(VPMTypeRelInfo,VPMAttr);
    if(VPMAttrInfo!=undefined) VPMAttrRange = VPMAttrInfo.range;
    //MxAttrInfo = UIview.retrieveAttributeInfo(MxTypeRelInfo,MxAttr);
    if(MxAttrInfo!=undefined) MxAttrRange = MxAttrInfo.range;

    resultRule5 =  UIview.CheckIsSameAttrRange(VPMAttrRange,MxAttrRange);

    resultRule6 = UIview.CheckIsAuthorizedAsTarget(MxAttrInfo.itf,MxAttrInfo.id,VPMAttrInfo.itf,VPMAttrInfo.id);

    result.VPM_To_CAD = resultRule1.VPM_To_CAD/* && resultRule2.VPM_To_CAD && resultRule3.VPM_To_CAD && resultRule4.VPM_To_CAD */&& resultRule5.VPM_To_CAD && resultRule6.VPM_To_CAD;
    result.CAD_To_VPM = resultRule1.CAD_To_VPM /*&& resultRule2.CAD_To_VPM && resultRule3.CAD_To_VPM && resultRule4.CAD_To_VPM */&& resultRule5.CAD_To_VPM && resultRule6.CAD_To_VPM;
    result.BOTH = resultRule1.BOTH /*&& resultRule2.BOTH && resultRule3.BOTH && resultRule4.BOTH*/ && resultRule5.BOTH && resultRule6.BOTH;

    Array.prototype.push.apply(result.message.BOTH, resultRule1.message.BOTH);/*Array.prototype.push.apply(result.message.BOTH, resultRule2.message.BOTH);Array.prototype.push.apply(result.message.BOTH, resultRule3.message.BOTH);Array.prototype.push.apply(result.message.BOTH, resultRule4.message.BOTH);*/Array.prototype.push.apply(result.message.BOTH, resultRule5.message.BOTH);Array.prototype.push.apply(result.message.BOTH, resultRule6.message.BOTH);
    Array.prototype.push.apply(result.message.VPM_To_CAD, resultRule1.message.VPM_To_CAD); /*Array.prototype.push.apply(result.message.VPM_To_CAD, resultRule2.message.VPM_To_CAD);Array.prototype.push.apply(result.message.VPM_To_CAD, resultRule3.message.VPM_To_CAD);Array.prototype.push.apply(result.message.VPM_To_CAD, resultRule4.message.VPM_To_CAD);*/Array.prototype.push.apply(result.message.VPM_To_CAD, resultRule5.message.VPM_To_CAD);Array.prototype.push.apply(result.message.VPM_To_CAD, resultRule6.message.VPM_To_CAD);
    Array.prototype.push.apply(result.message.CAD_To_VPM, resultRule1.message.CAD_To_VPM);/*Array.prototype.push.apply(result.message.CAD_To_VPM, resultRule2.message.CAD_To_VPM);Array.prototype.push.apply(result.message.CAD_To_VPM, resultRule3.message.CAD_To_VPM);Array.prototype.push.apply(result.message.CAD_To_VPM, resultRule4.message.CAD_To_VPM);*/Array.prototype.push.apply(result.message.CAD_To_VPM, resultRule5.message.CAD_To_VPM);Array.prototype.push.apply(result.message.CAD_To_VPM, resultRule6.message.CAD_To_VPM);

    return result;
  },

  CheckIsNotAlreadyMapped : function (MXArrayVPMToMx,MXArrayMxToVPM,MXArrayBoth) {

    var result={VPM_To_CAD:true,CAD_To_VPM:true,BOTH:true,message:{VPM_To_CAD:new Array(), CAD_To_VPM:new Array(),BOTH:new Array()}},message="";

    if(MXArrayVPMToMx.length!==0 || MXArrayMxToVPM.length!==0 || MXArrayBoth.length!==0)
    {
      message=XCADMappingNLS.ErrorMatrixAlreadyMapped;
      result.BOTH=false;result.VPM_To_CAD=false;result.CAD_To_VPM=false;
      result.message.BOTH.push(message);result.message.VPM_To_CAD.push(message);result.message.CAD_To_VPM.push(message);
    }
    return result;
  },

  CheckCoherenceWithParentSide : function (parentSide) {

    var result={VPM_To_CAD:true,CAD_To_VPM:true,BOTH:true,message:{VPM_To_CAD:new Array(), CAD_To_VPM:new Array(),BOTH:new Array()}},message="";

    if(parentSide=="VPM_To_CAD")
    {
      message=XCADMappingNLS.ErrorParentSideVPMCAD;
      result.BOTH=false;result.CAD_To_VPM=false;
      result.message.BOTH.push(message);result.message.CAD_To_VPM.push(message);
    }
    else if(parentSide=="CAD_To_VPM")
    {
      message=XCADMappingNLS.ErrorParentSideCADVPM;
      result.BOTH=false;result.VPM_To_CAD=false;
      result.message.BOTH.push(message);result.message.VPM_To_CAD.push(message);
    }
    return result;
  },

  CheckCoherence : function ( VPMArrayVPMToMx,VPMArrayMxToVPM,VPMArrayBoth,MXArrayVPMToMx,MXArrayMxToVPM,MXArrayBoth) {

    var result={VPM_To_CAD:true,CAD_To_VPM:true,BOTH:true,message:{VPM_To_CAD:new Array(), CAD_To_VPM:new Array(),BOTH:new Array()}}, message="";

    if(VPMArrayMxToVPM.length!==0 || MXArrayMxToVPM.length!==0) {
      result.VPM_To_CAD=false;
      message="";
      if(VPMArrayMxToVPM.length!==0)
      {
        message = message +  XCADMappingNLS.ErrorVPMAlreadyUsedAsTargetWithAnotherObject;
        message += UIview.buildAddMappingWarningMessage(VPMArrayMxToVPM,"<=");
      }

      if (MXArrayMxToVPM.length!==0)
      {
        message = message +  XCADMappingNLS.ErrorMatrixAlreadyUsedAsSourceWithAnotherObject;
        message += UIview.buildAddMappingWarningMessage(MXArrayMxToVPM,"<=");
      }

      //message += ". VPM to CAD direction is not possible.";
      //result.message.push(message);
      result.message.VPM_To_CAD.push(message);
    }
    if(VPMArrayVPMToMx.length!==0 || MXArrayVPMToMx.length!==0)
    {
      result.CAD_To_VPM=false;
      message="";
      if(VPMArrayVPMToMx.length!==0)
      {
        message = message + XCADMappingNLS.ErrorVPMAlreadyUsedAsSourceWithAnotherObject;
        message += UIview.buildAddMappingWarningMessage(VPMArrayVPMToMx,"=>");
      }
      if (MXArrayVPMToMx.length!==0)
      {
        message = message +  XCADMappingNLS.ErrorMatrixAlreadyUsedAsTargetWithAnotherObject;
        message += UIview.buildAddMappingWarningMessage(MXArrayVPMToMx,"=>");
      }
      //message += ". CAD to VPM direction is not possible.";
      //result.message.push(message);
      result.message.CAD_To_VPM.push(message);
    }

    return result;
  },


  buildAddMappingWarningMessage : function (mappingArray, direction ) {
    var messageArray = new Array(), mappingMessage = "",  mapping;

    mappingArray.forEach(function(param)
        {
      mapping = param.mapping.element;
      mappingMessage =  mapping.VPMObject + direction + mapping.MatrixObject;
      if(messageArray.indexOf(mappingMessage) === -1)
      {
        messageArray.push(mappingMessage);
      }

        });

    return messageArray.join();
  },

  displayAddMappingWarningMessage : function (messageDiv,popoverInfoMapping ,messages ) {
    var messageList,iconInfo,cpt=0;
    if(messageDiv!=undefined)
    {
      iconInfo = messageDiv.getElement(".InfoAddXCADMapping");
      if(messages.length !==0)
      {
        iconInfo.show();
        messageList =UWA.createElement('ul', {'class' : 'ListAddXCADMappingMessage'});

        for(cpt=0;cpt<messages.length;cpt++)
        {
          UWA.createElement('li', {
            'text':messages[cpt],
          }).inject(messageList);
        }


        popoverInfoMapping.setBody(messageList);
      }
      else
        iconInfo.hide();
    }
  },

  hideAddMappingWarningMessage : function (messageDiv) {
    var iconInfo;
    iconInfo = messageDiv.getElement(".InfoAddXCADMapping");
    if(iconInfo != undefined)
      iconInfo.hide();
  },


  groupAttributeItf : function (listOfAttributeInfo) {
    var mapAttributeInfo = new Map(),i, attributeInfo, mapvalue,mapKey="Default";

    for (i=0; i<listOfAttributeInfo.length;i++)
    {
      attributeInfo = listOfAttributeInfo[i];
      if(attributeInfo.itf!==undefined && attributeInfo.itf!=="") mapKey = "Custo";
      else mapKey="Default";

      mapvalue = mapAttributeInfo.get(mapKey);
      if(mapvalue === undefined)
      {
        mapvalue = new Array();
        mapAttributeInfo.set(mapKey,mapvalue );
      }
      mapvalue.push(attributeInfo);
    }
    return mapAttributeInfo;
  },


  ShowModifyDirectionPanel: function (lineAttr,VPMType,MatrixType,attributeMapping,kindOfMapping) {

    var  iconInfoMessageBOTH,iconInfoMessageVPMCAD,iconInfoMessageCADVPM,divMessageBOTH,
    divMessageVPMCAD, divMessageCADVPM,popoverInfoMappingBOTH,popoverInfoMappingVPMCAD,popoverInfoMappingCADVPM,
    OKBtn, CancelBtn,modalbodydiv, modalbodyTable,modaltbody,lineModal,iCell,iCell1, toggleBoth, toggleVPM, toggleCAD, changeDirectionModal, modifyDirectionTitle ;


    modifyDirectionTitle = UWA.createElement('h4', {
      text   : XCADMappingNLS.ModifyDirectionTitle.format(attributeMapping.VPMAttribute,attributeMapping.MatrixAttribute) ,
    });

    modalbodydiv = UWA.createElement('div', {
      'class': 'CADProductAddXCADMappingDiv',
    })


    modalbodyTable =  UWA.createElement('table', {
      'id': 'CADProductAddXCADMappingTable',
      'class': 'table table-condensed table-hover'
    }).inject(modalbodydiv);


    modaltbody = UWA.createElement('tbody', {
      'class': 'addXCADMappingBody'
    }).inject(modalbodyTable);

    lineModal = UWA.createElement('tr').inject(modaltbody);

    iCell = UWA.createElement('td', {
      'Align' : 'left',
    });

    iCell1 = UWA.createElement('td', {
      'Align' : 'left',
      'width' : '92%'
    }).inject(iCell);

    UWA.createElement('p', {
      text   : XCADMappingNLS.side,
      'class': 'font-3dslight'// font-3dsbold
    }).inject(iCell1);

    iCell.inject(lineModal);

    iCell = UWA.createElement('td', {
      'Align' : 'left',
    }).inject(lineModal);


    toggleBoth =  new Toggle({ name: "optionsRadiosSide", value: "both", className: "primary"}).inject(iCell);
    toggleVPM =  new Toggle({ name: "optionsRadiosSide", value: "VPM to CAD", className: "primary"}).inject(iCell);
    toggleCAD =  new Toggle({ name: "optionsRadiosSide", value: "CAD to VPM", className: "primary"}).inject(iCell);


    var iCell2 = UWA.createElement('td', {
      'Align' : 'left',
    }).inject(lineModal);
    divMessageBOTH = UWA.createElement('div', {'class':'divAddXCADMappingMessage'}).inject(iCell2);
    divMessageVPMCAD = UWA.createElement('div', {'class':'divAddXCADMappingMessage'}).inject(iCell2);
    divMessageCADVPM = UWA.createElement('div', {'class':'divAddXCADMappingMessage'}).inject(iCell2);


    if(attributeMapping.SynchDirection === "BOTH" ) {toggleBoth.hide();divMessageBOTH.hide();}
    if(attributeMapping.SynchDirection === "VPM_To_CAD" ) {toggleVPM.hide();divMessageVPMCAD.hide();}
    if(attributeMapping.SynchDirection === "CAD_To_VPM" ) {toggleCAD.hide();divMessageCADVPM.hide();}



    iconInfoMessageBOTH = UWA.createElement('span', {
      'class' : 'InfoAddMapping fonticon fonticon-info'
    }).inject(divMessageBOTH);
    iconInfoMessageBOTH.hide();
    popoverInfoMappingBOTH = new Popover({
      target   : iconInfoMessageBOTH,
      trigger  : "hover",
      animate  : "true",
      position : 'left',
      body     : "",
      title    : 'BOTH'
    });

    iconInfoMessageVPMCAD = UWA.createElement('span', {
      'class' : 'InfoAddMapping fonticon fonticon-info'
    }).inject(divMessageVPMCAD);
    iconInfoMessageVPMCAD.hide();
    popoverInfoMappingVPMCAD = new Popover({
      target   : iconInfoMessageVPMCAD,
      trigger  : "hover",
      animate  : "true",
      position : 'left',
      body     : "",
      title    : 'VPM to CAD'
    });

    iconInfoMessageCADVPM = UWA.createElement('span', {
      'class' : 'InfoAddMapping fonticon fonticon-info'
    }).inject(divMessageCADVPM);
    iconInfoMessageCADVPM.hide();
    popoverInfoMappingCADVPM = new Popover({
      target   : iconInfoMessageCADVPM,
      trigger  : "hover",
      animate  : "true",
      position : 'left',
      body     : "",
      title    : 'CAD to VPM'
    });

    UWA.createElement('ul', {'class' : 'ListAddXCADMappingMessage'}).inject(divMessageBOTH);
    UWA.createElement('ul', {'class' : 'ListAddXCADMappingMessage'}).inject(divMessageVPMCAD);
    UWA.createElement('ul', {'class' : 'ListAddXCADMappingMessage'}).inject(divMessageCADVPM);


    var listOfVPMTypeRel,listOfMxTypeRel,listOfLinkedMapping,attrMappingMap,listOfMappedMXattr,listOfMappedVPMattr, VPMTypeRelInfo, MatrixTypeRelInfo, directionAvailable,authorizedDirection,
    messagesBOTH,messagesVPMCAD,messagesCADVPM;

    if(kindOfMapping.toUpperCase()==="TYPE")
    {
      listOfVPMTypeRel = this.listOfCustoVPMType;
      listOfMxTypeRel = this.listOfCustoPartType;
    }
    else
    {
      listOfVPMTypeRel = this.listOfCustoVPMRel;
      listOfMxTypeRel= this.listOfCustoEBOMRel;
    }


    VPMTypeRelInfo = listOfVPMTypeRel.get(VPMType);
    MatrixTypeRelInfo = listOfMxTypeRel.get (MatrixType);

    OKBtn = new Button({
      value : "Apply",
      id    : "modalOKButton",
      className : 'btn primary'
    });
    //OKBtn.disable();

    CancelBtn = new Button({
      value : "Cancel",
      id    : 'modalCancelButton',
      className : 'btn default'
    });


    if(VPMTypeRelInfo !== undefined  && MatrixTypeRelInfo !== undefined)
    {
      listOfLinkedMapping = UIview.getListOfLinkedMapping(VPMTypeRelInfo,MatrixTypeRelInfo,kindOfMapping,listOfVPMTypeRel,listOfMxTypeRel,this.listofTypeRelMapping);
      attrMappingMap = UIview.buildAttributesMappedWith(listOfLinkedMapping,attributeMapping);
      listOfMappedMXattr = (attrMappingMap.VPM).get(attributeMapping.VPMAttribute);
      listOfMappedVPMattr = (attrMappingMap.MX).get(attributeMapping.MatrixAttribute);

      directionAvailable = UIview.CheckRulesToAddAttrMapping(VPMTypeRelInfo, attributeMapping.VPMAttribute ,MatrixTypeRelInfo,attributeMapping.MatrixAttribute,kindOfMapping, listOfMappedMXattr, listOfMappedVPMattr);

      if(directionAvailable!==undefined)
      {
        if(!directionAvailable.BOTH) toggleBoth.setDisabled(true);
        if(!directionAvailable.VPM_To_CAD) toggleVPM.setDisabled(true);
        if(!directionAvailable.CAD_To_VPM) toggleCAD.setDisabled(true);

        messagesBOTH = directionAvailable.message.BOTH;
        messagesVPMCAD = directionAvailable.message.VPM_To_CAD;
        messagesCADVPM = directionAvailable.message.CAD_To_VPM;
      }


      if( !toggleBoth.isDisabled() && attributeMapping.SynchDirection !== "BOTH") toggleBoth.check();
      else if(!toggleVPM.isDisabled()&& attributeMapping.SynchDirection !== "VPM_To_CAD") toggleVPM.check();
      else if(!toggleCAD.isDisabled()&& attributeMapping.SynchDirection !== "CAD_To_VPM") toggleCAD.check();

      if(!toggleCAD.isChecked() && !toggleVPM.isChecked() && !toggleBoth.isChecked())
        OKBtn.setDisabled(true);


      UIview.displayAddMappingWarningMessage (divMessageBOTH,popoverInfoMappingBOTH ,messagesBOTH );
      UIview.displayAddMappingWarningMessage (divMessageVPMCAD,popoverInfoMappingVPMCAD ,messagesVPMCAD );
      UIview.displayAddMappingWarningMessage (divMessageCADVPM,popoverInfoMappingCADVPM ,messagesCADVPM );
    }


    changeDirectionModal = new Modal({
      className: 'add-mapping-modal',
      closable: true,
      header  :modifyDirectionTitle,
      body    : modalbodydiv,
      footer  : [ OKBtn, CancelBtn ]
    });

    CancelBtn.addEvent("onClick", function (e) {
      UWA.log(e);//that.onCancelCalled();
      changeDirectionModal.hide();
    });

    OKBtn.addEvent("onClick", function (e) {
      var txtSide,deployAttrcell,imgAttrSpan,directionAttributeCell, direction;

      txtSide;
      if(toggleBoth.isChecked())
      {
        txtSide="BOTH";
        direction = UIview.direction.BOTH;
      }
      else if (toggleVPM.isChecked())
      {
        txtSide="VPM_To_CAD";
        direction = UIview.direction.VPM_To_CAD;
      }
      else if (toggleCAD.isChecked())
      {
        txtSide="CAD_To_VPM";
        direction = UIview.direction.CAD_To_VPM;
      }
      else
      {
        txtSide="BOTH";
        direction = UIview.direction.BOTH;
      }

      attributeMapping.SynchDirection = txtSide;

      directionAttributeCell = lineAttr.cells[UIview.cellsAttrIndex.side];
      directionAttributeCell.value=direction;
      directionAttributeCell.empty();
      UWA.createElement('p', {
        text   : direction,
      }).inject(directionAttributeCell);


      if(attributeMapping.status === "Deployed" || attributeMapping.status === "Stored")
      {

        if(attributeMapping.status === "Stored")
        attributeMapping.status = "ModifiedStored";
        else
          attributeMapping.status = "ModifiedDeployed";

        //lineAttr.cells[UIview.cellsAttrIndex.action].hide();
        var arrayAction = lineAttr.cells[UIview.cellsAttrIndex.action].getElements('span');
        arrayAction.forEach(function(action){
          action.hide();
        });

        deployAttrcell=lineAttr.cells[UIview.cellsAttrIndex.deployFlag];
        deployAttrcell.empty();
        deployAttrcell.value = "Modified";
        deployAttrcell.title = XCADMappingNLS.ModifiedNotApplied;
        imgAttrSpan = ParametersLayoutViewUtilities.buildImgSpan('pencil', '1.5', 'red');
        imgAttrSpan.inject(deployAttrcell);
      }
      changeDirectionModal.hide();


    });


    changeDirectionModal.inject(this.contentDiv);
    changeDirectionModal.show();




},



  BuildAddMappingPanel : function ( title, VPMSelectPlaceHolder, MatrixSelectPlaceHolder, labelVPMtxt, labelMatrixtxt, labelProductToPart, labelPartToProduct, prefixToAdd,cadTypeName,typeofMX,VPMObjectName,VPMSelectExtPlaceHolder,iscusto,isCloudOrPOD,integrationName,parentType) {


    var addMappingTitle, labelVPM, labelMatrix,  iconInfoMessageBOTH,iconInfoMessageVPMCAD,iconInfoMessageCADVPM,divMessageBOTH,
    divMessageVPMCAD, divMessageCADVPM,popoverInfoMappingBOTH,popoverInfoMappingVPMCAD,popoverInfoMappingCADVPM,
    OKBtn, CancelBtn,modalbodydiv, modalbodyTable,modaltbody,lineModal,iCell,iCell1, toggleBoth, toggleVPM, toggleCAD,selectVPM, cadAttr, addMappingModal, selectWinExt, selectWinAttr ;

	var that=this;
    addMappingTitle = UWA.createElement('h4', {
      text   : title,
    });

    modalbodydiv = UWA.createElement('div', {
      'class': 'CADProductAddXCADMappingDiv',
    })

    modalbodyTable =  UWA.createElement('table', {
      'id': 'CADProductAddXCADMappingTable',
      'class': 'table table-condensed table-hover'
    }).inject(modalbodydiv);


    modaltbody = UWA.createElement('tbody', {
      'class': 'addXCADMappingBody'
    }).inject(modalbodyTable);

    lineModal = UWA.createElement('tr').inject(modaltbody);

    iCell = UWA.createElement('td', {
      'Align' : 'left',
    });

    iCell1 = UWA.createElement('td', {
      'Align' : 'left',
      'width' : '92%'
    }).inject(iCell);

 	if(typeofMX!=null && cadTypeName === typeofMX || iscusto==true){
		
	labelVPM = UWA.createElement('p', {
			text   : VPMObjectName+" "+XCADMappingNLS.extension ,
			'class': 'font-3dslight'// font-3dsbold
		}).inject(iCell1);

    iCell.inject(lineModal);

    iCell = UWA.createElement('td', {
      'Align' : 'left',
    }).inject(lineModal);

	 selectWinExt= new Select({
		nativeSelect: true,
		placeholder: VPMSelectExtPlaceHolder,
		multiple: false,
	});
    selectWinExt.inject(iCell);
	lineModal = UWA.createElement('tr').inject(modaltbody);

    iCell = UWA.createElement('td', {
      'Align' : 'left',
    });

    iCell1 = UWA.createElement('td', {
      'Align' : 'left',
      'width' : '92%'
    }).inject(iCell);
	
	labelVPM = UWA.createElement('p', {
			text   : labelVPMtxt ,
			'class': 'font-3dslight'// font-3dsbold
		}).inject(iCell1);

    iCell.inject(lineModal);

    iCell = UWA.createElement('td', {
      'Align' : 'left',
    }).inject(lineModal);

	 selectWinAttr= new Select({
		nativeSelect: true,
		placeholder: VPMSelectPlaceHolder,
		multiple: false,
	});
    selectWinAttr.inject(iCell);
	lineModal = UWA.createElement('tr').inject(modaltbody);

    iCell = UWA.createElement('td', {
      'Align' : 'left',
    });

    iCell1 = UWA.createElement('td', {
      'Align' : 'left',
      'width' : '92%'
    }).inject(iCell);

	}else{
    labelVPM = UWA.createElement('p', {
      text   : labelVPMtxt ,
      'class': 'font-3dslight'// font-3dsbold
    }).inject(iCell1);

    iCell.inject(lineModal);


    iCell = UWA.createElement('td', {
      'Align' : 'left',
    }).inject(lineModal);

    selectVPM =  new Select({
      nativeSelect: true,
      placeholder: VPMSelectPlaceHolder,
      multiple: false,
    });
    selectVPM.inject(iCell);

    lineModal = UWA.createElement('tr').inject(modaltbody);

    iCell = UWA.createElement('td', {
      'Align' : 'left',
    });

    iCell1 = UWA.createElement('td', {
      'Align' : 'left',
      'width' : '92%'
    }).inject(iCell);
}
    labelMatrix = UWA.createElement('p', {
      text   : labelMatrixtxt ,
      'class': 'font-3dslight'// font-3dsbold
    }).inject(iCell1);

    iCell.inject(lineModal);


    iCell = UWA.createElement('td', {
      'Align' : 'left',
    }).inject(lineModal);

    cadAttr = new Text({
      placeholder: "...",
      id : 'cadAttrName',
      attributes: {
        value: '',
        multiline: false,
        disabled: false
      }
    });
    cadAttr.inject(iCell);

    lineModal = UWA.createElement('tr').inject(modaltbody);

    iCell = UWA.createElement('td', {
      'Align' : 'left',
    });

    iCell1 = UWA.createElement('td', {
      'Align' : 'left',
      'width' : '92%'
    }).inject(iCell);

    UWA.createElement('p', {
      text   : XCADMappingNLS.side,
      'class': 'font-3dslight'// font-3dsbold
    }).inject(iCell1);

    iCell.inject(lineModal);

    iCell = UWA.createElement('td', {
      'Align' : 'left',
    }).inject(lineModal);

    toggleBoth =  new Toggle({ name: "optionsRadiosSide", value: XCADMappingNLS.both, className: "primary"}).inject(iCell);
    toggleBoth.setCheck(true);
    toggleVPM =  new Toggle({ name: "optionsRadiosSide", value: labelProductToPart, className: "primary"}).inject(iCell);
    toggleCAD =  new Toggle({ name: "optionsRadiosSide", value: labelPartToProduct, className: "primary"}).inject(iCell);

    var iCell2 = UWA.createElement('td', {
      'Align' : 'left',
    }).inject(lineModal);
    divMessageBOTH = UWA.createElement('div', {'class':'divAddXCADMappingMessage'}).inject(iCell2);
    divMessageVPMCAD = UWA.createElement('div', {'class':'divAddXCADMappingMessage'}).inject(iCell2);
    divMessageCADVPM = UWA.createElement('div', {'class':'divAddXCADMappingMessage'}).inject(iCell2);


    iconInfoMessageBOTH = UWA.createElement('span', {
      'class' : 'InfoAddXCADMapping fonticon fonticon-info'
    }).inject(divMessageBOTH);
    iconInfoMessageBOTH.hide();
    popoverInfoMappingBOTH = new Popover({
      target   : iconInfoMessageBOTH,
      trigger  : "hover",
      animate  : "true",
      position : 'left',
      body     : "",
      title    : 'BOTH'
    });

    iconInfoMessageVPMCAD = UWA.createElement('span', {
      'class' : 'InfoAddXCADMapping fonticon fonticon-info'
    }).inject(divMessageVPMCAD);
    iconInfoMessageVPMCAD.hide();
    popoverInfoMappingVPMCAD = new Popover({
      target   : iconInfoMessageVPMCAD,
      trigger  : "hover",
      animate  : "true",
      position : 'left',
      body     : "",
      title    : 'Product to CAD'
    });

    iconInfoMessageCADVPM = UWA.createElement('span', {
      'class' : 'InfoAddXCADMapping fonticon fonticon-info'
    }).inject(divMessageCADVPM);
    iconInfoMessageCADVPM.hide();
    popoverInfoMappingCADVPM = new Popover({
      target   : iconInfoMessageCADVPM,
      trigger  : "hover",
      animate  : "true",
      position : 'left',
      body     : "",
      title    : 'CAD to Product'
    });

    UWA.createElement('ul', {'class' : 'ListAddXCADMappingMessage'}).inject(divMessageBOTH);
    UWA.createElement('ul', {'class' : 'ListAddXCADMappingMessage'}).inject(divMessageVPMCAD);
    UWA.createElement('ul', {'class' : 'ListAddXCADMappingMessage'}).inject(divMessageCADVPM);


    OKBtn = new Button({
      value : XCADMappingNLS.Apply,
      id    : "modalOKButton",
      className : 'btn primary'
    });
    OKBtn.disable();

    CancelBtn = new Button({
      value : XCADMappingNLS.Cancel,
      id    : 'modalCancelButton',
      className : 'btn default'
    });


    addMappingModal = new Modal({
      className: 'add-mapping-modal',
      closable: true,
      header  :addMappingTitle,
      body    : modalbodydiv,
      footer  : [ OKBtn, CancelBtn ]
    });


   if(cadTypeName!=null && cadTypeName != typeofMX && iscusto==false){
    selectVPM.addEvent("onChange",  function (e) {
      if( (selectVPM.getSelection(false)).length!=0) {
	cadAttr.enable();
        var myValue = selectVPM.getSelection(false)[0].value;
        if (myValue.contains('.')) {
          myValue = myValue.split('.')[1];

          toggleBoth.enable();
          toggleBoth.setCheck(true);
          toggleVPM.enable();
          toggleCAD.enable();
      
        } else {
          // we are on a core attribute by default allow only MxToCAD
          toggleBoth.disable();
          toggleVPM.setCheck(true);
          toggleVPM.disable();
          toggleCAD.disable();
        }

        // adding default prefix
        myValue = prefixToAdd+myValue;
 
        cadAttr.setValue(myValue);
        OKBtn.enable();
      } else {
	cadAttr.disable();
	cadAttr.setValue('');
        OKBtn.disable();
      }
    });
}else{
	selectWinExt.addEvent("onChange",  function (e) {
      if( (selectWinExt.getSelection(false)).length!=0) {
        var myValue = selectWinExt.getSelection(false)[0].value;
	   var datatoSend;
       var url = URLHandler.getURL() + "/resources/xcadparam/gco/attributesofextension?integration="+integrationName+"&extension="+myValue+"&tenant=" + URLHandler.getTenant(),datatoSend;
      
      WAFData.authenticatedRequest(url, {
        timeout: 250000,
        method: 'GET',
        data: JSON.stringify(datatoSend),
        type: 'json',
        
        headers: {
          'Content-Type' : 'application/json',
          'Accept' : 'application/json',
          'Accept-Language' : widget.lang
        },

        onFailure : function (json) {
	        console.log(json);
        },
        
        onComplete: function(json) {
		if(iscusto==true){
	 		toggleCAD.enable();
            toggleCAD.setCheck(true);
            toggleBoth.enable();
            toggleVPM.enable();
		}else{
           toggleCAD.disable();
           toggleCAD.setCheck(true);
           toggleBoth.disable();
           toggleVPM.disable();
		}
		  addEltToSelectAttr(json.attribute,selectWinAttr);
        }
      }); 

    }else{
	//IR-930786-3DEXPERIENCER2022x
	Mask.mask(modalbodydiv);
	 var url;
	var datatoSend;
	url = URLHandler.getURL() + "/resources/xcadparam/gco/listofattributesfortype?type="+cadTypeName+"&tenant=" + URLHandler.getTenant()+"&integration="+integrationName+"&isTypeCustom="+iscusto,datatoSend;

	WAFData.authenticatedRequest(url, {
    timeout: 250000,
    method: 'GET',
    data: JSON.stringify(datatoSend),
    type: 'json',

    headers: {
      'Content-Type' : 'application/json',
      'Accept' : 'application/json'
    },

    onFailure : function (json) {
		Mask.unmask(modalbodydiv);

		   console.log(json);
    },

    onComplete: function(json) {
		Mask.unmask(modalbodydiv);

      var url2 = URLHandler.getURL() + "/resources/xcadparam/gco/listextraatt?type="+parentType+"&tenant=" + URLHandler.getTenant()+"&integration="+integrationName,datatoSend;

      WAFData.authenticatedRequest(url2, {
        timeout: 250000,
        method: 'GET',
        data: JSON.stringify(datatoSend),
        type: 'json',

        headers: {
          'Content-Type' : 'application/json',
          'Accept' : 'application/json'
        },

        onFailure : function (json2) {
			Mask.unmask(modalbodydiv);

		   console.log(json);
        },

        onComplete: function(json2) {
		Mask.unmask(modalbodydiv);

          if (json2.attributeDescription) {
            json.attributeDescription = json.attributeDescription.concat(json2.attributeDescription);
          }
			that.addEltToSelectNoExtAttr(json.attributeDescription,selectWinAttr);
        }
      });
    }
  	});
	}
	});
	
	 

	function addEltToSelectAttr(value, select,filterForVPM) {
    var i, attributeInfo,option,listOfEnableOption = new Array();
    for (i=0; i<value.length;i++)
    {
      attributeInfo = value[i];
		if(attributeInfo.nlsName.length!=0)
    	  	option = {label:attributeInfo.nlsName + " ("+attributeInfo.type+")", value:attributeInfo.fullAttributeName};
     	        else
    	  	option = {label:attributeInfo.attributeName +" ("+attributeInfo.type+")", value:attributeInfo.fullAttributeName}; 

      listOfEnableOption.push(option);
   }

	select.remove();

    listOfEnableOption.forEach(function(optionSelect){
      select.add(optionSelect );
      select.enable(optionSelect);
    });

  }
	
	
	 selectWinAttr.addEvent("onChange",  function (e) {
      if( (selectWinAttr.getSelection(false)).length!=0) {
	cadAttr.enable();
        var myValue = selectWinAttr.getSelection(false)[0].value;
        if (myValue.contains('.')) {
          myValue = myValue.split('.')[1];
		//IR-986673-3DEXPERIENCER2023x
			if(myValue.contains("@@")){
			 myValue = myValue.split('@@')[0];
			}
		  toggleCAD.enable();

	      toggleBoth.setCheck(true);
	      toggleBoth.enable();
	      toggleVPM.enable();
        }else if(myValue.contains("@@")) {
			//parent's type attribute mapping
		 	 	var syncValue=myValue.split('@@')[1];
			 	myValue = myValue.split('@@')[0];
				//both mapping
				if(syncValue==0){
		          toggleBoth.enable();
		          toggleBoth.setCheck(true);
		          toggleVPM.enable();
		          toggleCAD.enable();
				}else if(syncValue==1)	{
				//cad to mx attribute mapping
				  toggleBoth.disable();
		          toggleCAD.setCheck(true);
		          toggleVPM.disable();
		          toggleCAD.disable();
				}else{
				  //mx to cad attribute mapping
				  toggleBoth.disable();
		          toggleVPM.setCheck(true);
		          toggleVPM.disable();
		          toggleCAD.disable();
				}	
	       }else {
          // we are on a core attribute by default allow only MxToCAD
 				  myValue = myValue.split('@@')[0];
        		  toggleBoth.disable();
       		      toggleVPM.setCheck(true);
         	      toggleVPM.disable();
          		  toggleCAD.disable();
        	}

		if(iscusto==true && isCloudOrPOD==true)
		{
			if (myValue.contains('__')) {
		   		myValue=myValue.substring(0,myValue.lastIndexOf("__")).trim();
			}
		}
        // adding default prefix
        myValue = prefixToAdd+myValue;
 
        cadAttr.setValue(myValue);
        OKBtn.enable();
      } else {
	cadAttr.disable();
	cadAttr.setValue('');
        OKBtn.disable();
      }
    });
}

    cadAttr.addEvent("onChange", function (e) {
      
      if( (cadAttr.getValue().length==0)) {
        OKBtn.disable();
      } else {
        if((selectVPM.getSelection(false)).length!=0 || (selectWinAttr.getSelection(false)).length!=0 || (selectWinExt.getSelection(false)).length!=0 ) {
          OKBtn.enable();
        } else {
          OKBtn.disable();
        }
      }
    });

    return [addMappingModal, {selectVPM:selectVPM,cadAttr:cadAttr}, {toggle:toggleVPM, div:divMessageVPMCAD, popover:popoverInfoMappingVPMCAD},{toggle:toggleCAD, div:divMessageCADVPM, popover:popoverInfoMappingCADVPM},{toggle:toggleBoth, div:divMessageBOTH, popover:popoverInfoMappingBOTH},{OKButton:OKBtn, CancelButton:CancelBtn },{selectWinExt:selectWinExt,selectWinAttr:selectWinAttr}];
  },

 	addEltToSelectNoExtAttr : function (value, select) {
    var i, attributeInfo,attributeName,attributeItf,position,option,listOfEnableOption = new Array(), listOfDisableOption=new Array();
    for (i=0; i<value.length;i++)
    {
      attributeInfo = value[i];

      attributeName = attributeInfo.id;
      if(attributeInfo.nlsName.length!=0)
    	  option = {label:attributeInfo.nlsName + " ("+attributeInfo.type+")", value:attributeInfo.m1Name+"@@"+attributeInfo.sync};
      else
    	  option = {label:attributeInfo.internalName + " ("+attributeInfo.type+")", value:attributeInfo.m1Name+"@@"+attributeInfo.sync};
      listOfEnableOption.push(option);
    }
	select.remove();
    listOfEnableOption.forEach(function(optionSelect){
      select.add(optionSelect );
      select.enable(optionSelect);
    });

    listOfDisableOption.forEach(function(optionSelect){
      select.add( optionSelect);
      select.disable(optionSelect);

    });

  },

        setDeletedCellStyle : function (iCell) {
            var previousVal = iCell.value,
            previousTxt = iCell.getText();
            if(previousTxt === undefined) previousTxt = previousVal;
            iCell.empty();
            UWA.createElement('del', {
                text   : previousTxt,
                value  : previousVal,
            }).inject(iCell);
        },

        setNormalCellStyle : function (iCell) {
            var previousVal = iCell.value,
            previousTxt = iCell.getText();
            if(previousTxt === undefined) previousTxt = previousVal;
            iCell.empty();
            UWA.createElement('p', {
                text   : previousTxt,
                value  : previousVal,
            }).inject(iCell);
        },


}



return UIview;
});

/**
* @quickreview  KB9 21:10:25 creation
*/

define('DS/ParameterizationSkeleton/Views/ParameterizationApriso3DExperience/Apriso3DExpConfigurationLayoutView',
    [
    'UWA/Core',
    'DS/ParameterizationSkeleton/Views/DELConfigurationParameterization/DELConfigurationLayoutView',
    'DS/ParameterizationSkeleton/Views/ParameterizationApriso3DExperience/Apriso3DExpConfigurationFamilyView'
    ],
    function (
      UWA,
      DELConfigurationLayoutView,
      Apriso3DExpConfigurationFamilyView
    )
  {

  'use strict';

  var Apriso3DExpConfigurationLayoutView = DELConfigurationLayoutView.extend({

    /*
    * init
    */
    init : function init(options)
    {
      var that = this;
      this._parent(options);
    },

    /*
    * onCompleteRequestParameters
    */
    onCompleteRequestParameters : function onCompleteRequestParameters() {
      //removeApply Reset div
      var eltUI = document.getElementById("ApplyResetDiv");
      if (eltUI)
      {
          var parentNode = eltUI.getParent();
          parentNode.removeChild(eltUI);
      }

      this._parent();
    },

    /*
    * buildParameterLine
    */
    buildParameterLine : function (iParamObj, familyID, familytbody, popoverPosition) {

      var that = this;
      var args = iParamObj.argument;
      for (var i=0;i<args.length;i++)
      {
        var arg = args[i];
        if (arg && arg.defaultValue === "DELConfigurationTreeListView")
        {
          //this.nbofShownParameters++;
          var contentTreeView = UWA.createElement('div');

          var options = {};
          options.xmlDoc = that._xmlMap.get(arg.id);
          options.domainid = that._domainID;
          options.familyid = familyID;
          options.parameterid = iParamObj.id;
          options.argid = arg.id;

          options.treeListViewNls = that._xmlNls.get(arg.id)[0];
          options.modalViewNls = that._xmlNls.get(arg.id)[1];
          options.nodeTreeViewNls = that._xmlNls.get(arg.id)[2];

          //var familyView = new Apriso3DExpConfigurationFamilyView(options);
          that._familyView = new Apriso3DExpConfigurationFamilyView(options);
          that._listOfFamilyViews.push(that._familyView);

          var treelistViewContent = that._familyView.buildFamilyContent();
          treelistViewContent.inject(familytbody);
        }
        else
          this._parent(iParamObj, familyID, familytbody, popoverPosition);
      }
    }

    /*
    * buildFamilyItemContent
    */
    /*buildFamilyItemContent : function buildFamilyItemContent(iFamily, familyPosition) {
      var that = this;

      if (that._xmlMap.get(iFamily.id))
      {
        this.nbofShownParameters++;
        var contentTreeView = UWA.createElement('div');

        var options = {};
        options.xmlDoc = that._xmlMap.get(iFamily.id);
        options.domainid = that._domainID;

        var familyView = new Apriso3DExpConfigurationFamilyView(options);
        return familyView.buildFamilyContent(iFamily, familyPosition);
        //family.inject(contentTreeView);
      }
      else
        return this._parent(iFamily, familyPosition);
    }*/

  });



  return Apriso3DExpConfigurationLayoutView;
});

/**
* @quickreview  KB9 21:10:25 creation
*/

define('DS/ParameterizationSkeleton/Views/ParameterizationApriso3DExperience/Apriso3DExpConfigurationParentView',
		[
	 'UWA/Core',
	 'DS/ParameterizationSkeleton/Views/ParametersParentView',
	 'DS/ParameterizationSkeleton/Views/ParameterizationApriso3DExperience/Apriso3DExpConfigurationLayoutView'
	 ],
	 function (
		 UWA,
		 ParametersParentView,
		 Apriso3DExpConfigurationLayoutView
		)
{

	'use strict';


	var Apriso3DExpConfigurationParentView = ParametersParentView.extend({

		init: function (options) {
			options = UWA.clone(options || {}, false);
			this._domainID = options.domainid;
			this._parent(options);
		},

		setup: function (options) {
			UWA.log('Apriso3DExpConfigurationParentView Layout::setup!');
			UWA.log(options);

		},

		render : function()
		{
			var that = this;
			var options = this.options;

		  var layoutView = new Apriso3DExpConfigurationLayoutView(options);
			return layoutView.render();
		}
	});

	return Apriso3DExpConfigurationParentView;
});

/**
* @quickreview  ROW 22:11:08 creation
*/

define('DS/ParameterizationSkeleton/Views/PPRSynchronizationLifeCycle/DELLifeCycleRulesLayoutView',
    [
    'UWA/Core',
    'DS/ParameterizationSkeleton/Views/DELConfigurationParameterization/DELConfigurationLayoutView',
    'DS/ParameterizationSkeleton/Views/PPRSynchronizationLifeCycle/DELLifeCycleRulesFamilyView'
    ],
    function (
      UWA,
      DELConfigurationLayoutView,
      DELLifeCycleRulesFamilyView
    )
  {

  'use strict';

  var DELLifeCycleRulesLayoutView = DELConfigurationLayoutView.extend({

    /*
    * init
    */
    init : function init(options)
    {
      var that = this;
      this._parent(options);
    },

    /*
    * onCompleteRequestParameters
    */
    onCompleteRequestParameters : function onCompleteRequestParameters() {
      //removeApply Reset div
      var eltUI = document.getElementById("ApplyResetDiv");
      if (eltUI)
      {
          var parentNode = eltUI.getParent();
          parentNode.removeChild(eltUI);
      }

      this._parent();
    },

    /*
    * buildParameterLine
    */
    buildParameterLine : function (iParamObj, familyID, familytbody, popoverPosition) {

      var that = this;
      var args = iParamObj.argument;
      for (var i=0;i<args.length;i++)
      {
        var arg = args[i];
        if (arg && arg.defaultValue === "DELConfigurationTreeListView")
        {
          //this.nbofShownParameters++;
          var contentTreeView = UWA.createElement('div');

          var options = {};
          options.xmlDoc = that._xmlMap.get(arg.id);
          options.domainid = that._domainID;
          options.familyid = familyID;
          options.parameterid = iParamObj.id;
          options.argid = arg.id;

          options.treeListViewNls = that._xmlNls.get(arg.id)[0];
          options.modalViewNls = that._xmlNls.get(arg.id)[1];
          options.nodeTreeViewNls = that._xmlNls.get(arg.id)[2];

          //var familyView = new DELLifeCycleRulesFamilyView(options);
          that._familyView = new DELLifeCycleRulesFamilyView(options);
          that._listOfFamilyViews.push(that._familyView);

          var treelistViewContent = that._familyView.buildFamilyContent();
          treelistViewContent.inject(familytbody);
        }
        else
          this._parent(iParamObj, familyID, familytbody, popoverPosition);
      }
    }

    /*
    * buildFamilyItemContent
    */
    /*buildFamilyItemContent : function buildFamilyItemContent(iFamily, familyPosition) {
      var that = this;

      if (that._xmlMap.get(iFamily.id))
      {
        this.nbofShownParameters++;
        var contentTreeView = UWA.createElement('div');

        var options = {};
        options.xmlDoc = that._xmlMap.get(iFamily.id);
        options.domainid = that._domainID;

        var familyView = new DELLifeCycleRulesFamilyView(options);
        return familyView.buildFamilyContent(iFamily, familyPosition);
        //family.inject(contentTreeView);
      }
      else
        return this._parent(iFamily, familyPosition);
    }*/

  });



  return DELLifeCycleRulesLayoutView;
});

/**
* @quickreview  ROW 22:11:08 creation
*/

define('DS/ParameterizationSkeleton/Views/PPRSynchronizationLifeCycle/DELLifeCycleRulesParentView',
		[
	 'UWA/Core',
	 'DS/ParameterizationSkeleton/Views/ParametersParentView',
	 'DS/ParameterizationSkeleton/Views/PPRSynchronizationLifeCycle/DELLifeCycleRulesLayoutView'
	 ],
	 function (
		 UWA,
		 ParametersParentView,
		 DELLifeCycleRulesLayoutView
		)
{

	'use strict';


	var DELLifeCycleRulesParentView = ParametersParentView.extend({

		init: function (options) {
			options = UWA.clone(options || {}, false);
			this._domainID = options.domainid;
			this._parent(options);
		},

		setup: function (options) {
			UWA.log('DELLifeCycleRulesParentView Layout::setup!');
			UWA.log(options);

		},

		render : function()
		{
			var that = this;
			var options = this.options;

		  var layoutView = new DELLifeCycleRulesLayoutView(options);
			return layoutView.render();
		}
	});

	return DELLifeCycleRulesParentView;
});

/*global define, widget, document, setTimeout, console, clearTimeout, FileReader, WUXManagedFontIcons*/
/*jslint plusplus: true*/
/*jslint nomen: true*/
/*! Copyright 2017, Dassault Systemes. All rights reserved. */
/*@fullReview  CN1     18/05/15 2019xBeta2 Mapping Widget*/
define('DS/ParameterizationSkeleton/Views/ParameterizationXCAD/ParamXCADLayoutView',
[
 'UWA/Core',
 'UWA/Class/View',
 'DS/UIKIT/Modal',
 'DS/UIKIT/Popover',
 'DS/UIKIT/Mask',
 'DS/UIKIT/Scroller',
 'DS/ParameterizationSkeleton/Views/ParametersLayoutViewUtilities',
 'DS/ParameterizationSkeleton/Views/ParameterizationXCAD/XCADViewUtilities',
 'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler',
 'DS/UIKIT/Input/Button',
 'DS/UIKIT/Input/Select',
 'DS/UIKIT/Input/Toggle',
 'DS/UIKIT/Alert',
 'i18n!DS/ParameterizationSkeleton/assets/nls/XCADMappingNLS',
 'i18n!DS/ParameterizationSkeleton/assets/nls/ParamSkeletonNLS',
 'DS/WAFData/WAFData',
 'DS/Controls/Tab',
 'DS/ENOXCADAdminSettingUI/views/XCADAdminSettingView',
 'DS/ENOXCADTypeMappingUI/views/XCADTypeMappingView',
 'WebappsUtils/WebappsUtils'
 ],
 function (UWA, View,
     Modal,
     Popover, Mask, Scroller,
     ParametersLayoutViewUtilities, XCADViewUtilities,
     URLHandler,  Button, Select, Toggle, Alert,
     XCADMappingNLS,ParamSkeletonNLS, WAFData, WUXTab,
     XCADAdminSettingView, XCADTypeMappingView, WebappsUtils) {

'use strict';

var extendedView;

extendedView = View.extend({
tagName: 'div',
className: 'generic-detail',

init: function (options) {
  var initDate =  new Date();

  options = UWA.clone(options || {}, false);
  this._parent(options);
  this.contentDiv = null;
  this.paramScroller = null;
  this.userMessaging = null;
  this.lastAlertDate = initDate.getTime();
  this.controlDiv = null;
  this.wdthArrayAttr = [35,10,35,10,10];
  this.divMapping = null;
  this.divCustoMapping =null;
  this.baseAccordion=null;
  this.selectMapping=null;
  this.listOfBasicVPMType =[];
  this.listOfBasicType =[];
  this.listOfCustoVPMType=new Map();
  this.listOfCustoPartType=new Map();
  this.divBaseMapping;
  this.listofTypeRel;
  this.listofTypeRelMapping;
  this.mappingScroller=null;
  this.lastAlertDate = initDate.getTime();
  this.userMessaging=null;
},

setup: function(options) {
  UWA.log('AttributesLayoutView::setup!');
  UWA.log(options);
},

render: function () {
  UWA.log("AttributesLayoutView::render");
  var introDiv,
  mappingDiv,
  that = this;

  this.contentDiv =  UWA.createElement('div', {'id': 'typeMainDiv'});
  Mask.mask(this.contentDiv);

  let urlInfo = {
      baseUrl: URLHandler.getURL(),
      tenant: URLHandler.getTenant()
  };

  let paramsJSON = {
      integGCOName: this.model.id
  };

  const paramsJSONString = encodeURI(JSON.stringify(paramsJSON));

  const url = URLHandler.getURL() +
      '/resources/xcadtypemapping/services/getGCOInfo?paramsJSONString=' + paramsJSONString +
      '&tenant=' + URLHandler.getTenant();

  that.getIntegrationName(url, 'GET').then((response) => {
      var typeMappingIntegName = response.integrationName;

      var xcadAdminSettingView = new XCADAdminSettingView({
          id: 'xcadAdminSettingView',
          className: 'generic-detail',
          integGCOName: this.model.id,
          urlInfo: urlInfo
      });

      var integJsonFile = WebappsUtils.getWebappsAssetUrl('ENOXCADTypeMappingUI', typeMappingIntegName + '.json');

      var isFileExist = that.doesFileExist(integJsonFile);

      var xcadTypeMappingView;

      if (isFileExist) {
          xcadTypeMappingView = new XCADTypeMappingView({
              id: 'xcadTypeMappingView',
              className: 'generic-detail',
              integGCOName: this.model.id,
              urlInfo: urlInfo
          });
      }

      var xcadTab = new WUXTab({
          displayStyle: "strip"
      });

      xcadTab.add({
          label: XCADMappingNLS.attrMapping,
          content: this.contentDiv,
          icon: {
              iconName: "attributes-add",
              fontIconFamily: WUXManagedFontIcons.Font3DS
          },
          isSelected: true
      });

      if (isFileExist) {
          xcadTab.add({
              label: XCADMappingNLS.typeMapping,
              content: xcadTypeMappingView.render().container,
              icon: {
                  iconName: "parameter-mapping",
                  fontIconFamily: WUXManagedFontIcons.Font3DS
              }
          });
      }

      xcadTab.add({
          label: XCADMappingNLS.settings,
          content: xcadAdminSettingView.render().container,
          icon: {
              iconName: "attributes-cog",
              fontIconFamily: WUXManagedFontIcons.Font3DS
          }
      });

      xcadTab.inject(this.container);
  });

  this.userMessaging = new Alert({
            className : 'param-alert',
            closable: true,
            visible: true,
            renderTo : document.body,
            autoHide : true,
            hideDelay : 2000,
            messageClassName : 'warning'
        });

  introDiv = UWA.createElement('div', {'class': 'information'}).inject(this.contentDiv);

  UWA.createElement ("br", {
  }).inject(introDiv);

  UWA.createElement('p', {
    text   : XCADMappingNLS.intro,
    'class': 'font-3dslight'      //'font-3dsbold'
  }).inject(introDiv);

  this.controlDiv = XCADViewUtilities.createApplyResetToolbar.call(this, this.contentDiv, true,
      this.applyParams.bind(this), this.confirmationResetModalShow.bind(this));

    // to set height of container on resize of widget
   widget.addEvent('onResize', function () {
     let hght = widget.getViewportDimensions().height;
     let divXCADScroll = document.getElementById('divXCADScroll');
     if(divXCADScroll)
        divXCADScroll.setStyle('height', (hght - 200) + 'px');
   });

  //this.container.setContent(this.contentDiv);

  this.listenTo(this.collection, {
    onSync: that.onCompleteRequestMapping
  });

  return this;
},

doesFileExist : function (urlToFile) {
    var xhr = new XMLHttpRequest();
    xhr.open('HEAD', urlToFile, false);
    xhr.send();
    return xhr.status === 200;
},

getIntegrationName: function (url, method, deployParams) {
  return new Promise((resolve, reject) => {

    WAFData.authenticatedRequest(url, {
      timeout: 250000,
      method: method,
      type: 'json',
      // proxy: 'passport',
      data: deployParams ? deployParams : undefined,

      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Accept-Language': widget.lang
      },

      onFailure: function (error) {
        return reject(error);
      },

      onComplete: function (response) {
        return resolve(response);
      }
    });

  });
},

onCompleteRequestMapping : function() {

  UWA.log("MappingLayoutView::onCompleteRequestMapping");
  var resultDiv;
  var that=this;
  var CADType, VPMType, side, line,i,j, listofAttributesMapping, TypeName, CADTypeName, isDeployed;
  var AddMappingAttributeButton,divMapping;


  this.divMapping = UWA.createElement('div', {
   'id': 'divXCADScroll',
   'class': 'DivXCADScroll'
  }).inject(this.contentDiv);

  let hght = widget.getViewportDimensions().height;
  this.divMapping.setStyle('height', (hght - 200) + 'px');

  //Recuperation des Mapping
  this.Mapping = this.collection._models[0]._attributes.Mapping;

  resultDiv = UWA.createElement('div', {'class': 'result'}).inject(this.contentDiv);

  this.baseAccordion=  ParametersLayoutViewUtilities.createFamilyUIKITAccordion(this.divMapping);

  for (i = 0; i < this.Mapping.length; i++) {

    CADType = this.Mapping[i].cadType;
    VPMType = this.Mapping[i].Type;
    if (!this.Mapping[i].VPMObjectName) {

      if (this.Mapping[i].Type == "VPMReference") this.Mapping[i].VPMObjectName = "Physical Product";
      else
        this.Mapping[i].VPMObjectName = this.Mapping[i].Type;
    }

    if (!this.Mapping[i].cadTypeName) {
      this.Mapping[i].cadTypeName = XCADMappingNLS[this.Mapping[i].cadType] ? XCADMappingNLS[this.Mapping[i].cadType] : CADType;
    }
    CADTypeName = this.Mapping[i].cadTypeName;


    listofAttributesMapping = this.Mapping[i].AttributeMapping;

    var mappingTable = XCADViewUtilities.buildMappingLine.call(that,this.Mapping[i]);

    if (!mappingTable) continue;

    var attributeMappingDiv = UWA.createElement('div', {
      'class': 'attributeMapping'
    });//table-bordered

    var attributesTable = XCADViewUtilities.buildAttributeTable.call(that,listofAttributesMapping ,that.wdthArrayAttr);
    attributesTable.inject(attributeMappingDiv);

    var AddMappingButton = new Button({
      className: 'AddMappingButton',
      icon: 'plus-circled',
      attributes: {
        disabled: false,
        'aria-hidden' : 'true',
        title : XCADMappingNLS.AddAttributeMappingTooltip,
      },
      events: {
        onClick: that.ShowAddMappingAttributePanel.bind(that,this.Mapping[i], attributesTable.getElement(".attrstbodyXCADMapping"))
      }
    }).inject(attributeMappingDiv);

      this.baseAccordion.addItem({
        title:  mappingTable,
        content: attributeMappingDiv,
        selected : true,
        name:CADType + "_" + VPMType,
      });
  }

  this.paramScroller = new Scroller({
      element: this.divMapping,
  }).inject(this.contentDiv);

  var divAddMapping = UWA.createElement('div', {
    'class': 'AddXCADMapping'//'font-3dsbold'
  }).inject(this.contentDiv);

  Mask.unmask(this.contentDiv);
},




resetParams : function () {
  UWA.log("applyReset");
  var that=this;

  Mask.mask(this.contentDiv);
  var integration = encodeURI(this.model.id);
  var url = URLHandler.getURL() + "/resources/xcadparam/gco/reset?integration="+integration+"&tenant=" + URLHandler.getTenant();

  WAFData.authenticatedRequest(url, {
    timeout: 100000,
    method: 'POST',
    type: 'json',

    headers: {
      'Content-Type' : 'application/json',
      'Accept' : 'application/json'
    },

    onFailure : function (json) {
      that.onResetFailure.call(that,json);
    },

    onComplete: function(json) {
      that.onResetSuccess.call(that,json);
    }

  });


  //this.UpdateCommonParamsOnServer();
},

onResetFailure : function (json) {
  UWA.log(json);
  Mask.unmask(this.contentDiv);
  // Mask.unmask(this.contentDiv);//Rb0afx
  // this.userMessaging.add({ className: "error", message: ParamDataModelingNLS.deployFailureMsg });
  this.userMessaging.add({ className: "warning", message: XCADMappingNLS.ErrorReset });
  //ParamLayoutUtilities.updateIcon(false, theImageCell);
},


applyParams : function () {
  UWA.log("applyParams");
  var that = this;
  var mappingToSend = that.Mapping;

  Mask.mask(this.contentDiv);

  var isInvalidMapping = false;

  if( isInvalidMapping)
  {
    Mask.unmask(this.contentDiv);
    this.userMessaging.add({ className: "error", message: XCADMappingNLS.InvalidMapping });
  }
  else
  {
    datatoSend = { "Connector": that.model.id,
                   Mapping : mappingToSend
                 };

    var integration = encodeURI(this.model.id);
    var url = URLHandler.getURL() + "/resources/xcadparam/gco/set?integration="+integration+"&tenant=" + URLHandler.getTenant(),datatoSend;

    WAFData.authenticatedRequest(url, {
      timeout: 250000,
      method: 'POST',
      data: JSON.stringify(datatoSend),
      type: 'json',
      //proxy: 'passport',

      headers: {
        'Content-Type' : 'application/json',
        'Accept' : 'application/json'
      },

      onFailure : function (json) {
        that.onApplyFailure.call(that,json);
      },

      onComplete: function(json) {
        that.onApplySuccess.call(that,json);
      }

    });
  }

  //this.UpdateCommonParamsOnServer();
},

onApplyFailure : function (json) {
  UWA.log(json);
  Mask.unmask(this.contentDiv);
  this.userMessaging.add({ className: "error", message: XCADMappingNLS.applyErrorMessage });
},

onApplySuccess : function (json) { //Rb0afx

  var cpt=0,cptAttr=0,item,title,line,cell,nbofLines,mappingElt,imgSpan, itemToRemove = new Array(), that=this, currDate, currTime, diffDate;
   Mask.unmask(this.contentDiv);
  currDate = new Date();
  currTime = currDate.getTime();
  diffDate = currTime - this.lastAlertDate;
  this.lastAlertDate = currTime;

  this.lastAlertDate = currTime;
  if (true) { //  (diffDate >= 2000) {
            this.userMessaging.add({ className: "success", message: XCADMappingNLS.applySuccessMessage });
        }

  for(cpt=0;cpt<this.baseAccordion.items.length;cpt++)
  {
    item = this.baseAccordion.getItem(cpt);
    title = item.title.children[1];
    line = title.getElementsByTagName("tr");
    cell = line[0].cells[5];
    mappingElt=XCADViewUtilities.retrieveMappingEntry(line[0].cells[1].value, line[0].cells[3].value,this.Mapping);
    this.onApplySuccessForAttributes(mappingElt,item);

  }
},



onApplySuccessForAttributes : function (mappingElt,item) {
  var attrDiv,attrTable,nbofLines,cptAttr,attrLines,cellAttr,mappingEltAttr,imgSpan,listOfAttributes,attrLineToRemove=new Array();

  listOfAttributes = mappingElt.AttributeMapping;
  attrDiv = item.elements.content.children[0];
  if(attrDiv !== undefined)
  {
    attrTable = attrDiv.getElement(".attrstbodyXCADMapping");
    nbofLines = attrTable.children.length;
    for(cptAttr=1;cptAttr<nbofLines;cptAttr++)
    {
      attrLines = attrTable.children[cptAttr];
      cellAttr=attrLines.cells[XCADViewUtilities.cellsAttrIndex.deployFlag];
      mappingEltAttr=XCADViewUtilities.retrieveMappingAttrEntry(undefined,attrLines.cells[XCADViewUtilities.cellsAttrIndex.VPMAttr].value,attrLines.cells[XCADViewUtilities.cellsAttrIndex.CADAttr].value,listOfAttributes);
      if(cellAttr.value==="New" ||cellAttr.value === "Stored")
      {
        if(mappingEltAttr!=undefined)
        {
          mappingEltAttr.status="Deployed";
          cellAttr.empty();
          cellAttr.value="Deployed";
          cellAttr.title=XCADMappingNLS.deployedParamtxt;
          imgSpan = ParametersLayoutViewUtilities.buildImgSpan('check', '1.5', 'green');
          imgSpan.inject(cellAttr);
        }
      }
      else if(cellAttr.value==="Removed")
      {
        //attrLines.remove();
        attrLineToRemove.push(attrLines);
        XCADViewUtilities.removeMappingAttr(mappingEltAttr,listOfAttributes);
      }
    }

    attrLineToRemove.forEach(function(attrMapping){
      attrMapping.remove();
    });
  }
},



onResetSuccess : function (json) {
  var that = this;

  Mask.unmask(this.contentDiv);

  that.resetUI(json);


},


ShowAddMappingAttributePanel: function (typeMapping, attrtbody)
{
  var that = this;
  var vpmtype = encodeURI(typeMapping.Type);

  Mask.mask(that.contentDiv);
 
  var mxType;
  var extensions=new Array();

//IR-927259-3DEXPERIENCER2022x - custom type attrinute
  var custTypeAttr=new Array();

  if(that.collection._models[0]._attributes.ExtensionList!==null){
	 that.ExtensionList = that.collection._models[0]._attributes.ExtensionList;
	 for (mxType in that.ExtensionList) {
	    if(mxType === typeMapping.Type){
			var typeofMX=mxType;
	 		extensions=that.ExtensionList[mxType].split(',');	
		}
	}
  }

	if(typeMapping.iscusto==true){	
		extensions=typeMapping.extensions;
		custTypeAttr=typeMapping.attributes;
	}
	
    var url;
	var datatoSend;
		//IR-930786-3DEXPERIENCER2022x
	url = URLHandler.getURL() + "/resources/xcadparam/gco/listofattributesfortype?type="+vpmtype+"&tenant=" + URLHandler.getTenant()+"&integration="+that.model._attributes.id+"&isTypeCustom="+typeMapping.iscusto,datatoSend;
	
	
  WAFData.authenticatedRequest(url, {
    timeout: 250000,
    method: 'GET',
    data: JSON.stringify(datatoSend),
    type: 'json',

    headers: {
      'Content-Type' : 'application/json',
      'Accept' : 'application/json'
    },

    onFailure : function (json) {
      Mask.unmask(that.contentDiv);
      // TODO raise error
      //that.onApplyFailure.call(that,json);
    },

    onComplete: function(json) {
      Mask.unmask(that.contentDiv);
			if(typeMapping.iscusto==true){	

			vpmtype = encodeURI(typeMapping.ParentType);
			}
       var url2 = URLHandler.getURL() + "/resources/xcadparam/gco/listextraatt?type="+vpmtype+"&tenant=" + URLHandler.getTenant()+"&integration="+that.model._attributes.id,datatoSend;

      WAFData.authenticatedRequest(url2, {
        timeout: 250000,
        method: 'GET',
        data: JSON.stringify(datatoSend),
        type: 'json',

        headers: {
          'Content-Type' : 'application/json',
          'Accept' : 'application/json'
        },

        onFailure : function (json2) {
          Mask.unmask(that.contentDiv);
          that.ShowAddMappingAttributePanelWithAtt.call(that, typeMapping, attrtbody, json, typeofMX, extensions,custTypeAttr);
        },

        onComplete: function(json2) {

          if (json2.attributeDescription) {
            json.attributeDescription = json.attributeDescription.concat(json2.attributeDescription);
          }

          Mask.unmask(that.contentDiv);
          that.ShowAddMappingAttributePanelWithAtt.call(that, typeMapping, attrtbody, json, typeofMX, extensions,custTypeAttr);
        }
      }
                                  );
    }
  });
},


ShowAddMappingAttributePanelWithAtt : function (typeMapping, attrtbody, json, typeofMX, extensions,custTypeAttr) {

  var that = this;
  var labelVPM = typeMapping.VPMObjectName+" "+XCADMappingNLS.attribute;
  var labelCAD = "CAD "+XCADMappingNLS.attribute;

  function compare(attrInfo1, attrInfo2) {
      if (attrInfo1.nlsName.toUpperCase() <  attrInfo2.nlsName.toUpperCase())
         return -1;
      if (attrInfo1.nlsName.toUpperCase() >  attrInfo2.nlsName.toUpperCase())
         return 1;
      return 0;
    }

  var VPMAttributes;
  if(json!==undefined && json.attributeDescription.length!==0)
    {
      VPMAttributes = json.attributeDescription;
      VPMAttributes.sort(compare);
    }else{
	 VPMAttributes=custTypeAttr;
	}

  var defaultPrefix = "";
  if (that.model.id==="CATIAV5UPS") defaultPrefix="cus:";

  var result = XCADViewUtilities.BuildAddMappingPanel( XCADMappingNLS.addMappingAttributeTitle.format(typeMapping.VPMObjectName,typeMapping.cadTypeName), XCADMappingNLS.selectAttr.format(typeMapping.VPMObjectName), XCADMappingNLS.selectAttr.format(typeMapping.cadTypeName), labelVPM, labelCAD, XCADMappingNLS.unilateralDirection.format(typeMapping.VPMObjectName,typeMapping.cadTypeName), XCADMappingNLS.unilateralDirection.format(typeMapping.cadTypeName,typeMapping.VPMObjectName), defaultPrefix, typeMapping.Type,typeofMX,typeMapping.VPMObjectName, XCADMappingNLS.selectExt.format(typeMapping.VPMObjectName),typeMapping.iscusto,typeMapping.isCloudOrPOD,that.model._attributes.id,typeMapping.ParentType);

  var addMappingModal = result[0];
  var selectVPM = result[1].selectVPM;
  var selectCAD = result[1].cadAttr;
  var toggleVPM = result[2].toggle;
  var divVPMMessage = result[2].div;
  var VPMPopover=  result[2].popover;
  var toggleCAD= result[3].toggle;
  var divCADMessage = result[3].div;
  var CADPopover= result[3].popover;
  var toggleBoth= result[4].toggle;
  var divBothMessage = result[4].div;
  var BothPopover = result[4].popover;
  var OkButton = result[5].OKButton;
  var CancelButton = result[5].CancelButton;
  var selectWinExt = result[6].selectWinExt;
  var selectWinAttr = result[6].selectWinAttr;

  //Build VPM attributes list

  function addEltToSelect(value, select,filterForVPM) {
    var i, attributeInfo,attributeName,attributeItf,position,option,listOfEnableOption = new Array(), listOfDisableOption=new Array();
    for (i=0; i<value.length;i++)
    {
      attributeInfo = value[i];

      attributeName = attributeInfo.id;
      if(attributeInfo.nlsName.length!=0)
    	  option = {label:attributeInfo.nlsName + " ("+attributeInfo.type+")", value:attributeInfo.m1Name};
      else
    	  option = {label:attributeInfo.internalName + " ("+attributeInfo.type+")", value:attributeInfo.m1Name};
      listOfEnableOption.push(option);
    }

    listOfEnableOption.forEach(function(optionSelect){
      select.add(optionSelect );
      select.enable(optionSelect);
    });

    listOfDisableOption.forEach(function(optionSelect){
      select.add( optionSelect);
      select.disable(optionSelect);

    });

  }

 function addEltToSelectExtension(value, select,iscusto) {
    var i, attributeInfo,option,listOfEnableOption = new Array();
	if(value!=""){
	    for (i=0; i<value.length;i++)
	    {
	      attributeInfo = value[i];
			if(iscusto==true){
   	 			option = {label:attributeInfo.nlsName, value:attributeInfo.Name};
	  	    }else{
		   		 option = {label:attributeInfo, value:attributeInfo};
			}
	      listOfEnableOption.push(option);
	    }
	}

    listOfEnableOption.forEach(function(optionSelect){
      select.add(optionSelect );
      select.enable(optionSelect);
    });

  }

	if(typeofMX!=null && typeofMX===typeMapping.Type || typeMapping.iscusto==true )
	{
	  addEltToSelectExtension(extensions, selectWinExt,typeMapping.iscusto);
	  XCADViewUtilities.addEltToSelectNoExtAttr(VPMAttributes, selectWinAttr);
	 }else{
  addEltToSelect(VPMAttributes, selectVPM,true);
	 }

  CancelButton.addEvent("onClick", function (e) {
    UWA.log(e);//that.onCancelCalled();
    addMappingModal.hide();
  });

  OkButton.addEvent("onClick", function (e) {
  var selectedVPMAttr;
  if(typeofMX!=null && typeofMX===typeMapping.Type || typeMapping.iscusto==true){
	selectedVPMAttr = selectWinAttr.getSelection();
  }else{
	selectedVPMAttr = selectVPM.getSelection();
  }

    var nameAttrCAD = selectCAD.getValue();
    var side=0;
    if(toggleBoth.isChecked())
      side=0;
    else if (toggleVPM.isChecked())
      side=-1;
    else if (toggleCAD.isChecked())
      side=1;

    var nameAttrVPM = selectedVPMAttr[0].value;

    var position = selectedVPMAttr[0].label.indexOf("(");
    var displayNameAttrVPM = nameAttrVPM;
    var typeAttrVPM = "String";

    if(position != -1)
    {
      displayNameAttrVPM = selectedVPMAttr[0].label.slice(0,position);;
      typeAttrVPM = selectedVPMAttr[0].label.slice(position+1,selectedVPMAttr[0].label.length-1);
    }

    var itfVPMOpt="";
    if (nameAttrVPM.contains('.')) {
      itfVPMOpt = nameAttrVPM.split('.')[0];
      nameAttrVPM = nameAttrVPM.split('.')[1];
    }

	if (nameAttrVPM.contains('@@')) {
      nameAttrVPM = nameAttrVPM.split('@@')[0];
    }

    var mappingElt=XCADViewUtilities.retrieveMappingEntry(typeMapping.Type,typeMapping.cadType,that.Mapping);

    var mappingEltAttr = null;
    if(mappingElt!=undefined)
    {
      mappingEltAttr = { cadName: nameAttrCAD, Extension: itfVPMOpt, Name:  nameAttrVPM, Sync: side, nlsName:displayNameAttrVPM, status:"New","default":false };
      mappingElt.AttributeMapping.push(mappingEltAttr);

      var lineAttribute = XCADViewUtilities.buildAttributeLine.call(that, mappingElt.AttributeMapping, mappingEltAttr,that.wdthArrayAttr);
      var attrbody= result[0].getBody().getElementsByTagName("tbody");;
      lineAttribute.inject(attrtbody);

    }


    addMappingModal.hide();
  });

  addMappingModal.inject(this.contentDiv);
  addMappingModal.show();
},

  resetUI : function(json) {
    var that = this;

    this.divMapping.empty();
    this.divMapping.parentNode.removeChild(this.divMapping);
    this.collection._models[0]._attributes = json;
    this.onCompleteRequestMapping();

  },
  confirmationResetModalShow : function () {
    var headertitle, OKBtn, CancelBtn,
    bodyDiv,
    that = this;

    if (this.resetModal) {
      this.resetModal.show();//Modal already exists
    } else {
      headertitle = UWA.createElement('h4', {
        text   : ParamSkeletonNLS.confirmResetTitle,
        'class': 'font-3dslight' // font-3dsbold
      });

      OKBtn = new Button({
        value : ParamSkeletonNLS.OKButton,
        className : 'btn primary',
        events : {
          'onClick' : function() {
            UWA.log("DoSomething");
            that.resetParams();
          }
        }
      });
      CancelBtn = new Button({
        value : ParamSkeletonNLS.CancelButton,
        className : 'btn default',
        events : {
          'onClick' : function(e) {
            UWA.log("Cancel");
          }
        }
      });
      bodyDiv = UWA.createElement('div', {
        'id': 'resetContentDiv',
        'width' : '100%',
        'height': '100%'
      });
      UWA.createElement('p', {
        text   :  XCADMappingNLS.resetMsg,
        'class': 'font-3dslight'// font-3dsbold
      }).inject(bodyDiv);
      UWA.createElement('p', {
        text   :  ParamSkeletonNLS.confirmResetMsg,
        'class': 'font-3dslight'// font-3dsbold
      }).inject(bodyDiv);

      this.resetModal = new Modal({
        className: "reset-confirm-modal",
        closable: true,
        header: headertitle,
        body:   bodyDiv,
        footer: [ OKBtn, CancelBtn ]
      }).inject(this.contentDiv);
      this.resetModal.getContent().setStyle("padding-top", 1);
      this.resetModal.show();

      this.resetModal.getContent().getElements(".btn").forEach(function (element) {
        element.addEvent("click", function () {
          that.resetModal.hide();
        });
      });
    }
  },

  destroy : function() {
    this.stopListening();
    this._parent.apply(this, arguments);
  }
});

return extendedView;
});

/*@fullReview  ZUR 16/02/19 2017x Param Skeleton*/
/*global define, widget*/
/*jslint nomen: true*/
define('DS/ParameterizationSkeleton/Views/ParametersCommonView',
    [
        'UWA/Core',
        'UWA/Class/View',
        'DS/ParameterizationSkeleton/Views/ParameterizationDataModeling/AttributesLayoutView',
      'DS/ParameterizationSkeleton/Views/ParameterizationLifecycle/LifecycleView',
        'DS/ParameterizationSkeleton/Views/ParameterizationXCAD/ParamXCADLayoutView'
    ], function (UWA, View, AttributesLayoutView, LifecycleView, ParamXCADLayoutView) {

        'use strict';

        return View.extend({

            defaultOptions: {
                type: 'default'
            },

            init : function (options) {
                UWA.log("ParametersCommonView::init");
                UWA.log(options);
                this.options = options;
                this.childView = null;
            },

        // The ‘options’ object is passed via the ‘viewOptions’ specified in the Renderer at the Skeleton instantiation
            render: function () {
                //options = options || {options = {}};
                //options = UWA.clone(options || {}, false);
                var options = this.options,
                    commonViewSwitcher = this.getCommonView(options);

                if (commonViewSwitcher !== null) {
                    this.childView = commonViewSwitcher;
                    return commonViewSwitcher.render();
                }

                return null;//defaultView.render();
            },

            getCommonView : function (options) {

                if (options.domainid === "AttributeDef") {
                    return new AttributesLayoutView(options);
                }
                if (options.domainid === "XCADParameterization") {
                    return new ParamXCADLayoutView(options);
                }

                return new LifecycleView(options);
            },

            destroy : function() {
                this.childView.destroy();
                this.stopListening();
                this._parent.apply(this, arguments);
            }

        });
    });

define('DS/ParameterizationSkeleton/Views/ParameterizationFLWeb/ParamSAXFormulaModal',
		[
			'DS/UIKIT/Modal',
			'UWA/Core',
			'DS/UIKIT/Input/Select',
			'DS/UIKIT/Input/Text',
			'DS/UIKIT/Input/Number',
			'DS/UIKIT/Alert',
			'DS/UIKIT/Tooltip',
			'DS/WAFData/WAFData',
			'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler',
			'DS/ParameterizationSkeleton/Views/ParameterizationFLWeb/ParamSAXFormulaTable',
			'DS/Windows/ImmersiveFrame',
			'DS/Windows/Dialog',
			'DS/ParameterizationSkeleton/Views/ParameterizationFLWeb/ParameterizationFLWebConstants',
			'i18n!DS/ParameterizationSkeleton/assets/nls/FLWebNLS'
			],
			function (Modal,
					UWACore,
					Select,
					Text,
					Number,
					Alert,
					Tooltip,
					WAFData,
					URLHandler,
					ParamSAXFormulaTable,
					WUXImmersiveFrame,
					WUXDialog,
					ParameterizationFLWebConstants,
					FLWebNLS) {

	'use strict';

	const formulaListModal = {
		createModal: function(options){
			const immersiveFrame = new WUXImmersiveFrame({
          domId: 'sax-formula-modal-immersiveFrame'
        });
				immersiveFrame.inject(options.parent);
				this.modal =  new WUXDialog({
					title: FLWebNLS.setANFormatHeader,
					content: this.topDiv,
					domId: 'sax-formula-modal',
					immersiveFrame: immersiveFrame,
					width: 900,
					height : 400,
					resizableFlag : true,
					modalFlag : true,
					buttons: null
				});
				this.modal.close = () => {
					//this.modal.destroy();
					document.getElementById('sax-formula-modal-immersiveFrame').destroy();
				}
// 			this.modal = new Modal({
// 				className: options.className || '',
// 				closable: true,
// 				header: '<h4>' + options.title || 'Logical Reference Architecture Number' + '</h4>',
// 				body: this.topDiv,
// 				footer: null
// 			});
// //this.modal.elements.body.appendChild(this.topDiv);
// 			this.modal.inject(options.parent);

		},
		insertTableView: function(options){
			//this.modal.show();
			this.topDiv = UWA.createElement('div',{
				styles:{
					'height': '100%',
					'width': '100%'
				}
			});
			ParamSAXFormulaTable.setANFormulaView(options.collection, this.topDiv, options.modelEvent, options.newSubTypeEvntObj);
		},
		showFormulaTable: function(options){
			//this.createModal(options);
			this.insertTableView(options);
			this.createModal(options);
			//this.modal.show()
			document.getElementById('buttonExport').innerText = FLWebNLS.done;
		}
	}
	return  formulaListModal;
	// function _createModal(options) {
	// 	var modal = new Modal({
	// 		className: options.className || '',
	// 		closable: true,
	// 		header: '<h4>' + options.title + '</h4>',
	// 		body: '',
	// 		footer: ''
	// 	});
	// 	return modal;
	// }
	//
	// function FLWebModal(options) {
	// 	this.options = {
	// 			title: 'Dialog',
	// 			className: '',
	// 			withFooter: true
	// 	};
	// 	this.options = UWACore.extend(this.options, options);
	//
	// 	this.modal = _createModal(this.options);
	// 	this.modal.inject(document.querySelector('#typeMainDiv'));
	// 	if (this.options.withFooter) {
	// 		this._bindFooterEvent();
	// 	}
	//
	// }
	//
	// FLWebModal.prototype.getPartNumberFormat = function () {
	//
	// 	var _formatContent = this.modal.getContent().getElement('.enox-arch-number-content');
	// 	var that = this;
	//
	// 	if (this.partNumberTypeCombobox.getValue()[0] == ParameterizationFLWebConstants.FORMAT_FREE) {
	// 		var _dynamicFormatContent = this.modal.getContent().getElement('.enox-arch-number-dynamic-content');
	// 		_dynamicFormatContent.empty();
	// 		that.destroyValueFieldComponents();
	// 	} else if (this.partNumberTypeCombobox.getValue()[0] == ParameterizationFLWebConstants.FORMAT_STRING) {
	// 		that.destroyValueFieldComponents();
	// 		that.getValueField(_formatContent);
	// 	} else if (this.partNumberTypeCombobox.getValue()[0] == ParameterizationFLWebConstants.FORMAT_ATTRIBUTE) {
	// 		that.destroyValueFieldComponents();
	// 		that.getDynamicFields(_formatContent, this.partNumberTypeCombobox.getValue()[0]);
	// 	} else if (this.partNumberTypeCombobox.getValue()[0] == ParameterizationFLWebConstants.FORMAT_COUNTER) {
	// 		that.destroyValueFieldComponents();
	// 		that.getDynamicFields(_formatContent, this.partNumberTypeCombobox.getValue()[0]);
	// 	}
	// };
	//
	// FLWebModal.prototype.getDefaultFields = function (_formatContent) {
	//
	// 	var that = this;
	//
	// 	var divTag = document.createElement('div');
	// 	divTag.className = "formats-arch";
	//
	// 	var labelDiv = document.createElement('div');
	// 	labelDiv.className = "formats-arch-label";
	// 	labelDiv.innerText = FLWebNLS.name; //formats-arch[i];
	//
	// 	var textBoxDiv = document.createElement('div');
	// 	textBoxDiv.className = "formats-arch-tbox";
	// 	var textOptions = {
	// 			events: {
	// 				//  onChange: that.validateEnteredNameValue.bind(that)
	// 			}
	// 	};
	//
	// 	this.nameTextBox = this.getTextBox(textOptions);
	// 	this.nameTextBox.domId = FLWebNLS.name + "_textBox";
	// 	this.nameTextBox.inject(textBoxDiv);
	//
	// 	divTag.appendChild(labelDiv);
	// 	divTag.appendChild(textBoxDiv);
	//
	// 	_formatContent.appendChild(divTag);
	//
	// 	var divTagForNbrBox = document.createElement('div');
	// 	divTagForNbrBox.className = "formats-arch";
	//
	// 	var labelDivForNbrBox = document.createElement('div');
	// 	labelDivForNbrBox.className = "formats-arch-label";
	// 	labelDivForNbrBox.innerText = FLWebNLS.order; //formats-arch[i];
	//
	// 	var textBoxDivForNbrBox = document.createElement('div');
	// 	textBoxDivForNbrBox.className = "formats-arch-tbox";
	//
	// 	var numberOptions = {
	// 			min: 1,
	// 			max: ParameterizationFLWebConstants.MAX_ROWS,
	//
	// 			value: this.getHighestOrder() + 1,
	// 			events: {}
	// 	};
	//
	// 	this.numberOrderBox = this.getNumberBox(numberOptions);
	// 	this.numberOrderBox.domId = FLWebNLS.order + "_textBox";
	// 	this.numberOrderBox.inject(textBoxDivForNbrBox);
	//
	//
	//
	//
	// 	divTagForNbrBox.appendChild(labelDivForNbrBox);
	// 	divTagForNbrBox.appendChild(textBoxDivForNbrBox);
	//
	// 	_formatContent.appendChild(divTagForNbrBox);
	//
	// 	var divTagForType = document.createElement('div');
	// 	divTagForType.className = "formats-arch";
	//
	// 	var typelabelDiv = document.createElement('div');
	// 	typelabelDiv.className = "formats-arch-label";
	// 	typelabelDiv.innerText = FLWebNLS.type;
	//
	// 	var typeComboBoxDiv = document.createElement('div');
	// 	typeComboBoxDiv.className = "formats-arch-tbox";
	//
	// 	var selectOptions = {
	// 			custom: false,
	// 			placeholder: FLWebNLS.selectType,
	// 			options: [{
	// 				label: FLWebNLS.String,
	// 				value: ParameterizationFLWebConstants.FORMAT_STRING
	// 			}, {
	// 				label: FLWebNLS.Free,
	// 				value: ParameterizationFLWebConstants.FORMAT_FREE
	// 			}, {
	// 				label: FLWebNLS.Attribute,
	// 				value: ParameterizationFLWebConstants.FORMAT_ATTRIBUTE
	// 			}, {
	// 				label: FLWebNLS.counterLabel,
	// 				value: ParameterizationFLWebConstants.FORMAT_COUNTER
	// 			}
	//
	// 			],
	// 			events: {
	// 				onChange: that.getPartNumberFormat.bind(that)
	// 			}
	// 	};
	//
	// 	this.partNumberTypeCombobox = this.getSelectComponent(selectOptions);
	// 	this.partNumberTypeCombobox.setId(FLWebNLS.type + "_comboBox");
	// 	this.partNumberTypeCombobox.inject(typeComboBoxDiv);
	//
	// 	divTagForType.appendChild(typelabelDiv);
	// 	divTagForType.appendChild(typeComboBoxDiv);
	// 	_formatContent.appendChild(divTagForType);
	//
	// };
	//
	// FLWebModal.prototype.getDynamicFields = function (_formatContent, format) {
	// 	var that = this;
	//
	// 	var _dynamicFormatContent = this.modal.getContent().getElement('.enox-arch-number-dynamic-content');
	// 	_dynamicFormatContent.empty();
	//
	// 	if (format == ParameterizationFLWebConstants.FORMAT_ATTRIBUTE) {
	// 		that.getAttributeFormat(_formatContent, _dynamicFormatContent);
	//
	// 	} else if (format == ParameterizationFLWebConstants.FORMAT_COUNTER) {
	// 		this.getCounterFormat(_formatContent, _dynamicFormatContent);
	// 	}
	//
	// };
	// FLWebModal.prototype.getAttributeFormat = function (_formatContent, _dynamicFormatContent) {
	//
	// 	var formatField = FLWebNLS.attribute;
	//
	// 	var divTag = document.createElement('div');
	// 	divTag.className = "formats-arch";
	//
	// 	var labelDiv = document.createElement('div');
	// 	labelDiv.className = "formats-arch-label";
	// 	labelDiv.innerText = formatField;
	//
	// 	var comboBoxDiv = document.createElement('div');
	// 	comboBoxDiv.className = "formats-arch-tbox";
	// 	var allAttributes = [];
	//
	// 	if (typeof this.attributes.message === "undefined") {
	// 		for (var key in this.attributes) {
	// 			var attributes1 = {};
	//
	// 			attributes1["label"] = this.attributes[key]
	// 			attributes1["value"] = key
	//
	// 			allAttributes.push(attributes1);
	// 		}
	// 	}
	//
	// 	var selectOptions = {
	// 			custom: false,
	// 			placeholder: FLWebNLS.selectAttribute,
	// 			options: allAttributes
	// 	};
	//
	// 	this.partNumberAttributeCombobox = this.getSelectComponent(selectOptions);
	//
	// 	this.partNumberAttributeCombobox.setId(formatField + "_comboBox");
	// 	this.partNumberAttributeCombobox.inject(comboBoxDiv);
	//
	// 	divTag.appendChild(labelDiv);
	// 	divTag.appendChild(comboBoxDiv);
	//
	// 	var formatFieldValue = FLWebNLS.defaultValue;
	// 	var divTagForValue = document.createElement('div');
	// 	divTagForValue.className = "formats-arch";
	//
	// 	var labelDivForValue = document.createElement('div');
	// 	labelDivForValue.className = "formats-arch-label";
	// 	labelDivForValue.innerText = formatFieldValue;
	//
	// 	var textBoxDivForValue = document.createElement('div');
	// 	textBoxDivForValue.className = "formats-arch-tbox";
	// 	this.valueDynTextBox = this.getTextBox();
	// 	this.valueDynTextBox.domId = formatFieldValue + "_textBox";
	// 	this.valueDynTextBox.inject(textBoxDivForValue);
	//
	// 	divTagForValue.appendChild(labelDivForValue);
	// 	divTagForValue.appendChild(textBoxDivForValue);
	//
	// 	_dynamicFormatContent.appendChild(divTag);
	// 	_dynamicFormatContent.appendChild(divTagForValue);
	// 	_formatContent.appendChild(_dynamicFormatContent);
	//
	// };
	//
	// FLWebModal.prototype.getCounterFormat = function (_formatContent, _dynamicFormatContent) {
	// 	var that = this;
	// 	var divTagForNbrBox = document.createElement('div');
	// 	divTagForNbrBox.className = "formats-arch";
	//
	// 	var labelDivForNbrBox = document.createElement('div');
	// 	labelDivForNbrBox.className = "formats-arch-label";
	//
	// 	var divForLabel = document.createElement('div');
	// 	divForLabel.className = 'label-counter-arch';
	//
	// 	var labelText = document.createElement('div');
	// 	labelText.className = 'label-text-arch';
	// 	labelText.innerText = FLWebNLS.digits;
	//
	// 	var informationDiv = document.createElement('div');
	// 	informationDiv.className = "fonticon fonticon-attention";
	// 	informationDiv.id = "information";
	// 	informationDiv.style.color = "black";
	//
	// 	divForLabel.appendChild(labelText);
	// 	divForLabel.appendChild(informationDiv);
	//
	// 	labelDivForNbrBox.appendChild(divForLabel);
	//
	// 	var textBoxDivForNbrBox = document.createElement('div');
	// 	textBoxDivForNbrBox.className = "formats-arch-tbox";
	//
	// 	var numberOptions = {
	// 			min: 1,
	// 			max: ParameterizationFLWebConstants.MAX_ROWS /*Number.MAX_SAFE_INTEGER*/,
	// 			step: 1,
	// 			value: 6,
	// 			events: {
	// 				onChange: that.updateSampleText.bind(that)
	// 			}
	// 	};
	//
	// 	this.counterNumberBox = this.getNumberBox(numberOptions);
	// 	this.counterNumberBox.domId = FLWebNLS.digits + "_textBox";
	// 	this.counterNumberBox.inject(textBoxDivForNbrBox);
	//
	// 	divTagForNbrBox.appendChild(labelDivForNbrBox);
	// 	divTagForNbrBox.appendChild(textBoxDivForNbrBox);
	//
	// 	_dynamicFormatContent.appendChild(divTagForNbrBox);
	//
	// 	var formatField = FLWebNLS.sample;
	//
	// 	var divTag = document.createElement('div');
	// 	divTag.className = "formats-arch-sample";
	//
	// 	var labelDiv = document.createElement('div');
	// 	labelDiv.className = "formats-arch-sample-label";
	// 	//labelDiv.innerText = formatField;
	//
	//
	// 	var sampleTextLabelSpan = document.createElement('span');
	// 	sampleTextLabelSpan.id = "sampleTextLabel";
	// 	sampleTextLabelSpan.innerText = formatField  +" : "  ;
	//
	// 	var sampleTextValueSpan = document.createElement('span');
	// 	sampleTextValueSpan.id = "sampleValue-arch";
	//
	// 	var textBoxDiv = document.createElement('div');
	// 	textBoxDiv.className = "formats-arch-sample-value";
	//
	// 	textBoxDiv.appendChild(sampleTextLabelSpan);
	// 	textBoxDiv.appendChild(sampleTextValueSpan);
	// 	//textBoxDiv.id = "sampleValue-arch";
	//
	// 	divTag.appendChild(labelDiv);
	// 	divTag.appendChild(textBoxDiv);
	//
	// 	_dynamicFormatContent.appendChild(divTag);
	// 	_formatContent.appendChild(_dynamicFormatContent);
	//
	// 	this.updateSampleText(); // sets the number of digits value
	//
	// 	this.modal.getContent().getElement('#information').addEvent('mouseover', function () {
	// 		that.getInformation(that.modal.getContent().getElement("#information"), FLWebNLS.counterTooltip);
	// 	});
	//
	// 	// this.modal.getContent().getElement('#sampleValue-arch').addEvent('mouseover', function () {
	// 	//   that.getInformation(that.modal.getContent().getElement("#sampleValue-arch"), event.currentTarget.getText());
	// 	//
	// 	// })
	//
	//
	// 	// this.modal.getContent().getElement('#sampleValue-arch').addEventListener('mouseout', function () {
	// 	// 	//that.getInformation(that.modal.getContent().getElement("#sampleValue-arch"), event.currentTarget.getText());
	// 	// 	console.log(that);
	// 	// 	that.tooltip.elements.body.empty()
	// 	//
	// 	// })
	//
	//
	// };
	//
	// FLWebModal.prototype.getInformation = function (targetElement, toDisplayOver) {
	//
	// 	var tooltipOtions = {
	// 			target: targetElement,
	// 			body: toDisplayOver
	// 	};
	// 	this.getTooltip(tooltipOtions);
	//
	// };
	//
	// FLWebModal.prototype.getValueField = function (_formatContent) {
	//
	// 	var _dynamicFormatContent = this.modal.getContent().getElement('.enox-arch-number-dynamic-content');
	//
	// 	_dynamicFormatContent.empty();
	//
	// 	var formatField = FLWebNLS.value;
	//
	// 	var divTag = document.createElement('div');
	// 	divTag.className = "formats-arch";
	//
	// 	var labelDiv = document.createElement('div');
	// 	labelDiv.className = "formats-arch-label";
	// 	labelDiv.innerText = formatField;
	//
	// 	var textBoxDiv = document.createElement('div');
	// 	textBoxDiv.className = "formats-arch-tbox";
	// 	this.valueTextBox = this.getTextBox();
	// 	this.valueTextBox.domId = formatField + "_textBox";
	// 	this.valueTextBox.inject(textBoxDiv);
	//
	// 	divTag.appendChild(labelDiv);
	// 	divTag.appendChild(textBoxDiv);
	//
	// 	_dynamicFormatContent.appendChild(divTag);
	// 	_formatContent.appendChild(_dynamicFormatContent);
	//
	// };
	//
	// FLWebModal.prototype.getModalBody = function () {
	//
	// 	var partNumberContent = this.modal.elements.body;
	//
	// 	var _errorsMessageDiv = UWACore.createElement('div');
	// 	_errorsMessageDiv.className = "enox-part-number-error-content";
	//
	// 	var _formatContent = UWACore.createElement('div');
	// 	_formatContent.className = "enox-arch-number-content";
	//
	// 	var _dynamicFormatContent = UWACore.createElement('div');
	// 	_dynamicFormatContent.className = "enox-arch-number-dynamic-content";
	//
	// 	this.getDefaultFields(_formatContent);
	//
	// 	partNumberContent.appendChild(_errorsMessageDiv);
	// 	partNumberContent.appendChild(_formatContent);
	// 	partNumberContent.appendChild(_dynamicFormatContent);
	// 	return partNumberContent;
	// };
	//
	// FLWebModal.prototype.createCollabUnicitySecAddFieldModalBody = function () {
	//
	// 	var modalBody = this.modal.elements.body;
	//
	// 	var _errorsMessageDiv = UWACore.createElement('div');
	// 	_errorsMessageDiv.className = "enox-part-number-error-content";
	//
	// 	var _formatContent = UWACore.createElement('div');
	// 	_formatContent.className = "enox-arch-number-content";
	//
	// 	// var _dynamicFormatContent = UWACore.createElement('div');
	// 	// _dynamicFormatContent.className = "enox-arch-number-dynamic-content";
	//
	// 	//this.getDefaultFields(_formatContent);
	// 	this.addDefaultFieldsToCollabUnicitySecModalBody(_formatContent);
	// 	modalBody.appendChild(_errorsMessageDiv);
	// 	modalBody.appendChild(_formatContent);
	// 	//	modalBody.appendChild(_dynamicFormatContent);
	// 	//return partNumberContent;
	// };
	//
	// FLWebModal.prototype.addDefaultFieldsToCollabUnicitySecModalBody = function (_formatContent) {
	//
	// 	var that = this;
	// 	var groupNameField = document.createElement('div');
	// 	groupNameField.className = "formats-arch";
	//
	// 	var labelDiv = document.createElement('div');
	// 	labelDiv.className = "formats-arch-label";
	// 	labelDiv.innerText = FLWebNLS.label_groupName;
	//
	// 	var textBoxDiv = document.createElement('div');
	// 	textBoxDiv.className = "formats-arch-tbox";
	// 	var textOptions = {
	// 			events: {
	// 				//  onChange: that.validateEnteredNameValue.bind(that)
	// 			}
	// 	};
	// 	this.nameTextBoxForCollabUnicity = this.getTextBox(textOptions);
	// 	this.nameTextBoxForCollabUnicity.domId = FLWebNLS.name + "_textBox";
	// 	this.nameTextBoxForCollabUnicity.inject(textBoxDiv);
	//
	// 	groupNameField.appendChild(labelDiv);
	// 	groupNameField.appendChild(textBoxDiv);
	// 	_formatContent.appendChild(groupNameField);
	//
	// 	var collabSpaceField = document.createElement('div');
	// 	collabSpaceField.className = 'formats-arch';
	//
	// 	var collabSpacelabel = document.createElement('div');
	// 	collabSpacelabel.className = 'formats-arch-label';
	// 	collabSpacelabel.innerText = FLWebNLS.label_CSfield;
	//
	// 	var collabSpaceTextBoxContainer = document.createElement('div');
	// 	collabSpaceTextBoxContainer.className = 'formats-arch-tbox';
	// 	var csList =  JSON.parse(localStorage.getItem('csList'));
	// 	var collabSpaceSelectOptions = {
	// 			//placeholder: 'Select your option',
	// 			multiple: true,
	// 			options: csList,
	// 			events: {
	// 				//  onChange: that.validateEnteredNameValue.bind(that)
	// 			}
	// 	};
	// 	this.collabListTextBox = this.getSelectComponent(collabSpaceSelectOptions);
	// 	this.collabListTextBox.domId = FLWebNLS.name + "_textBox";
	// 	this.collabListTextBox.inject(collabSpaceTextBoxContainer);
	//
	// 	collabSpaceField.appendChild(collabSpacelabel);
	// 	collabSpaceField.appendChild(collabSpaceTextBoxContainer);
	//
	// 	_formatContent.appendChild(collabSpaceField);
	//
	// };
	//
	// FLWebModal.prototype.validateEnteredNameValue = function (operation, editingField) {
	// 	var duplicateData = {};
	// 	duplicateData.isValid = true;
	// 	var userEnteredFormat = this.nameTextBox.getValue();
	// 	var isSuccess = this.validateEnteredValues(userEnteredFormat, FLWebNLS.name, operation, editingField);
	// 	if (!isSuccess) {
	// 		duplicateData.isValid = false;
	// 	}
	// 	duplicateData.data = userEnteredFormat;
	// 	return duplicateData;
	// };
	//
	// FLWebModal.prototype.validateEnteredGroupNameValue = function (operation, editingField) {
	// 	var duplicateData = {};
	// 	duplicateData.isValid = true;
	// 	var userEnteredName = this.nameTextBoxForCollabUnicity.getValue();
	// 	var isSuccess = this.validateEnteredValuesForArchNumCollab(userEnteredName, FLWebNLS.name, operation, editingField);
	// 	if (!isSuccess) {
	// 		duplicateData.isValid = false;
	// 	}
	// 	duplicateData.data = userEnteredName;
	// 	return duplicateData;
	// };
	//
	// FLWebModal.prototype.validateEnteredOrderValue = function (operation, editingField) {
	//
	// 	var duplicateData = {};
	// 	duplicateData.isValid = true;
	//
	// 	var userEnteredFormat = this.numberOrderBox.getValue();
	// 	var isSuccess = this.validateEnteredValues(userEnteredFormat, FLWebNLS.order, operation, editingField);
	//
	// 	if (!isSuccess) {
	//
	// 		duplicateData.isValid = false;
	// 	}
	//
	// 	duplicateData.data = userEnteredFormat;
	// 	return duplicateData;
	// };
	//
	// FLWebModal.prototype.validateEnteredValues = function (userEnteredFormat, field, operation, editingField) {
	// 	var rowsOfMappedFields = document.querySelectorAll(".partNumberFieldMapping");
	// 	var successFields = document.querySelector('.success');
	//
	//
	// 	var isSuccess = true;
	//
	// 	if (operation == "edit") {
	// 		for (var k = 0; k < rowsOfMappedFields.length; k++) {
	// 			if (rowsOfMappedFields[k] != editingField) {
	// 				for (var j = 0; j < 2; j++) {
	// 					if (successFields.getChildren()[j].getText() == field && userEnteredFormat == rowsOfMappedFields[k].getChildren()[j].getText()) {
	// 						isSuccess = false;
	// 						break;
	// 					}
	// 				}
	// 			}
	// 		}
	// 	} else {
	// 		for (var k1 = 0; k1 < rowsOfMappedFields.length; k1++) {
	//
	// 			for (var j1 = 0; j1 < 2; j1++) {
	// 				if (successFields.getChildren()[j1].getText() == field && userEnteredFormat == rowsOfMappedFields[k1].getChildren()[j1].getText()) {
	// 					isSuccess = false;
	// 					break;
	// 				}
	// 			}
	// 		}
	// 	}
	// 	return isSuccess;
	// };
	//
	// FLWebModal.prototype.validateEnteredValuesForArchNumCollab = function (userEnteredFormat, field, operation, editingField) {
	// 	var rowsOfMappedFields = document.querySelectorAll("#archNumCollabTableRow");
	// 	var successFields = document.querySelector('#headerRowArchNumCollab');
	// 	var isSuccess = true;
	// 	if (operation == "edit") {
	// 		for (var k = 0; k < rowsOfMappedFields.length; k++) {
	// 			if (rowsOfMappedFields[k] != editingField) {
	// 				for (var j = 0; j < 2; j++) {
	// 					if (successFields.getChildren()[j].getText() == field && userEnteredFormat == rowsOfMappedFields[k].getChildren()[j].getText()) {
	// 						isSuccess = false;
	// 						break;
	// 					}
	// 				}
	// 			}
	// 		}
	// 	} else {
	// 		for (var k1 = 0; k1 < rowsOfMappedFields.length; k1++) {
	// 			for (var j1 = 0; j1 < 2; j1++) {
	// 				if (successFields.getChildren()[j1].getText() == field && userEnteredFormat == rowsOfMappedFields[k1].getChildren()[j1].getText()) {
	// 					isSuccess = false;
	// 					break;
	// 				}
	// 			}
	// 		}
	// 	}
	// 	return isSuccess;
	// };
	//
	// FLWebModal.prototype.validateEnteredGroupNameValueNotNull = function () {
	// 	var userEnteredFormat = this.nameTextBoxForCollabUnicity.getValue();
	// 	var isNull = this.validateEnteredValuesNotNull(userEnteredFormat);
	// 	return isNull;
	// };
	//
	// FLWebModal.prototype.validateEnteredCollabListValueNotNull = function () {
	// 	var userEnteredFormat = this.collabListTextBox.getValue()[0];
	// 	var isNull = this.validateEnteredValuesNotNull(userEnteredFormat);
	// 	return isNull;
	// };
	//
	// FLWebModal.prototype.validateEnteredNameValueNotNull = function () {
	// 	var userEnteredFormat = this.nameTextBox.getValue();
	// 	var isNull = this.validateEnteredValuesNotNull(userEnteredFormat);
	// 	return isNull;
	// };
	//
	// FLWebModal.prototype.validateEnteredOrderValueNotNull = function () {
	// 	var userEnteredFormat = this.numberOrderBox.getValue();
	// 	var isNull = this.validateEnteredValuesNotNull(userEnteredFormat);
	// 	return isNull;
	// };
	//
	// FLWebModal.prototype.validateEnteredValueFieldValueNotNull = function () {
	// 	var isNull = false;
	// 	if (this.getUserEnteredValues().Type != ParameterizationFLWebConstants.FORMAT_ATTRIBUTE) {
	// 		isNull = this.valueTextBox ? this.validateEnteredValuesNotNull(this.valueTextBox.getValue()) : this.valueDynTextBox ? this.validateEnteredValuesNotNull(this.valueDynTextBox.getValue()) : false;
	// 	}
	// 	return isNull;
	// };
	//
	// FLWebModal.prototype.validatSelectedTypeFieldValueNotNull = function () {
	// 	var userEnteredFormat = this.partNumberTypeCombobox.getValue()[0];
	// 	var isNull = this.validateEnteredValuesNotNull(userEnteredFormat);
	// 	return isNull;
	// };
	//
	// FLWebModal.prototype.validateSelectedAttributeFieldValueNotNull = function () {
	// 	var userEnteredFormat = this.partNumberAttributeCombobox ? this.partNumberAttributeCombobox.getValue()[0] : '';
	// 	var isNull = false;
	// 	if (this.partNumberTypeCombobox.getValue()[0] == ParameterizationFLWebConstants.FORMAT_ATTRIBUTE) {
	// 		isNull = this.validateEnteredValuesNotNull(userEnteredFormat);
	// 	}
	//
	// 	return isNull;
	// };
	//
	// FLWebModal.prototype.validateEnteredCounterFieldValueNotNull = function () {
	// 	var userEnteredFormat = this.counterNumberBox ? this.counterNumberBox.getValue() : '';
	// 	var isNull = false;
	// 	if (this.partNumberTypeCombobox.getValue()[0] == ParameterizationFLWebConstants.FORMAT_COUNTER) {
	// 		isNull = this.validateEnteredValuesNotNull(userEnteredFormat);
	// 	}
	//
	// 	return isNull;
	// };
	//
	//
	// FLWebModal.prototype.validateEnteredValuesNotNull = function (userEnteredFormat) {
	//
	// 	var isNull = false;
	// 	if (userEnteredFormat == '' || userEnteredFormat == "") {
	// 		isNull = true;
	// 	}
	// 	return isNull;
	// };
	//
	// FLWebModal.prototype.displayAlertMessage = function (messageToDisplay, toDisplayOver) {
	// 	var alertOptions = {
	// 			visible: true,
	// 			className: 'param-alert',
	// 			messageClassName: 'error',
	// 			closable: true,
	// 			renderTo: toDisplayOver,
	// 			autoHide: true,
	// 			hideDelay: 2000
	// 	};
	// 	var alert = this.getAlertComponent(alertOptions);
	//
	// 	alert.add({
	// 		message: messageToDisplay
	// 	});
	//
	// };
	//
	// FLWebModal.prototype.getUserEnteredValues = function () {
	//
	// 	var userEnteredFormatValues = {};
	//
	// 	var valueField = this.valueTextBox ? this.valueTextBox.getValue() : this.valueDynTextBox ? this.valueDynTextBox.getValue() : this.modal.getContent().getElement('#sampleValue-arch') ? this.modal.getContent().getElement('#sampleValue-arch').innerText : '';
	// 	var attributeFieldLabel = this.partNumberAttributeCombobox ? this.partNumberAttributeCombobox.getOption(this.partNumberAttributeCombobox.getValue()[0]).getText() : '';
	// 	var attributeFieldValue = this.partNumberAttributeCombobox ? this.partNumberAttributeCombobox.getValue()[0] : '';
	// 	var numberOfDigits = this.counterNumberBox ? this.counterNumberBox.getValue() : '';
	//
	// 	userEnteredFormatValues[ParameterizationFLWebConstants.NAME] = this.nameTextBox.getValue();
	// 	userEnteredFormatValues[ParameterizationFLWebConstants.ORDER] = this.numberOrderBox.getValue();
	// 	userEnteredFormatValues[ParameterizationFLWebConstants.TYPE] = this.partNumberTypeCombobox.getValue()[0];
	// 	userEnteredFormatValues[ParameterizationFLWebConstants.ATTRIBUTE] = attributeFieldValue;
	// 	userEnteredFormatValues[ParameterizationFLWebConstants.ATTRIBUTE_NLS_NAME] = attributeFieldLabel;
	// 	userEnteredFormatValues[ParameterizationFLWebConstants.COUNTER] = numberOfDigits;
	// 	userEnteredFormatValues[ParameterizationFLWebConstants.VALUE] = valueField;
	//
	// 	return userEnteredFormatValues;
	// };
	//
	// FLWebModal.prototype.getUserEnteredValuesForArchNumCollabUnicity = function () {
	// 	var userEnteredFormatValues = {};
	// 	var fieldValue = '';
	// 	var csSelectList = this.collabListTextBox.getValue();
	// 	if(Array.isArray(csSelectList)) {
	// 		for(var i = 0; i < csSelectList.length-1; i++) {
	// 			fieldValue += csSelectList[i] + ',';
	// 		};
	// 		fieldValue += csSelectList[i];
	// 	} else {
	// 		fieldValue = csSelectList;
	// 	}
	// 	userEnteredFormatValues[ParameterizationFLWebConstants.NAME] = this.nameTextBoxForCollabUnicity.getValue();
	// 	userEnteredFormatValues[ParameterizationFLWebConstants.VALUE] = fieldValue;
	// 	return userEnteredFormatValues;
	// };
	//
	// FLWebModal.prototype.updateSampleText = function () {
	//
	// 	var sampleTextDiv = this.modal.getContent().getElement('#sampleValue-arch');
	// 	var updatedCount = this.counterNumberBox ? this.counterNumberBox.getValue() : '';
	// 	var noOFDigits = "";
	// 	for (var i = 0; i < parseInt(updatedCount); i++) {
	// 		noOFDigits = '0' + noOFDigits;
	// 	}
	// 	if (sampleTextDiv != null) {
	// 		sampleTextDiv.innerText = noOFDigits;
	// 	}
	//
	// };
	//
	// FLWebModal.prototype.getTotalFormatRows = function () {
	// 	return document.querySelectorAll(".partNumberFieldMapping").length;
	// };
	//
	// FLWebModal.prototype.getHighestOrder = function () {
	// 	var rowsOfMappedFields = document.querySelectorAll(".partNumberFieldMapping");
	// 	var toCheckTheExistingRows = rowsOfMappedFields.length;
	// 	var highestOrder = 0;
	// 	if (toCheckTheExistingRows > 0) {
	// 		for (var k = 0; k < rowsOfMappedFields.length; k++) {
	// 			if (parseInt(rowsOfMappedFields[k].getChildren()[1].getText()) > highestOrder) {
	// 				highestOrder = parseInt(rowsOfMappedFields[k].getChildren()[1].getText());
	// 			}
	// 		}
	// 	}
	//
	// 	return highestOrder;
	//
	// };
	// FLWebModal.prototype.isCounterExists = function (field) {
	// 	var rowsOfMappedFields = document.querySelectorAll(".partNumberFieldMapping");
	// 	var toCheckTheExistingRows = rowsOfMappedFields.length;
	// 	var isSuccess = false;
	// 	if (toCheckTheExistingRows > 0) {
	// 		for (var k = 0; k < rowsOfMappedFields.length; k++) {
	// 			if (rowsOfMappedFields[k].getChildren()[2].value == ParameterizationFLWebConstants.FORMAT_COUNTER) {
	// 				isSuccess = true;
	// 				break;
	// 			}
	// 		}
	// 	}
	//
	// 	return isSuccess;
	// };
	//
	// FLWebModal.prototype.destroyValueFieldComponents = function () {
	//
	// 	this.valueTextBox = undefined;
	// 	this.valueDynTextBox = undefined;
	// 	this.counterNumberBox = undefined;
	//
	// };
	//
	// FLWebModal.prototype.getAttributes = function (data) {
	// 	var that = this;
	// 	that.storeAttributes(data);
	// };
	//
	// FLWebModal.prototype.storeAttributes = function (data) {
	//
	// 	this.attributes = data;
	//
	// };
	//
	//
	// FLWebModal.prototype.getTextBox = function (textBoxOptions) {
	//
	// 	this.textBox = new Text(textBoxOptions);
	// 	return this.textBox;
	// };
	// FLWebModal.prototype.getNumberBox = function (numberOptions) {
	//
	// 	this.numberBox = new Number(numberOptions);
	// 	return this.numberBox;
	// };
	//
	// FLWebModal.prototype.getSelectComponent = function (selectOptions) {
	// 	this.select = new Select(selectOptions);
	// 	return this.select;
	// };
	//
	// FLWebModal.prototype.getAlertComponent = function (alertOptions) {
	//
	// 	this.alert = new Alert(alertOptions);
	// 	return this.alert;
	// };
	//
	// FLWebModal.prototype.getTooltip = function (tooltipOtions) {
	// 	this.tooltip = new Tooltip(tooltipOtions);
	// 	return this.tooltip;
	// };
	//
	// FLWebModal.prototype.show = function () {
	// 	this.modal.show();
	// };
	//
	//
	// FLWebModal.prototype._bindFooterEvent = function () {
	// 	var that = this;
	//
	// 	this.modal.getFooter().getElements('.btn').forEach(function (element) {
	// 		if (element.name === 'cancelButton') {
	// 			element.addEvent('click', function () {
	// 				that.modal.hide();
	// 			});
	// 		}
	// 	});
	//
	// };
	//
	// FLWebModal.prototype.getContent = function () {
	// 	return this.modal.getContent();
	// };
	//
	// FLWebModal.prototype.destroy = function () {
	// 	this.modal.destroy();
	// 	var keys = Object.keys(this);
	// 	for (var i = 0; i < keys.length; i++) {
	// 		this[keys[i]] = undefined;
	// 	}
	// };
	//
	// return FLWebModal;
});

define('DS/ParameterizationSkeleton/Views/ParameterizationFLWeb/ParamSAXFormulaView', [
	'UWA/Core',
	'UWA/Class/View',
	'DS/UIKIT/Mask',
	'DS/UIKIT/Scroller',
	'DS/WAFData/WAFData',
	'DS/WebappsUtils/WebappsUtils',
	'DS/ParameterizationSkeleton/Views/ParametersLayoutViewUtilities',
	'DS/ParameterizationSkeleton/Utils/ParameterizationURLHandler',
	'DS/ParameterizationSkeleton/Views/ParameterizationFLWeb/CompanyIDViewUtilities',
	'DS/ParameterizationSkeleton/Views/ParameterizationFLWeb/ParameterizationFLWebConstants',
	'DS/UIKIT/Input/Button',
	'DS/UIKIT/Alert',
	'DS/ParameterizationSkeleton/Views/ParametersLayoutView',
	"DS/ParameterizationSkeleton/Views/ParameterizationFLWeb/ParamSAXFormulaModal",
	"DS/Skeleton/SkeletonLayout",
	"DS/ParameterizationSkeleton/Views/ParameterizationFLWeb/ParamSAXFormulaTable",
	'DS/UIKIT/Modal',
	'DS/Controls/ComboBox',
	'DS/CoreEvents/ModelEvents',
	'DS/Tree/TreeDocument',
  'DS/Tree/TreeNodeModel',
	'i18n!DS/ParameterizationSkeleton/assets/nls/FLWebNLS'
	],
	function(UWA,
			View,
			Mask,
			Scroller,
			WAFData,
			WebappsUtils,
			ParametersLayoutViewUtilities,
			URLHandler,
			CompanyIDViewUtilities,
			ParameterizationFLWebConstants,
			Button,
			Alert,
			ParametersLayoutView,
			ParamSAXFormulaModal,
			SkeletonLayout,
			ParamSAXFormulaTable,
			Modal,
			WUXComboBox,
			ModelEvents,
			TreeDocument,
			TreeNodeModel,
			FLWebNLS) {

	'use strict';

	var extendedView;
	const modelEvent = new ModelEvents();
	let model = null;
	extendedView = View.extend({
		tagName: 'div',
		className: 'generic-detail',

		init: function(options) {
			var initDate = new Date();
			options = UWA.clone(options || {}, false);
			this._parent(options);
			this.options = options;
			this.contentDiv = null;
			this.lastAlertDate = initDate.getTime();

			this.paramScroller = null;
			this.paramAltSubScroller = null; //paramUnicitySubScroller
			this.userMessaging = null;
			this.controlDiv = null;
      this.cellsIndexForArchNumCollab = {
          "name": 0,
          "value": 1,
          "action": 2,
          "deployFlag": 3
      };
		},

		setup: function(options) {
			UWA.log('Architect Layout::setup!');
			UWA.log(options);
		},

		render: function() {
			UWA.log("Architect LayoutView::render");
			var introDiv,
			mappingDiv,
			that = this;

			this.contentDiv = UWA.createElement('div', {
				'id': 'typeMainDiv'
			});
			Mask.mask(this.contentDiv);
			// introDiv = UWA.createElement('div', {
			// 	'class': 'information-arch'
			// }).inject(this.contentDiv);
			//
			// UWA.createElement('p', {
			// 	text: FLWebNLS.intro,
			// 	'class': 'font-3dslight'
			// }).inject(introDiv);

			this.parentView = new ParametersLayoutView(this.options);
			//this.controlDiv = ParametersLayoutViewUtilities.createApplyResetToolbar.call(this, this.contentDiv, true, this.applyParams.bind(this), this.resetParams.bind(this));
			this.container.setContent(this.contentDiv);
			this.listenTo(this.collection, {
				onSync: that.onCompleteRequestMapping
			});
			return this;
		},

		onCompleteRequestMapping: function() {
			var that = this;
			const url = URLHandler.getURL() +'/resources/v1/SystemsArchitectureDefinitionParam/isOtbParameterFormatByTypeEnabled';
			//ParamSAXFormulaView
		 	WAFData.authenticatedRequest(url, {
				 timeout: 250000,
				 method: 'GET',
				 type: 'json',
				 headers: {
					 'Content-Type': 'application/json',
					 // 'Accept': 'application/json',
				 },
				 onFailure: (result) => {
					 this.showAlertMsg(FLWebNLS.FailedToGetData, 'error', widget.body)
				 },
				 onComplete: (result) => {
				   if(result.message == 'true'){
							const collectionTypeBasedAnTable = this.collection._models[0]._attributes;
							const parsedCollection = this.parserForTypeBasedANFormatRes(collectionTypeBasedAnTable.ExpressionList)
							this.columns = parsedCollection.columns;
							const tableData = {
								 columns:[{
									 type: true,
									 nls: FLWebNLS.itemType
								 },{
									 formula: true,
									 nls: FLWebNLS.formula_header
								 }],
								 rows:[]
							}
				      let th = null,tr = null, td = null, actnTd = null;

				      this.table = UWA.createElement('table',{
				        class: 'formula-list-table',
				        styles: {
				          'table-layout': 'fixed',
				          width: '100%'
				        }
				      });
							this.table.addEvent('click', (e)=>{
								//e.target.getParent('tr').destroy();
								if(e.target.hasClassName('fonticon-trash'))
									this.createConfirmationDialog(e);
							});

				      const thead = UWA.createElement('tr',{
				        class: 'formula-list-table-thead',
				        styles: {
				          color: 'hsl(106deg 36% 34%)'
				        }
				      }).inject(this.table);

				      this.columns.forEach(
								entry => this.createTableHeadCell(entry, thead, true)
						  );
						  this.createTableHeadCell({nls:FLWebNLS.actions}, thead, false)

				      parsedCollection.rows.forEach(
								row => this.createTableRow(row)
							);
							this.contentDiv.appendChild(this.table);
				      this.createPlusActionBtn().inject(this.contentDiv);
							Mask.unmask(this.contentDiv);
							this.parentView.render();

							modelEvent.subscribe({event:'New_SubType_Formula'}, (data) => {
		 						 const tableData = {
									 columns:[{
  									 type: true,
  									 nls: FLWebNLS.itemType
  								 },{
  									 formula: true,
  									 nls: FLWebNLS.formula_header
  								 }],
		 			 				rows:[{
		 			 					type: data.nls,
		 			 					formula: data.formula,
		 			 					value:data.value
		 			 				}]
		 			 			}
		 			 			this.createTableRow(tableData.rows[0])
	 					 });

	 					 modelEvent.subscribe({event:'Edit_ExistingSubType_Formula'}, (data) => {
		 						 const editedRow = this.table.querySelector(`[type-name=${data.typeName}]`);
		 						 const formulaCell = editedRow && editedRow.querySelector(`[cell-col-value=formula]`);
		 						 if(formulaCell){
									 formulaCell.innerText = data.formulaValue;
								 }
								 let argsArray = CompanyIDViewUtilities.argsForUpdatingFormulaHeader;
			 					 if(argsArray && Array.isArray(argsArray) && argsArray.length>0){
			 							for(let eachArgList of argsArray){
			 								CompanyIDViewUtilities.updateFormulaTextFields.apply(CompanyIDViewUtilities,eachArgList);
			 							}
			 					 }
								 // document.getElementById('partNumberFormulaMapping').getChildren()[2].innerText = res.anFormat;
								 // document.getElementById('partNumberFormulaMapping').getChildren()[2].style.fontSize = '21px';
	 					 });
						} else {
							UWA.log('Rendering for Single AN Format!!!');
							var collection = this.collection._models[0]._attributes;
							ParamSAXFormulaTable.setANFormulaView(this.collection, that.contentDiv);
						}
				 }
			 });
		},

		parserForTypeBasedANFormatRes: function(result){
			const parsedResultHolder = {
				columns:[{
					type: true,
					nls: FLWebNLS.itemType
				},{
					formula: true,
					nls: FLWebNLS.formula_header
				}],
				rows:[]
			}
			for(let entry of result){
				parsedResultHolder.rows.push({
					type: entry.typeNLS,
					value: entry.type,
					formula: entry.anFormat
				})
			}
			return parsedResultHolder;
		},
		createNewSubTypeANFormat: function(selectedSubType){
			const url = `${URLHandler.getURL()}/resources/v1/SystemsArchitectureDefinitionParam/getAttributesToCreateNewSubTypeANFormat?
			flpType=${selectedSubType.value}&tenant=${URLHandler.getTenant()}`;
			Mask.mask(this.contentDiv);
			WAFData.authenticatedRequest(url, {
				timeout: 250000,
				method: 'GET',
				// data: JSON.stringify({
				// 	ParameterExpressionList:[],
				// 	flpType:selectedSubType.value
				// }),
				type: 'json',
				headers: {
					'Content-Type': 'application/json',
					'Accept': 'application/json'
				},
				onFailure: (result) => {
				this.showAlertMsg(FLWebNLS.FailedToGetData, 'error', widget.body)
				Mask.unmask(this.contentDiv);
				//	Mask.unmask(that.contentDiv);
				//	that.onApplyFailure(FLWebNLS.ApplyError);
				},
				onComplete: (result) => {
					Mask.unmask(this.contentDiv);
					if (result && result.status != 400) {
						const newSubTypeEvntObj = {
								event:'New_SubType_Formula',
								 data:{
									nls:selectedSubType.nls,
									value:selectedSubType.value,
									formula:`[${FLWebNLS.freeValue}]`,
								}
						}
						this.showEmptySAXFormTable({
							result,
							data:{
								typeName:selectedSubType.value,
							},
							newSubTypeEvntObj
						});
					} else {
						this.showAlertMsg(result.message, 'error', widget.body)
					}
				}

			});
		},
		showEmptySAXFormTable: function(options){
      ParamSAXFormulaModal.showFormulaTable({
        parent: this.contentDiv,
        collection: {_models:[{
					'_attributes':{
		          ExpressionList:{},
		          PhysicalProductAttributes: options.result
		        }
				}]},
				modelEvent: {
					eventObj:modelEvent,
					name: 'Edit_ExistingSubType_Formula',
					data: options.data
				},
				newSubTypeEvntObj: options.newSubTypeEvntObj
      });
			this.typeSelectionModal.destroy();
    },
    createTypeSelectionModal: function(optionList){
        const that = this;
        that._callBack = this.createNewSubTypeANFormat;
        const header = FLWebNLS.selectType;
				//that.submit = 'Done';
        const footer = () => {
          const arrFooter = [];
          const cancelBtn = new Button({
                    id : 'confirmation-fail',
                    value : FLWebNLS.cancel,
                    events : {
                        onClick : () => {
                          this.typeSelectionModal.destroy();
                        }
                    }
          });
          const confirmBtn = new Button({
                    id : 'confirmation-success',
                    value : FLWebNLS.done,
										className: 'primary',
                    events : {
                        onClick : () => {
                          if(this.myComboBox && (!this.myComboBox.value || this.myComboBox.value == '')) {
                              //CommonUtil.alertMessage('error', null, null, 'Please select a type.');
															this.showAlertMsg('Please select a type.', 'error', widget.body)
                              return;
                          }
                          this._callBack({
														value:this.myComboBox.value,
														nls:this.myComboBox.label
													});
                        }
                    }
          });
          arrFooter.push(confirmBtn);
          arrFooter.push(cancelBtn);
          return arrFooter;
        }
        const content = () => {
          const selectionBox = UWA.createElement('div',{
            styles: {
              width: '100%',
              display: 'flex',
              padding: '10px'
            //  height: '100%'
            }
          });
          const messageDiv = UWA.createElement('div',{
            html: 'Type',
            styles:{
              flex: 0.3,
              'padding-right': '10px',
              'font-weight': 'bold'
            }
          });
          this.myComboBox = new WUXComboBox({
            // elementsList: optionList
						elementsTree: optionList
          });
          messageDiv.inject(selectionBox)
          this.myComboBox.inject(selectionBox);
          this.myComboBox.getContent().setStyle('flex', '0.6');
          return selectionBox;
        }

        this.typeSelectionModal = new Modal({
										closable : true,
										header : header,
										body : content(),
										footer : footer(),
										events : {
												onHide : function() {
												this.destroy();
											}
										}
          });
					this.typeSelectionModal.getContent().setStyle('padding-top', '35px')
          this.typeSelectionModal.inject(this.contentDiv);
          this.typeSelectionModal.show();
    },
		createConfirmationDialog: function(deleteEl){
			const footer = (e) => {
				const arrFooter = [];
				const cancelBtn = new Button({
									id : 'confirmation-fail',
									value : FLWebNLS.cancel,
									events : {
											onClick : () => {
												this.confirmDialog.destroy();
											}
									}
				});
				const confirmBtn = new Button({
									id : 'confirmation-success',
									value : FLWebNLS.done,
									className: 'primary',
									events : {
											onClick : (e) => {
												const url = URLHandler.getURL() + "/resources/v1/SystemsArchitectureDefinitionParam/setParamArchitectureNumberExpressions?tenant=" + URLHandler.getTenant();
												const payloadToSend = {
													flpType:deleteEl.target.closest('tr').getAttribute('type-name'),
													ParameterExpressionList:[]
												}
											 	WAFData.authenticatedRequest(url, {
													 timeout: 250000,
													 method: 'POST',
													 data: JSON.stringify(payloadToSend),
													 type: 'json',
													 headers: {
														 'Content-Type': 'application/json',
														 'Accept': 'application/json'
													 },
													 onFailure: (result) => {
														 this.showAlertMsg(FLWebNLS.FailedToGetData, 'error', widget.body)
													 },
													 onComplete: (result) => {
														 this.showAlertMsg(FLWebNLS.deleteSuccess, 'success', widget.body)
														 deleteEl.target.closest('tr').remove()
													 }
											 	});
												this.confirmDialog.destroy();
											}
									}
				});
				arrFooter.push(confirmBtn);
				arrFooter.push(cancelBtn);
				return arrFooter;
			}
			this.confirmDialog = new Modal({
									closable : true,
									header : FLWebNLS.deleteHeader,
									body : `<p>${FLWebNLS.deleteConfirm}<p>`,
									footer : footer(),
									events : {
											onHide : function() {
											this.destroy();
										}
									}
				});
				this.confirmDialog.getContent().setStyle('padding-top', '35px')
				this.confirmDialog.inject(this.contentDiv);
				this.confirmDialog.show();
		},
    createPlusActionBtn: function(){
      const addBtn = new Button({
				className: 'AddPartNumberFieldButton',
				icon: 'plus-circled',
        styles: {
          'margin-top': '15px'
        },
				attributes: {
					disabled: false,
					'aria-hidden': 'true',
					title: FLWebNLS.addFormula,
				},
				events: {
					onClick: (e) => {
						if(model){
							this.createTypeSelectionModal(model);
						} else {
							Mask.mask(this.contentDiv);
							const url = `${URLHandler.getURL()}
							/resources/v1/modeler/dsfl/metaTypes?tenant=${URLHandler.getTenant()}`
							WAFData.authenticatedRequest(url, {
								 timeout: 250000,
								 method: 'POST',
								 data: JSON.stringify( ["RFLVPMLogicalReference", "VPMReference"]),
								 type: 'json',
								 headers: {
									 'Content-Type': 'application/json',
									 'Accept': 'application/json'
								 },
								 onFailure: (result) => {
									 Mask.unmask(this.contentDiv);
									 this.showAlertMsg(FLWebNLS.FailedToGetData, 'error', widget.body)
								 },
								 onComplete: (result) => {
									 const subTypeList = result.Types, /*iconPath = result.iconsPath,*/ curateSubTypeList=[];
									 if(Array.isArray(subTypeList) && subTypeList.length > 0){
										 subTypeList.sort(function(a,b){
					              if (a.NLS.toLowerCase() < b.NLS.toLowerCase()) return 1;
					              if (a.NLS.toLowerCase() > b.NLS.toLowerCase()) return -1;
					              return 0;
					            });
					           subTypeList.sort(function(a,b){
					              if (a.PackageName.toLowerCase() < b.PackageName.toLowerCase()) return 1;
					              if (a.PackageName.toLowerCase() > b.PackageName.toLowerCase()) return -1;
					              return 0;
					            });
					           subTypeList.reverse();

										  var that = this;
						          var subTypeListByPackage = {};
						          var defaultType = null;
						          var prevPackage = null;
						          var currentPackage = null;
						          var root = null;
						          model = new TreeDocument({
						            shouldBeSelected: function(nodeModel){
						              return !nodeModel.options.isPackage;
						            }
						          });
						          var iconPath = null;
						          model.prepareUpdate();
						          var subType = null;
										 for(var i=0; i<subTypeList.length; i++){
						            subType = subTypeList[i];
						           // if (subType.Abstract !== 'True') {
						              currentPackage = subType.PackageName;
						              if(currentPackage && (prevPackage === null || prevPackage !== currentPackage)){
						                  //that.createNode()
						                  if(root !== null){
						                      model.addRoot(root);
						                      root.expandAll();
						                  }
						                  root = new TreeNodeModel({
						                      label: currentPackage,
						                      value : subType.Package,
						                      isPackage : true
						                  });
						                  prevPackage = currentPackage;
						              }
						              //iconPath =  ConfigUtil.getTypeIconUrl(subType.IconName);
						              iconPath =  URLHandler.getURL()+'/snresources/images/icons/small/' + subType.IconName;
						              root.addChild(new TreeNodeModel({
						                  label: subType.NLS,
						                  icons:[iconPath],
						                  isPackage: false,
						                  grid: {
						                    valueItem: subType.Name,
						                  }
						              }));
						         //   }
						          }
											model.pushUpdate();
											this.createTypeSelectionModal(model);
											Mask.unmask(this.contentDiv);
									 }
								 }
							});
						}
					}
				}
			})
      return addBtn;
    },
    createEditBtn: function(){
      const editBtnElem = ParametersLayoutViewUtilities.createActionElements(FLWebNLS.label_edit, false);
      const spanOfEditBtn = editBtnElem[0];
      const editBtn = editBtnElem[1];
      spanOfEditBtn.setStyle("padding", "0px 8px");
      editBtn.addEvent("onClick", (e) => {
				Mask.mask(this.contentDiv);
				const typeName = e.target.closest('tr').getAttribute('type-name');
				var url = `${URLHandler.getURL()}
				/resources/v1/SystemsArchitectureDefinitionParam/getParamArchitectureNumberExpressions?
				tenant=${URLHandler.getTenant()}&flpType=${typeName}`;
				WAFData.authenticatedRequest(url, {
					timeout: 250000,
					method: 'GET',
					// data: JSON.stringify(payloadToSend),
					// type: 'json',
					headers: {
						'Content-Type': 'application/json',
					},
					onFailure: (result) => {
						this.showAlertMsg(FLWebNLS.FailedToGetData, 'error', widget.body)
					},
					onComplete:(result) => {
						const res = JSON.parse(result);
						if(res.ParameterExpressionList && res.ParameterExpressionList.length > 0){
							for(let entry of res.ParameterExpressionList){
								entry.Deployed = 'True';
							}
						} else {
							this.showAlertMsg(FLWebNLS.FailedToGetData, 'error', widget.body)
							return;
						}
						this.collection._models[0]._attributes.ExpressionList = res.ParameterExpressionList;
						this.collection._models[0]._attributes.PhysicalProductAttributes = res.Attribues;
						CompanyIDViewUtilities.argsForUpdatingFormulaHeader = [];
						ParamSAXFormulaModal.showFormulaTable({
		          parent: this.contentDiv,
		          collection: this.collection,
							modelEvent: {
								eventObj:modelEvent,
								name: 'Edit_ExistingSubType_Formula',
								data:{typeName}
							}
		        });
						let argsArray = CompanyIDViewUtilities.argsForUpdatingFormulaHeader;
						if(argsArray && Array.isArray(argsArray) && argsArray.length>0){
							for(let eachArgList of argsArray){
								CompanyIDViewUtilities.updateFormulaTextFields.apply(CompanyIDViewUtilities,eachArgList);
							}
						}
						// document.getElementById('partNumberFormulaMapping').getChildren()[2].innerText = res.anFormat;
						// document.getElementById('partNumberFormulaMapping').getChildren()[2].style.fontSize = '21px';
						Mask.unmask(this.contentDiv);
					}
				});
      })
      return spanOfEditBtn;
    },
		createRemoveBtn: function(){
			const removelts = ParametersLayoutViewUtilities.createActionElements(FLWebNLS.removeField, true);
			const spanOfEditBtn = removelts[0];
      const editBtn = removelts[1];
      spanOfEditBtn.setStyle("padding", "0px 8px");
      return spanOfEditBtn;
		},
		// ShowAddNewFieldPanel: function(attrtbody) {
		// 	this.createPartNumberingDialogBox(attrtbody);
		// 	var isDeployed = ParameterizationFLWebConstants.NEW_NOT_DEPLOYED;
		// },
		createTableHeadCell: function(item,thead,addClass){
      let th = UWA.createElement('th',{
        class: 'formula-list-th',
        styles: {
          'background-color': 'hsl(109deg 38% 94%)',
          padding: '5px'
        },
        html: `<h5>${item.nls}<h5>`
      });
			if(addClass){
				th.addClassName('success');
	      th.addClassName('architectureNumberingField')
			}
      th.inject(thead)
    },
		createTableRow: function(row) {
      let tr = null, td = null, actnTd = null, spanOfEditBtn = null, spanOfRemBtn = null, cols = this.columns;
      tr = UWA.createElement('tr',{
        class: 'formula-list-table-row',
        styles:{
          'border-top': '1px solid hsl(150deg 4% 89%)',
        },
				attributes:{
					'type-name': row.value
				}
      })
      tr.inject(this.table);
      cols.forEach((col) => {
				let colName = Object.keys(col)[0]
        td = UWA.createElement('td',{
          class: 'formula-list-td',
          styles:{
            padding: '5px',
						overflow:'hidden'
          },
					attributes:{
						'cell-col-value': colName
					}
        //  html: row[Object.keys(col)[0]]
        });
				td.innerText = row[colName];
        td.inject(tr)
      });

      actnTd = UWA.createElement('td',{
        class: 'formula-list-td'
      });
      spanOfEditBtn = this.createEditBtn();
      spanOfEditBtn.inject(actnTd);
			spanOfRemBtn = this.createRemoveBtn();
      spanOfRemBtn.inject(actnTd);
      actnTd.inject(tr)
    },
		showAlertMsg: function(msg,status,conatiner){
			const alertOptions = {
					visible: true,
					className: 'param-alert',
					messageClassName: status,
					closable: true,
					renderTo: conatiner,
					autoHide: true,
					hideDelay: 2000
			};
		//	var alert = this.getAlertComponent(alertOptions);
			let alert =  new Alert(alertOptions);
			alert.add({
				message: msg
			});
		}
	});

	return extendedView;
});

