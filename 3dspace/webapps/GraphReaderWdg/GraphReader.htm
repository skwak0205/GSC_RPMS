
<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:widget="http://www.netvibes.com/ns/">
    <head>
        <!-- Application Infos -->
        <title>Metrics Reader</title>

        <meta name="author" content="s55" />
        <meta name="description" content="Metrics Reader" />
        <meta name="apiVersion" content="1.3" />
        <meta name="debugMode" content="false" />
        <meta name="strictMode" content="false" />
        <meta name="autoRefresh" content="0" />

        <!-- Application Preferences -->
        <widget:preferences>
            <widget:preference name="url" type="hidden" defaultValue="" />
            <widget:preference name="isUrlAuth" type="hidden" defaultValue="" />
            <widget:preference name="lastScreen" type="hidden" defaultValue="" />
            <widget:preference name="data" type="hidden" defaultValue="" />
            <widget:preference name="originalData" type="hidden" defaultValue="" />
            <widget:preference name="rawData" type="hidden" defaultValue="" />
            <widget:preference name="title" type="hidden" defaultValue="" />
            <widget:preference name="lastRefreshUrl" type="hidden" defaultValue="0" />
            <widget:preference name="refreshUrl" type="hidden" defaultValue="0" />
            <widget:preference name="tags" type="hidden" defaultValue="" />
            <widget:preference name="csvSeparator" type="hidden" defaultValue="" />
        </widget:preferences>

        <link rel="stylesheet" type="text/css" href="../UIKIT/UIKIT.css" />

        <!-- Application Source -->
        <script type="text/javascript">
            //<![CDATA[

            /*global
                require, widget
            */
            require(
            [
                'DS/GraphReaderWdg/GraphReader',

                'TagNavigatorProxy/TagNavigatorProxy'
            ],
            function (GraphReader, TagNavigatorProxy) {
                'use strict';

                /**
                 * Is the widget is read only.
                 * @return {Boolean} Is the widget is read only.
                 */
                function isReadOnly () {

                    var instances, i, instance, env, widgetId,
                        isReadOnly = false;

                    if (!widget || !top || !top.UWA || !top.UWA.Widgets || !top.UWA.Widgets.instances) {
                        return isReadOnly;
                    }

                    widgetId = widget.id;
                    instances = top.UWA.Widgets.instances || [];

                    for (i = instances.length - 1; i >= 0; i--) {
                        instance = instances[i];
                        env = instance.environment || {};

                        if (env.embedded) {
                            if (env.embedded.id === widgetId) {
                                isReadOnly = !env.wp.isEditable;
                                break;
                            }
                        } else {
                            if (env.id === widgetId) {
                                isReadOnly = !env.wp.isEditable;
                            }
                        }
                    }

                    return isReadOnly;
                } // End function isReadOnly()


                new GraphReader({
                    widget: widget,
                    readOnly: isReadOnly(),
                    TagNavigatorProxy: TagNavigatorProxy
                });
            });

            //]]>
        </script>
    </head>

    <body></body>

</html>
