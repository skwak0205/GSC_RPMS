<%--
  RMTRequirementBundleProcess.jsp

  Copyright (c) 1999-2020 Dassault Systemes.
  All Rights Reserved.
  This program contains proprietary and trade secret information of MatrixOne,
  Inc.  Copyright notice is precautionary only
  and does not evidence any actual or intended publication of such program

	
  Performs actions that modify the Requirement bundle structure.
  
  This page can be called as a submit URL from a creation page, as a process page from a table. This page is NOT meant to display any information to the end-use except error messages.

  Parameters : 
	emxTableRowId: expecting an formatted emxTableRowId generated by an indented table
		format : <relationship id> | <object id> | <parent id>
	program: name of the JPO to invoke and the method to call
		format : <ProgramName:MethodName> 
		e.g. : RMTRequirementBundle:DetachSelected
	targetType (optional): 
		to be used when the type of the selected objects must be check. 
		The page will throw an error if the selected item type is not 
		the specified on.
	operation: 
		detach : detach all of the selected objects from their parent (as displayed in the tree)
		delete : delete all the selected objects
 --%>
 <%-- 
 		@quickreview XXXX	XXXX	MM:DD:YY	: COMMENT
 		@quickreview T25 	OEP 	12:10:12	: HL ENOVIA_GOV_RMT XSS Output Filter . XSS Output filter corresponding tags are added under respective scriplet
      	@quickreview T25	OEP 	12:18:12	: HL ENOVIA_GOV_RMT XSS Output Filter . XSS Output filter corresponding tags Lib is included
      	@quickreview T25 	DJH 	10:18:13	: HL ENOVIA GOV RMT Cloud security (prevent XSRF & JPO injection) .corresponding .inc is included.
      	@quickreview LX6	JX5		MM:DD:YY	: IR-184727R2013x "TVTZ,JA-V6R2013x-CATIA-RMT-Wk32.3-T2.4.3 _S20: Error message is not getting translated
      	@quickreview LX6	JX5		MM:DD:YY	: IR-187534V6R2014  "STP: In Webtop, Edit Detail slide in window is not getting close after clicking on Done button
      	@quickreview JX5			06:11:15	: Autoname checked by default
--%>

<%-- Common Includes --%>


<%@include file="../emxUICommonAppInclude.inc"%>
<%@include file = "../emxTagLibInclude.inc"%>


<%@page import="com.matrixone.apps.domain.DomainConstants"%>
<%@page import="com.matrixone.apps.domain.DomainObject"%>
<%@page import="com.matrixone.apps.domain.DomainRelationship"%>
<%@page import="com.matrixone.apps.framework.ui.UINavigatorUtil"%>
<%@page import="com.matrixone.apps.requirements.RequirementGroup"%>
<%@page import="com.matrixone.apps.requirements.RequirementsUtil"%>
<%@page import="com.matrixone.apps.domain.util.i18nNow"%>
<%@page import="com.dassault_systemes.requirements.ReqSchemaUtil"%>

<%@page import="matrix.util.MatrixException"%>
<%@include file = "../common/enoviaCSRFTokenValidation.inc"%>


<%!
	public boolean isOfType(Context context, String strSourceObjectId, String strType) throws MatrixException 
	{

	  	if (strSourceObjectId == null)
	  	{
	  	    return false;
	  	}
	  	DomainObject dmoObject = DomainObject.newInstance(context, strSourceObjectId);
	  	return dmoObject.isKindOf(context, strType);    
	}



%>
<%
	String tableRowIds= emxGetParameter(request,"emxTableRowId"); //for JPO calling
	String strOperation= emxGetParameter(request,"operation");
	String targetSite = emxGetParameter(request,"location"); 
	
	String[] arrRowIds = emxGetParameterValues(request, "emxTableRowId"); //for internal ops
	if(arrRowIds == null || arrRowIds.length == 0)
	{
		throw new FrameworkException("invalid parameter - at least one item must be selected");
	}

	boolean bIsFromTree = (arrRowIds[0].indexOf("|") >= 0);

	i18nNow i18n  = new i18nNow();
	String msg = ""; 
	boolean fail = false;
	String action = "";

	try
	{

		if("createSubGroup".equalsIgnoreCase(strOperation))
		{
				String currInfo = arrRowIds[0];
				String[] infos = currInfo.split("\\|");
				String objId = infos[1];
				if(!isOfType(context,objId, "Requirement Group"))
				{//type check failed
				 	action = "error";
				 	//Start:IR:184727V6R2013x:LX6
				 	throw new Exception("InvalidSelectionForGroupOperation");
				 	//End:IR:184727V6R2013x:LX6
				}
				else
				{
				   String autonameChecked = EnoviaResourceBundle.getProperty(context, "emxRequirements.form.create.autonamechecked");
		           if(autonameChecked == null || autonameChecked.equalsIgnoreCase("")){
		           		autonameChecked = "true";
		           	}
					String href = "../common/emxCreate.jsp?targetLocation=slidein&autoNameChecked="+autonameChecked+"&suiteKey=Requirements&type=type_RequirementGroup&typeChooser=true&nameField=both&vaultChooser=true&form=RMTRequirementGroup&header=emxRequirements.Heading.CreateSubGroup&HelpMarker=emxhelpnewsubderivedreqcreate&showApply=true&relationship=relationship_SubRequirementGroup&isChildCreation=true&submitAction=xmlMessage&postProcessURL=../requirements/RMTGroupCreationPostProcess.jsp&objectCompare=false&showClipboard=false&operation=CreateSubGroup&categoryTreeName=null"; 
					href += ("&objectId="+objId);
%>
					<script language="javascript" type="text/javaScript">
					window.location.href = "<%=XSSUtil.encodeForJavaScript(context, href) %>";
					</script>
<%		
//					response.sendRedirect(href);
					return;
				}
		}
		else if("detachReq".equalsIgnoreCase(strOperation))
		{ 
			if(!bIsFromTree)
			{
				//Start:IR:184727V6R2013x:LX6
				throw new Exception("invalidDetachOperation");
				//End:IR:184727V6R2013x:LX6
			}
			action = "remove";
			for(int i = 0 ; i < arrRowIds.length ; i++)
			{
				String currInfo = arrRowIds[i];
				msg += ("current info = " + currInfo +" ");
				String[] infos = currInfo.split("\\|");
				for (int j = 0; j < infos.length ; j++)
				{
					msg +=  (" infos["+j+"] "+infos[j]+ " " );
				}
				if(null != infos)
				{
					String objId = infos[1];
					msg += (" detaching obj " + objId + " ");
					if(!isOfType(context,objId, "Requirement Specification"))
					{
						action = "error"; 
						//Start:IR:184727V6R2013x:LX6
						throw new Exception("InvalidSelectionForSpecificationOperation");
						//End:IR:184727V6R2013x:LX6
					}
					else
					{
						String relId = infos[0];
						DomainRelationship.disconnect(context, relId);
						msg += " - detach done - ";
					}
				}
			}
		} 
		else if ("detachGroup".equalsIgnoreCase(strOperation))
		{
			if(!bIsFromTree)
			{
				//Start:IR:184727V6R2013x:LX6
				throw new Exception("invalidDetachOperation");
				//End:IR:184727V6R2013x:LX6
			}
			action = "remove";
			for(int i = 0 ; i < arrRowIds.length && !action.equalsIgnoreCase("error") ; i++)
			{
				String currInfo = arrRowIds[i];
				msg += ("current info = " + currInfo +" ");
				String[] infos = currInfo.split("\\|");
				for (int j = 0; j < infos.length ; j++)
				{
					msg +=  (" infos["+j+"] "+infos[j]+ " " );
				}
				if(null != infos)
				{
					String objId = infos[1];
					msg += (" detaching obj " + objId + " ");
					if(!isOfType(context,objId, "Requirement Group"))
					{
						action = "error"; 
						//Start:IR:184727V6R2013x:LX6
						throw new Exception("InvalidSelectionForGroupOperation");
						//End:IR:184727V6R2013x:LX6
					}
					else
					{
						String relId = infos[0];
						if(relId == null || relId.length() == 0)
						{//trying to detach a root element.
							
							action = "error"; 
							//Start:IR:184727V6R2013x:LX6	
							throw new Exception("SpecificationRemoveRoot");
							//End:IR:184727V6R2013x:LX6
						}
						else
						{
							DomainRelationship.disconnect(context, relId);
							msg += " - detach done - ";
						}
					}
				}
			}
		}
		else if ("delete".equalsIgnoreCase(strOperation))
		{
			ContextUtil.startTransaction(context, true);
			action = "remove"; //for refresh handling
			for(int i = 0 ; i < arrRowIds.length ; i++)
			{
				
				String currInfo = arrRowIds[i];
				String objId = "";
				String[] infos = currInfo.split("\\|");
				if(bIsFromTree)
				{
					if(null != infos)
					{	
						objId = infos[1];
					}
				}
				else
				{
					objId = currInfo;
					
				}
				DomainObject parentObject = DomainObject.newInstance(context, objId);
				String objTypes =  ReqSchemaUtil.getRequirementGroupType(context) + "," 
								+ReqSchemaUtil.getSpecificationType(context);			
				String relTypes = ReqSchemaUtil.getSpecStructureRelationship(context)+ ","
									+ReqSchemaUtil.getSubRequirementGroupRelationship(context);
		      	StringList objSelect = new StringList(DomainConstants.SELECT_ID);
		      	StringList relSelect = new StringList(DomainConstants.SELECT_RELATIONSHIP_ID);
		
		 	 	// Get the child relationship objects and sort them based on the SequenceOrder attribute...
		 		MapList relObjects = parentObject.getRelatedObjects(context, relTypes, objTypes, objSelect, relSelect, false, true, (short) 1, "", "");
		 	 	
				if(relObjects != null  && relObjects.size()>0){
					action = "error";
					ContextUtil.abortTransaction(context);
					throw new Exception("objectHasChildren");
				}
				
				if(objId == null || objId.length() == 0)
				{//sanity check failed
					//Start:IR:184727V6R2013x:LX6
					throw new Exception("failedIdRetrieve");
					//End:IR:184727V6R2013x:LX6
				}
				
				msg += (" delete obj " + objId + " ");
				if(!isOfType(context,objId, "Requirement Group"))
				{//type check failed
				 	action = "error";
				 	ContextUtil.abortTransaction(context);
				 	//Start:IR:184727V6R2013x:LX6 	
				 	throw new Exception("InvalidSelectionForGroupOperation");
				 	//End:IR:184727V6R2013x:LX6
				}
				else
				{
					if(bIsFromTree && (infos[0] == null || infos[0].length() == 0))
					{
						action = "error"; 
						ContextUtil.abortTransaction(context);
						//Start:IR:184727V6R2013x:LX6
						throw new Exception("SpecificationRemoveRoot");
						//End:IR:184727V6R2013x:LX6
					}
					else
					{
						//delete the object
						DomainObject obj = new DomainObject(objId); 
						obj.deleteObject(context);
						msg += " - detach done - ";
					}
				}
			}
			ContextUtil.commitTransaction(context);
		}
		else if("deletewithsub".equalsIgnoreCase(strOperation))
		{
			action = "remove"; //for refresh handling
			for(int i = 0 ; i < arrRowIds.length ; i++)
			{
				String currInfo = arrRowIds[i];
				String objId = "";
				if(bIsFromTree)
				{
					String[] infos = currInfo.split("\\|");
					if(null != infos)
					{	
						objId = infos[1];
					}
				}
				else
				{
					objId = currInfo;
					
				}
				
				if(objId == null || objId.length() == 0)
				{//sanity check failed 
					//Start:IR:184727V6R2013x:LX6
					throw new Exception("failedIdRetrieve");
					//End:IR:184727V6R2013x:LX6
				}
				if(!isOfType(context,objId, "Requirement Group"))
				{//type check failed
					action = "error"; 
					//Start:IR:184727V6R2013x:LX6
					throw new Exception("InvalidSelectionForGroupOperation");
					//End:IR:184727V6R2013x:LX6
				}
				else
				{
					msg += (" deleting obj " + objId + " ");
	
					//delete the object
					RequirementGroup obj = new RequirementGroup(objId);
					obj.deleteGroupWithSubGroups(context);
				}
			}
		
		}
		else if ("createReqSpec".equalsIgnoreCase(strOperation))
		{
			String objInfo = arrRowIds[0];
			String[] infos = objInfo.split("\\|");
			String objId = infos[1];

			if(!isOfType(context,objId, "Requirement Group"))
			{
				action = "error";
				//Start:IR:184727V6R2013x:LX6
				throw new Exception("InvalidSelectionForGroupOperation");
				//End:IR:184727V6R2013x:LX6
			}
			else
			{
				String href = "../requirements/SpecificationCreateFS.jsp?relationship=relationship_RequirementGroupContent&direction=from"; 
				href += ("&emxTableRowId="+objInfo);
%>
				<script language="javascript" type="text/javaScript">
				window.location.href = "<%=XSSUtil.encodeForJavaScript(context, href) %>";
				</script>
<%		
//				response.sendRedirect(href);	
				return;
			}
		}		
		else if ("attachExistingReqSpec".equalsIgnoreCase(strOperation))
		{
			String objInfo = arrRowIds[0];
			String[] infos = objInfo.split("\\|");
			String objId = infos[1];

			if(!isOfType(context,objId, "Requirement Group"))
			{
				action = "error";
				//Start:IR:184727V6R2013x:LX6
				throw new Exception("InvalidSelectionForGroupOperation");
				//End:IR:184727V6R2013x:LX6
			}
			else
			{
				String href = "../requirements/RequirementStructureAddExisting.jsp?table=RMTSearchSpecificationsTable&toolbar=none&editLink=false&addType=Specification&relName=relationship_RequirementGroupContent&from=true&suiteKey=Requirements"; 
				href += ("&objectId="+objId);
%>
				<script language="javascript" type="text/javaScript">
				window.location.href = "<%=XSSUtil.encodeForJavaScript(context, href) %>";
				</script>
<%		
//				response.sendRedirect(href);
				return;
			}
		}
		else if ("attachExistingGroup".equalsIgnoreCase(strOperation))
		{
			String objInfo = arrRowIds[0];
			String[] infos = objInfo.split("\\|");
			String objId = infos[1];

			if(!isOfType(context,objId, "Requirement Group"))
			{
				action = "error"; 
				//Start:IR:184727V6R2013x:LX6
				throw new Exception("InvalidSelectionForGroupOperation");
				//End:IR:184727V6R2013x:LX6
			}
			else
			{
				String href = "../requirements/RequirementStructureAddExisting.jsp?table=RMTSearchSpecificationsTable&toolbar=none&editLink=false&addType=Group&relName=relationship_SubRequirementGroup&from=true&suiteKey=Requirements"; 
				href += ("&objectId="+objId);
%>
				<script language="javascript" type="text/javaScript">
				window.location.href = "<%=XSSUtil.encodeForJavaScript(context, href) %>";
				</script>
<%		
//				response.sendRedirect(href);
				return;
			}
		}		
		else if ("createSubBundle".equalsIgnoreCase(strOperation))
		{	
			String objInfo = arrRowIds[0];
			String[] infos = objInfo.split("\\|");
			String objId = infos[1];

			if(!isOfType(context,objId, "Requirement Group"))
			{
				action = "error";
				//Start:IR:184727V6R2013x:LX6
				throw new Exception("InvalidSelectionForGroupOperation");
				//End:IR:184727V6R2013x:LX6
			}
			else
			{
				String autonameChecked = EnoviaResourceBundle.getProperty(context, "emxRequirements.form.create.autonamechecked");
		        if(autonameChecked == null || autonameChecked.equalsIgnoreCase("")){
		           autonameChecked = "true";
		        }
				String dialogHref = "../common/emxCreate.jsp?type=type_RequirementGroup&typeChooser=false&autoNameChecked="+autonameChecked+"&vaultChooser=true&form=RMTRequirementGroup&header=emxRequirements.Heading.CreateSubGroup&submitAction=xmlMessage&helpmarker=emxhelprequirementcreate&nameField=both&relationship=relationship_SubRequirementGroup&direction=from&policy=policy_RequirementGroup&objectId="+ objId+"&parentOID="+ objId +"&uiType=StructureBrowser&postProcessURL=../requirements/RMTGroupCreationPostProcess.jsp&suiteKey=Requirements";
%>
				<script language="javascript" type="text/javaScript">
				window.location.href = "<%=XSSUtil.encodeForJavaScript(context, dialogHref) %>";
				</script>
<%		
//				response.sendRedirect(dialogHref);
				return;
			}
		}
		else if ("editProperties".equalsIgnoreCase(strOperation))
		{
			String objInfo = arrRowIds[0];
			String[] infos = objInfo.split("\\|");
			String objId = infos[1];
			String href = "";
			//Start:IR:IR-187534V6R2014 :LX6
			if(!isOfType(context,objId, "Requirement Group"))
			{ //must be a req spec
				href = "../common/emxForm.jsp?form=type_Specification&mode=Edit&formHeader=emxRequirements.Heading.Edit&HelpMarker=emxhelpspecedit&targetLocation=slidein&submitAction=treeContent&suiteKey=Requirements";
			}
			else
			{ //its a group
				 href= "../common/emxForm.jsp?form=RMTRequirementGroup&formHeader=emxRequirements.Heading.EditNoRev&mode=Edit&targetLocation=slidein&submitAction=treeContent&suiteKey=Requirements";
			}
			//End:IR:IR-187534V6R2014 :LX6
			href+="&objectId="+objId;
%>
			<script language="javascript" type="text/javaScript">
			window.location.href = "<%=XSSUtil.encodeForJavaScript(context, href) %>";
			</script>
<%		
//			response.sendRedirect(href);
			return;
		}
	}
	catch(Exception e)
	{
		fail = true;
		//Start:IR:184727V6R2013x:LX6
		String i18nErrorMessage = "";
    String strAlertString = "emxRequirements.Alert." + e.getMessage();
    i18nErrorMessage = EnoviaResourceBundle.getProperty(context, "emxRequirementsStringResource", context.getLocale(), strAlertString);
    if(i18nErrorMessage.equalsIgnoreCase(""))
    {
    	msg = e.getMessage();
    }
    else
    {
    	msg = i18nErrorMessage;	
    }
    //End:IR:184727V6R2013x:LX6
	}
	
	
	
	if (fail) action = "error";

	if(!"error".equalsIgnoreCase(action))
	{
		msg = "";
	}
	out.clear();
	//set the response object content type to xml.
	if("remove".equalsIgnoreCase(action)/* && !bIsFromTree*/)
	{ //from standard flat table
		%>
<script src="../common/scripts/emxUICore.js" type="text/javascript"></script>
		<script language="JavaScript">
		getTopWindow().refreshTablePage();
		</script>
		<%
	}
	else if("error".equalsIgnoreCase(action) && bIsFromTree)
	{
		if( msg == null || msg.length() == 0)
			msg = "Where is my error message ?!";
		%>
		<%@include file="../common/emxNavigatorTopErrorInclude.inc"%>
		<script language="JavaScript">
		getTopWindow().closeSlideInDialog();
		</script>
		<% 
		session.putValue("error.message", msg);
		%>
		<%@include file="../common/emxNavigatorBottomErrorInclude.inc"%>

		<%
	}
%>





